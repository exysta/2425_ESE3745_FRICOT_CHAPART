
TP_ACTIONNEUR_FRICOT_CHAPART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac60  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800ae40  0800ae40  0000be40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2d0  0800b2d0  0000d110  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2d0  0800b2d0  0000c2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2d8  0800b2d8  0000d110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2d8  0800b2d8  0000c2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2dc  0800b2dc  0000c2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800b2e0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  20000110  0800b3f0  0000d110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  0800b3f0  0000d664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d7b9  00000000  00000000  0000d140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d0c  00000000  00000000  0002a8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  0002e608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b4  00000000  00000000  0002fd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aedd  00000000  00000000  00030eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d531  00000000  00000000  0005bd91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115583  00000000  00000000  000792c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018e845  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c30  00000000  00000000  0018e888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001954b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000110 	.word	0x20000110
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ae28 	.word	0x0800ae28

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000114 	.word	0x20000114
 800021c:	0800ae28 	.word	0x0800ae28

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f009 fc1e 	bl	8009e3a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b41      	ldr	r3, [pc, #260]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4b3f      	ldr	r3, [pc, #252]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b3d      	ldr	r3, [pc, #244]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b3b      	ldr	r3, [pc, #236]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b3a      	ldr	r3, [pc, #232]	@ (8000704 <MX_ADC1_Init+0x124>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000620:	4b38      	ldr	r3, [pc, #224]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000622:	2201      	movs	r2, #1
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b35      	ldr	r3, [pc, #212]	@ (8000704 <MX_ADC1_Init+0x124>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000632:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000634:	2201      	movs	r2, #1
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000638:	4b32      	ldr	r3, [pc, #200]	@ (8000704 <MX_ADC1_Init+0x124>)
 800063a:	2203      	movs	r2, #3
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b31      	ldr	r3, [pc, #196]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000646:	4b2f      	ldr	r3, [pc, #188]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000648:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800064c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800064e:	4b2d      	ldr	r3, [pc, #180]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000650:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000654:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000656:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000658:	2201      	movs	r2, #1
 800065a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065e:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000660:	2200      	movs	r2, #0
 8000662:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	4825      	ldr	r0, [pc, #148]	@ (8000704 <MX_ADC1_Init+0x124>)
 800066e:	f001 ff43 	bl	80024f8 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000678:	f000 fb72 	bl	8000d60 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000684:	4619      	mov	r1, r3
 8000686:	481f      	ldr	r0, [pc, #124]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000688:	f003 fafe 	bl	8003c88 <HAL_ADCEx_MultiModeConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000692:	f000 fb65 	bl	8000d60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000696:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <MX_ADC1_Init+0x128>)
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069a:	2306      	movs	r3, #6
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800069e:	2304      	movs	r3, #4
 80006a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a2:	237f      	movs	r3, #127	@ 0x7f
 80006a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a6:	2304      	movs	r3, #4
 80006a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	4814      	ldr	r0, [pc, #80]	@ (8000704 <MX_ADC1_Init+0x124>)
 80006b4:	f002 fc38 	bl	8002f28 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006be:	f000 fb4f 	bl	8000d60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_ADC1_Init+0x12c>)
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c6:	230c      	movs	r3, #12
 80006c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	480d      	ldr	r0, [pc, #52]	@ (8000704 <MX_ADC1_Init+0x124>)
 80006d0:	f002 fc2a 	bl	8002f28 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80006da:	f000 fb41 	bl	8000d60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_ADC1_Init+0x130>)
 80006e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e2:	2312      	movs	r3, #18
 80006e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	@ (8000704 <MX_ADC1_Init+0x124>)
 80006ec:	f002 fc1c 	bl	8002f28 <HAL_ADC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80006f6:	f000 fb33 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	3730      	adds	r7, #48	@ 0x30
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000012c 	.word	0x2000012c
 8000708:	21800100 	.word	0x21800100
 800070c:	32601000 	.word	0x32601000
 8000710:	08600004 	.word	0x08600004

08000714 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071a:	463b      	mov	r3, r7
 800071c:	2220      	movs	r2, #32
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f009 fb8a 	bl	8009e3a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000726:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000728:	4a2b      	ldr	r2, [pc, #172]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 800072a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800072c:	4b29      	ldr	r3, [pc, #164]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800072e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000732:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000734:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073a:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000740:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000746:	4b23      	ldr	r3, [pc, #140]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074c:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800074e:	2204      	movs	r2, #4
 8000750:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000752:	4b20      	ldr	r3, [pc, #128]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000754:	2200      	movs	r2, #0
 8000756:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000758:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800075a:	2200      	movs	r2, #0
 800075c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800075e:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000760:	2201      	movs	r2, #1
 8000762:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000764:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800076e:	2200      	movs	r2, #0
 8000770:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000772:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000774:	2200      	movs	r2, #0
 8000776:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000778:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000782:	2200      	movs	r2, #0
 8000784:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000786:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800078e:	4811      	ldr	r0, [pc, #68]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000790:	f001 feb2 	bl	80024f8 <HAL_ADC_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800079a:	f000 fae1 	bl	8000d60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_ADC2_Init+0xc8>)
 80007a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a2:	2306      	movs	r3, #6
 80007a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007aa:	237f      	movs	r3, #127	@ 0x7f
 80007ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ae:	2304      	movs	r3, #4
 80007b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 80007bc:	f002 fbb4 	bl	8002f28 <HAL_ADC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007c6:	f000 facb 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000198 	.word	0x20000198
 80007d8:	50000100 	.word	0x50000100
 80007dc:	19200040 	.word	0x19200040

080007e0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b0a4      	sub	sp, #144	@ 0x90
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007fc:	2254      	movs	r2, #84	@ 0x54
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f009 fb1a 	bl	8009e3a <memset>
  if(adcHandle->Instance==ADC1)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800080e:	f040 80a8 	bne.w	8000962 <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000818:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800081c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800081e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000822:	4618      	mov	r0, r3
 8000824:	f004 ff1c 	bl	8005660 <HAL_RCCEx_PeriphCLKConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800082e:	f000 fa97 	bl	8000d60 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000832:	4b81      	ldr	r3, [pc, #516]	@ (8000a38 <HAL_ADC_MspInit+0x258>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	4a7f      	ldr	r2, [pc, #508]	@ (8000a38 <HAL_ADC_MspInit+0x258>)
 800083a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800083c:	4b7e      	ldr	r3, [pc, #504]	@ (8000a38 <HAL_ADC_MspInit+0x258>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10b      	bne.n	800085c <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000844:	4b7d      	ldr	r3, [pc, #500]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000848:	4a7c      	ldr	r2, [pc, #496]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 800084a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800084e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000850:	4b7a      	ldr	r3, [pc, #488]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
 800085a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	4b77      	ldr	r3, [pc, #476]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000860:	4a76      	ldr	r2, [pc, #472]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000868:	4b74      	ldr	r3, [pc, #464]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	623b      	str	r3, [r7, #32]
 8000872:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b71      	ldr	r3, [pc, #452]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 8000876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000878:	4a70      	ldr	r2, [pc, #448]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000880:	4b6e      	ldr	r3, [pc, #440]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
 800088a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	4b6b      	ldr	r3, [pc, #428]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 800088e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000890:	4a6a      	ldr	r2, [pc, #424]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 8000892:	f043 0302 	orr.w	r3, r3, #2
 8000896:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000898:	4b68      	ldr	r3, [pc, #416]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089c:	f003 0302 	and.w	r3, r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
 80008a2:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80008a4:	2304      	movs	r3, #4
 80008a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4861      	ldr	r0, [pc, #388]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80008bc:	f003 fefe 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80008c0:	2302      	movs	r3, #2
 80008c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c4:	2303      	movs	r3, #3
 80008c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008d4:	4619      	mov	r1, r3
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008da:	f003 feef 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|V_Imes_Pin;
 80008de:	2303      	movs	r3, #3
 80008e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e2:	2303      	movs	r3, #3
 80008e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008f2:	4619      	mov	r1, r3
 80008f4:	4853      	ldr	r0, [pc, #332]	@ (8000a44 <HAL_ADC_MspInit+0x264>)
 80008f6:	f003 fee1 	bl	80046bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008fa:	4b53      	ldr	r3, [pc, #332]	@ (8000a48 <HAL_ADC_MspInit+0x268>)
 80008fc:	4a53      	ldr	r2, [pc, #332]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 80008fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000900:	4b51      	ldr	r3, [pc, #324]	@ (8000a48 <HAL_ADC_MspInit+0x268>)
 8000902:	2205      	movs	r2, #5
 8000904:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000906:	4b50      	ldr	r3, [pc, #320]	@ (8000a48 <HAL_ADC_MspInit+0x268>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800090c:	4b4e      	ldr	r3, [pc, #312]	@ (8000a48 <HAL_ADC_MspInit+0x268>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000912:	4b4d      	ldr	r3, [pc, #308]	@ (8000a48 <HAL_ADC_MspInit+0x268>)
 8000914:	2280      	movs	r2, #128	@ 0x80
 8000916:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000918:	4b4b      	ldr	r3, [pc, #300]	@ (8000a48 <HAL_ADC_MspInit+0x268>)
 800091a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800091e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000920:	4b49      	ldr	r3, [pc, #292]	@ (8000a48 <HAL_ADC_MspInit+0x268>)
 8000922:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000926:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000928:	4b47      	ldr	r3, [pc, #284]	@ (8000a48 <HAL_ADC_MspInit+0x268>)
 800092a:	2220      	movs	r2, #32
 800092c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800092e:	4b46      	ldr	r3, [pc, #280]	@ (8000a48 <HAL_ADC_MspInit+0x268>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000934:	4844      	ldr	r0, [pc, #272]	@ (8000a48 <HAL_ADC_MspInit+0x268>)
 8000936:	f003 fb8f 	bl	8004058 <HAL_DMA_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8000940:	f000 fa0e 	bl	8000d60 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a40      	ldr	r2, [pc, #256]	@ (8000a48 <HAL_ADC_MspInit+0x268>)
 8000948:	655a      	str	r2, [r3, #84]	@ 0x54
 800094a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a48 <HAL_ADC_MspInit+0x268>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	2012      	movs	r0, #18
 8000956:	f003 fb57 	bl	8004008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800095a:	2012      	movs	r0, #18
 800095c:	f003 fb6e 	bl	800403c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000960:	e066      	b.n	8000a30 <HAL_ADC_MspInit+0x250>
  else if(adcHandle->Instance==ADC2)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a3a      	ldr	r2, [pc, #232]	@ (8000a50 <HAL_ADC_MspInit+0x270>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d161      	bne.n	8000a30 <HAL_ADC_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800096c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000972:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000976:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000978:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800097c:	4618      	mov	r0, r3
 800097e:	f004 fe6f 	bl	8005660 <HAL_RCCEx_PeriphCLKConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <HAL_ADC_MspInit+0x1ac>
      Error_Handler();
 8000988:	f000 f9ea 	bl	8000d60 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800098c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a38 <HAL_ADC_MspInit+0x258>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	4a29      	ldr	r2, [pc, #164]	@ (8000a38 <HAL_ADC_MspInit+0x258>)
 8000994:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000996:	4b28      	ldr	r3, [pc, #160]	@ (8000a38 <HAL_ADC_MspInit+0x258>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d10b      	bne.n	80009b6 <HAL_ADC_MspInit+0x1d6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800099e:	4b27      	ldr	r3, [pc, #156]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	4a26      	ldr	r2, [pc, #152]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 80009a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009aa:	4b24      	ldr	r3, [pc, #144]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	4a20      	ldr	r2, [pc, #128]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009da:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80009e6:	230b      	movs	r3, #11
 80009e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ea:	2303      	movs	r3, #3
 80009ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80009fa:	4619      	mov	r1, r3
 80009fc:	4810      	ldr	r0, [pc, #64]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009fe:	f003 fe5d 	bl	80046bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000a02:	2301      	movs	r3, #1
 8000a04:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a06:	2303      	movs	r3, #3
 8000a08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1c:	f003 fe4e 	bl	80046bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	2012      	movs	r0, #18
 8000a26:	f003 faef 	bl	8004008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a2a:	2012      	movs	r0, #18
 8000a2c:	f003 fb06 	bl	800403c <HAL_NVIC_EnableIRQ>
}
 8000a30:	bf00      	nop
 8000a32:	3790      	adds	r7, #144	@ 0x90
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000264 	.word	0x20000264
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	48000800 	.word	0x48000800
 8000a44:	48000400 	.word	0x48000400
 8000a48:	20000204 	.word	0x20000204
 8000a4c:	40020008 	.word	0x40020008
 8000a50:	50000100 	.word	0x50000100

08000a54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a5a:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <MX_DMA_Init+0x50>)
 8000a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a5e:	4a11      	ldr	r2, [pc, #68]	@ (8000aa4 <MX_DMA_Init+0x50>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a66:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_DMA_Init+0x50>)
 8000a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_DMA_Init+0x50>)
 8000a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a76:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa4 <MX_DMA_Init+0x50>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_DMA_Init+0x50>)
 8000a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	200b      	movs	r0, #11
 8000a90:	f003 faba 	bl	8004008 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a94:	200b      	movs	r0, #11
 8000a96:	f003 fad1 	bl	800403c <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4b3f      	ldr	r3, [pc, #252]	@ (8000bbc <MX_GPIO_Init+0x114>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	4a3e      	ldr	r2, [pc, #248]	@ (8000bbc <MX_GPIO_Init+0x114>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aca:	4b3c      	ldr	r3, [pc, #240]	@ (8000bbc <MX_GPIO_Init+0x114>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad6:	4b39      	ldr	r3, [pc, #228]	@ (8000bbc <MX_GPIO_Init+0x114>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ada:	4a38      	ldr	r2, [pc, #224]	@ (8000bbc <MX_GPIO_Init+0x114>)
 8000adc:	f043 0320 	orr.w	r3, r3, #32
 8000ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae2:	4b36      	ldr	r3, [pc, #216]	@ (8000bbc <MX_GPIO_Init+0x114>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b33      	ldr	r3, [pc, #204]	@ (8000bbc <MX_GPIO_Init+0x114>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	4a32      	ldr	r2, [pc, #200]	@ (8000bbc <MX_GPIO_Init+0x114>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afa:	4b30      	ldr	r3, [pc, #192]	@ (8000bbc <MX_GPIO_Init+0x114>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b2d      	ldr	r3, [pc, #180]	@ (8000bbc <MX_GPIO_Init+0x114>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	4a2c      	ldr	r2, [pc, #176]	@ (8000bbc <MX_GPIO_Init+0x114>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b12:	4b2a      	ldr	r3, [pc, #168]	@ (8000bbc <MX_GPIO_Init+0x114>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1e:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <MX_GPIO_Init+0x114>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	4a26      	ldr	r2, [pc, #152]	@ (8000bbc <MX_GPIO_Init+0x114>)
 8000b24:	f043 0308 	orr.w	r3, r3, #8
 8000b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2a:	4b24      	ldr	r3, [pc, #144]	@ (8000bbc <MX_GPIO_Init+0x114>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	f003 0308 	and.w	r3, r3, #8
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2120      	movs	r1, #32
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b3e:	f003 ff3f 	bl	80049c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2104      	movs	r1, #4
 8000b46:	481e      	ldr	r0, [pc, #120]	@ (8000bc0 <MX_GPIO_Init+0x118>)
 8000b48:	f003 ff3a 	bl	80049c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000b4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b52:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4818      	ldr	r0, [pc, #96]	@ (8000bc4 <MX_GPIO_Init+0x11c>)
 8000b64:	f003 fdaa 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000b68:	2320      	movs	r3, #32
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b82:	f003 fd9b 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000b86:	2304      	movs	r3, #4
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4808      	ldr	r0, [pc, #32]	@ (8000bc0 <MX_GPIO_Init+0x118>)
 8000b9e:	f003 fd8d 	bl	80046bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2028      	movs	r0, #40	@ 0x28
 8000ba8:	f003 fa2e 	bl	8004008 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bac:	2028      	movs	r0, #40	@ 0x28
 8000bae:	f003 fa45 	bl	800403c <HAL_NVIC_EnableIRQ>

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	@ 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	48000c00 	.word	0x48000c00
 8000bc4:	48000800 	.word	0x48000800

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bcc:	f001 f9f7 	bl	8001fbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f000 f819 	bl	8000c06 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd4:	f7ff ff68 	bl	8000aa8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bd8:	f7ff ff3c 	bl	8000a54 <MX_DMA_Init>
  MX_ADC2_Init();
 8000bdc:	f7ff fd9a 	bl	8000714 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000be0:	f7ff fcfe 	bl	80005e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000be4:	f000 faac 	bl	8001140 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000be8:	f000 fb5a 	bl	80012a0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000bec:	f000 fcf0 	bl	80015d0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000bf0:	f000 fd3a 	bl	8001668 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000bf4:	f000 fba0 	bl	8001338 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	Shell_Init();
 8000bf8:	f001 f814 	bl	8001c24 <Shell_Init>
	ADC_Start();
 8000bfc:	f000 fe28 	bl	8001850 <ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000c00:	f001 f8f4 	bl	8001dec <Shell_Loop>
 8000c04:	e7fc      	b.n	8000c00 <main+0x38>

08000c06 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b094      	sub	sp, #80	@ 0x50
 8000c0a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0c:	f107 0318 	add.w	r3, r7, #24
 8000c10:	2238      	movs	r2, #56	@ 0x38
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f009 f910 	bl	8009e3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f003 ff05 	bl	8004a38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000c40:	2306      	movs	r3, #6
 8000c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c44:	2355      	movs	r3, #85	@ 0x55
 8000c46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c54:	f107 0318 	add.w	r3, r7, #24
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f003 ffa1 	bl	8004ba0 <HAL_RCC_OscConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c64:	f000 f87c 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c68:	230f      	movs	r3, #15
 8000c6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2104      	movs	r1, #4
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 fa9f 	bl	80051c4 <HAL_RCC_ClockConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c8c:	f000 f868 	bl	8000d60 <Error_Handler>
  }
}
 8000c90:	bf00      	nop
 8000c92:	3750      	adds	r7, #80	@ 0x50
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a29      	ldr	r2, [pc, #164]	@ (8000d4c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d101      	bne.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000caa:	f001 f9a1 	bl	8001ff0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM7)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a27      	ldr	r2, [pc, #156]	@ (8000d50 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d145      	bne.n	8000d44 <HAL_TIM_PeriodElapsedCallback+0xac>
	{
		if(pwm_handle.interrupt_counter < RAMP_TIME - 1) //on update la valeur de pulse chaque miliseconde
 8000cb8:	4b26      	ldr	r3, [pc, #152]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000cba:	899b      	ldrh	r3, [r3, #12]
 8000cbc:	f241 726e 	movw	r2, #5998	@ 0x176e
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d83f      	bhi.n	8000d44 <HAL_TIM_PeriodElapsedCallback+0xac>
		{
			pwm_handle.intermediate_pulse1 = pwm_handle.previous_pulse1 + (pwm_handle.pulse1 - pwm_handle.previous_pulse1)  * (pwm_handle.interrupt_counter+1)/RAMP_TIME ;
 8000cc4:	4b23      	ldr	r3, [pc, #140]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000cc6:	889a      	ldrh	r2, [r3, #4]
 8000cc8:	4b22      	ldr	r3, [pc, #136]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4b21      	ldr	r3, [pc, #132]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000cd0:	889b      	ldrh	r3, [r3, #4]
 8000cd2:	1acb      	subs	r3, r1, r3
 8000cd4:	491f      	ldr	r1, [pc, #124]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000cd6:	8989      	ldrh	r1, [r1, #12]
 8000cd8:	3101      	adds	r1, #1
 8000cda:	fb01 f303 	mul.w	r3, r1, r3
 8000cde:	491e      	ldr	r1, [pc, #120]	@ (8000d58 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ce0:	fb81 0103 	smull	r0, r1, r1, r3
 8000ce4:	11c9      	asrs	r1, r1, #7
 8000ce6:	17db      	asrs	r3, r3, #31
 8000ce8:	1acb      	subs	r3, r1, r3
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	4413      	add	r3, r2
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000cf2:	811a      	strh	r2, [r3, #8]
			pwm_handle.intermediate_pulse2 = pwm_handle.previous_pulse2 + (pwm_handle.pulse2 - pwm_handle.previous_pulse2)  * (pwm_handle.interrupt_counter+1)/RAMP_TIME ;
 8000cf4:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000cf6:	88da      	ldrh	r2, [r3, #6]
 8000cf8:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000cfa:	885b      	ldrh	r3, [r3, #2]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000d00:	88db      	ldrh	r3, [r3, #6]
 8000d02:	1acb      	subs	r3, r1, r3
 8000d04:	4913      	ldr	r1, [pc, #76]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000d06:	8989      	ldrh	r1, [r1, #12]
 8000d08:	3101      	adds	r1, #1
 8000d0a:	fb01 f303 	mul.w	r3, r1, r3
 8000d0e:	4912      	ldr	r1, [pc, #72]	@ (8000d58 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000d10:	fb81 0103 	smull	r0, r1, r1, r3
 8000d14:	11c9      	asrs	r1, r1, #7
 8000d16:	17db      	asrs	r3, r3, #31
 8000d18:	1acb      	subs	r3, r1, r3
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	4413      	add	r3, r2
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000d22:	815a      	strh	r2, [r3, #10]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm_handle.intermediate_pulse1);
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000d26:	891a      	ldrh	r2, [r3, #8]
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,pwm_handle.intermediate_pulse2);
 8000d2e:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000d30:	895a      	ldrh	r2, [r3, #10]
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	639a      	str	r2, [r3, #56]	@ 0x38

			pwm_handle.interrupt_counter++;
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000d3a:	899b      	ldrh	r3, [r3, #12]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000d42:	819a      	strh	r2, [r3, #12]
		}
	}
  /* USER CODE END Callback 1 */
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40001000 	.word	0x40001000
 8000d50:	40001400 	.word	0x40001400
 8000d54:	200004cc 	.word	0x200004cc
 8000d58:	057619f1 	.word	0x057619f1
 8000d5c:	200002b8 	.word	0x200002b8

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <Error_Handler+0x8>

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d76:	4a0e      	ldr	r2, [pc, #56]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8e:	4a08      	ldr	r2, [pc, #32]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000da2:	f003 feed 	bl	8004b80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08c      	sub	sp, #48	@ 0x30
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dc4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e78 <HAL_InitTick+0xc4>)
 8000dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8000e78 <HAL_InitTick+0xc4>)
 8000dca:	f043 0310 	orr.w	r3, r3, #16
 8000dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dd0:	4b29      	ldr	r3, [pc, #164]	@ (8000e78 <HAL_InitTick+0xc4>)
 8000dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd4:	f003 0310 	and.w	r3, r3, #16
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ddc:	f107 020c 	add.w	r2, r7, #12
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f004 fbc2 	bl	8005570 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dec:	f004 fb94 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8000df0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000df4:	4a21      	ldr	r2, [pc, #132]	@ (8000e7c <HAL_InitTick+0xc8>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	0c9b      	lsrs	r3, r3, #18
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	@ (8000e80 <HAL_InitTick+0xcc>)
 8000e02:	4a20      	ldr	r2, [pc, #128]	@ (8000e84 <HAL_InitTick+0xd0>)
 8000e04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <HAL_InitTick+0xcc>)
 8000e08:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e80 <HAL_InitTick+0xcc>)
 8000e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <HAL_InitTick+0xcc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <HAL_InitTick+0xcc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000e20:	4817      	ldr	r0, [pc, #92]	@ (8000e80 <HAL_InitTick+0xcc>)
 8000e22:	f004 fe6b 	bl	8005afc <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d11b      	bne.n	8000e6c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e34:	4812      	ldr	r0, [pc, #72]	@ (8000e80 <HAL_InitTick+0xcc>)
 8000e36:	f004 ff51 	bl	8005cdc <HAL_TIM_Base_Start_IT>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d111      	bne.n	8000e6c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e48:	2036      	movs	r0, #54	@ 0x36
 8000e4a:	f003 f8f7 	bl	800403c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d808      	bhi.n	8000e66 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	2036      	movs	r0, #54	@ 0x36
 8000e5a:	f003 f8d5 	bl	8004008 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <HAL_InitTick+0xd4>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	e002      	b.n	8000e6c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3730      	adds	r7, #48	@ 0x30
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	431bde83 	.word	0x431bde83
 8000e80:	20000268 	.word	0x20000268
 8000e84:	40001000 	.word	0x40001000
 8000e88:	200000ac 	.word	0x200000ac

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <NMI_Handler+0x4>

08000e94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <DMA1_Channel1_IRQHandler+0x10>)
 8000ef2:	f003 fa94 	bl	800441e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000204 	.word	0x20000204

08000f00 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f04:	4803      	ldr	r0, [pc, #12]	@ (8000f14 <ADC1_2_IRQHandler+0x14>)
 8000f06:	f001 fd87 	bl	8002a18 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000f0a:	4803      	ldr	r0, [pc, #12]	@ (8000f18 <ADC1_2_IRQHandler+0x18>)
 8000f0c:	f001 fd84 	bl	8002a18 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000012c 	.word	0x2000012c
 8000f18:	20000198 	.word	0x20000198

08000f1c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000f22:	f005 f959 	bl	80061d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200002b8 	.word	0x200002b8

08000f30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <USART2_IRQHandler+0x10>)
 8000f36:	f006 fce1 	bl	80078fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000039c 	.word	0x2000039c

08000f44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f48:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <USART3_IRQHandler+0x10>)
 8000f4a:	f006 fcd7 	bl	80078fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000430 	.word	0x20000430

08000f58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000f5c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f60:	f003 fd46 	bl	80049f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f6c:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <TIM6_DAC_IRQHandler+0x10>)
 8000f6e:	f005 f933 	bl	80061d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000268 	.word	0x20000268

08000f7c <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f80:	4802      	ldr	r0, [pc, #8]	@ (8000f8c <TIM7_DAC_IRQHandler+0x10>)
 8000f82:	f005 f929 	bl	80061d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000350 	.word	0x20000350

08000f90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return 1;
 8000f94:	2301      	movs	r3, #1
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_kill>:

int _kill(int pid, int sig)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000faa:	f009 f801 	bl	8009fb0 <__errno>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2216      	movs	r2, #22
 8000fb2:	601a      	str	r2, [r3, #0]
  return -1;
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_exit>:

void _exit (int status)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ffe7 	bl	8000fa0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fd2:	bf00      	nop
 8000fd4:	e7fd      	b.n	8000fd2 <_exit+0x12>

08000fd6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e00a      	b.n	8000ffe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fe8:	f3af 8000 	nop.w
 8000fec:	4601      	mov	r1, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	60ba      	str	r2, [r7, #8]
 8000ff4:	b2ca      	uxtb	r2, r1
 8000ff6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	dbf0      	blt.n	8000fe8 <_read+0x12>
  }

  return len;
 8001006:	687b      	ldr	r3, [r7, #4]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	e009      	b.n	8001036 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1c5a      	adds	r2, r3, #1
 8001026:	60ba      	str	r2, [r7, #8]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	429a      	cmp	r2, r3
 800103c:	dbf1      	blt.n	8001022 <_write+0x12>
  }
  return len;
 800103e:	687b      	ldr	r3, [r7, #4]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <_close>:

int _close(int file)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001070:	605a      	str	r2, [r3, #4]
  return 0;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_isatty>:

int _isatty(int file)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001088:	2301      	movs	r3, #1
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001096:	b480      	push	{r7}
 8001098:	b085      	sub	sp, #20
 800109a:	af00      	add	r7, sp, #0
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b8:	4a14      	ldr	r2, [pc, #80]	@ (800110c <_sbrk+0x5c>)
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <_sbrk+0x60>)
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c4:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <_sbrk+0x64>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <_sbrk+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d207      	bcs.n	80010f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e0:	f008 ff66 	bl	8009fb0 <__errno>
 80010e4:	4603      	mov	r3, r0
 80010e6:	220c      	movs	r2, #12
 80010e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	e009      	b.n	8001104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f6:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	4a05      	ldr	r2, [pc, #20]	@ (8001114 <_sbrk+0x64>)
 8001100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20020000 	.word	0x20020000
 8001110:	00000400 	.word	0x00000400
 8001114:	200002b4 	.word	0x200002b4
 8001118:	20000668 	.word	0x20000668

0800111c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <SystemInit+0x20>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <SystemInit+0x20>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b098      	sub	sp, #96	@ 0x60
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001146:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001152:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]
 8001162:	615a      	str	r2, [r3, #20]
 8001164:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2234      	movs	r2, #52	@ 0x34
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f008 fe64 	bl	8009e3a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001172:	4b49      	ldr	r3, [pc, #292]	@ (8001298 <MX_TIM1_Init+0x158>)
 8001174:	4a49      	ldr	r2, [pc, #292]	@ (800129c <MX_TIM1_Init+0x15c>)
 8001176:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001178:	4b47      	ldr	r3, [pc, #284]	@ (8001298 <MX_TIM1_Init+0x158>)
 800117a:	2200      	movs	r2, #0
 800117c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800117e:	4b46      	ldr	r3, [pc, #280]	@ (8001298 <MX_TIM1_Init+0x158>)
 8001180:	2220      	movs	r2, #32
 8001182:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8001184:	4b44      	ldr	r3, [pc, #272]	@ (8001298 <MX_TIM1_Init+0x158>)
 8001186:	f242 1233 	movw	r2, #8499	@ 0x2133
 800118a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118c:	4b42      	ldr	r3, [pc, #264]	@ (8001298 <MX_TIM1_Init+0x158>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001192:	4b41      	ldr	r3, [pc, #260]	@ (8001298 <MX_TIM1_Init+0x158>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001198:	4b3f      	ldr	r3, [pc, #252]	@ (8001298 <MX_TIM1_Init+0x158>)
 800119a:	2280      	movs	r2, #128	@ 0x80
 800119c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800119e:	483e      	ldr	r0, [pc, #248]	@ (8001298 <MX_TIM1_Init+0x158>)
 80011a0:	f004 fe14 	bl	8005dcc <HAL_TIM_PWM_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80011aa:	f7ff fdd9 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011ae:	2320      	movs	r3, #32
 80011b0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80011b2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80011b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011c0:	4619      	mov	r1, r3
 80011c2:	4835      	ldr	r0, [pc, #212]	@ (8001298 <MX_TIM1_Init+0x158>)
 80011c4:	f006 f8da 	bl	800737c <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80011ce:	f7ff fdc7 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d2:	2360      	movs	r3, #96	@ 0x60
 80011d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 4249;
 80011d6:	f241 0399 	movw	r3, #4249	@ 0x1099
 80011da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011dc:	2300      	movs	r3, #0
 80011de:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011e0:	2300      	movs	r3, #0
 80011e2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	4827      	ldr	r0, [pc, #156]	@ (8001298 <MX_TIM1_Init+0x158>)
 80011fa:	f005 f93d 	bl	8006478 <HAL_TIM_PWM_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001204:	f7ff fdac 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001208:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800120c:	2204      	movs	r2, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4821      	ldr	r0, [pc, #132]	@ (8001298 <MX_TIM1_Init+0x158>)
 8001212:	f005 f931 	bl	8006478 <HAL_TIM_PWM_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 800121c:	f7ff fda0 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001224:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001228:	2208      	movs	r2, #8
 800122a:	4619      	mov	r1, r3
 800122c:	481a      	ldr	r0, [pc, #104]	@ (8001298 <MX_TIM1_Init+0x158>)
 800122e:	f005 f923 	bl	8006478 <HAL_TIM_PWM_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001238:	f7ff fd92 	bl	8000d60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8001248:	2314      	movs	r3, #20
 800124a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001250:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001254:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001262:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800126c:	2300      	movs	r3, #0
 800126e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	4619      	mov	r1, r3
 8001278:	4807      	ldr	r0, [pc, #28]	@ (8001298 <MX_TIM1_Init+0x158>)
 800127a:	f006 f915 	bl	80074a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001284:	f7ff fd6c 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001288:	4803      	ldr	r0, [pc, #12]	@ (8001298 <MX_TIM1_Init+0x158>)
 800128a:	f000 f939 	bl	8001500 <HAL_TIM_MspPostInit>

}
 800128e:	bf00      	nop
 8001290:	3760      	adds	r7, #96	@ 0x60
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200002b8 	.word	0x200002b8
 800129c:	40012c00 	.word	0x40012c00

080012a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012be:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <MX_TIM3_Init+0x90>)
 80012c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001334 <MX_TIM3_Init+0x94>)
 80012c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <MX_TIM3_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ca:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <MX_TIM3_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012d0:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <MX_TIM3_Init+0x90>)
 80012d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d8:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <MX_TIM3_Init+0x90>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012de:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <MX_TIM3_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	@ (8001330 <MX_TIM3_Init+0x90>)
 80012fc:	f005 fe6f 	bl	8006fde <HAL_TIMEx_HallSensor_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001306:	f7ff fd2b 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800130a:	2350      	movs	r3, #80	@ 0x50
 800130c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	@ (8001330 <MX_TIM3_Init+0x90>)
 8001318:	f006 f830 	bl	800737c <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001322:	f7ff fd1d 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000304 	.word	0x20000304
 8001334:	40000400 	.word	0x40000400

08001338 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001348:	4b14      	ldr	r3, [pc, #80]	@ (800139c <MX_TIM7_Init+0x64>)
 800134a:	4a15      	ldr	r2, [pc, #84]	@ (80013a0 <MX_TIM7_Init+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 800134e:	4b13      	ldr	r3, [pc, #76]	@ (800139c <MX_TIM7_Init+0x64>)
 8001350:	22a9      	movs	r2, #169	@ 0xa9
 8001352:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b11      	ldr	r3, [pc, #68]	@ (800139c <MX_TIM7_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <MX_TIM7_Init+0x64>)
 800135c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001360:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001362:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <MX_TIM7_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <MX_TIM7_Init+0x64>)
 800136a:	f004 fbc7 	bl	8005afc <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001374:	f7ff fcf4 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	@ (800139c <MX_TIM7_Init+0x64>)
 8001386:	f005 fff9 	bl	800737c <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001390:	f7ff fce6 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000350 	.word	0x20000350
 80013a0:	40001400 	.word	0x40001400

080013a4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0d      	ldr	r2, [pc, #52]	@ (80013e8 <HAL_TIM_PWM_MspInit+0x44>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d113      	bne.n	80013de <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013b6:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <HAL_TIM_PWM_MspInit+0x48>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ba:	4a0c      	ldr	r2, [pc, #48]	@ (80013ec <HAL_TIM_PWM_MspInit+0x48>)
 80013bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <HAL_TIM_PWM_MspInit+0x48>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	201a      	movs	r0, #26
 80013d4:	f002 fe18 	bl	8004008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80013d8:	201a      	movs	r0, #26
 80013da:	f002 fe2f 	bl	800403c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40012c00 	.word	0x40012c00
 80013ec:	40021000 	.word	0x40021000

080013f0 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	@ 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a26      	ldr	r2, [pc, #152]	@ (80014a8 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d145      	bne.n	800149e <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001412:	4b26      	ldr	r3, [pc, #152]	@ (80014ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001416:	4a25      	ldr	r2, [pc, #148]	@ (80014ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6593      	str	r3, [r2, #88]	@ 0x58
 800141e:	4b23      	ldr	r3, [pc, #140]	@ (80014ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	4b20      	ldr	r3, [pc, #128]	@ (80014ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	4a1f      	ldr	r2, [pc, #124]	@ (80014ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	4a19      	ldr	r2, [pc, #100]	@ (80014ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800144e:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800145a:	2350      	movs	r3, #80	@ 0x50
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800146a:	2302      	movs	r3, #2
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001478:	f003 f920 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800147c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800148e:	2302      	movs	r3, #2
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800149a:	f003 f90f 	bl	80046bc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800149e:	bf00      	nop
 80014a0:	3728      	adds	r7, #40	@ 0x28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40000400 	.word	0x40000400
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48000800 	.word	0x48000800

080014b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0d      	ldr	r2, [pc, #52]	@ (80014f8 <HAL_TIM_Base_MspInit+0x44>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d113      	bne.n	80014ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80014c6:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <HAL_TIM_Base_MspInit+0x48>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ca:	4a0c      	ldr	r2, [pc, #48]	@ (80014fc <HAL_TIM_Base_MspInit+0x48>)
 80014cc:	f043 0320 	orr.w	r3, r3, #32
 80014d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_TIM_Base_MspInit+0x48>)
 80014d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d6:	f003 0320 	and.w	r3, r3, #32
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2037      	movs	r0, #55	@ 0x37
 80014e4:	f002 fd90 	bl	8004008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80014e8:	2037      	movs	r0, #55	@ 0x37
 80014ea:	f002 fda7 	bl	800403c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40001400 	.word	0x40001400
 80014fc:	40021000 	.word	0x40021000

08001500 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	@ 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a29      	ldr	r2, [pc, #164]	@ (80015c4 <HAL_TIM_MspPostInit+0xc4>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d14b      	bne.n	80015ba <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	4b29      	ldr	r3, [pc, #164]	@ (80015c8 <HAL_TIM_MspPostInit+0xc8>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	4a28      	ldr	r2, [pc, #160]	@ (80015c8 <HAL_TIM_MspPostInit+0xc8>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152e:	4b26      	ldr	r3, [pc, #152]	@ (80015c8 <HAL_TIM_MspPostInit+0xc8>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	4b23      	ldr	r3, [pc, #140]	@ (80015c8 <HAL_TIM_MspPostInit+0xc8>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	4a22      	ldr	r2, [pc, #136]	@ (80015c8 <HAL_TIM_MspPostInit+0xc8>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001546:	4b20      	ldr	r3, [pc, #128]	@ (80015c8 <HAL_TIM_MspPostInit+0xc8>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001552:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001564:	2306      	movs	r3, #6
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4817      	ldr	r0, [pc, #92]	@ (80015cc <HAL_TIM_MspPostInit+0xcc>)
 8001570:	f003 f8a4 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001574:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001586:	2304      	movs	r3, #4
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	480e      	ldr	r0, [pc, #56]	@ (80015cc <HAL_TIM_MspPostInit+0xcc>)
 8001592:	f003 f893 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001596:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80015a8:	2306      	movs	r3, #6
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b6:	f003 f881 	bl	80046bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	@ 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40012c00 	.word	0x40012c00
 80015c8:	40021000 	.word	0x40021000
 80015cc:	48000400 	.word	0x48000400

080015d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015d4:	4b22      	ldr	r3, [pc, #136]	@ (8001660 <MX_USART2_UART_Init+0x90>)
 80015d6:	4a23      	ldr	r2, [pc, #140]	@ (8001664 <MX_USART2_UART_Init+0x94>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015da:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <MX_USART2_UART_Init+0x90>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001660 <MX_USART2_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <MX_USART2_UART_Init+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <MX_USART2_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <MX_USART2_UART_Init+0x90>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <MX_USART2_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <MX_USART2_UART_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001606:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <MX_USART2_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800160c:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <MX_USART2_UART_Init+0x90>)
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001612:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <MX_USART2_UART_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001618:	4811      	ldr	r0, [pc, #68]	@ (8001660 <MX_USART2_UART_Init+0x90>)
 800161a:	f006 f844 	bl	80076a6 <HAL_UART_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001624:	f7ff fb9c 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001628:	2100      	movs	r1, #0
 800162a:	480d      	ldr	r0, [pc, #52]	@ (8001660 <MX_USART2_UART_Init+0x90>)
 800162c:	f008 f8bb 	bl	80097a6 <HAL_UARTEx_SetTxFifoThreshold>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001636:	f7ff fb93 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163a:	2100      	movs	r1, #0
 800163c:	4808      	ldr	r0, [pc, #32]	@ (8001660 <MX_USART2_UART_Init+0x90>)
 800163e:	f008 f8f0 	bl	8009822 <HAL_UARTEx_SetRxFifoThreshold>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001648:	f7ff fb8a 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	@ (8001660 <MX_USART2_UART_Init+0x90>)
 800164e:	f008 f871 	bl	8009734 <HAL_UARTEx_DisableFifoMode>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001658:	f7ff fb82 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000039c 	.word	0x2000039c
 8001664:	40004400 	.word	0x40004400

08001668 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800166c:	4b22      	ldr	r3, [pc, #136]	@ (80016f8 <MX_USART3_UART_Init+0x90>)
 800166e:	4a23      	ldr	r2, [pc, #140]	@ (80016fc <MX_USART3_UART_Init+0x94>)
 8001670:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001672:	4b21      	ldr	r3, [pc, #132]	@ (80016f8 <MX_USART3_UART_Init+0x90>)
 8001674:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001678:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800167a:	4b1f      	ldr	r3, [pc, #124]	@ (80016f8 <MX_USART3_UART_Init+0x90>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001680:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <MX_USART3_UART_Init+0x90>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001686:	4b1c      	ldr	r3, [pc, #112]	@ (80016f8 <MX_USART3_UART_Init+0x90>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800168c:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <MX_USART3_UART_Init+0x90>)
 800168e:	220c      	movs	r2, #12
 8001690:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001692:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <MX_USART3_UART_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001698:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <MX_USART3_UART_Init+0x90>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <MX_USART3_UART_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016a4:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <MX_USART3_UART_Init+0x90>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016aa:	4b13      	ldr	r3, [pc, #76]	@ (80016f8 <MX_USART3_UART_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016b0:	4811      	ldr	r0, [pc, #68]	@ (80016f8 <MX_USART3_UART_Init+0x90>)
 80016b2:	f005 fff8 	bl	80076a6 <HAL_UART_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80016bc:	f7ff fb50 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c0:	2100      	movs	r1, #0
 80016c2:	480d      	ldr	r0, [pc, #52]	@ (80016f8 <MX_USART3_UART_Init+0x90>)
 80016c4:	f008 f86f 	bl	80097a6 <HAL_UARTEx_SetTxFifoThreshold>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016ce:	f7ff fb47 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d2:	2100      	movs	r1, #0
 80016d4:	4808      	ldr	r0, [pc, #32]	@ (80016f8 <MX_USART3_UART_Init+0x90>)
 80016d6:	f008 f8a4 	bl	8009822 <HAL_UARTEx_SetRxFifoThreshold>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80016e0:	f7ff fb3e 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	@ (80016f8 <MX_USART3_UART_Init+0x90>)
 80016e6:	f008 f825 	bl	8009734 <HAL_UARTEx_DisableFifoMode>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80016f0:	f7ff fb36 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000430 	.word	0x20000430
 80016fc:	40004800 	.word	0x40004800

08001700 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0a0      	sub	sp, #128	@ 0x80
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001718:	f107 0318 	add.w	r3, r7, #24
 800171c:	2254      	movs	r2, #84	@ 0x54
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f008 fb8a 	bl	8009e3a <memset>
  if(uartHandle->Instance==USART2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a45      	ldr	r2, [pc, #276]	@ (8001840 <HAL_UART_MspInit+0x140>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d13f      	bne.n	80017b0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001738:	f107 0318 	add.w	r3, r7, #24
 800173c:	4618      	mov	r0, r3
 800173e:	f003 ff8f 	bl	8005660 <HAL_RCCEx_PeriphCLKConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001748:	f7ff fb0a 	bl	8000d60 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800174c:	4b3d      	ldr	r3, [pc, #244]	@ (8001844 <HAL_UART_MspInit+0x144>)
 800174e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001750:	4a3c      	ldr	r2, [pc, #240]	@ (8001844 <HAL_UART_MspInit+0x144>)
 8001752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001756:	6593      	str	r3, [r2, #88]	@ 0x58
 8001758:	4b3a      	ldr	r3, [pc, #232]	@ (8001844 <HAL_UART_MspInit+0x144>)
 800175a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b37      	ldr	r3, [pc, #220]	@ (8001844 <HAL_UART_MspInit+0x144>)
 8001766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001768:	4a36      	ldr	r2, [pc, #216]	@ (8001844 <HAL_UART_MspInit+0x144>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001770:	4b34      	ldr	r3, [pc, #208]	@ (8001844 <HAL_UART_MspInit+0x144>)
 8001772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800177c:	230c      	movs	r3, #12
 800177e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800178c:	2307      	movs	r3, #7
 800178e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001794:	4619      	mov	r1, r3
 8001796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800179a:	f002 ff8f 	bl	80046bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	2026      	movs	r0, #38	@ 0x26
 80017a4:	f002 fc30 	bl	8004008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017a8:	2026      	movs	r0, #38	@ 0x26
 80017aa:	f002 fc47 	bl	800403c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017ae:	e043      	b.n	8001838 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a24      	ldr	r2, [pc, #144]	@ (8001848 <HAL_UART_MspInit+0x148>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d13e      	bne.n	8001838 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017ba:	2304      	movs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c2:	f107 0318 	add.w	r3, r7, #24
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 ff4a 	bl	8005660 <HAL_RCCEx_PeriphCLKConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80017d2:	f7ff fac5 	bl	8000d60 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <HAL_UART_MspInit+0x144>)
 80017d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017da:	4a1a      	ldr	r2, [pc, #104]	@ (8001844 <HAL_UART_MspInit+0x144>)
 80017dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017e2:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <HAL_UART_MspInit+0x144>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <HAL_UART_MspInit+0x144>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f2:	4a14      	ldr	r2, [pc, #80]	@ (8001844 <HAL_UART_MspInit+0x144>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fa:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <HAL_UART_MspInit+0x144>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001806:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800180a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001818:	2307      	movs	r3, #7
 800181a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001820:	4619      	mov	r1, r3
 8001822:	480a      	ldr	r0, [pc, #40]	@ (800184c <HAL_UART_MspInit+0x14c>)
 8001824:	f002 ff4a 	bl	80046bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2100      	movs	r1, #0
 800182c:	2027      	movs	r0, #39	@ 0x27
 800182e:	f002 fbeb 	bl	8004008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001832:	2027      	movs	r0, #39	@ 0x27
 8001834:	f002 fc02 	bl	800403c <HAL_NVIC_EnableIRQ>
}
 8001838:	bf00      	nop
 800183a:	3780      	adds	r7, #128	@ 0x80
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40004400 	.word	0x40004400
 8001844:	40021000 	.word	0x40021000
 8001848:	40004800 	.word	0x40004800
 800184c:	48000800 	.word	0x48000800

08001850 <ADC_Start>:
uint8_t adc_value_available = 0;
uint16_t adc_phase_values[PHASE_QUANTITY];
uint16_t adc_bus_values[BUS_QUANTITY];

int ADC_Start()
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	memset(adc_phase_values, 0, sizeof(adc_phase_values)); // Set all values of adc_values to 0
 8001854:	2204      	movs	r2, #4
 8001856:	2100      	movs	r1, #0
 8001858:	480c      	ldr	r0, [pc, #48]	@ (800188c <ADC_Start+0x3c>)
 800185a:	f008 faee 	bl	8009e3a <memset>
	memset(adc_bus_values, 0, sizeof(adc_bus_values)); // Set all values of adc_values to 0
 800185e:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <ADC_Start+0x40>)
 8001860:	2200      	movs	r2, #0
 8001862:	801a      	strh	r2, [r3, #0]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001864:	217f      	movs	r1, #127	@ 0x7f
 8001866:	480b      	ldr	r0, [pc, #44]	@ (8001894 <ADC_Start+0x44>)
 8001868:	f002 f97a 	bl	8003b60 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, ( uint32_t *)adc_phase_values, PHASE_QUANTITY);
 800186c:	2202      	movs	r2, #2
 800186e:	4907      	ldr	r1, [pc, #28]	@ (800188c <ADC_Start+0x3c>)
 8001870:	4808      	ldr	r0, [pc, #32]	@ (8001894 <ADC_Start+0x44>)
 8001872:	f000 fffd 	bl	8002870 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, ( uint32_t *)adc_bus_values, BUS_QUANTITY);
 8001876:	2201      	movs	r2, #1
 8001878:	4905      	ldr	r1, [pc, #20]	@ (8001890 <ADC_Start+0x40>)
 800187a:	4807      	ldr	r0, [pc, #28]	@ (8001898 <ADC_Start+0x48>)
 800187c:	f000 fff8 	bl	8002870 <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start(&htim1);
 8001880:	4806      	ldr	r0, [pc, #24]	@ (800189c <ADC_Start+0x4c>)
 8001882:	f004 f993 	bl	8005bac <HAL_TIM_Base_Start>
	return 0;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200004c4 	.word	0x200004c4
 8001890:	200004c8 	.word	0x200004c8
 8001894:	2000012c 	.word	0x2000012c
 8001898:	20000198 	.word	0x20000198
 800189c:	200002b8 	.word	0x200002b8

080018a0 <ADC_Read>:

int ADC_Read(h_shell_t *h_shell,char **argv,int argcn)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]

	return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <PWM_Set_Pulse>:
#include <stdlib.h>

PWM_HandleTypeDef pwm_handle;
uint32_t speed; // between 0-100 for motor speed. 0 is max speed in reverse, 50 is neutral and 100 is max speed in the other direction.
int PWM_Set_Pulse(uint32_t speed)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	bf00      	nop
	//on disable l'intteruption pour éviter la modification des variables global dans l'interrupt du timer 7
    __disable_irq();  // Disable interrupts
    pwm_handle.pulse1 = MAX_PULSE* speed/100;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f242 1233 	movw	r2, #8499	@ 0x2133
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	4a13      	ldr	r2, [pc, #76]	@ (8001920 <PWM_Set_Pulse+0x64>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	095b      	lsrs	r3, r3, #5
 80018da:	b29a      	uxth	r2, r3
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <PWM_Set_Pulse+0x68>)
 80018de:	801a      	strh	r2, [r3, #0]
    pwm_handle.pulse2 = MAX_PULSE - pwm_handle.pulse1;
 80018e0:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <PWM_Set_Pulse+0x68>)
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 80018e8:	3333      	adds	r3, #51	@ 0x33
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001924 <PWM_Set_Pulse+0x68>)
 80018ee:	805a      	strh	r2, [r3, #2]
    pwm_handle.previous_pulse1 = htim1.Instance->CCR1;
 80018f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <PWM_Set_Pulse+0x6c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <PWM_Set_Pulse+0x68>)
 80018fa:	809a      	strh	r2, [r3, #4]
    pwm_handle.previous_pulse2 = htim1.Instance->CCR2;
 80018fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <PWM_Set_Pulse+0x6c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <PWM_Set_Pulse+0x68>)
 8001906:	80da      	strh	r2, [r3, #6]
  __ASM volatile ("cpsie i" : : : "memory");
 8001908:	b662      	cpsie	i
}
 800190a:	bf00      	nop
	 __enable_irq();   // Enable interrupts

	 pwm_handle.interrupt_counter = 0;
 800190c:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <PWM_Set_Pulse+0x68>)
 800190e:	2200      	movs	r2, #0
 8001910:	819a      	strh	r2, [r3, #12]
	 return 0;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	51eb851f 	.word	0x51eb851f
 8001924:	200004cc 	.word	0x200004cc
 8001928:	200002b8 	.word	0x200002b8

0800192c <PWM_Speed_Control>:

int PWM_Speed_Control(h_shell_t *h_shell,char **argv,int argc)
{
 800192c:	b5b0      	push	{r4, r5, r7, lr}
 800192e:	b0a0      	sub	sp, #128	@ 0x80
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
	uint32_t new_speed = atoi(argv[1]);//speed in expected in % of max speed
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	3304      	adds	r3, #4
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f007 fffc 	bl	800993c <atoi>
 8001944:	4603      	mov	r3, r0
 8001946:	67fb      	str	r3, [r7, #124]	@ 0x7c

	if(argc != 2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d018      	beq.n	8001980 <PWM_Speed_Control+0x54>
	{
		uint8_t error_message[] = "Error : speed function expect exactly 1 parameter \r\n";
 800194e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a40 <PWM_Speed_Control+0x114>)
 8001950:	f107 0410 	add.w	r4, r7, #16
 8001954:	461d      	mov	r5, r3
 8001956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800195a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800195e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001962:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001966:	6020      	str	r0, [r4, #0]
 8001968:	3404      	adds	r4, #4
 800196a:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, error_message, sizeof(error_message), HAL_MAX_DELAY);
 800196c:	f107 0110 	add.w	r1, r7, #16
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
 8001974:	2235      	movs	r2, #53	@ 0x35
 8001976:	4833      	ldr	r0, [pc, #204]	@ (8001a44 <PWM_Speed_Control+0x118>)
 8001978:	f005 fee5 	bl	8007746 <HAL_UART_Transmit>

		return 1;
 800197c:	2301      	movs	r3, #1
 800197e:	e05a      	b.n	8001a36 <PWM_Speed_Control+0x10a>
	}

	else if(speed > 90 || speed < 10)//on vérifie qu'on met pas la vitesse ne soit pas au dessus de 95% de la max par sécurité
 8001980:	4b31      	ldr	r3, [pc, #196]	@ (8001a48 <PWM_Speed_Control+0x11c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b5a      	cmp	r3, #90	@ 0x5a
 8001986:	d803      	bhi.n	8001990 <PWM_Speed_Control+0x64>
 8001988:	4b2f      	ldr	r3, [pc, #188]	@ (8001a48 <PWM_Speed_Control+0x11c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b09      	cmp	r3, #9
 800198e:	d815      	bhi.n	80019bc <PWM_Speed_Control+0x90>
	{
		uint8_t error_message[] = "speed function must not exceed 90% of max value  \r\n";
 8001990:	4b2e      	ldr	r3, [pc, #184]	@ (8001a4c <PWM_Speed_Control+0x120>)
 8001992:	f107 0410 	add.w	r4, r7, #16
 8001996:	461d      	mov	r5, r3
 8001998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800199c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a4:	682b      	ldr	r3, [r5, #0]
 80019a6:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, error_message, sizeof(error_message), HAL_MAX_DELAY);
 80019a8:	f107 0110 	add.w	r1, r7, #16
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	2234      	movs	r2, #52	@ 0x34
 80019b2:	4824      	ldr	r0, [pc, #144]	@ (8001a44 <PWM_Speed_Control+0x118>)
 80019b4:	f005 fec7 	bl	8007746 <HAL_UART_Transmit>
		return 1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e03c      	b.n	8001a36 <PWM_Speed_Control+0x10a>

	}
	else if((speed < 50 && new_speed > 50 )|| (speed > 50 && new_speed < 50 ))
 80019bc:	4b22      	ldr	r3, [pc, #136]	@ (8001a48 <PWM_Speed_Control+0x11c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b31      	cmp	r3, #49	@ 0x31
 80019c2:	d802      	bhi.n	80019ca <PWM_Speed_Control+0x9e>
 80019c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80019c6:	2b32      	cmp	r3, #50	@ 0x32
 80019c8:	d806      	bhi.n	80019d8 <PWM_Speed_Control+0xac>
 80019ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001a48 <PWM_Speed_Control+0x11c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b32      	cmp	r3, #50	@ 0x32
 80019d0:	d914      	bls.n	80019fc <PWM_Speed_Control+0xd0>
 80019d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80019d4:	2b31      	cmp	r3, #49	@ 0x31
 80019d6:	d811      	bhi.n	80019fc <PWM_Speed_Control+0xd0>
	{
		uint8_t error_message[] = "speed function must not change the direction of rotation, please go to neutral by entering 50 before\r\n";
 80019d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a50 <PWM_Speed_Control+0x124>)
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	4611      	mov	r1, r2
 80019e0:	2267      	movs	r2, #103	@ 0x67
 80019e2:	4618      	mov	r0, r3
 80019e4:	f008 fb11 	bl	800a00a <memcpy>
		HAL_UART_Transmit(&huart2, error_message, sizeof(error_message), HAL_MAX_DELAY);
 80019e8:	f107 0110 	add.w	r1, r7, #16
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
 80019f0:	2267      	movs	r2, #103	@ 0x67
 80019f2:	4814      	ldr	r0, [pc, #80]	@ (8001a44 <PWM_Speed_Control+0x118>)
 80019f4:	f005 fea7 	bl	8007746 <HAL_UART_Transmit>
		return 1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e01c      	b.n	8001a36 <PWM_Speed_Control+0x10a>
	}
	speed = new_speed;
 80019fc:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <PWM_Speed_Control+0x11c>)
 80019fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001a00:	6013      	str	r3, [r2, #0]
	PWM_Set_Pulse(speed);
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <PWM_Speed_Control+0x11c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ff58 	bl	80018bc <PWM_Set_Pulse>
	int uartTxStringLength = snprintf((char *)h_shell->uartTxBuffer, UART_TX_BUFFER_SIZE, "speed set to %lu of max value \r\n",(unsigned long)speed);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f203 1085 	addw	r0, r3, #389	@ 0x185
 8001a12:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <PWM_Speed_Control+0x11c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a0f      	ldr	r2, [pc, #60]	@ (8001a54 <PWM_Speed_Control+0x128>)
 8001a18:	2140      	movs	r1, #64	@ 0x40
 8001a1a:	f008 f997 	bl	8009d4c <sniprintf>
 8001a1e:	67b8      	str	r0, [r7, #120]	@ 0x78
	HAL_UART_Transmit(&huart2, h_shell->uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f203 1185 	addw	r1, r3, #389	@ 0x185
 8001a26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	4805      	ldr	r0, [pc, #20]	@ (8001a44 <PWM_Speed_Control+0x118>)
 8001a30:	f005 fe89 	bl	8007746 <HAL_UART_Transmit>
	return 0;
 8001a34:	2300      	movs	r3, #0


}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3780      	adds	r7, #128	@ 0x80
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	0800ae64 	.word	0x0800ae64
 8001a44:	2000039c 	.word	0x2000039c
 8001a48:	200004dc 	.word	0x200004dc
 8001a4c:	0800ae9c 	.word	0x0800ae9c
 8001a50:	0800aed0 	.word	0x0800aed0
 8001a54:	0800ae40 	.word	0x0800ae40

08001a58 <PWM_Start>:

int PWM_Start(h_shell_t *h_shell,char **argv,int argc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a64:	2100      	movs	r1, #0
 8001a66:	4819      	ldr	r0, [pc, #100]	@ (8001acc <PWM_Start+0x74>)
 8001a68:	f004 fa08 	bl	8005e7c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4817      	ldr	r0, [pc, #92]	@ (8001acc <PWM_Start+0x74>)
 8001a70:	f005 fb64 	bl	800713c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001a74:	2104      	movs	r1, #4
 8001a76:	4815      	ldr	r0, [pc, #84]	@ (8001acc <PWM_Start+0x74>)
 8001a78:	f004 fa00 	bl	8005e7c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	4813      	ldr	r0, [pc, #76]	@ (8001acc <PWM_Start+0x74>)
 8001a80:	f005 fb5c 	bl	800713c <HAL_TIMEx_PWMN_Start>

	pwm_handle.interrupt_counter = 0;
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <PWM_Start+0x78>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	819a      	strh	r2, [r3, #12]

	pwm_handle.previous_pulse1 = htim1.Instance->CCR1;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <PWM_Start+0x74>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <PWM_Start+0x78>)
 8001a94:	809a      	strh	r2, [r3, #4]
	pwm_handle.previous_pulse2 = htim1.Instance->CCR2;
 8001a96:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <PWM_Start+0x74>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <PWM_Start+0x78>)
 8001aa0:	80da      	strh	r2, [r3, #6]
	pwm_handle.pulse1 = htim1.Instance->CCR1;
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <PWM_Start+0x74>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <PWM_Start+0x78>)
 8001aac:	801a      	strh	r2, [r3, #0]
	pwm_handle.pulse2 = htim1.Instance->CCR2;
 8001aae:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <PWM_Start+0x74>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <PWM_Start+0x78>)
 8001ab8:	805a      	strh	r2, [r3, #2]

	HAL_TIM_Base_Start_IT(&htim7);
 8001aba:	4806      	ldr	r0, [pc, #24]	@ (8001ad4 <PWM_Start+0x7c>)
 8001abc:	f004 f90e 	bl	8005cdc <HAL_TIM_Base_Start_IT>
	return 0;
 8001ac0:	2300      	movs	r3, #0

}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200002b8 	.word	0x200002b8
 8001ad0:	200004cc 	.word	0x200004cc
 8001ad4:	20000350 	.word	0x20000350

08001ad8 <PWM_Stop>:

int PWM_Stop(h_shell_t *h_shell,char **argv,int argc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	480b      	ldr	r0, [pc, #44]	@ (8001b14 <PWM_Stop+0x3c>)
 8001ae8:	f004 fada 	bl	80060a0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001aec:	2100      	movs	r1, #0
 8001aee:	4809      	ldr	r0, [pc, #36]	@ (8001b14 <PWM_Stop+0x3c>)
 8001af0:	f005 fbe6 	bl	80072c0 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001af4:	2104      	movs	r1, #4
 8001af6:	4807      	ldr	r0, [pc, #28]	@ (8001b14 <PWM_Stop+0x3c>)
 8001af8:	f004 fad2 	bl	80060a0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001afc:	2104      	movs	r1, #4
 8001afe:	4805      	ldr	r0, [pc, #20]	@ (8001b14 <PWM_Stop+0x3c>)
 8001b00:	f005 fbde 	bl	80072c0 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_Base_Stop(&htim7);
 8001b04:	4804      	ldr	r0, [pc, #16]	@ (8001b18 <PWM_Stop+0x40>)
 8001b06:	f004 f8c1 	bl	8005c8c <HAL_TIM_Base_Stop>
	return 0;
 8001b0a:	2300      	movs	r3, #0

}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200002b8 	.word	0x200002b8
 8001b18:	20000350 	.word	0x20000350

08001b1c <Shell_Add>:




int Shell_Add(h_shell_t *h_shell, char *name, shell_func_pointer_t pfunc, char *description)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	603b      	str	r3, [r7, #0]
	if (h_shell->shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b1f      	cmp	r3, #31
 8001b30:	dc27      	bgt.n	8001b82 <Shell_Add+0x66>
	{
		h_shell->shell_func_list[h_shell->shell_func_list_size].name = name;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68f9      	ldr	r1, [r7, #12]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	3304      	adds	r3, #4
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	601a      	str	r2, [r3, #0]
		h_shell->shell_func_list[h_shell->shell_func_list_size].func = pfunc;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68f9      	ldr	r1, [r7, #12]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	3308      	adds	r3, #8
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	601a      	str	r2, [r3, #0]
		h_shell->shell_func_list[h_shell->shell_func_list_size].description = description;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68f9      	ldr	r1, [r7, #12]
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	330c      	adds	r3, #12
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	601a      	str	r2, [r3, #0]
		h_shell->shell_func_list_size++;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	601a      	str	r2, [r3, #0]
		return 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e001      	b.n	8001b86 <Shell_Add+0x6a>
	}
	return -1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <Shell_Help>:

int Shell_Help(h_shell_t *h_shell,char **argv,int argc)
{
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b089      	sub	sp, #36	@ 0x24
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
	int i;
	for (i = 0; i < h_shell->shell_func_list_size; i++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e030      	b.n	8001c08 <Shell_Help+0x74>
	{
		int size;
		memset(h_shell->uartTxBuffer, 0, UART_TX_BUFFER_SIZE);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f203 1385 	addw	r3, r3, #389	@ 0x185
 8001bac:	2240      	movs	r2, #64	@ 0x40
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f008 f942 	bl	8009e3a <memset>
		size = snprintf((char *)h_shell->uartTxBuffer, UART_TX_BUFFER_SIZE, "%s: %s\r\n",
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f203 1085 	addw	r0, r3, #389	@ 0x185
 8001bbc:	68f9      	ldr	r1, [r7, #12]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	3304      	adds	r3, #4
 8001bcc:	681c      	ldr	r4, [r3, #0]
 8001bce:	68f9      	ldr	r1, [r7, #12]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	330c      	adds	r3, #12
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	4623      	mov	r3, r4
 8001be4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c1c <Shell_Help+0x88>)
 8001be6:	2140      	movs	r1, #64	@ 0x40
 8001be8:	f008 f8b0 	bl	8009d4c <sniprintf>
 8001bec:	6138      	str	r0, [r7, #16]
		                h_shell->shell_func_list[i].name,
		                h_shell->shell_func_list[i].description);

		HAL_UART_Transmit(&huart2, h_shell->uartTxBuffer,size, HAL_MAX_DELAY);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f203 1185 	addw	r1, r3, #389	@ 0x185
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfc:	4808      	ldr	r0, [pc, #32]	@ (8001c20 <Shell_Help+0x8c>)
 8001bfe:	f005 fda2 	bl	8007746 <HAL_UART_Transmit>
	for (i = 0; i < h_shell->shell_func_list_size; i++)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	dbc9      	blt.n	8001ba6 <Shell_Help+0x12>

	}

	return 0;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}
 8001c1c:	0800af38 	.word	0x0800af38
 8001c20:	2000039c 	.word	0x2000039c

08001c24 <Shell_Init>:


void Shell_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS*sizeof(char*));
 8001c28:	2224      	movs	r2, #36	@ 0x24
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4830      	ldr	r0, [pc, #192]	@ (8001cf0 <Shell_Init+0xcc>)
 8001c2e:	f008 f904 	bl	8009e3a <memset>
	memset(h_shell->cmdBuffer, 0, CMD_BUFFER_SIZE*sizeof(char));
 8001c32:	4b30      	ldr	r3, [pc, #192]	@ (8001cf4 <Shell_Init+0xd0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f203 13c5 	addw	r3, r3, #453	@ 0x1c5
 8001c3a:	2240      	movs	r2, #64	@ 0x40
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f008 f8fb 	bl	8009e3a <memset>
	memset(h_shell->uartRxBuffer, 0, UART_RX_BUFFER_SIZE*sizeof(char));
 8001c44:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf4 <Shell_Init+0xd0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f008 f8f2 	bl	8009e3a <memset>
	memset(h_shell->uartTxBuffer, 0, UART_TX_BUFFER_SIZE*sizeof(char));
 8001c56:	4b27      	ldr	r3, [pc, #156]	@ (8001cf4 <Shell_Init+0xd0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f203 1385 	addw	r3, r3, #389	@ 0x185
 8001c5e:	2240      	movs	r2, #64	@ 0x40
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f008 f8e9 	bl	8009e3a <memset>

	Shell_Add(h_shell, "help", Shell_Help, "Display help for known functions of the shell");
 8001c68:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <Shell_Init+0xd0>)
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	4b22      	ldr	r3, [pc, #136]	@ (8001cf8 <Shell_Init+0xd4>)
 8001c6e:	4a23      	ldr	r2, [pc, #140]	@ (8001cfc <Shell_Init+0xd8>)
 8001c70:	4923      	ldr	r1, [pc, #140]	@ (8001d00 <Shell_Init+0xdc>)
 8001c72:	f7ff ff53 	bl	8001b1c <Shell_Add>
	Shell_Add(h_shell, "PWM_speed_control", PWM_Speed_Control, "Set the speed of the motor in %. 0 being Full reverse speed, 50 neutral and 100 full forward speed");
 8001c76:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf4 <Shell_Init+0xd0>)
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	4b22      	ldr	r3, [pc, #136]	@ (8001d04 <Shell_Init+0xe0>)
 8001c7c:	4a22      	ldr	r2, [pc, #136]	@ (8001d08 <Shell_Init+0xe4>)
 8001c7e:	4923      	ldr	r1, [pc, #140]	@ (8001d0c <Shell_Init+0xe8>)
 8001c80:	f7ff ff4c 	bl	8001b1c <Shell_Add>
	Shell_Add(h_shell, "PWM_Start", PWM_Start, "Start PWM generation output to control motor speed");
 8001c84:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <Shell_Init+0xd0>)
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	4b21      	ldr	r3, [pc, #132]	@ (8001d10 <Shell_Init+0xec>)
 8001c8a:	4a22      	ldr	r2, [pc, #136]	@ (8001d14 <Shell_Init+0xf0>)
 8001c8c:	4922      	ldr	r1, [pc, #136]	@ (8001d18 <Shell_Init+0xf4>)
 8001c8e:	f7ff ff45 	bl	8001b1c <Shell_Add>
	Shell_Add(h_shell, "PWM_Stop", PWM_Stop, "Stop PWM generation output to disable motor");
 8001c92:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <Shell_Init+0xd0>)
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	4b21      	ldr	r3, [pc, #132]	@ (8001d1c <Shell_Init+0xf8>)
 8001c98:	4a21      	ldr	r2, [pc, #132]	@ (8001d20 <Shell_Init+0xfc>)
 8001c9a:	4922      	ldr	r1, [pc, #136]	@ (8001d24 <Shell_Init+0x100>)
 8001c9c:	f7ff ff3e 	bl	8001b1c <Shell_Add>
	Shell_Add(h_shell, "ADC_Read", ADC_Read, "Display ADC_values concerning motor currents.");
 8001ca0:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <Shell_Init+0xd0>)
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <Shell_Init+0x104>)
 8001ca6:	4a21      	ldr	r2, [pc, #132]	@ (8001d2c <Shell_Init+0x108>)
 8001ca8:	4921      	ldr	r1, [pc, #132]	@ (8001d30 <Shell_Init+0x10c>)
 8001caa:	f7ff ff37 	bl	8001b1c <Shell_Add>



	HAL_UART_Receive_IT(&huart2, h_shell->uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001cae:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <Shell_Init+0xd0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4619      	mov	r1, r3
 8001cba:	481e      	ldr	r0, [pc, #120]	@ (8001d34 <Shell_Init+0x110>)
 8001cbc:	f005 fdd2 	bl	8007864 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8001cc0:	481d      	ldr	r0, [pc, #116]	@ (8001d38 <Shell_Init+0x114>)
 8001cc2:	f7fe fab7 	bl	8000234 <strlen>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	491a      	ldr	r1, [pc, #104]	@ (8001d38 <Shell_Init+0x114>)
 8001cd0:	4818      	ldr	r0, [pc, #96]	@ (8001d34 <Shell_Init+0x110>)
 8001cd2:	f005 fd38 	bl	8007746 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001cd6:	4819      	ldr	r0, [pc, #100]	@ (8001d3c <Shell_Init+0x118>)
 8001cd8:	f7fe faac 	bl	8000234 <strlen>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce4:	4915      	ldr	r1, [pc, #84]	@ (8001d3c <Shell_Init+0x118>)
 8001ce6:	4813      	ldr	r0, [pc, #76]	@ (8001d34 <Shell_Init+0x110>)
 8001ce8:	f005 fd2d 	bl	8007746 <HAL_UART_Transmit>
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200004e4 	.word	0x200004e4
 8001cf4:	200004e0 	.word	0x200004e0
 8001cf8:	0800af44 	.word	0x0800af44
 8001cfc:	08001b95 	.word	0x08001b95
 8001d00:	0800af74 	.word	0x0800af74
 8001d04:	0800af7c 	.word	0x0800af7c
 8001d08:	0800192d 	.word	0x0800192d
 8001d0c:	0800afe0 	.word	0x0800afe0
 8001d10:	0800aff4 	.word	0x0800aff4
 8001d14:	08001a59 	.word	0x08001a59
 8001d18:	0800b028 	.word	0x0800b028
 8001d1c:	0800b034 	.word	0x0800b034
 8001d20:	08001ad9 	.word	0x08001ad9
 8001d24:	0800b060 	.word	0x0800b060
 8001d28:	0800b06c 	.word	0x0800b06c
 8001d2c:	080018a1 	.word	0x080018a1
 8001d30:	0800b09c 	.word	0x0800b09c
 8001d34:	2000039c 	.word	0x2000039c
 8001d38:	20000028 	.word	0x20000028
 8001d3c:	20000004 	.word	0x20000004

08001d40 <Shell_Exec>:

static int Shell_Exec(h_shell_t *h_shell,char **argv,int argc)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
	// Lookup and execute the command
	char *user_func = argv[0]; // First token is the command
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < h_shell->shell_func_list_size; i++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	e034      	b.n	8001dc2 <Shell_Exec+0x82>
	{
		if (strcmp(h_shell->shell_func_list[i].name, user_func) == 0)
 8001d58:	68f9      	ldr	r1, [r7, #12]
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	3304      	adds	r3, #4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6979      	ldr	r1, [r7, #20]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fa57 	bl	8000220 <strcmp>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d121      	bne.n	8001dbc <Shell_Exec+0x7c>
		{
			// Execute the command
			int result = h_shell->shell_func_list[i].func(h_shell,argv,argc );
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	69fa      	ldr	r2, [r7, #28]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	3308      	adds	r3, #8
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	4798      	blx	r3
 8001d92:	6138      	str	r0, [r7, #16]

			// Clean up dynamically allocated memory
			for (int j = 0; j < argc; j++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	e00a      	b.n	8001db0 <Shell_Exec+0x70>
			{
				free(argv[j]);
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	4413      	add	r3, r2
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f007 fdd5 	bl	8009954 <free>
			for (int j = 0; j < argc; j++)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	3301      	adds	r3, #1
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dbf0      	blt.n	8001d9a <Shell_Exec+0x5a>
			}
			return result;
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	e00f      	b.n	8001ddc <Shell_Exec+0x9c>
	for (int i = 0; i < h_shell->shell_func_list_size; i++)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbc5      	blt.n	8001d58 <Shell_Exec+0x18>
		}
	}
	HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd0:	2214      	movs	r2, #20
 8001dd2:	4904      	ldr	r1, [pc, #16]	@ (8001de4 <Shell_Exec+0xa4>)
 8001dd4:	4804      	ldr	r0, [pc, #16]	@ (8001de8 <Shell_Exec+0xa8>)
 8001dd6:	f005 fcb6 	bl	8007746 <HAL_UART_Transmit>
	return 1;
 8001dda:	2301      	movs	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000098 	.word	0x20000098
 8001de8:	2000039c 	.word	0x2000039c

08001dec <Shell_Loop>:

void Shell_Loop(void){
 8001dec:	b598      	push	{r3, r4, r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	if(h_shell->uartRxReceived){
 8001df0:	4b48      	ldr	r3, [pc, #288]	@ (8001f14 <Shell_Loop+0x128>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d079      	beq.n	8001ef0 <Shell_Loop+0x104>
		switch(h_shell->uartRxBuffer[0]){
 8001dfc:	4b45      	ldr	r3, [pc, #276]	@ (8001f14 <Shell_Loop+0x128>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d03f      	beq.n	8001e88 <Shell_Loop+0x9c>
 8001e08:	2b0d      	cmp	r3, #13
 8001e0a:	d152      	bne.n	8001eb2 <Shell_Loop+0xc6>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e10:	2203      	movs	r2, #3
 8001e12:	4941      	ldr	r1, [pc, #260]	@ (8001f18 <Shell_Loop+0x12c>)
 8001e14:	4841      	ldr	r0, [pc, #260]	@ (8001f1c <Shell_Loop+0x130>)
 8001e16:	f005 fc96 	bl	8007746 <HAL_UART_Transmit>
			h_shell->cmdBuffer[h_shell->idx_cmd] = '\0';
 8001e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f14 <Shell_Loop+0x128>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f14 <Shell_Loop+0x128>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001e26:	4413      	add	r3, r2
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 21c5 	strb.w	r2, [r3, #453]	@ 0x1c5
			argc = 0;
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f20 <Shell_Loop+0x134>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
			token = strtok(h_shell->cmdBuffer, " ");
 8001e34:	4b37      	ldr	r3, [pc, #220]	@ (8001f14 <Shell_Loop+0x128>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f203 13c5 	addw	r3, r3, #453	@ 0x1c5
 8001e3c:	4939      	ldr	r1, [pc, #228]	@ (8001f24 <Shell_Loop+0x138>)
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f008 f804 	bl	8009e4c <strtok>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4a38      	ldr	r2, [pc, #224]	@ (8001f28 <Shell_Loop+0x13c>)
 8001e48:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001e4a:	e010      	b.n	8001e6e <Shell_Loop+0x82>
				argv[argc++] = token;
 8001e4c:	4b34      	ldr	r3, [pc, #208]	@ (8001f20 <Shell_Loop+0x134>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	4933      	ldr	r1, [pc, #204]	@ (8001f20 <Shell_Loop+0x134>)
 8001e54:	600a      	str	r2, [r1, #0]
 8001e56:	4a34      	ldr	r2, [pc, #208]	@ (8001f28 <Shell_Loop+0x13c>)
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	4934      	ldr	r1, [pc, #208]	@ (8001f2c <Shell_Loop+0x140>)
 8001e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001e60:	4930      	ldr	r1, [pc, #192]	@ (8001f24 <Shell_Loop+0x138>)
 8001e62:	2000      	movs	r0, #0
 8001e64:	f007 fff2 	bl	8009e4c <strtok>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4a2f      	ldr	r2, [pc, #188]	@ (8001f28 <Shell_Loop+0x13c>)
 8001e6c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001e6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f28 <Shell_Loop+0x13c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1ea      	bne.n	8001e4c <Shell_Loop+0x60>
			}
			h_shell->idx_cmd = 0;
 8001e76:	4b27      	ldr	r3, [pc, #156]	@ (8001f14 <Shell_Loop+0x128>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			newCmdReady = 1;
 8001e80:	4b2b      	ldr	r3, [pc, #172]	@ (8001f30 <Shell_Loop+0x144>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
			break;
 8001e86:	e02e      	b.n	8001ee6 <Shell_Loop+0xfa>
		case ASCII_BACK: // Suppression du dernier caractère
			h_shell->cmdBuffer[h_shell->idx_cmd--] = '\0';
 8001e88:	4b22      	ldr	r3, [pc, #136]	@ (8001f14 <Shell_Loop+0x128>)
 8001e8a:	6819      	ldr	r1, [r3, #0]
 8001e8c:	4b21      	ldr	r3, [pc, #132]	@ (8001f14 <Shell_Loop+0x128>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	f8d2 3208 	ldr.w	r3, [r2, #520]	@ 0x208
 8001e94:	1e58      	subs	r0, r3, #1
 8001e96:	f8c2 0208 	str.w	r0, [r2, #520]	@ 0x208
 8001e9a:	440b      	add	r3, r1
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 21c5 	strb.w	r2, [r3, #453]	@ 0x1c5
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	4922      	ldr	r1, [pc, #136]	@ (8001f34 <Shell_Loop+0x148>)
 8001eaa:	481c      	ldr	r0, [pc, #112]	@ (8001f1c <Shell_Loop+0x130>)
 8001eac:	f005 fc4b 	bl	8007746 <HAL_UART_Transmit>
			break;
 8001eb0:	e019      	b.n	8001ee6 <Shell_Loop+0xfa>

		default: // Nouveau caractère
			h_shell->cmdBuffer[h_shell->idx_cmd++] = h_shell->uartRxBuffer[0];
 8001eb2:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <Shell_Loop+0x128>)
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	4b17      	ldr	r3, [pc, #92]	@ (8001f14 <Shell_Loop+0x128>)
 8001eb8:	6819      	ldr	r1, [r3, #0]
 8001eba:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <Shell_Loop+0x128>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	f8d2 3208 	ldr.w	r3, [r2, #520]	@ 0x208
 8001ec2:	1c5c      	adds	r4, r3, #1
 8001ec4:	f8c2 4208 	str.w	r4, [r2, #520]	@ 0x208
 8001ec8:	f890 2184 	ldrb.w	r2, [r0, #388]	@ 0x184
 8001ecc:	440b      	add	r3, r1
 8001ece:	f883 21c5 	strb.w	r2, [r3, #453]	@ 0x1c5
			HAL_UART_Transmit(&huart2, h_shell->uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001ed2:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <Shell_Loop+0x128>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f503 71c2 	add.w	r1, r3, #388	@ 0x184
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	2201      	movs	r2, #1
 8001ee0:	480e      	ldr	r0, [pc, #56]	@ (8001f1c <Shell_Loop+0x130>)
 8001ee2:	f005 fc30 	bl	8007746 <HAL_UART_Transmit>
		}
		h_shell->uartRxReceived = 0;
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <Shell_Loop+0x128>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
	}

	if(newCmdReady){
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <Shell_Loop+0x144>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00a      	beq.n	8001f0e <Shell_Loop+0x122>

		Shell_Exec(h_shell, argv,argc);
 8001ef8:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <Shell_Loop+0x128>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a08      	ldr	r2, [pc, #32]	@ (8001f20 <Shell_Loop+0x134>)
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	490a      	ldr	r1, [pc, #40]	@ (8001f2c <Shell_Loop+0x140>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ff1c 	bl	8001d40 <Shell_Exec>
		newCmdReady = 0;
 8001f08:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <Shell_Loop+0x144>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
	}
}
 8001f0e:	bf00      	nop
 8001f10:	bd98      	pop	{r3, r4, r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200004e0 	.word	0x200004e0
 8001f18:	20000090 	.word	0x20000090
 8001f1c:	2000039c 	.word	0x2000039c
 8001f20:	20000508 	.word	0x20000508
 8001f24:	0800b0a8 	.word	0x0800b0a8
 8001f28:	2000050c 	.word	0x2000050c
 8001f2c:	200004e4 	.word	0x200004e4
 8001f30:	20000510 	.word	0x20000510
 8001f34:	20000094 	.word	0x20000094

08001f38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	h_shell->uartRxReceived = 1;
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <HAL_UART_RxCpltCallback+0x2c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
	HAL_UART_Receive_IT(&huart2, h_shell->uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001f4a:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <HAL_UART_RxCpltCallback+0x2c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8001f52:	2201      	movs	r2, #1
 8001f54:	4619      	mov	r1, r3
 8001f56:	4804      	ldr	r0, [pc, #16]	@ (8001f68 <HAL_UART_RxCpltCallback+0x30>)
 8001f58:	f005 fc84 	bl	8007864 <HAL_UART_Receive_IT>
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200004e0 	.word	0x200004e0
 8001f68:	2000039c 	.word	0x2000039c

08001f6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f6c:	480d      	ldr	r0, [pc, #52]	@ (8001fa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f70:	480d      	ldr	r0, [pc, #52]	@ (8001fa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f72:	490e      	ldr	r1, [pc, #56]	@ (8001fac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f74:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb0 <LoopForever+0xe>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f78:	e002      	b.n	8001f80 <LoopCopyDataInit>

08001f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7e:	3304      	adds	r3, #4

08001f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f84:	d3f9      	bcc.n	8001f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f86:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f88:	4c0b      	ldr	r4, [pc, #44]	@ (8001fb8 <LoopForever+0x16>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f8c:	e001      	b.n	8001f92 <LoopFillZerobss>

08001f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f90:	3204      	adds	r2, #4

08001f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f94:	d3fb      	bcc.n	8001f8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f96:	f7ff f8c1 	bl	800111c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f9a:	f008 f80f 	bl	8009fbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f9e:	f7fe fe13 	bl	8000bc8 <main>

08001fa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fa2:	e7fe      	b.n	8001fa2 <LoopForever>
  ldr   r0, =_estack
 8001fa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fac:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001fb0:	0800b2e0 	.word	0x0800b2e0
  ldr r2, =_sbss
 8001fb4:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001fb8:	20000664 	.word	0x20000664

08001fbc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fbc:	e7fe      	b.n	8001fbc <ADC3_IRQHandler>

08001fbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f002 f812 	bl	8003ff2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fce:	200f      	movs	r0, #15
 8001fd0:	f7fe fef0 	bl	8000db4 <HAL_InitTick>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	71fb      	strb	r3, [r7, #7]
 8001fde:	e001      	b.n	8001fe4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fe0:	f7fe fec4 	bl	8000d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fe4:	79fb      	ldrb	r3, [r7, #7]

}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	@ (800200c <HAL_IncTick+0x1c>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <HAL_IncTick+0x20>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a03      	ldr	r2, [pc, #12]	@ (800200c <HAL_IncTick+0x1c>)
 8002000:	6013      	str	r3, [r2, #0]
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	20000514 	.word	0x20000514
 8002010:	200000b0 	.word	0x200000b0

08002014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return uwTick;
 8002018:	4b03      	ldr	r3, [pc, #12]	@ (8002028 <HAL_GetTick+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000514 	.word	0x20000514

0800202c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	609a      	str	r2, [r3, #8]
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	609a      	str	r2, [r3, #8]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3360      	adds	r3, #96	@ 0x60
 80020a6:	461a      	mov	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <LL_ADC_SetOffset+0x44>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020cc:	bf00      	nop
 80020ce:	371c      	adds	r7, #28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	03fff000 	.word	0x03fff000

080020dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3360      	adds	r3, #96	@ 0x60
 80020ea:	461a      	mov	r2, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3360      	adds	r3, #96	@ 0x60
 8002118:	461a      	mov	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	431a      	orrs	r2, r3
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002132:	bf00      	nop
 8002134:	371c      	adds	r7, #28
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800213e:	b480      	push	{r7}
 8002140:	b087      	sub	sp, #28
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3360      	adds	r3, #96	@ 0x60
 800214e:	461a      	mov	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	431a      	orrs	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002168:	bf00      	nop
 800216a:	371c      	adds	r7, #28
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3360      	adds	r3, #96	@ 0x60
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	431a      	orrs	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	615a      	str	r2, [r3, #20]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b087      	sub	sp, #28
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3330      	adds	r3, #48	@ 0x30
 8002206:	461a      	mov	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	4413      	add	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	211f      	movs	r1, #31
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	401a      	ands	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	f003 011f 	and.w	r1, r3, #31
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	431a      	orrs	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002242:	bf00      	nop
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3314      	adds	r3, #20
 8002284:	461a      	mov	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	0e5b      	lsrs	r3, r3, #25
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	4413      	add	r3, r2
 8002292:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	0d1b      	lsrs	r3, r3, #20
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	2107      	movs	r1, #7
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	401a      	ands	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	0d1b      	lsrs	r3, r3, #20
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	fa01 f303 	lsl.w	r3, r1, r3
 80022b8:	431a      	orrs	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022be:	bf00      	nop
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e4:	43db      	mvns	r3, r3
 80022e6:	401a      	ands	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f003 0318 	and.w	r3, r3, #24
 80022ee:	4908      	ldr	r1, [pc, #32]	@ (8002310 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022f0:	40d9      	lsrs	r1, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	400b      	ands	r3, r1
 80022f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fa:	431a      	orrs	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	0007ffff 	.word	0x0007ffff

08002314 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 031f 	and.w	r3, r3, #31
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800235c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6093      	str	r3, [r2, #8]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002380:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002384:	d101      	bne.n	800238a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80023a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023d4:	d101      	bne.n	80023da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023fc:	f043 0201 	orr.w	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002420:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002424:	f043 0202 	orr.w	r2, r3, #2
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <LL_ADC_IsEnabled+0x18>
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <LL_ADC_IsEnabled+0x1a>
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b02      	cmp	r3, #2
 8002470:	d101      	bne.n	8002476 <LL_ADC_IsDisableOngoing+0x18>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <LL_ADC_IsDisableOngoing+0x1a>
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002494:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002498:	f043 0204 	orr.w	r2, r3, #4
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d101      	bne.n	80024c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d101      	bne.n	80024ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b089      	sub	sp, #36	@ 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e1a9      	b.n	8002866 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7fe f95d 	bl	80007e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff ff19 	bl	8002370 <LL_ADC_IsDeepPowerDownEnabled>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d004      	beq.n	800254e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff feff 	bl	800234c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ff34 	bl	80023c0 <LL_ADC_IsInternalRegulatorEnabled>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d115      	bne.n	800258a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff18 	bl	8002398 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002568:	4b9c      	ldr	r3, [pc, #624]	@ (80027dc <HAL_ADC_Init+0x2e4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	4a9c      	ldr	r2, [pc, #624]	@ (80027e0 <HAL_ADC_Init+0x2e8>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	099b      	lsrs	r3, r3, #6
 8002576:	3301      	adds	r3, #1
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800257c:	e002      	b.n	8002584 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3b01      	subs	r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f9      	bne.n	800257e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ff16 	bl	80023c0 <LL_ADC_IsInternalRegulatorEnabled>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10d      	bne.n	80025b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259e:	f043 0210 	orr.w	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025aa:	f043 0201 	orr.w	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ff76 	bl	80024ac <LL_ADC_REG_IsConversionOngoing>
 80025c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 8142 	bne.w	8002854 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 813e 	bne.w	8002854 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025dc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80025e0:	f043 0202 	orr.w	r2, r3, #2
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff23 	bl	8002438 <LL_ADC_IsEnabled>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d141      	bne.n	800267c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002600:	d004      	beq.n	800260c <HAL_ADC_Init+0x114>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a77      	ldr	r2, [pc, #476]	@ (80027e4 <HAL_ADC_Init+0x2ec>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d10f      	bne.n	800262c <HAL_ADC_Init+0x134>
 800260c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002610:	f7ff ff12 	bl	8002438 <LL_ADC_IsEnabled>
 8002614:	4604      	mov	r4, r0
 8002616:	4873      	ldr	r0, [pc, #460]	@ (80027e4 <HAL_ADC_Init+0x2ec>)
 8002618:	f7ff ff0e 	bl	8002438 <LL_ADC_IsEnabled>
 800261c:	4603      	mov	r3, r0
 800261e:	4323      	orrs	r3, r4
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	e012      	b.n	8002652 <HAL_ADC_Init+0x15a>
 800262c:	486e      	ldr	r0, [pc, #440]	@ (80027e8 <HAL_ADC_Init+0x2f0>)
 800262e:	f7ff ff03 	bl	8002438 <LL_ADC_IsEnabled>
 8002632:	4604      	mov	r4, r0
 8002634:	486d      	ldr	r0, [pc, #436]	@ (80027ec <HAL_ADC_Init+0x2f4>)
 8002636:	f7ff feff 	bl	8002438 <LL_ADC_IsEnabled>
 800263a:	4603      	mov	r3, r0
 800263c:	431c      	orrs	r4, r3
 800263e:	486c      	ldr	r0, [pc, #432]	@ (80027f0 <HAL_ADC_Init+0x2f8>)
 8002640:	f7ff fefa 	bl	8002438 <LL_ADC_IsEnabled>
 8002644:	4603      	mov	r3, r0
 8002646:	4323      	orrs	r3, r4
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d012      	beq.n	800267c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800265e:	d004      	beq.n	800266a <HAL_ADC_Init+0x172>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a5f      	ldr	r2, [pc, #380]	@ (80027e4 <HAL_ADC_Init+0x2ec>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <HAL_ADC_Init+0x176>
 800266a:	4a62      	ldr	r2, [pc, #392]	@ (80027f4 <HAL_ADC_Init+0x2fc>)
 800266c:	e000      	b.n	8002670 <HAL_ADC_Init+0x178>
 800266e:	4a62      	ldr	r2, [pc, #392]	@ (80027f8 <HAL_ADC_Init+0x300>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4619      	mov	r1, r3
 8002676:	4610      	mov	r0, r2
 8002678:	f7ff fcd8 	bl	800202c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	7f5b      	ldrb	r3, [r3, #29]
 8002680:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002686:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800268c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002692:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800269a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d106      	bne.n	80026b8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ae:	3b01      	subs	r3, #1
 80026b0:	045b      	lsls	r3, r3, #17
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026cc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	4b48      	ldr	r3, [pc, #288]	@ (80027fc <HAL_ADC_Init+0x304>)
 80026dc:	4013      	ands	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	69b9      	ldr	r1, [r7, #24]
 80026e4:	430b      	orrs	r3, r1
 80026e6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fee5 	bl	80024d2 <LL_ADC_INJ_IsConversionOngoing>
 8002708:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d17f      	bne.n	8002810 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d17c      	bne.n	8002810 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800271a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002722:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002732:	f023 0302 	bic.w	r3, r3, #2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	69b9      	ldr	r1, [r7, #24]
 800273c:	430b      	orrs	r3, r1
 800273e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d017      	beq.n	8002778 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002756:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002760:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002764:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6911      	ldr	r1, [r2, #16]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	430b      	orrs	r3, r1
 8002772:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002776:	e013      	b.n	80027a0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002786:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002798:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800279c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d12a      	bne.n	8002800 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027c0:	4311      	orrs	r1, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80027c6:	4311      	orrs	r1, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027cc:	430a      	orrs	r2, r1
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0201 	orr.w	r2, r2, #1
 80027d8:	611a      	str	r2, [r3, #16]
 80027da:	e019      	b.n	8002810 <HAL_ADC_Init+0x318>
 80027dc:	20000000 	.word	0x20000000
 80027e0:	053e2d63 	.word	0x053e2d63
 80027e4:	50000100 	.word	0x50000100
 80027e8:	50000400 	.word	0x50000400
 80027ec:	50000500 	.word	0x50000500
 80027f0:	50000600 	.word	0x50000600
 80027f4:	50000300 	.word	0x50000300
 80027f8:	50000700 	.word	0x50000700
 80027fc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d10c      	bne.n	8002832 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	f023 010f 	bic.w	r1, r3, #15
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	1e5a      	subs	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002830:	e007      	b.n	8002842 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 020f 	bic.w	r2, r2, #15
 8002840:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002846:	f023 0303 	bic.w	r3, r3, #3
 800284a:	f043 0201 	orr.w	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002852:	e007      	b.n	8002864 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002858:	f043 0210 	orr.w	r2, r3, #16
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002864:	7ffb      	ldrb	r3, [r7, #31]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	@ 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}
 800286e:	bf00      	nop

08002870 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002884:	d004      	beq.n	8002890 <HAL_ADC_Start_DMA+0x20>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a5a      	ldr	r2, [pc, #360]	@ (80029f4 <HAL_ADC_Start_DMA+0x184>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d101      	bne.n	8002894 <HAL_ADC_Start_DMA+0x24>
 8002890:	4b59      	ldr	r3, [pc, #356]	@ (80029f8 <HAL_ADC_Start_DMA+0x188>)
 8002892:	e000      	b.n	8002896 <HAL_ADC_Start_DMA+0x26>
 8002894:	4b59      	ldr	r3, [pc, #356]	@ (80029fc <HAL_ADC_Start_DMA+0x18c>)
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fd3c 	bl	8002314 <LL_ADC_GetMultimode>
 800289c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fe02 	bl	80024ac <LL_ADC_REG_IsConversionOngoing>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 809b 	bne.w	80029e6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_ADC_Start_DMA+0x4e>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e096      	b.n	80029ec <HAL_ADC_Start_DMA+0x17c>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a4d      	ldr	r2, [pc, #308]	@ (8002a00 <HAL_ADC_Start_DMA+0x190>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d008      	beq.n	80028e2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b05      	cmp	r3, #5
 80028da:	d002      	beq.n	80028e2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	2b09      	cmp	r3, #9
 80028e0:	d17a      	bne.n	80029d8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 ff60 	bl	80037a8 <ADC_Enable>
 80028e8:	4603      	mov	r3, r0
 80028ea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80028ec:	7dfb      	ldrb	r3, [r7, #23]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d16d      	bne.n	80029ce <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a3a      	ldr	r2, [pc, #232]	@ (80029f4 <HAL_ADC_Start_DMA+0x184>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d009      	beq.n	8002924 <HAL_ADC_Start_DMA+0xb4>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3b      	ldr	r2, [pc, #236]	@ (8002a04 <HAL_ADC_Start_DMA+0x194>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d002      	beq.n	8002920 <HAL_ADC_Start_DMA+0xb0>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	e003      	b.n	8002928 <HAL_ADC_Start_DMA+0xb8>
 8002920:	4b39      	ldr	r3, [pc, #228]	@ (8002a08 <HAL_ADC_Start_DMA+0x198>)
 8002922:	e001      	b.n	8002928 <HAL_ADC_Start_DMA+0xb8>
 8002924:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	4293      	cmp	r3, r2
 800292e:	d002      	beq.n	8002936 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d105      	bne.n	8002942 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002946:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d006      	beq.n	800295c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002952:	f023 0206 	bic.w	r2, r3, #6
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	661a      	str	r2, [r3, #96]	@ 0x60
 800295a:	e002      	b.n	8002962 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002966:	4a29      	ldr	r2, [pc, #164]	@ (8002a0c <HAL_ADC_Start_DMA+0x19c>)
 8002968:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296e:	4a28      	ldr	r2, [pc, #160]	@ (8002a10 <HAL_ADC_Start_DMA+0x1a0>)
 8002970:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002976:	4a27      	ldr	r2, [pc, #156]	@ (8002a14 <HAL_ADC_Start_DMA+0x1a4>)
 8002978:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	221c      	movs	r2, #28
 8002980:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0210 	orr.w	r2, r2, #16
 8002998:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3340      	adds	r3, #64	@ 0x40
 80029b4:	4619      	mov	r1, r3
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f001 fbf5 	bl	80041a8 <HAL_DMA_Start_IT>
 80029be:	4603      	mov	r3, r0
 80029c0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fd5c 	bl	8002484 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80029cc:	e00d      	b.n	80029ea <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80029d6:	e008      	b.n	80029ea <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80029e4:	e001      	b.n	80029ea <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029e6:	2302      	movs	r3, #2
 80029e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	50000100 	.word	0x50000100
 80029f8:	50000300 	.word	0x50000300
 80029fc:	50000700 	.word	0x50000700
 8002a00:	50000600 	.word	0x50000600
 8002a04:	50000500 	.word	0x50000500
 8002a08:	50000400 	.word	0x50000400
 8002a0c:	08003993 	.word	0x08003993
 8002a10:	08003a6b 	.word	0x08003a6b
 8002a14:	08003a87 	.word	0x08003a87

08002a18 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	@ 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002a20:	2300      	movs	r3, #0
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a3c:	d004      	beq.n	8002a48 <HAL_ADC_IRQHandler+0x30>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a8e      	ldr	r2, [pc, #568]	@ (8002c7c <HAL_ADC_IRQHandler+0x264>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_IRQHandler+0x34>
 8002a48:	4b8d      	ldr	r3, [pc, #564]	@ (8002c80 <HAL_ADC_IRQHandler+0x268>)
 8002a4a:	e000      	b.n	8002a4e <HAL_ADC_IRQHandler+0x36>
 8002a4c:	4b8d      	ldr	r3, [pc, #564]	@ (8002c84 <HAL_ADC_IRQHandler+0x26c>)
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fc60 	bl	8002314 <LL_ADC_GetMultimode>
 8002a54:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d017      	beq.n	8002a90 <HAL_ADC_IRQHandler+0x78>
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d012      	beq.n	8002a90 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f001 f8f6 	bl	8003c74 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0x8c>
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10b      	bne.n	8002abc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 8094 	beq.w	8002bd8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 808e 	beq.w	8002bd8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d105      	bne.n	8002ad4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002acc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fb79 	bl	80021d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d072      	beq.n	8002bca <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a64      	ldr	r2, [pc, #400]	@ (8002c7c <HAL_ADC_IRQHandler+0x264>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d009      	beq.n	8002b02 <HAL_ADC_IRQHandler+0xea>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a65      	ldr	r2, [pc, #404]	@ (8002c88 <HAL_ADC_IRQHandler+0x270>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d002      	beq.n	8002afe <HAL_ADC_IRQHandler+0xe6>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	e003      	b.n	8002b06 <HAL_ADC_IRQHandler+0xee>
 8002afe:	4b63      	ldr	r3, [pc, #396]	@ (8002c8c <HAL_ADC_IRQHandler+0x274>)
 8002b00:	e001      	b.n	8002b06 <HAL_ADC_IRQHandler+0xee>
 8002b02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d008      	beq.n	8002b20 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	d002      	beq.n	8002b20 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b09      	cmp	r3, #9
 8002b1e:	d104      	bne.n	8002b2a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	623b      	str	r3, [r7, #32]
 8002b28:	e014      	b.n	8002b54 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a53      	ldr	r2, [pc, #332]	@ (8002c7c <HAL_ADC_IRQHandler+0x264>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d009      	beq.n	8002b48 <HAL_ADC_IRQHandler+0x130>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a53      	ldr	r2, [pc, #332]	@ (8002c88 <HAL_ADC_IRQHandler+0x270>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d002      	beq.n	8002b44 <HAL_ADC_IRQHandler+0x12c>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	e003      	b.n	8002b4c <HAL_ADC_IRQHandler+0x134>
 8002b44:	4b51      	ldr	r3, [pc, #324]	@ (8002c8c <HAL_ADC_IRQHandler+0x274>)
 8002b46:	e001      	b.n	8002b4c <HAL_ADC_IRQHandler+0x134>
 8002b48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b4c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d135      	bne.n	8002bca <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d12e      	bne.n	8002bca <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fc9b 	bl	80024ac <LL_ADC_REG_IsConversionOngoing>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d11a      	bne.n	8002bb2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 020c 	bic.w	r2, r2, #12
 8002b8a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d112      	bne.n	8002bca <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba8:	f043 0201 	orr.w	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bb0:	e00b      	b.n	8002bca <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb6:	f043 0210 	orr.w	r2, r3, #16
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc2:	f043 0201 	orr.w	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f984 	bl	8002ed8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	220c      	movs	r2, #12
 8002bd6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d004      	beq.n	8002bec <HAL_ADC_IRQHandler+0x1d4>
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	f003 0320 	and.w	r3, r3, #32
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10b      	bne.n	8002c04 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80b3 	beq.w	8002d5e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 80ad 	beq.w	8002d5e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d105      	bne.n	8002c1c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c14:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fb14 	bl	800224e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002c26:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff facf 	bl	80021d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c32:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a10      	ldr	r2, [pc, #64]	@ (8002c7c <HAL_ADC_IRQHandler+0x264>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d009      	beq.n	8002c52 <HAL_ADC_IRQHandler+0x23a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a11      	ldr	r2, [pc, #68]	@ (8002c88 <HAL_ADC_IRQHandler+0x270>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d002      	beq.n	8002c4e <HAL_ADC_IRQHandler+0x236>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	e003      	b.n	8002c56 <HAL_ADC_IRQHandler+0x23e>
 8002c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c8c <HAL_ADC_IRQHandler+0x274>)
 8002c50:	e001      	b.n	8002c56 <HAL_ADC_IRQHandler+0x23e>
 8002c52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d008      	beq.n	8002c70 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d002      	beq.n	8002c70 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b07      	cmp	r3, #7
 8002c6e:	d10f      	bne.n	8002c90 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	623b      	str	r3, [r7, #32]
 8002c78:	e01f      	b.n	8002cba <HAL_ADC_IRQHandler+0x2a2>
 8002c7a:	bf00      	nop
 8002c7c:	50000100 	.word	0x50000100
 8002c80:	50000300 	.word	0x50000300
 8002c84:	50000700 	.word	0x50000700
 8002c88:	50000500 	.word	0x50000500
 8002c8c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a8b      	ldr	r2, [pc, #556]	@ (8002ec4 <HAL_ADC_IRQHandler+0x4ac>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d009      	beq.n	8002cae <HAL_ADC_IRQHandler+0x296>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a8a      	ldr	r2, [pc, #552]	@ (8002ec8 <HAL_ADC_IRQHandler+0x4b0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d002      	beq.n	8002caa <HAL_ADC_IRQHandler+0x292>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	e003      	b.n	8002cb2 <HAL_ADC_IRQHandler+0x29a>
 8002caa:	4b88      	ldr	r3, [pc, #544]	@ (8002ecc <HAL_ADC_IRQHandler+0x4b4>)
 8002cac:	e001      	b.n	8002cb2 <HAL_ADC_IRQHandler+0x29a>
 8002cae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002cb2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d047      	beq.n	8002d50 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <HAL_ADC_IRQHandler+0x2c2>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d03f      	beq.n	8002d50 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d13a      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce4:	2b40      	cmp	r3, #64	@ 0x40
 8002ce6:	d133      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d12e      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fbeb 	bl	80024d2 <LL_ADC_INJ_IsConversionOngoing>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d11a      	bne.n	8002d38 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d10:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d112      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d36:	e00b      	b.n	8002d50 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3c:	f043 0210 	orr.w	r2, r3, #16
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d48:	f043 0201 	orr.w	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 ff67 	bl	8003c24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2260      	movs	r2, #96	@ 0x60
 8002d5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d011      	beq.n	8002d8c <HAL_ADC_IRQHandler+0x374>
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00c      	beq.n	8002d8c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d76:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f8be 	bl	8002f00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2280      	movs	r2, #128	@ 0x80
 8002d8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d012      	beq.n	8002dbc <HAL_ADC_IRQHandler+0x3a4>
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00d      	beq.n	8002dbc <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 ff4d 	bl	8003c4c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d012      	beq.n	8002dec <HAL_ADC_IRQHandler+0x3d4>
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00d      	beq.n	8002dec <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 ff3f 	bl	8003c60 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d043      	beq.n	8002e7e <HAL_ADC_IRQHandler+0x466>
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d03e      	beq.n	8002e7e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e0c:	e021      	b.n	8002e52 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d015      	beq.n	8002e40 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e1c:	d004      	beq.n	8002e28 <HAL_ADC_IRQHandler+0x410>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a28      	ldr	r2, [pc, #160]	@ (8002ec4 <HAL_ADC_IRQHandler+0x4ac>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d101      	bne.n	8002e2c <HAL_ADC_IRQHandler+0x414>
 8002e28:	4b29      	ldr	r3, [pc, #164]	@ (8002ed0 <HAL_ADC_IRQHandler+0x4b8>)
 8002e2a:	e000      	b.n	8002e2e <HAL_ADC_IRQHandler+0x416>
 8002e2c:	4b29      	ldr	r3, [pc, #164]	@ (8002ed4 <HAL_ADC_IRQHandler+0x4bc>)
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fa7e 	bl	8002330 <LL_ADC_GetMultiDMATransfer>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3e:	e008      	b.n	8002e52 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d10e      	bne.n	8002e76 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e68:	f043 0202 	orr.w	r2, r3, #2
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f84f 	bl	8002f14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2210      	movs	r2, #16
 8002e7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d018      	beq.n	8002eba <HAL_ADC_IRQHandler+0x4a2>
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d013      	beq.n	8002eba <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e96:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea2:	f043 0208 	orr.w	r2, r3, #8
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eb2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 febf 	bl	8003c38 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002eba:	bf00      	nop
 8002ebc:	3728      	adds	r7, #40	@ 0x28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	50000100 	.word	0x50000100
 8002ec8:	50000500 	.word	0x50000500
 8002ecc:	50000400 	.word	0x50000400
 8002ed0:	50000300 	.word	0x50000300
 8002ed4:	50000700 	.word	0x50000700

08002ed8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b0b6      	sub	sp, #216	@ 0xd8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d102      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x24>
 8002f46:	2302      	movs	r3, #2
 8002f48:	f000 bc13 	b.w	8003772 <HAL_ADC_ConfigChannel+0x84a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff faa7 	bl	80024ac <LL_ADC_REG_IsConversionOngoing>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f040 83f3 	bne.w	800374c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f7ff f93f 	bl	80021f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fa95 	bl	80024ac <LL_ADC_REG_IsConversionOngoing>
 8002f82:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff faa1 	bl	80024d2 <LL_ADC_INJ_IsConversionOngoing>
 8002f90:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f040 81d9 	bne.w	8003350 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f040 81d4 	bne.w	8003350 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fb0:	d10f      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f7ff f959 	bl	8002274 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff f8ed 	bl	80021aa <LL_ADC_SetSamplingTimeCommonConfig>
 8002fd0:	e00e      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6819      	ldr	r1, [r3, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f7ff f948 	bl	8002274 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff f8dd 	bl	80021aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	08db      	lsrs	r3, r3, #3
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b04      	cmp	r3, #4
 8003010:	d022      	beq.n	8003058 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6919      	ldr	r1, [r3, #16]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003022:	f7ff f837 	bl	8002094 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6919      	ldr	r1, [r3, #16]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	461a      	mov	r2, r3
 8003034:	f7ff f883 	bl	800213e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003044:	2b01      	cmp	r3, #1
 8003046:	d102      	bne.n	800304e <HAL_ADC_ConfigChannel+0x126>
 8003048:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800304c:	e000      	b.n	8003050 <HAL_ADC_ConfigChannel+0x128>
 800304e:	2300      	movs	r3, #0
 8003050:	461a      	mov	r2, r3
 8003052:	f7ff f88f 	bl	8002174 <LL_ADC_SetOffsetSaturation>
 8003056:	e17b      	b.n	8003350 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff f83c 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8003064:	4603      	mov	r3, r0
 8003066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10a      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x15c>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff f831 	bl	80020dc <LL_ADC_GetOffsetChannel>
 800307a:	4603      	mov	r3, r0
 800307c:	0e9b      	lsrs	r3, r3, #26
 800307e:	f003 021f 	and.w	r2, r3, #31
 8003082:	e01e      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x19a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2100      	movs	r1, #0
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff f826 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8003090:	4603      	mov	r3, r0
 8003092:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80030b2:	2320      	movs	r3, #32
 80030b4:	e004      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80030b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d105      	bne.n	80030da <HAL_ADC_ConfigChannel+0x1b2>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	0e9b      	lsrs	r3, r3, #26
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	e018      	b.n	800310c <HAL_ADC_ConfigChannel+0x1e4>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030e6:	fa93 f3a3 	rbit	r3, r3
 80030ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80030ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80030f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80030fe:	2320      	movs	r3, #32
 8003100:	e004      	b.n	800310c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003102:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800310c:	429a      	cmp	r2, r3
 800310e:	d106      	bne.n	800311e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2200      	movs	r2, #0
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f7fe fff5 	bl	8002108 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2101      	movs	r1, #1
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe ffd9 	bl	80020dc <LL_ADC_GetOffsetChannel>
 800312a:	4603      	mov	r3, r0
 800312c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10a      	bne.n	800314a <HAL_ADC_ConfigChannel+0x222>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2101      	movs	r1, #1
 800313a:	4618      	mov	r0, r3
 800313c:	f7fe ffce 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8003140:	4603      	mov	r3, r0
 8003142:	0e9b      	lsrs	r3, r3, #26
 8003144:	f003 021f 	and.w	r2, r3, #31
 8003148:	e01e      	b.n	8003188 <HAL_ADC_ConfigChannel+0x260>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2101      	movs	r1, #1
 8003150:	4618      	mov	r0, r3
 8003152:	f7fe ffc3 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8003156:	4603      	mov	r3, r0
 8003158:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003168:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800316c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003170:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003178:	2320      	movs	r3, #32
 800317a:	e004      	b.n	8003186 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800317c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003190:	2b00      	cmp	r3, #0
 8003192:	d105      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x278>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	0e9b      	lsrs	r3, r3, #26
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	e018      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x2aa>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80031b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80031bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80031c4:	2320      	movs	r3, #32
 80031c6:	e004      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80031c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031cc:	fab3 f383 	clz	r3, r3
 80031d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d106      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	2101      	movs	r1, #1
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fe ff92 	bl	8002108 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2102      	movs	r1, #2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe ff76 	bl	80020dc <LL_ADC_GetOffsetChannel>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x2e8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2102      	movs	r1, #2
 8003200:	4618      	mov	r0, r3
 8003202:	f7fe ff6b 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8003206:	4603      	mov	r3, r0
 8003208:	0e9b      	lsrs	r3, r3, #26
 800320a:	f003 021f 	and.w	r2, r3, #31
 800320e:	e01e      	b.n	800324e <HAL_ADC_ConfigChannel+0x326>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2102      	movs	r1, #2
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe ff60 	bl	80020dc <LL_ADC_GetOffsetChannel>
 800321c:	4603      	mov	r3, r0
 800321e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800322e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003232:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003236:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800323e:	2320      	movs	r3, #32
 8003240:	e004      	b.n	800324c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003242:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003256:	2b00      	cmp	r3, #0
 8003258:	d105      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x33e>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	0e9b      	lsrs	r3, r3, #26
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	e016      	b.n	8003294 <HAL_ADC_ConfigChannel+0x36c>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003278:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800327a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800327e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003286:	2320      	movs	r3, #32
 8003288:	e004      	b.n	8003294 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800328a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800328e:	fab3 f383 	clz	r3, r3
 8003292:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003294:	429a      	cmp	r2, r3
 8003296:	d106      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2200      	movs	r2, #0
 800329e:	2102      	movs	r1, #2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe ff31 	bl	8002108 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2103      	movs	r1, #3
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fe ff15 	bl	80020dc <LL_ADC_GetOffsetChannel>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10a      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x3aa>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2103      	movs	r1, #3
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe ff0a 	bl	80020dc <LL_ADC_GetOffsetChannel>
 80032c8:	4603      	mov	r3, r0
 80032ca:	0e9b      	lsrs	r3, r3, #26
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	e017      	b.n	8003302 <HAL_ADC_ConfigChannel+0x3da>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2103      	movs	r1, #3
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fe feff 	bl	80020dc <LL_ADC_GetOffsetChannel>
 80032de:	4603      	mov	r3, r0
 80032e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80032ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032ec:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80032ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80032f4:	2320      	movs	r3, #32
 80032f6:	e003      	b.n	8003300 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80032f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330a:	2b00      	cmp	r3, #0
 800330c:	d105      	bne.n	800331a <HAL_ADC_ConfigChannel+0x3f2>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	0e9b      	lsrs	r3, r3, #26
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	e011      	b.n	800333e <HAL_ADC_ConfigChannel+0x416>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800332a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800332c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003332:	2320      	movs	r3, #32
 8003334:	e003      	b.n	800333e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003336:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003338:	fab3 f383 	clz	r3, r3
 800333c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800333e:	429a      	cmp	r2, r3
 8003340:	d106      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2200      	movs	r2, #0
 8003348:	2103      	movs	r1, #3
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe fedc 	bl	8002108 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff f86f 	bl	8002438 <LL_ADC_IsEnabled>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	f040 813d 	bne.w	80035dc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	6819      	ldr	r1, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	461a      	mov	r2, r3
 8003370:	f7fe ffac 	bl	80022cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4aa2      	ldr	r2, [pc, #648]	@ (8003604 <HAL_ADC_ConfigChannel+0x6dc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	f040 812e 	bne.w	80035dc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x480>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	0e9b      	lsrs	r3, r3, #26
 8003396:	3301      	adds	r3, #1
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	2b09      	cmp	r3, #9
 800339e:	bf94      	ite	ls
 80033a0:	2301      	movls	r3, #1
 80033a2:	2300      	movhi	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	e019      	b.n	80033dc <HAL_ADC_ConfigChannel+0x4b4>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033b0:	fa93 f3a3 	rbit	r3, r3
 80033b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80033b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033b8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80033ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80033c0:	2320      	movs	r3, #32
 80033c2:	e003      	b.n	80033cc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80033c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033c6:	fab3 f383 	clz	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	3301      	adds	r3, #1
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	2b09      	cmp	r3, #9
 80033d4:	bf94      	ite	ls
 80033d6:	2301      	movls	r3, #1
 80033d8:	2300      	movhi	r3, #0
 80033da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d079      	beq.n	80034d4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d107      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x4d4>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0e9b      	lsrs	r3, r3, #26
 80033f2:	3301      	adds	r3, #1
 80033f4:	069b      	lsls	r3, r3, #26
 80033f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033fa:	e015      	b.n	8003428 <HAL_ADC_ConfigChannel+0x500>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003404:	fa93 f3a3 	rbit	r3, r3
 8003408:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800340a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800340c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800340e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003414:	2320      	movs	r3, #32
 8003416:	e003      	b.n	8003420 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	3301      	adds	r3, #1
 8003422:	069b      	lsls	r3, r3, #26
 8003424:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003430:	2b00      	cmp	r3, #0
 8003432:	d109      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x520>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	0e9b      	lsrs	r3, r3, #26
 800343a:	3301      	adds	r3, #1
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	2101      	movs	r1, #1
 8003442:	fa01 f303 	lsl.w	r3, r1, r3
 8003446:	e017      	b.n	8003478 <HAL_ADC_ConfigChannel+0x550>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003450:	fa93 f3a3 	rbit	r3, r3
 8003454:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003458:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800345a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003460:	2320      	movs	r3, #32
 8003462:	e003      	b.n	800346c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	3301      	adds	r3, #1
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	2101      	movs	r1, #1
 8003474:	fa01 f303 	lsl.w	r3, r1, r3
 8003478:	ea42 0103 	orr.w	r1, r2, r3
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10a      	bne.n	800349e <HAL_ADC_ConfigChannel+0x576>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	0e9b      	lsrs	r3, r3, #26
 800348e:	3301      	adds	r3, #1
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	4613      	mov	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4413      	add	r3, r2
 800349a:	051b      	lsls	r3, r3, #20
 800349c:	e018      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x5a8>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80034ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80034b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80034b6:	2320      	movs	r3, #32
 80034b8:	e003      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80034ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	3301      	adds	r3, #1
 80034c4:	f003 021f 	and.w	r2, r3, #31
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034d0:	430b      	orrs	r3, r1
 80034d2:	e07e      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d107      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x5c8>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	0e9b      	lsrs	r3, r3, #26
 80034e6:	3301      	adds	r3, #1
 80034e8:	069b      	lsls	r3, r3, #26
 80034ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034ee:	e015      	b.n	800351c <HAL_ADC_ConfigChannel+0x5f4>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f8:	fa93 f3a3 	rbit	r3, r3
 80034fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80034fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003500:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003508:	2320      	movs	r3, #32
 800350a:	e003      	b.n	8003514 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800350c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350e:	fab3 f383 	clz	r3, r3
 8003512:	b2db      	uxtb	r3, r3
 8003514:	3301      	adds	r3, #1
 8003516:	069b      	lsls	r3, r3, #26
 8003518:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <HAL_ADC_ConfigChannel+0x614>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	0e9b      	lsrs	r3, r3, #26
 800352e:	3301      	adds	r3, #1
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	2101      	movs	r1, #1
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	e017      	b.n	800356c <HAL_ADC_ConfigChannel+0x644>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	fa93 f3a3 	rbit	r3, r3
 8003548:	61fb      	str	r3, [r7, #28]
  return result;
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003554:	2320      	movs	r3, #32
 8003556:	e003      	b.n	8003560 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	3301      	adds	r3, #1
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	2101      	movs	r1, #1
 8003568:	fa01 f303 	lsl.w	r3, r1, r3
 800356c:	ea42 0103 	orr.w	r1, r2, r3
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10d      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x670>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	0e9b      	lsrs	r3, r3, #26
 8003582:	3301      	adds	r3, #1
 8003584:	f003 021f 	and.w	r2, r3, #31
 8003588:	4613      	mov	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4413      	add	r3, r2
 800358e:	3b1e      	subs	r3, #30
 8003590:	051b      	lsls	r3, r3, #20
 8003592:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003596:	e01b      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x6a8>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	fa93 f3a3 	rbit	r3, r3
 80035a4:	613b      	str	r3, [r7, #16]
  return result;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80035b0:	2320      	movs	r3, #32
 80035b2:	e003      	b.n	80035bc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	3301      	adds	r3, #1
 80035be:	f003 021f 	and.w	r2, r3, #31
 80035c2:	4613      	mov	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	4413      	add	r3, r2
 80035c8:	3b1e      	subs	r3, #30
 80035ca:	051b      	lsls	r3, r3, #20
 80035cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d6:	4619      	mov	r1, r3
 80035d8:	f7fe fe4c 	bl	8002274 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b09      	ldr	r3, [pc, #36]	@ (8003608 <HAL_ADC_ConfigChannel+0x6e0>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80be 	beq.w	8003766 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035f2:	d004      	beq.n	80035fe <HAL_ADC_ConfigChannel+0x6d6>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a04      	ldr	r2, [pc, #16]	@ (800360c <HAL_ADC_ConfigChannel+0x6e4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d10a      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x6ec>
 80035fe:	4b04      	ldr	r3, [pc, #16]	@ (8003610 <HAL_ADC_ConfigChannel+0x6e8>)
 8003600:	e009      	b.n	8003616 <HAL_ADC_ConfigChannel+0x6ee>
 8003602:	bf00      	nop
 8003604:	407f0000 	.word	0x407f0000
 8003608:	80080000 	.word	0x80080000
 800360c:	50000100 	.word	0x50000100
 8003610:	50000300 	.word	0x50000300
 8003614:	4b59      	ldr	r3, [pc, #356]	@ (800377c <HAL_ADC_ConfigChannel+0x854>)
 8003616:	4618      	mov	r0, r3
 8003618:	f7fe fd2e 	bl	8002078 <LL_ADC_GetCommonPathInternalCh>
 800361c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a56      	ldr	r2, [pc, #344]	@ (8003780 <HAL_ADC_ConfigChannel+0x858>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d004      	beq.n	8003634 <HAL_ADC_ConfigChannel+0x70c>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a55      	ldr	r2, [pc, #340]	@ (8003784 <HAL_ADC_ConfigChannel+0x85c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d13a      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003634:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003638:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d134      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003648:	d005      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x72e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a4e      	ldr	r2, [pc, #312]	@ (8003788 <HAL_ADC_ConfigChannel+0x860>)
 8003650:	4293      	cmp	r3, r2
 8003652:	f040 8085 	bne.w	8003760 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800365e:	d004      	beq.n	800366a <HAL_ADC_ConfigChannel+0x742>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a49      	ldr	r2, [pc, #292]	@ (800378c <HAL_ADC_ConfigChannel+0x864>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d101      	bne.n	800366e <HAL_ADC_ConfigChannel+0x746>
 800366a:	4a49      	ldr	r2, [pc, #292]	@ (8003790 <HAL_ADC_ConfigChannel+0x868>)
 800366c:	e000      	b.n	8003670 <HAL_ADC_ConfigChannel+0x748>
 800366e:	4a43      	ldr	r2, [pc, #268]	@ (800377c <HAL_ADC_ConfigChannel+0x854>)
 8003670:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003674:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003678:	4619      	mov	r1, r3
 800367a:	4610      	mov	r0, r2
 800367c:	f7fe fce9 	bl	8002052 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003680:	4b44      	ldr	r3, [pc, #272]	@ (8003794 <HAL_ADC_ConfigChannel+0x86c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	099b      	lsrs	r3, r3, #6
 8003686:	4a44      	ldr	r2, [pc, #272]	@ (8003798 <HAL_ADC_ConfigChannel+0x870>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	099b      	lsrs	r3, r3, #6
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4613      	mov	r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800369a:	e002      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3b01      	subs	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f9      	bne.n	800369c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036a8:	e05a      	b.n	8003760 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a3b      	ldr	r2, [pc, #236]	@ (800379c <HAL_ADC_ConfigChannel+0x874>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d125      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d11f      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a31      	ldr	r2, [pc, #196]	@ (800378c <HAL_ADC_ConfigChannel+0x864>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d104      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x7ac>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a34      	ldr	r2, [pc, #208]	@ (80037a0 <HAL_ADC_ConfigChannel+0x878>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d047      	beq.n	8003764 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036dc:	d004      	beq.n	80036e8 <HAL_ADC_ConfigChannel+0x7c0>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2a      	ldr	r2, [pc, #168]	@ (800378c <HAL_ADC_ConfigChannel+0x864>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x7c4>
 80036e8:	4a29      	ldr	r2, [pc, #164]	@ (8003790 <HAL_ADC_ConfigChannel+0x868>)
 80036ea:	e000      	b.n	80036ee <HAL_ADC_ConfigChannel+0x7c6>
 80036ec:	4a23      	ldr	r2, [pc, #140]	@ (800377c <HAL_ADC_ConfigChannel+0x854>)
 80036ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036f6:	4619      	mov	r1, r3
 80036f8:	4610      	mov	r0, r2
 80036fa:	f7fe fcaa 	bl	8002052 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036fe:	e031      	b.n	8003764 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a27      	ldr	r2, [pc, #156]	@ (80037a4 <HAL_ADC_ConfigChannel+0x87c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d12d      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800370a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800370e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d127      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1c      	ldr	r2, [pc, #112]	@ (800378c <HAL_ADC_ConfigChannel+0x864>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d022      	beq.n	8003766 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003728:	d004      	beq.n	8003734 <HAL_ADC_ConfigChannel+0x80c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a17      	ldr	r2, [pc, #92]	@ (800378c <HAL_ADC_ConfigChannel+0x864>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d101      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x810>
 8003734:	4a16      	ldr	r2, [pc, #88]	@ (8003790 <HAL_ADC_ConfigChannel+0x868>)
 8003736:	e000      	b.n	800373a <HAL_ADC_ConfigChannel+0x812>
 8003738:	4a10      	ldr	r2, [pc, #64]	@ (800377c <HAL_ADC_ConfigChannel+0x854>)
 800373a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800373e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003742:	4619      	mov	r1, r3
 8003744:	4610      	mov	r0, r2
 8003746:	f7fe fc84 	bl	8002052 <LL_ADC_SetCommonPathInternalCh>
 800374a:	e00c      	b.n	8003766 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003750:	f043 0220 	orr.w	r2, r3, #32
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800375e:	e002      	b.n	8003766 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003760:	bf00      	nop
 8003762:	e000      	b.n	8003766 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003764:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800376e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003772:	4618      	mov	r0, r3
 8003774:	37d8      	adds	r7, #216	@ 0xd8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	50000700 	.word	0x50000700
 8003780:	c3210000 	.word	0xc3210000
 8003784:	90c00010 	.word	0x90c00010
 8003788:	50000600 	.word	0x50000600
 800378c:	50000100 	.word	0x50000100
 8003790:	50000300 	.word	0x50000300
 8003794:	20000000 	.word	0x20000000
 8003798:	053e2d63 	.word	0x053e2d63
 800379c:	c7520000 	.word	0xc7520000
 80037a0:	50000500 	.word	0x50000500
 80037a4:	cb840000 	.word	0xcb840000

080037a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe fe3d 	bl	8002438 <LL_ADC_IsEnabled>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d176      	bne.n	80038b2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	4b3c      	ldr	r3, [pc, #240]	@ (80038bc <ADC_Enable+0x114>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00d      	beq.n	80037ee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d6:	f043 0210 	orr.w	r2, r3, #16
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e2:	f043 0201 	orr.w	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e062      	b.n	80038b4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fe fdf8 	bl	80023e8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003800:	d004      	beq.n	800380c <ADC_Enable+0x64>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a2e      	ldr	r2, [pc, #184]	@ (80038c0 <ADC_Enable+0x118>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d101      	bne.n	8003810 <ADC_Enable+0x68>
 800380c:	4b2d      	ldr	r3, [pc, #180]	@ (80038c4 <ADC_Enable+0x11c>)
 800380e:	e000      	b.n	8003812 <ADC_Enable+0x6a>
 8003810:	4b2d      	ldr	r3, [pc, #180]	@ (80038c8 <ADC_Enable+0x120>)
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe fc30 	bl	8002078 <LL_ADC_GetCommonPathInternalCh>
 8003818:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800381a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800381e:	2b00      	cmp	r3, #0
 8003820:	d013      	beq.n	800384a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003822:	4b2a      	ldr	r3, [pc, #168]	@ (80038cc <ADC_Enable+0x124>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	099b      	lsrs	r3, r3, #6
 8003828:	4a29      	ldr	r2, [pc, #164]	@ (80038d0 <ADC_Enable+0x128>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	099b      	lsrs	r3, r3, #6
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	4613      	mov	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800383c:	e002      	b.n	8003844 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	3b01      	subs	r3, #1
 8003842:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f9      	bne.n	800383e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800384a:	f7fe fbe3 	bl	8002014 <HAL_GetTick>
 800384e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003850:	e028      	b.n	80038a4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fe fdee 	bl	8002438 <LL_ADC_IsEnabled>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d104      	bne.n	800386c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe fdbe 	bl	80023e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800386c:	f7fe fbd2 	bl	8002014 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d914      	bls.n	80038a4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d00d      	beq.n	80038a4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388c:	f043 0210 	orr.w	r2, r3, #16
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003898:	f043 0201 	orr.w	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e007      	b.n	80038b4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d1cf      	bne.n	8003852 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	8000003f 	.word	0x8000003f
 80038c0:	50000100 	.word	0x50000100
 80038c4:	50000300 	.word	0x50000300
 80038c8:	50000700 	.word	0x50000700
 80038cc:	20000000 	.word	0x20000000
 80038d0:	053e2d63 	.word	0x053e2d63

080038d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe fdbc 	bl	800245e <LL_ADC_IsDisableOngoing>
 80038e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fe fda3 	bl	8002438 <LL_ADC_IsEnabled>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d047      	beq.n	8003988 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d144      	bne.n	8003988 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 030d 	and.w	r3, r3, #13
 8003908:	2b01      	cmp	r3, #1
 800390a:	d10c      	bne.n	8003926 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe fd7d 	bl	8002410 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2203      	movs	r2, #3
 800391c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800391e:	f7fe fb79 	bl	8002014 <HAL_GetTick>
 8003922:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003924:	e029      	b.n	800397a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392a:	f043 0210 	orr.w	r2, r3, #16
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003936:	f043 0201 	orr.w	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e023      	b.n	800398a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003942:	f7fe fb67 	bl	8002014 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d914      	bls.n	800397a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00d      	beq.n	800397a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003962:	f043 0210 	orr.w	r2, r3, #16
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396e:	f043 0201 	orr.w	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e007      	b.n	800398a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1dc      	bne.n	8003942 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d14b      	bne.n	8003a44 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d021      	beq.n	8003a0a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe fc00 	bl	80021d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d032      	beq.n	8003a3c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d12b      	bne.n	8003a3c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d11f      	bne.n	8003a3c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a00:	f043 0201 	orr.w	r2, r3, #1
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a08:	e018      	b.n	8003a3c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d111      	bne.n	8003a3c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d105      	bne.n	8003a3c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a34:	f043 0201 	orr.w	r2, r3, #1
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f7ff fa4b 	bl	8002ed8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a42:	e00e      	b.n	8003a62 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f7ff fa5f 	bl	8002f14 <HAL_ADC_ErrorCallback>
}
 8003a56:	e004      	b.n	8003a62 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	4798      	blx	r3
}
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f7ff fa37 	bl	8002eec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a98:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa4:	f043 0204 	orr.w	r2, r3, #4
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f7ff fa31 	bl	8002f14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <LL_ADC_IsEnabled>:
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <LL_ADC_IsEnabled+0x18>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <LL_ADC_IsEnabled+0x1a>
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <LL_ADC_StartCalibration>:
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003af2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	609a      	str	r2, [r3, #8]
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <LL_ADC_IsCalibrationOnGoing>:
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b26:	d101      	bne.n	8003b2c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <LL_ADC_REG_IsConversionOngoing>:
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d101      	bne.n	8003b52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_ADCEx_Calibration_Start+0x1c>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e04d      	b.n	8003c18 <HAL_ADCEx_Calibration_Start+0xb8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff fea5 	bl	80038d4 <ADC_Disable>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d136      	bne.n	8003c02 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b98:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b9c:	f023 0302 	bic.w	r3, r3, #2
 8003ba0:	f043 0202 	orr.w	r2, r3, #2
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6839      	ldr	r1, [r7, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff ff96 	bl	8003ae0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bb4:	e014      	b.n	8003be0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4a18      	ldr	r2, [pc, #96]	@ (8003c20 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d90d      	bls.n	8003be0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc8:	f023 0312 	bic.w	r3, r3, #18
 8003bcc:	f043 0210 	orr.w	r2, r3, #16
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e01b      	b.n	8003c18 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff94 	bl	8003b12 <LL_ADC_IsCalibrationOnGoing>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e2      	bne.n	8003bb6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf4:	f023 0303 	bic.w	r3, r3, #3
 8003bf8:	f043 0201 	orr.w	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c00:	e005      	b.n	8003c0e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c06:	f043 0210 	orr.w	r2, r3, #16
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	0004de01 	.word	0x0004de01

08003c24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003c88:	b590      	push	{r4, r7, lr}
 8003c8a:	b0a1      	sub	sp, #132	@ 0x84
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e0e7      	b.n	8003e76 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003cae:	2300      	movs	r3, #0
 8003cb0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cbe:	d102      	bne.n	8003cc6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003cc0:	4b6f      	ldr	r3, [pc, #444]	@ (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	e009      	b.n	8003cda <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a6e      	ldr	r2, [pc, #440]	@ (8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d102      	bne.n	8003cd6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003cd0:	4b6d      	ldr	r3, [pc, #436]	@ (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	e001      	b.n	8003cda <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce4:	f043 0220 	orr.w	r2, r3, #32
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e0be      	b.n	8003e76 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff ff1d 	bl	8003b3a <LL_ADC_REG_IsConversionOngoing>
 8003d00:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff ff17 	bl	8003b3a <LL_ADC_REG_IsConversionOngoing>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f040 80a0 	bne.w	8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003d14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f040 809c 	bne.w	8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d24:	d004      	beq.n	8003d30 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a55      	ldr	r2, [pc, #340]	@ (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d101      	bne.n	8003d34 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003d30:	4b56      	ldr	r3, [pc, #344]	@ (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003d32:	e000      	b.n	8003d36 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003d34:	4b56      	ldr	r3, [pc, #344]	@ (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003d36:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d04b      	beq.n	8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d52:	035b      	lsls	r3, r3, #13
 8003d54:	430b      	orrs	r3, r1
 8003d56:	431a      	orrs	r2, r3
 8003d58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d64:	d004      	beq.n	8003d70 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a45      	ldr	r2, [pc, #276]	@ (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d10f      	bne.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003d70:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d74:	f7ff fea1 	bl	8003aba <LL_ADC_IsEnabled>
 8003d78:	4604      	mov	r4, r0
 8003d7a:	4841      	ldr	r0, [pc, #260]	@ (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d7c:	f7ff fe9d 	bl	8003aba <LL_ADC_IsEnabled>
 8003d80:	4603      	mov	r3, r0
 8003d82:	4323      	orrs	r3, r4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	e012      	b.n	8003db6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003d90:	483c      	ldr	r0, [pc, #240]	@ (8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d92:	f7ff fe92 	bl	8003aba <LL_ADC_IsEnabled>
 8003d96:	4604      	mov	r4, r0
 8003d98:	483b      	ldr	r0, [pc, #236]	@ (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d9a:	f7ff fe8e 	bl	8003aba <LL_ADC_IsEnabled>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	431c      	orrs	r4, r3
 8003da2:	483c      	ldr	r0, [pc, #240]	@ (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003da4:	f7ff fe89 	bl	8003aba <LL_ADC_IsEnabled>
 8003da8:	4603      	mov	r3, r0
 8003daa:	4323      	orrs	r3, r4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	bf0c      	ite	eq
 8003db0:	2301      	moveq	r3, #1
 8003db2:	2300      	movne	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d056      	beq.n	8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003dc2:	f023 030f 	bic.w	r3, r3, #15
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	6811      	ldr	r1, [r2, #0]
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	6892      	ldr	r2, [r2, #8]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dd4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003dd6:	e047      	b.n	8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003dd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003de0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003de2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dec:	d004      	beq.n	8003df8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a23      	ldr	r2, [pc, #140]	@ (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d10f      	bne.n	8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003df8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003dfc:	f7ff fe5d 	bl	8003aba <LL_ADC_IsEnabled>
 8003e00:	4604      	mov	r4, r0
 8003e02:	481f      	ldr	r0, [pc, #124]	@ (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e04:	f7ff fe59 	bl	8003aba <LL_ADC_IsEnabled>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	4323      	orrs	r3, r4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e012      	b.n	8003e3e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003e18:	481a      	ldr	r0, [pc, #104]	@ (8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e1a:	f7ff fe4e 	bl	8003aba <LL_ADC_IsEnabled>
 8003e1e:	4604      	mov	r4, r0
 8003e20:	4819      	ldr	r0, [pc, #100]	@ (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e22:	f7ff fe4a 	bl	8003aba <LL_ADC_IsEnabled>
 8003e26:	4603      	mov	r3, r0
 8003e28:	431c      	orrs	r4, r3
 8003e2a:	481a      	ldr	r0, [pc, #104]	@ (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003e2c:	f7ff fe45 	bl	8003aba <LL_ADC_IsEnabled>
 8003e30:	4603      	mov	r3, r0
 8003e32:	4323      	orrs	r3, r4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	bf0c      	ite	eq
 8003e38:	2301      	moveq	r3, #1
 8003e3a:	2300      	movne	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d012      	beq.n	8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003e4a:	f023 030f 	bic.w	r3, r3, #15
 8003e4e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003e50:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e52:	e009      	b.n	8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e58:	f043 0220 	orr.w	r2, r3, #32
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003e66:	e000      	b.n	8003e6a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e72:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3784      	adds	r7, #132	@ 0x84
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd90      	pop	{r4, r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	50000100 	.word	0x50000100
 8003e84:	50000400 	.word	0x50000400
 8003e88:	50000500 	.word	0x50000500
 8003e8c:	50000300 	.word	0x50000300
 8003e90:	50000700 	.word	0x50000700
 8003e94:	50000600 	.word	0x50000600

08003e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8003edc <__NVIC_SetPriorityGrouping+0x44>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eca:	4a04      	ldr	r2, [pc, #16]	@ (8003edc <__NVIC_SetPriorityGrouping+0x44>)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	60d3      	str	r3, [r2, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ee4:	4b04      	ldr	r3, [pc, #16]	@ (8003ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	0a1b      	lsrs	r3, r3, #8
 8003eea:	f003 0307 	and.w	r3, r3, #7
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	db0b      	blt.n	8003f26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	f003 021f 	and.w	r2, r3, #31
 8003f14:	4907      	ldr	r1, [pc, #28]	@ (8003f34 <__NVIC_EnableIRQ+0x38>)
 8003f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	e000e100 	.word	0xe000e100

08003f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	6039      	str	r1, [r7, #0]
 8003f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	db0a      	blt.n	8003f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	490c      	ldr	r1, [pc, #48]	@ (8003f84 <__NVIC_SetPriority+0x4c>)
 8003f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f56:	0112      	lsls	r2, r2, #4
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f60:	e00a      	b.n	8003f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	4908      	ldr	r1, [pc, #32]	@ (8003f88 <__NVIC_SetPriority+0x50>)
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	3b04      	subs	r3, #4
 8003f70:	0112      	lsls	r2, r2, #4
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	440b      	add	r3, r1
 8003f76:	761a      	strb	r2, [r3, #24]
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	e000e100 	.word	0xe000e100
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b089      	sub	sp, #36	@ 0x24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f1c3 0307 	rsb	r3, r3, #7
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	bf28      	it	cs
 8003faa:	2304      	movcs	r3, #4
 8003fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	2b06      	cmp	r3, #6
 8003fb4:	d902      	bls.n	8003fbc <NVIC_EncodePriority+0x30>
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3b03      	subs	r3, #3
 8003fba:	e000      	b.n	8003fbe <NVIC_EncodePriority+0x32>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43da      	mvns	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	401a      	ands	r2, r3
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	fa01 f303 	lsl.w	r3, r1, r3
 8003fde:	43d9      	mvns	r1, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe4:	4313      	orrs	r3, r2
         );
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3724      	adds	r7, #36	@ 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff ff4c 	bl	8003e98 <__NVIC_SetPriorityGrouping>
}
 8004000:	bf00      	nop
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004016:	f7ff ff63 	bl	8003ee0 <__NVIC_GetPriorityGrouping>
 800401a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	6978      	ldr	r0, [r7, #20]
 8004022:	f7ff ffb3 	bl	8003f8c <NVIC_EncodePriority>
 8004026:	4602      	mov	r2, r0
 8004028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800402c:	4611      	mov	r1, r2
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff ff82 	bl	8003f38 <__NVIC_SetPriority>
}
 8004034:	bf00      	nop
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff ff56 	bl	8003efc <__NVIC_EnableIRQ>
}
 8004050:	bf00      	nop
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e08d      	b.n	8004186 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	4b47      	ldr	r3, [pc, #284]	@ (8004190 <HAL_DMA_Init+0x138>)
 8004072:	429a      	cmp	r2, r3
 8004074:	d80f      	bhi.n	8004096 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	4b45      	ldr	r3, [pc, #276]	@ (8004194 <HAL_DMA_Init+0x13c>)
 800407e:	4413      	add	r3, r2
 8004080:	4a45      	ldr	r2, [pc, #276]	@ (8004198 <HAL_DMA_Init+0x140>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	009a      	lsls	r2, r3, #2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a42      	ldr	r2, [pc, #264]	@ (800419c <HAL_DMA_Init+0x144>)
 8004092:	641a      	str	r2, [r3, #64]	@ 0x40
 8004094:	e00e      	b.n	80040b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	4b40      	ldr	r3, [pc, #256]	@ (80041a0 <HAL_DMA_Init+0x148>)
 800409e:	4413      	add	r3, r2
 80040a0:	4a3d      	ldr	r2, [pc, #244]	@ (8004198 <HAL_DMA_Init+0x140>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	091b      	lsrs	r3, r3, #4
 80040a8:	009a      	lsls	r2, r3, #2
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a3c      	ldr	r2, [pc, #240]	@ (80041a4 <HAL_DMA_Init+0x14c>)
 80040b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80040ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fa76 	bl	80045f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004114:	d102      	bne.n	800411c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004130:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d010      	beq.n	800415c <HAL_DMA_Init+0x104>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b04      	cmp	r3, #4
 8004140:	d80c      	bhi.n	800415c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fa96 	bl	8004674 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	e008      	b.n	800416e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40020407 	.word	0x40020407
 8004194:	bffdfff8 	.word	0xbffdfff8
 8004198:	cccccccd 	.word	0xcccccccd
 800419c:	40020000 	.word	0x40020000
 80041a0:	bffdfbf8 	.word	0xbffdfbf8
 80041a4:	40020400 	.word	0x40020400

080041a8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_DMA_Start_IT+0x20>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e066      	b.n	8004296 <HAL_DMA_Start_IT+0xee>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d155      	bne.n	8004288 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f9bb 	bl	800457c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 020e 	orr.w	r2, r2, #14
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	e00f      	b.n	8004240 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0204 	bic.w	r2, r2, #4
 800422e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 020a 	orr.w	r2, r2, #10
 800423e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004258:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800425c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004270:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004274:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0201 	orr.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e005      	b.n	8004294 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004290:	2302      	movs	r3, #2
 8004292:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004294:	7dfb      	ldrb	r3, [r7, #23]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d005      	beq.n	80042c2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2204      	movs	r2, #4
 80042ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
 80042c0:	e037      	b.n	8004332 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 020e 	bic.w	r2, r2, #14
 80042d0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042e0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f6:	f003 021f 	and.w	r2, r3, #31
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fe:	2101      	movs	r1, #1
 8004300:	fa01 f202 	lsl.w	r2, r1, r2
 8004304:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800430e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00c      	beq.n	8004332 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004322:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004326:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004330:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004342:	7bfb      	ldrb	r3, [r7, #15]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d00d      	beq.n	8004384 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2204      	movs	r2, #4
 800436c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
 8004382:	e047      	b.n	8004414 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 020e 	bic.w	r2, r2, #14
 8004392:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0201 	bic.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b8:	f003 021f 	and.w	r2, r3, #31
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c0:	2101      	movs	r1, #1
 80043c2:	fa01 f202 	lsl.w	r2, r1, r2
 80043c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00c      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	4798      	blx	r3
    }
  }
  return status;
 8004414:	7bfb      	ldrb	r3, [r7, #15]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2204      	movs	r2, #4
 8004440:	409a      	lsls	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4013      	ands	r3, r2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d026      	beq.n	8004498 <HAL_DMA_IRQHandler+0x7a>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d021      	beq.n	8004498 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d107      	bne.n	8004472 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0204 	bic.w	r2, r2, #4
 8004470:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004476:	f003 021f 	and.w	r2, r3, #31
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	2104      	movs	r1, #4
 8004480:	fa01 f202 	lsl.w	r2, r1, r2
 8004484:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448a:	2b00      	cmp	r3, #0
 800448c:	d071      	beq.n	8004572 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004496:	e06c      	b.n	8004572 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	2202      	movs	r2, #2
 80044a2:	409a      	lsls	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d02e      	beq.n	800450a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d029      	beq.n	800450a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 020a 	bic.w	r2, r2, #10
 80044d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e0:	f003 021f 	and.w	r2, r3, #31
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e8:	2102      	movs	r1, #2
 80044ea:	fa01 f202 	lsl.w	r2, r1, r2
 80044ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d038      	beq.n	8004572 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004508:	e033      	b.n	8004572 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	2208      	movs	r2, #8
 8004514:	409a      	lsls	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4013      	ands	r3, r2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d02a      	beq.n	8004574 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d025      	beq.n	8004574 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 020e 	bic.w	r2, r2, #14
 8004536:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453c:	f003 021f 	and.w	r2, r3, #31
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004544:	2101      	movs	r1, #1
 8004546:	fa01 f202 	lsl.w	r2, r1, r2
 800454a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004566:	2b00      	cmp	r3, #0
 8004568:	d004      	beq.n	8004574 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004572:	bf00      	nop
 8004574:	bf00      	nop
}
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004592:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004598:	2b00      	cmp	r3, #0
 800459a:	d004      	beq.n	80045a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80045a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	f003 021f 	and.w	r2, r3, #31
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	2101      	movs	r1, #1
 80045b4:	fa01 f202 	lsl.w	r2, r1, r2
 80045b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d108      	bne.n	80045dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045da:	e007      	b.n	80045ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]
}
 80045ec:	bf00      	nop
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	4b16      	ldr	r3, [pc, #88]	@ (8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004608:	429a      	cmp	r2, r3
 800460a:	d802      	bhi.n	8004612 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800460c:	4b15      	ldr	r3, [pc, #84]	@ (8004664 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	e001      	b.n	8004616 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004612:	4b15      	ldr	r3, [pc, #84]	@ (8004668 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004614:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	3b08      	subs	r3, #8
 8004622:	4a12      	ldr	r2, [pc, #72]	@ (800466c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004624:	fba2 2303 	umull	r2, r3, r2, r3
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004630:	089b      	lsrs	r3, r3, #2
 8004632:	009a      	lsls	r2, r3, #2
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4413      	add	r3, r2
 8004638:	461a      	mov	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a0b      	ldr	r2, [pc, #44]	@ (8004670 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004642:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	2201      	movs	r2, #1
 800464c:	409a      	lsls	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40020407 	.word	0x40020407
 8004664:	40020800 	.word	0x40020800
 8004668:	40020820 	.word	0x40020820
 800466c:	cccccccd 	.word	0xcccccccd
 8004670:	40020880 	.word	0x40020880

08004674 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4b0b      	ldr	r3, [pc, #44]	@ (80046b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	461a      	mov	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a08      	ldr	r2, [pc, #32]	@ (80046b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004696:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	3b01      	subs	r3, #1
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	2201      	movs	r2, #1
 80046a2:	409a      	lsls	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80046a8:	bf00      	nop
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	1000823f 	.word	0x1000823f
 80046b8:	40020940 	.word	0x40020940

080046bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80046ca:	e15a      	b.n	8004982 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	2101      	movs	r1, #1
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	4013      	ands	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 814c 	beq.w	800497c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d005      	beq.n	80046fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d130      	bne.n	800475e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	2203      	movs	r2, #3
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4013      	ands	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004732:	2201      	movs	r2, #1
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4013      	ands	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	f003 0201 	and.w	r2, r3, #1
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b03      	cmp	r3, #3
 8004768:	d017      	beq.n	800479a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	2203      	movs	r2, #3
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4013      	ands	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d123      	bne.n	80047ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	08da      	lsrs	r2, r3, #3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3208      	adds	r2, #8
 80047ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	220f      	movs	r2, #15
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4013      	ands	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	08da      	lsrs	r2, r3, #3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3208      	adds	r2, #8
 80047e8:	6939      	ldr	r1, [r7, #16]
 80047ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	2203      	movs	r2, #3
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	43db      	mvns	r3, r3
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4013      	ands	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 0203 	and.w	r2, r3, #3
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 80a6 	beq.w	800497c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004830:	4b5b      	ldr	r3, [pc, #364]	@ (80049a0 <HAL_GPIO_Init+0x2e4>)
 8004832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004834:	4a5a      	ldr	r2, [pc, #360]	@ (80049a0 <HAL_GPIO_Init+0x2e4>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	6613      	str	r3, [r2, #96]	@ 0x60
 800483c:	4b58      	ldr	r3, [pc, #352]	@ (80049a0 <HAL_GPIO_Init+0x2e4>)
 800483e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	60bb      	str	r3, [r7, #8]
 8004846:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004848:	4a56      	ldr	r2, [pc, #344]	@ (80049a4 <HAL_GPIO_Init+0x2e8>)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	089b      	lsrs	r3, r3, #2
 800484e:	3302      	adds	r3, #2
 8004850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004854:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	220f      	movs	r2, #15
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	43db      	mvns	r3, r3
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4013      	ands	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004872:	d01f      	beq.n	80048b4 <HAL_GPIO_Init+0x1f8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a4c      	ldr	r2, [pc, #304]	@ (80049a8 <HAL_GPIO_Init+0x2ec>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d019      	beq.n	80048b0 <HAL_GPIO_Init+0x1f4>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a4b      	ldr	r2, [pc, #300]	@ (80049ac <HAL_GPIO_Init+0x2f0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d013      	beq.n	80048ac <HAL_GPIO_Init+0x1f0>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a4a      	ldr	r2, [pc, #296]	@ (80049b0 <HAL_GPIO_Init+0x2f4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00d      	beq.n	80048a8 <HAL_GPIO_Init+0x1ec>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a49      	ldr	r2, [pc, #292]	@ (80049b4 <HAL_GPIO_Init+0x2f8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d007      	beq.n	80048a4 <HAL_GPIO_Init+0x1e8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a48      	ldr	r2, [pc, #288]	@ (80049b8 <HAL_GPIO_Init+0x2fc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d101      	bne.n	80048a0 <HAL_GPIO_Init+0x1e4>
 800489c:	2305      	movs	r3, #5
 800489e:	e00a      	b.n	80048b6 <HAL_GPIO_Init+0x1fa>
 80048a0:	2306      	movs	r3, #6
 80048a2:	e008      	b.n	80048b6 <HAL_GPIO_Init+0x1fa>
 80048a4:	2304      	movs	r3, #4
 80048a6:	e006      	b.n	80048b6 <HAL_GPIO_Init+0x1fa>
 80048a8:	2303      	movs	r3, #3
 80048aa:	e004      	b.n	80048b6 <HAL_GPIO_Init+0x1fa>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e002      	b.n	80048b6 <HAL_GPIO_Init+0x1fa>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <HAL_GPIO_Init+0x1fa>
 80048b4:	2300      	movs	r3, #0
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	f002 0203 	and.w	r2, r2, #3
 80048bc:	0092      	lsls	r2, r2, #2
 80048be:	4093      	lsls	r3, r2
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048c6:	4937      	ldr	r1, [pc, #220]	@ (80049a4 <HAL_GPIO_Init+0x2e8>)
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	089b      	lsrs	r3, r3, #2
 80048cc:	3302      	adds	r3, #2
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048d4:	4b39      	ldr	r3, [pc, #228]	@ (80049bc <HAL_GPIO_Init+0x300>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	43db      	mvns	r3, r3
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4013      	ands	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048f8:	4a30      	ldr	r2, [pc, #192]	@ (80049bc <HAL_GPIO_Init+0x300>)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048fe:	4b2f      	ldr	r3, [pc, #188]	@ (80049bc <HAL_GPIO_Init+0x300>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	43db      	mvns	r3, r3
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4013      	ands	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004922:	4a26      	ldr	r2, [pc, #152]	@ (80049bc <HAL_GPIO_Init+0x300>)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004928:	4b24      	ldr	r3, [pc, #144]	@ (80049bc <HAL_GPIO_Init+0x300>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	43db      	mvns	r3, r3
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4013      	ands	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800494c:	4a1b      	ldr	r2, [pc, #108]	@ (80049bc <HAL_GPIO_Init+0x300>)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004952:	4b1a      	ldr	r3, [pc, #104]	@ (80049bc <HAL_GPIO_Init+0x300>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	43db      	mvns	r3, r3
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4013      	ands	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004976:	4a11      	ldr	r2, [pc, #68]	@ (80049bc <HAL_GPIO_Init+0x300>)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	3301      	adds	r3, #1
 8004980:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	f47f ae9d 	bne.w	80046cc <HAL_GPIO_Init+0x10>
  }
}
 8004992:	bf00      	nop
 8004994:	bf00      	nop
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40010000 	.word	0x40010000
 80049a8:	48000400 	.word	0x48000400
 80049ac:	48000800 	.word	0x48000800
 80049b0:	48000c00 	.word	0x48000c00
 80049b4:	48001000 	.word	0x48001000
 80049b8:	48001400 	.word	0x48001400
 80049bc:	40010400 	.word	0x40010400

080049c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	807b      	strh	r3, [r7, #2]
 80049cc:	4613      	mov	r3, r2
 80049ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049d0:	787b      	ldrb	r3, [r7, #1]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049d6:	887a      	ldrh	r2, [r7, #2]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049dc:	e002      	b.n	80049e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049de:	887a      	ldrh	r2, [r7, #2]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049fa:	4b08      	ldr	r3, [pc, #32]	@ (8004a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	4013      	ands	r3, r2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d006      	beq.n	8004a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a06:	4a05      	ldr	r2, [pc, #20]	@ (8004a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 f806 	bl	8004a20 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40010400 	.word	0x40010400

08004a20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
	...

08004a38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d141      	bne.n	8004aca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a46:	4b4b      	ldr	r3, [pc, #300]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a52:	d131      	bne.n	8004ab8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a54:	4b47      	ldr	r3, [pc, #284]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a5a:	4a46      	ldr	r2, [pc, #280]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a64:	4b43      	ldr	r3, [pc, #268]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a6c:	4a41      	ldr	r2, [pc, #260]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a74:	4b40      	ldr	r3, [pc, #256]	@ (8004b78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2232      	movs	r2, #50	@ 0x32
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	4a3f      	ldr	r2, [pc, #252]	@ (8004b7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a80:	fba2 2303 	umull	r2, r3, r2, r3
 8004a84:	0c9b      	lsrs	r3, r3, #18
 8004a86:	3301      	adds	r3, #1
 8004a88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a8a:	e002      	b.n	8004a92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a92:	4b38      	ldr	r3, [pc, #224]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a9e:	d102      	bne.n	8004aa6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f2      	bne.n	8004a8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004aa6:	4b33      	ldr	r3, [pc, #204]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab2:	d158      	bne.n	8004b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e057      	b.n	8004b68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004abe:	4a2d      	ldr	r2, [pc, #180]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ac4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ac8:	e04d      	b.n	8004b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad0:	d141      	bne.n	8004b56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ad2:	4b28      	ldr	r3, [pc, #160]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ade:	d131      	bne.n	8004b44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ae0:	4b24      	ldr	r3, [pc, #144]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ae6:	4a23      	ldr	r2, [pc, #140]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004af0:	4b20      	ldr	r3, [pc, #128]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004af8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004afa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004afe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b00:	4b1d      	ldr	r3, [pc, #116]	@ (8004b78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2232      	movs	r2, #50	@ 0x32
 8004b06:	fb02 f303 	mul.w	r3, r2, r3
 8004b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8004b7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b10:	0c9b      	lsrs	r3, r3, #18
 8004b12:	3301      	adds	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b16:	e002      	b.n	8004b1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b1e:	4b15      	ldr	r3, [pc, #84]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b2a:	d102      	bne.n	8004b32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1f2      	bne.n	8004b18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b32:	4b10      	ldr	r3, [pc, #64]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b3e:	d112      	bne.n	8004b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e011      	b.n	8004b68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b44:	4b0b      	ldr	r3, [pc, #44]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004b54:	e007      	b.n	8004b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b56:	4b07      	ldr	r3, [pc, #28]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b5e:	4a05      	ldr	r2, [pc, #20]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	40007000 	.word	0x40007000
 8004b78:	20000000 	.word	0x20000000
 8004b7c:	431bde83 	.word	0x431bde83

08004b80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b84:	4b05      	ldr	r3, [pc, #20]	@ (8004b9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a04      	ldr	r2, [pc, #16]	@ (8004b9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b8e:	6093      	str	r3, [r2, #8]
}
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40007000 	.word	0x40007000

08004ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e2fe      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d075      	beq.n	8004caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bbe:	4b97      	ldr	r3, [pc, #604]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
 8004bc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bc8:	4b94      	ldr	r3, [pc, #592]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	d102      	bne.n	8004bde <HAL_RCC_OscConfig+0x3e>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d002      	beq.n	8004be4 <HAL_RCC_OscConfig+0x44>
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d10b      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	4b8d      	ldr	r3, [pc, #564]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d05b      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x108>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d157      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e2d9      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c04:	d106      	bne.n	8004c14 <HAL_RCC_OscConfig+0x74>
 8004c06:	4b85      	ldr	r3, [pc, #532]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a84      	ldr	r2, [pc, #528]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e01d      	b.n	8004c50 <HAL_RCC_OscConfig+0xb0>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x98>
 8004c1e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a7e      	ldr	r2, [pc, #504]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	4b7c      	ldr	r3, [pc, #496]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a7b      	ldr	r2, [pc, #492]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e00b      	b.n	8004c50 <HAL_RCC_OscConfig+0xb0>
 8004c38:	4b78      	ldr	r3, [pc, #480]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a77      	ldr	r2, [pc, #476]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4b75      	ldr	r3, [pc, #468]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a74      	ldr	r2, [pc, #464]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fd f9dc 	bl	8002014 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c60:	f7fd f9d8 	bl	8002014 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	@ 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e29e      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c72:	4b6a      	ldr	r3, [pc, #424]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0xc0>
 8004c7e:	e014      	b.n	8004caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fd f9c8 	bl	8002014 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c88:	f7fd f9c4 	bl	8002014 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	@ 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e28a      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c9a:	4b60      	ldr	r3, [pc, #384]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0xe8>
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d075      	beq.n	8004da2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb6:	4b59      	ldr	r3, [pc, #356]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cc0:	4b56      	ldr	r3, [pc, #344]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	2b0c      	cmp	r3, #12
 8004cce:	d102      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x136>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d002      	beq.n	8004cdc <HAL_RCC_OscConfig+0x13c>
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d11f      	bne.n	8004d1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cdc:	4b4f      	ldr	r3, [pc, #316]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x154>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e25d      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf4:	4b49      	ldr	r3, [pc, #292]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	061b      	lsls	r3, r3, #24
 8004d02:	4946      	ldr	r1, [pc, #280]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d08:	4b45      	ldr	r3, [pc, #276]	@ (8004e20 <HAL_RCC_OscConfig+0x280>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fc f851 	bl	8000db4 <HAL_InitTick>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d043      	beq.n	8004da0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e249      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d023      	beq.n	8004d6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d24:	4b3d      	ldr	r3, [pc, #244]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a3c      	ldr	r2, [pc, #240]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d30:	f7fd f970 	bl	8002014 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d38:	f7fd f96c 	bl	8002014 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e232      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d4a:	4b34      	ldr	r3, [pc, #208]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d56:	4b31      	ldr	r3, [pc, #196]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	061b      	lsls	r3, r3, #24
 8004d64:	492d      	ldr	r1, [pc, #180]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	604b      	str	r3, [r1, #4]
 8004d6a:	e01a      	b.n	8004da2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a2a      	ldr	r2, [pc, #168]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fd f94c 	bl	8002014 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d80:	f7fd f948 	bl	8002014 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e20e      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d92:	4b22      	ldr	r3, [pc, #136]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x1e0>
 8004d9e:	e000      	b.n	8004da2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d041      	beq.n	8004e32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01c      	beq.n	8004df0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db6:	4b19      	ldr	r3, [pc, #100]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dbc:	4a17      	ldr	r2, [pc, #92]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc6:	f7fd f925 	bl	8002014 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dce:	f7fd f921 	bl	8002014 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e1e7      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004de0:	4b0e      	ldr	r3, [pc, #56]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0ef      	beq.n	8004dce <HAL_RCC_OscConfig+0x22e>
 8004dee:	e020      	b.n	8004e32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004df0:	4b0a      	ldr	r3, [pc, #40]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004df6:	4a09      	ldr	r2, [pc, #36]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004df8:	f023 0301 	bic.w	r3, r3, #1
 8004dfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e00:	f7fd f908 	bl	8002014 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e06:	e00d      	b.n	8004e24 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e08:	f7fd f904 	bl	8002014 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d906      	bls.n	8004e24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e1ca      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	200000ac 	.word	0x200000ac
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e24:	4b8c      	ldr	r3, [pc, #560]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1ea      	bne.n	8004e08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80a6 	beq.w	8004f8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e40:	2300      	movs	r3, #0
 8004e42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e44:	4b84      	ldr	r3, [pc, #528]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_RCC_OscConfig+0x2b4>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <HAL_RCC_OscConfig+0x2b6>
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00d      	beq.n	8004e76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e5a:	4b7f      	ldr	r3, [pc, #508]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5e:	4a7e      	ldr	r2, [pc, #504]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e64:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e66:	4b7c      	ldr	r3, [pc, #496]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e72:	2301      	movs	r3, #1
 8004e74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e76:	4b79      	ldr	r3, [pc, #484]	@ (800505c <HAL_RCC_OscConfig+0x4bc>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d118      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e82:	4b76      	ldr	r3, [pc, #472]	@ (800505c <HAL_RCC_OscConfig+0x4bc>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a75      	ldr	r2, [pc, #468]	@ (800505c <HAL_RCC_OscConfig+0x4bc>)
 8004e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e8e:	f7fd f8c1 	bl	8002014 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e96:	f7fd f8bd 	bl	8002014 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e183      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ea8:	4b6c      	ldr	r3, [pc, #432]	@ (800505c <HAL_RCC_OscConfig+0x4bc>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d108      	bne.n	8004ece <HAL_RCC_OscConfig+0x32e>
 8004ebc:	4b66      	ldr	r3, [pc, #408]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec2:	4a65      	ldr	r2, [pc, #404]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ecc:	e024      	b.n	8004f18 <HAL_RCC_OscConfig+0x378>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b05      	cmp	r3, #5
 8004ed4:	d110      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x358>
 8004ed6:	4b60      	ldr	r3, [pc, #384]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004edc:	4a5e      	ldr	r2, [pc, #376]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004ede:	f043 0304 	orr.w	r3, r3, #4
 8004ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ee6:	4b5c      	ldr	r3, [pc, #368]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eec:	4a5a      	ldr	r2, [pc, #360]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ef6:	e00f      	b.n	8004f18 <HAL_RCC_OscConfig+0x378>
 8004ef8:	4b57      	ldr	r3, [pc, #348]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efe:	4a56      	ldr	r2, [pc, #344]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004f00:	f023 0301 	bic.w	r3, r3, #1
 8004f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f08:	4b53      	ldr	r3, [pc, #332]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f0e:	4a52      	ldr	r2, [pc, #328]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004f10:	f023 0304 	bic.w	r3, r3, #4
 8004f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d016      	beq.n	8004f4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f20:	f7fd f878 	bl	8002014 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f26:	e00a      	b.n	8004f3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f28:	f7fd f874 	bl	8002014 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e138      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f3e:	4b46      	ldr	r3, [pc, #280]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0ed      	beq.n	8004f28 <HAL_RCC_OscConfig+0x388>
 8004f4c:	e015      	b.n	8004f7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4e:	f7fd f861 	bl	8002014 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f54:	e00a      	b.n	8004f6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f56:	f7fd f85d 	bl	8002014 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e121      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f6c:	4b3a      	ldr	r3, [pc, #232]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1ed      	bne.n	8004f56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f7a:	7ffb      	ldrb	r3, [r7, #31]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d105      	bne.n	8004f8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f80:	4b35      	ldr	r3, [pc, #212]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f84:	4a34      	ldr	r2, [pc, #208]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f8a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d03c      	beq.n	8005012 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01c      	beq.n	8004fda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004fa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb0:	f7fd f830 	bl	8002014 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fb8:	f7fd f82c 	bl	8002014 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e0f2      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fca:	4b23      	ldr	r3, [pc, #140]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0ef      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x418>
 8004fd8:	e01b      	b.n	8005012 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fda:	4b1f      	ldr	r3, [pc, #124]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004fe2:	f023 0301 	bic.w	r3, r3, #1
 8004fe6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fea:	f7fd f813 	bl	8002014 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ff2:	f7fd f80f 	bl	8002014 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e0d5      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005004:	4b14      	ldr	r3, [pc, #80]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8005006:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1ef      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 80c9 	beq.w	80051ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800501c:	4b0e      	ldr	r3, [pc, #56]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 030c 	and.w	r3, r3, #12
 8005024:	2b0c      	cmp	r3, #12
 8005026:	f000 8083 	beq.w	8005130 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d15e      	bne.n	80050f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005032:	4b09      	ldr	r3, [pc, #36]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a08      	ldr	r2, [pc, #32]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8005038:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800503c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503e:	f7fc ffe9 	bl	8002014 <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005044:	e00c      	b.n	8005060 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005046:	f7fc ffe5 	bl	8002014 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d905      	bls.n	8005060 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e0ab      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
 8005058:	40021000 	.word	0x40021000
 800505c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005060:	4b55      	ldr	r3, [pc, #340]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1ec      	bne.n	8005046 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800506c:	4b52      	ldr	r3, [pc, #328]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	4b52      	ldr	r3, [pc, #328]	@ (80051bc <HAL_RCC_OscConfig+0x61c>)
 8005072:	4013      	ands	r3, r2
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6a11      	ldr	r1, [r2, #32]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800507c:	3a01      	subs	r2, #1
 800507e:	0112      	lsls	r2, r2, #4
 8005080:	4311      	orrs	r1, r2
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005086:	0212      	lsls	r2, r2, #8
 8005088:	4311      	orrs	r1, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800508e:	0852      	lsrs	r2, r2, #1
 8005090:	3a01      	subs	r2, #1
 8005092:	0552      	lsls	r2, r2, #21
 8005094:	4311      	orrs	r1, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800509a:	0852      	lsrs	r2, r2, #1
 800509c:	3a01      	subs	r2, #1
 800509e:	0652      	lsls	r2, r2, #25
 80050a0:	4311      	orrs	r1, r2
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80050a6:	06d2      	lsls	r2, r2, #27
 80050a8:	430a      	orrs	r2, r1
 80050aa:	4943      	ldr	r1, [pc, #268]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050b0:	4b41      	ldr	r3, [pc, #260]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a40      	ldr	r2, [pc, #256]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 80050b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050bc:	4b3e      	ldr	r3, [pc, #248]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	4a3d      	ldr	r2, [pc, #244]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 80050c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fc ffa4 	bl	8002014 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d0:	f7fc ffa0 	bl	8002014 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e066      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e2:	4b35      	ldr	r3, [pc, #212]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0f0      	beq.n	80050d0 <HAL_RCC_OscConfig+0x530>
 80050ee:	e05e      	b.n	80051ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f0:	4b31      	ldr	r3, [pc, #196]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a30      	ldr	r2, [pc, #192]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 80050f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fc ff8a 	bl	8002014 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005104:	f7fc ff86 	bl	8002014 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e04c      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005116:	4b28      	ldr	r3, [pc, #160]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005122:	4b25      	ldr	r3, [pc, #148]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	4924      	ldr	r1, [pc, #144]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 8005128:	4b25      	ldr	r3, [pc, #148]	@ (80051c0 <HAL_RCC_OscConfig+0x620>)
 800512a:	4013      	ands	r3, r2
 800512c:	60cb      	str	r3, [r1, #12]
 800512e:	e03e      	b.n	80051ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e039      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800513c:	4b1e      	ldr	r3, [pc, #120]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f003 0203 	and.w	r2, r3, #3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	429a      	cmp	r2, r3
 800514e:	d12c      	bne.n	80051aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515a:	3b01      	subs	r3, #1
 800515c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800515e:	429a      	cmp	r2, r3
 8005160:	d123      	bne.n	80051aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800516e:	429a      	cmp	r2, r3
 8005170:	d11b      	bne.n	80051aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800517e:	429a      	cmp	r2, r3
 8005180:	d113      	bne.n	80051aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	3b01      	subs	r3, #1
 8005190:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005192:	429a      	cmp	r2, r3
 8005194:	d109      	bne.n	80051aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	3b01      	subs	r3, #1
 80051a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d001      	beq.n	80051ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3720      	adds	r7, #32
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40021000 	.word	0x40021000
 80051bc:	019f800c 	.word	0x019f800c
 80051c0:	feeefffc 	.word	0xfeeefffc

080051c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e11e      	b.n	800541a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051dc:	4b91      	ldr	r3, [pc, #580]	@ (8005424 <HAL_RCC_ClockConfig+0x260>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d910      	bls.n	800520c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ea:	4b8e      	ldr	r3, [pc, #568]	@ (8005424 <HAL_RCC_ClockConfig+0x260>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f023 020f 	bic.w	r2, r3, #15
 80051f2:	498c      	ldr	r1, [pc, #560]	@ (8005424 <HAL_RCC_ClockConfig+0x260>)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fa:	4b8a      	ldr	r3, [pc, #552]	@ (8005424 <HAL_RCC_ClockConfig+0x260>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d001      	beq.n	800520c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e106      	b.n	800541a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d073      	beq.n	8005300 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b03      	cmp	r3, #3
 800521e:	d129      	bne.n	8005274 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005220:	4b81      	ldr	r3, [pc, #516]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e0f4      	b.n	800541a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005230:	f000 f9d0 	bl	80055d4 <RCC_GetSysClockFreqFromPLLSource>
 8005234:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4a7c      	ldr	r2, [pc, #496]	@ (800542c <HAL_RCC_ClockConfig+0x268>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d93f      	bls.n	80052be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800523e:	4b7a      	ldr	r3, [pc, #488]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005252:	2b00      	cmp	r3, #0
 8005254:	d033      	beq.n	80052be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800525a:	2b00      	cmp	r3, #0
 800525c:	d12f      	bne.n	80052be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800525e:	4b72      	ldr	r3, [pc, #456]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005266:	4a70      	ldr	r2, [pc, #448]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 8005268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800526c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800526e:	2380      	movs	r3, #128	@ 0x80
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	e024      	b.n	80052be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d107      	bne.n	800528c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800527c:	4b6a      	ldr	r3, [pc, #424]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d109      	bne.n	800529c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e0c6      	b.n	800541a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800528c:	4b66      	ldr	r3, [pc, #408]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0be      	b.n	800541a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800529c:	f000 f8ce 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80052a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4a61      	ldr	r2, [pc, #388]	@ (800542c <HAL_RCC_ClockConfig+0x268>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d909      	bls.n	80052be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052aa:	4b5f      	ldr	r3, [pc, #380]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052b2:	4a5d      	ldr	r2, [pc, #372]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80052b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80052ba:	2380      	movs	r3, #128	@ 0x80
 80052bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052be:	4b5a      	ldr	r3, [pc, #360]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f023 0203 	bic.w	r2, r3, #3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	4957      	ldr	r1, [pc, #348]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d0:	f7fc fea0 	bl	8002014 <HAL_GetTick>
 80052d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052d6:	e00a      	b.n	80052ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d8:	f7fc fe9c 	bl	8002014 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e095      	b.n	800541a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ee:	4b4e      	ldr	r3, [pc, #312]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 020c 	and.w	r2, r3, #12
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d1eb      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d023      	beq.n	8005354 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005318:	4b43      	ldr	r3, [pc, #268]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	4a42      	ldr	r2, [pc, #264]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 800531e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005322:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d007      	beq.n	8005340 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005330:	4b3d      	ldr	r3, [pc, #244]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005338:	4a3b      	ldr	r2, [pc, #236]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 800533a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800533e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005340:	4b39      	ldr	r3, [pc, #228]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	4936      	ldr	r1, [pc, #216]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 800534e:	4313      	orrs	r3, r2
 8005350:	608b      	str	r3, [r1, #8]
 8005352:	e008      	b.n	8005366 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b80      	cmp	r3, #128	@ 0x80
 8005358:	d105      	bne.n	8005366 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800535a:	4b33      	ldr	r3, [pc, #204]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	4a32      	ldr	r2, [pc, #200]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 8005360:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005364:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005366:	4b2f      	ldr	r3, [pc, #188]	@ (8005424 <HAL_RCC_ClockConfig+0x260>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d21d      	bcs.n	80053b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005374:	4b2b      	ldr	r3, [pc, #172]	@ (8005424 <HAL_RCC_ClockConfig+0x260>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f023 020f 	bic.w	r2, r3, #15
 800537c:	4929      	ldr	r1, [pc, #164]	@ (8005424 <HAL_RCC_ClockConfig+0x260>)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	4313      	orrs	r3, r2
 8005382:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005384:	f7fc fe46 	bl	8002014 <HAL_GetTick>
 8005388:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538a:	e00a      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800538c:	f7fc fe42 	bl	8002014 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800539a:	4293      	cmp	r3, r2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e03b      	b.n	800541a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b20      	ldr	r3, [pc, #128]	@ (8005424 <HAL_RCC_ClockConfig+0x260>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d1ed      	bne.n	800538c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	4917      	ldr	r1, [pc, #92]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053da:	4b13      	ldr	r3, [pc, #76]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	490f      	ldr	r1, [pc, #60]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053ee:	f000 f825 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80053f2:	4602      	mov	r2, r0
 80053f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	091b      	lsrs	r3, r3, #4
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	490c      	ldr	r1, [pc, #48]	@ (8005430 <HAL_RCC_ClockConfig+0x26c>)
 8005400:	5ccb      	ldrb	r3, [r1, r3]
 8005402:	f003 031f 	and.w	r3, r3, #31
 8005406:	fa22 f303 	lsr.w	r3, r2, r3
 800540a:	4a0a      	ldr	r2, [pc, #40]	@ (8005434 <HAL_RCC_ClockConfig+0x270>)
 800540c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800540e:	4b0a      	ldr	r3, [pc, #40]	@ (8005438 <HAL_RCC_ClockConfig+0x274>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f7fb fcce 	bl	8000db4 <HAL_InitTick>
 8005418:	4603      	mov	r3, r0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40022000 	.word	0x40022000
 8005428:	40021000 	.word	0x40021000
 800542c:	04c4b400 	.word	0x04c4b400
 8005430:	0800b0ac 	.word	0x0800b0ac
 8005434:	20000000 	.word	0x20000000
 8005438:	200000ac 	.word	0x200000ac

0800543c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005442:	4b2c      	ldr	r3, [pc, #176]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b04      	cmp	r3, #4
 800544c:	d102      	bne.n	8005454 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800544e:	4b2a      	ldr	r3, [pc, #168]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	e047      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005454:	4b27      	ldr	r3, [pc, #156]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f003 030c 	and.w	r3, r3, #12
 800545c:	2b08      	cmp	r3, #8
 800545e:	d102      	bne.n	8005466 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005460:	4b26      	ldr	r3, [pc, #152]	@ (80054fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	e03e      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005466:	4b23      	ldr	r3, [pc, #140]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	2b0c      	cmp	r3, #12
 8005470:	d136      	bne.n	80054e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005472:	4b20      	ldr	r3, [pc, #128]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800547c:	4b1d      	ldr	r3, [pc, #116]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	091b      	lsrs	r3, r3, #4
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	3301      	adds	r3, #1
 8005488:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b03      	cmp	r3, #3
 800548e:	d10c      	bne.n	80054aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005490:	4a1a      	ldr	r2, [pc, #104]	@ (80054fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	fbb2 f3f3 	udiv	r3, r2, r3
 8005498:	4a16      	ldr	r2, [pc, #88]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800549a:	68d2      	ldr	r2, [r2, #12]
 800549c:	0a12      	lsrs	r2, r2, #8
 800549e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	617b      	str	r3, [r7, #20]
      break;
 80054a8:	e00c      	b.n	80054c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054aa:	4a13      	ldr	r2, [pc, #76]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b2:	4a10      	ldr	r2, [pc, #64]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054b4:	68d2      	ldr	r2, [r2, #12]
 80054b6:	0a12      	lsrs	r2, r2, #8
 80054b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054bc:	fb02 f303 	mul.w	r3, r2, r3
 80054c0:	617b      	str	r3, [r7, #20]
      break;
 80054c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054c4:	4b0b      	ldr	r3, [pc, #44]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	0e5b      	lsrs	r3, r3, #25
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	3301      	adds	r3, #1
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054dc:	613b      	str	r3, [r7, #16]
 80054de:	e001      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80054e4:	693b      	ldr	r3, [r7, #16]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40021000 	.word	0x40021000
 80054f8:	00f42400 	.word	0x00f42400
 80054fc:	016e3600 	.word	0x016e3600

08005500 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005504:	4b03      	ldr	r3, [pc, #12]	@ (8005514 <HAL_RCC_GetHCLKFreq+0x14>)
 8005506:	681b      	ldr	r3, [r3, #0]
}
 8005508:	4618      	mov	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20000000 	.word	0x20000000

08005518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800551c:	f7ff fff0 	bl	8005500 <HAL_RCC_GetHCLKFreq>
 8005520:	4602      	mov	r2, r0
 8005522:	4b06      	ldr	r3, [pc, #24]	@ (800553c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	4904      	ldr	r1, [pc, #16]	@ (8005540 <HAL_RCC_GetPCLK1Freq+0x28>)
 800552e:	5ccb      	ldrb	r3, [r1, r3]
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005538:	4618      	mov	r0, r3
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40021000 	.word	0x40021000
 8005540:	0800b0bc 	.word	0x0800b0bc

08005544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005548:	f7ff ffda 	bl	8005500 <HAL_RCC_GetHCLKFreq>
 800554c:	4602      	mov	r2, r0
 800554e:	4b06      	ldr	r3, [pc, #24]	@ (8005568 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	0adb      	lsrs	r3, r3, #11
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	4904      	ldr	r1, [pc, #16]	@ (800556c <HAL_RCC_GetPCLK2Freq+0x28>)
 800555a:	5ccb      	ldrb	r3, [r1, r3]
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005564:	4618      	mov	r0, r3
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40021000 	.word	0x40021000
 800556c:	0800b0bc 	.word	0x0800b0bc

08005570 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	220f      	movs	r2, #15
 800557e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005580:	4b12      	ldr	r3, [pc, #72]	@ (80055cc <HAL_RCC_GetClockConfig+0x5c>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 0203 	and.w	r2, r3, #3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800558c:	4b0f      	ldr	r3, [pc, #60]	@ (80055cc <HAL_RCC_GetClockConfig+0x5c>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005598:	4b0c      	ldr	r3, [pc, #48]	@ (80055cc <HAL_RCC_GetClockConfig+0x5c>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80055a4:	4b09      	ldr	r3, [pc, #36]	@ (80055cc <HAL_RCC_GetClockConfig+0x5c>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	08db      	lsrs	r3, r3, #3
 80055aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80055b2:	4b07      	ldr	r3, [pc, #28]	@ (80055d0 <HAL_RCC_GetClockConfig+0x60>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 020f 	and.w	r2, r3, #15
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	601a      	str	r2, [r3, #0]
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	40021000 	.word	0x40021000
 80055d0:	40022000 	.word	0x40022000

080055d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055da:	4b1e      	ldr	r3, [pc, #120]	@ (8005654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	091b      	lsrs	r3, r3, #4
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	3301      	adds	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d10c      	bne.n	8005612 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055f8:	4a17      	ldr	r2, [pc, #92]	@ (8005658 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005600:	4a14      	ldr	r2, [pc, #80]	@ (8005654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005602:	68d2      	ldr	r2, [r2, #12]
 8005604:	0a12      	lsrs	r2, r2, #8
 8005606:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800560a:	fb02 f303 	mul.w	r3, r2, r3
 800560e:	617b      	str	r3, [r7, #20]
    break;
 8005610:	e00c      	b.n	800562c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005612:	4a12      	ldr	r2, [pc, #72]	@ (800565c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	fbb2 f3f3 	udiv	r3, r2, r3
 800561a:	4a0e      	ldr	r2, [pc, #56]	@ (8005654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800561c:	68d2      	ldr	r2, [r2, #12]
 800561e:	0a12      	lsrs	r2, r2, #8
 8005620:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005624:	fb02 f303 	mul.w	r3, r2, r3
 8005628:	617b      	str	r3, [r7, #20]
    break;
 800562a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800562c:	4b09      	ldr	r3, [pc, #36]	@ (8005654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	0e5b      	lsrs	r3, r3, #25
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	3301      	adds	r3, #1
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	fbb2 f3f3 	udiv	r3, r2, r3
 8005644:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005646:	687b      	ldr	r3, [r7, #4]
}
 8005648:	4618      	mov	r0, r3
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	40021000 	.word	0x40021000
 8005658:	016e3600 	.word	0x016e3600
 800565c:	00f42400 	.word	0x00f42400

08005660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005668:	2300      	movs	r3, #0
 800566a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800566c:	2300      	movs	r3, #0
 800566e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8098 	beq.w	80057ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800567e:	2300      	movs	r3, #0
 8005680:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005682:	4b43      	ldr	r3, [pc, #268]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10d      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800568e:	4b40      	ldr	r3, [pc, #256]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005692:	4a3f      	ldr	r2, [pc, #252]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005698:	6593      	str	r3, [r2, #88]	@ 0x58
 800569a:	4b3d      	ldr	r3, [pc, #244]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800569c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800569e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056a2:	60bb      	str	r3, [r7, #8]
 80056a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056a6:	2301      	movs	r3, #1
 80056a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056aa:	4b3a      	ldr	r3, [pc, #232]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a39      	ldr	r2, [pc, #228]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056b6:	f7fc fcad 	bl	8002014 <HAL_GetTick>
 80056ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056bc:	e009      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056be:	f7fc fca9 	bl	8002014 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d902      	bls.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	74fb      	strb	r3, [r7, #19]
        break;
 80056d0:	e005      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056d2:	4b30      	ldr	r3, [pc, #192]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0ef      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80056de:	7cfb      	ldrb	r3, [r7, #19]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d159      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056e4:	4b2a      	ldr	r3, [pc, #168]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d01e      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d019      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005700:	4b23      	ldr	r3, [pc, #140]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800570a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800570c:	4b20      	ldr	r3, [pc, #128]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800570e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005712:	4a1f      	ldr	r2, [pc, #124]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800571c:	4b1c      	ldr	r3, [pc, #112]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005722:	4a1b      	ldr	r2, [pc, #108]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005724:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800572c:	4a18      	ldr	r2, [pc, #96]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d016      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573e:	f7fc fc69 	bl	8002014 <HAL_GetTick>
 8005742:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005744:	e00b      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005746:	f7fc fc65 	bl	8002014 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005754:	4293      	cmp	r3, r2
 8005756:	d902      	bls.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	74fb      	strb	r3, [r7, #19]
            break;
 800575c:	e006      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800575e:	4b0c      	ldr	r3, [pc, #48]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0ec      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800576c:	7cfb      	ldrb	r3, [r7, #19]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10b      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005772:	4b07      	ldr	r3, [pc, #28]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005778:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005780:	4903      	ldr	r1, [pc, #12]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005782:	4313      	orrs	r3, r2
 8005784:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005788:	e008      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800578a:	7cfb      	ldrb	r3, [r7, #19]
 800578c:	74bb      	strb	r3, [r7, #18]
 800578e:	e005      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005790:	40021000 	.word	0x40021000
 8005794:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005798:	7cfb      	ldrb	r3, [r7, #19]
 800579a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800579c:	7c7b      	ldrb	r3, [r7, #17]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d105      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a2:	4ba7      	ldr	r3, [pc, #668]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a6:	4aa6      	ldr	r2, [pc, #664]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057ba:	4ba1      	ldr	r3, [pc, #644]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c0:	f023 0203 	bic.w	r2, r3, #3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	499d      	ldr	r1, [pc, #628]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057dc:	4b98      	ldr	r3, [pc, #608]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e2:	f023 020c 	bic.w	r2, r3, #12
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	4995      	ldr	r1, [pc, #596]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057fe:	4b90      	ldr	r3, [pc, #576]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005804:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	498c      	ldr	r1, [pc, #560]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005820:	4b87      	ldr	r3, [pc, #540]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005826:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	4984      	ldr	r1, [pc, #528]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0310 	and.w	r3, r3, #16
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005842:	4b7f      	ldr	r3, [pc, #508]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005848:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	497b      	ldr	r1, [pc, #492]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0320 	and.w	r3, r3, #32
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005864:	4b76      	ldr	r3, [pc, #472]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	4973      	ldr	r1, [pc, #460]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005886:	4b6e      	ldr	r3, [pc, #440]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	496a      	ldr	r1, [pc, #424]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058a8:	4b65      	ldr	r3, [pc, #404]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	4962      	ldr	r1, [pc, #392]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d8:	4959      	ldr	r1, [pc, #356]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058ec:	4b54      	ldr	r3, [pc, #336]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058f2:	f023 0203 	bic.w	r2, r3, #3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058fa:	4951      	ldr	r1, [pc, #324]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800590e:	4b4c      	ldr	r3, [pc, #304]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005914:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591c:	4948      	ldr	r1, [pc, #288]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800591e:	4313      	orrs	r3, r2
 8005920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800592c:	2b00      	cmp	r3, #0
 800592e:	d015      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005930:	4b43      	ldr	r3, [pc, #268]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005936:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800593e:	4940      	ldr	r1, [pc, #256]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800594e:	d105      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005950:	4b3b      	ldr	r3, [pc, #236]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	4a3a      	ldr	r2, [pc, #232]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800595a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005964:	2b00      	cmp	r3, #0
 8005966:	d015      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005968:	4b35      	ldr	r3, [pc, #212]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800596a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005976:	4932      	ldr	r1, [pc, #200]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005982:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005986:	d105      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005988:	4b2d      	ldr	r3, [pc, #180]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	4a2c      	ldr	r2, [pc, #176]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800598e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005992:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d015      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059a0:	4b27      	ldr	r3, [pc, #156]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ae:	4924      	ldr	r1, [pc, #144]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059be:	d105      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d015      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059d8:	4b19      	ldr	r3, [pc, #100]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e6:	4916      	ldr	r1, [pc, #88]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059f6:	d105      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059f8:	4b11      	ldr	r3, [pc, #68]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	4a10      	ldr	r2, [pc, #64]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a02:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d019      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a10:	4b0b      	ldr	r3, [pc, #44]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1e:	4908      	ldr	r1, [pc, #32]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a2e:	d109      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a30:	4b03      	ldr	r3, [pc, #12]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	4a02      	ldr	r2, [pc, #8]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a3a:	60d3      	str	r3, [r2, #12]
 8005a3c:	e002      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005a3e:	bf00      	nop
 8005a40:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d015      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a50:	4b29      	ldr	r3, [pc, #164]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a56:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a5e:	4926      	ldr	r1, [pc, #152]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a6e:	d105      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a70:	4b21      	ldr	r3, [pc, #132]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	4a20      	ldr	r2, [pc, #128]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a7a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d015      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005a88:	4b1b      	ldr	r3, [pc, #108]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a96:	4918      	ldr	r1, [pc, #96]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa6:	d105      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005aa8:	4b13      	ldr	r3, [pc, #76]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a12      	ldr	r2, [pc, #72]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d015      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ac6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ace:	490a      	ldr	r1, [pc, #40]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ada:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ade:	d105      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ae0:	4b05      	ldr	r3, [pc, #20]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4a04      	ldr	r2, [pc, #16]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005aea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005aec:	7cbb      	ldrb	r3, [r7, #18]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40021000 	.word	0x40021000

08005afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e049      	b.n	8005ba2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d106      	bne.n	8005b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fb fcc6 	bl	80014b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3304      	adds	r3, #4
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	f000 fdd8 	bl	80066f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d001      	beq.n	8005bc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e04c      	b.n	8005c5e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a26      	ldr	r2, [pc, #152]	@ (8005c6c <HAL_TIM_Base_Start+0xc0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d022      	beq.n	8005c1c <HAL_TIM_Base_Start+0x70>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bde:	d01d      	beq.n	8005c1c <HAL_TIM_Base_Start+0x70>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a22      	ldr	r2, [pc, #136]	@ (8005c70 <HAL_TIM_Base_Start+0xc4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d018      	beq.n	8005c1c <HAL_TIM_Base_Start+0x70>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a21      	ldr	r2, [pc, #132]	@ (8005c74 <HAL_TIM_Base_Start+0xc8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d013      	beq.n	8005c1c <HAL_TIM_Base_Start+0x70>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8005c78 <HAL_TIM_Base_Start+0xcc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00e      	beq.n	8005c1c <HAL_TIM_Base_Start+0x70>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1e      	ldr	r2, [pc, #120]	@ (8005c7c <HAL_TIM_Base_Start+0xd0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d009      	beq.n	8005c1c <HAL_TIM_Base_Start+0x70>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8005c80 <HAL_TIM_Base_Start+0xd4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d004      	beq.n	8005c1c <HAL_TIM_Base_Start+0x70>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1b      	ldr	r2, [pc, #108]	@ (8005c84 <HAL_TIM_Base_Start+0xd8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d115      	bne.n	8005c48 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	4b19      	ldr	r3, [pc, #100]	@ (8005c88 <HAL_TIM_Base_Start+0xdc>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b06      	cmp	r3, #6
 8005c2c:	d015      	beq.n	8005c5a <HAL_TIM_Base_Start+0xae>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c34:	d011      	beq.n	8005c5a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 0201 	orr.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c46:	e008      	b.n	8005c5a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	e000      	b.n	8005c5c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	40012c00 	.word	0x40012c00
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800
 8005c78:	40000c00 	.word	0x40000c00
 8005c7c:	40013400 	.word	0x40013400
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40015000 	.word	0x40015000
 8005c88:	00010007 	.word	0x00010007

08005c8c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6a1a      	ldr	r2, [r3, #32]
 8005c9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10f      	bne.n	8005cc4 <HAL_TIM_Base_Stop+0x38>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6a1a      	ldr	r2, [r3, #32]
 8005caa:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d107      	bne.n	8005cc4 <HAL_TIM_Base_Stop+0x38>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0201 	bic.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
	...

08005cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d001      	beq.n	8005cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e054      	b.n	8005d9e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a26      	ldr	r2, [pc, #152]	@ (8005dac <HAL_TIM_Base_Start_IT+0xd0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d022      	beq.n	8005d5c <HAL_TIM_Base_Start_IT+0x80>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d1e:	d01d      	beq.n	8005d5c <HAL_TIM_Base_Start_IT+0x80>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a22      	ldr	r2, [pc, #136]	@ (8005db0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d018      	beq.n	8005d5c <HAL_TIM_Base_Start_IT+0x80>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a21      	ldr	r2, [pc, #132]	@ (8005db4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d013      	beq.n	8005d5c <HAL_TIM_Base_Start_IT+0x80>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a1f      	ldr	r2, [pc, #124]	@ (8005db8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00e      	beq.n	8005d5c <HAL_TIM_Base_Start_IT+0x80>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a1e      	ldr	r2, [pc, #120]	@ (8005dbc <HAL_TIM_Base_Start_IT+0xe0>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d009      	beq.n	8005d5c <HAL_TIM_Base_Start_IT+0x80>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d004      	beq.n	8005d5c <HAL_TIM_Base_Start_IT+0x80>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a1b      	ldr	r2, [pc, #108]	@ (8005dc4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d115      	bne.n	8005d88 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	4b19      	ldr	r3, [pc, #100]	@ (8005dc8 <HAL_TIM_Base_Start_IT+0xec>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2b06      	cmp	r3, #6
 8005d6c:	d015      	beq.n	8005d9a <HAL_TIM_Base_Start_IT+0xbe>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d74:	d011      	beq.n	8005d9a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0201 	orr.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d86:	e008      	b.n	8005d9a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	e000      	b.n	8005d9c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	40012c00 	.word	0x40012c00
 8005db0:	40000400 	.word	0x40000400
 8005db4:	40000800 	.word	0x40000800
 8005db8:	40000c00 	.word	0x40000c00
 8005dbc:	40013400 	.word	0x40013400
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40015000 	.word	0x40015000
 8005dc8:	00010007 	.word	0x00010007

08005dcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e049      	b.n	8005e72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d106      	bne.n	8005df8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fb fad6 	bl	80013a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	f000 fc70 	bl	80066f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d109      	bne.n	8005ea0 <HAL_TIM_PWM_Start+0x24>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	bf14      	ite	ne
 8005e98:	2301      	movne	r3, #1
 8005e9a:	2300      	moveq	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	e03c      	b.n	8005f1a <HAL_TIM_PWM_Start+0x9e>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d109      	bne.n	8005eba <HAL_TIM_PWM_Start+0x3e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	bf14      	ite	ne
 8005eb2:	2301      	movne	r3, #1
 8005eb4:	2300      	moveq	r3, #0
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	e02f      	b.n	8005f1a <HAL_TIM_PWM_Start+0x9e>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d109      	bne.n	8005ed4 <HAL_TIM_PWM_Start+0x58>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	bf14      	ite	ne
 8005ecc:	2301      	movne	r3, #1
 8005ece:	2300      	moveq	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	e022      	b.n	8005f1a <HAL_TIM_PWM_Start+0x9e>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b0c      	cmp	r3, #12
 8005ed8:	d109      	bne.n	8005eee <HAL_TIM_PWM_Start+0x72>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	bf14      	ite	ne
 8005ee6:	2301      	movne	r3, #1
 8005ee8:	2300      	moveq	r3, #0
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	e015      	b.n	8005f1a <HAL_TIM_PWM_Start+0x9e>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d109      	bne.n	8005f08 <HAL_TIM_PWM_Start+0x8c>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	bf14      	ite	ne
 8005f00:	2301      	movne	r3, #1
 8005f02:	2300      	moveq	r3, #0
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	e008      	b.n	8005f1a <HAL_TIM_PWM_Start+0x9e>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	bf14      	ite	ne
 8005f14:	2301      	movne	r3, #1
 8005f16:	2300      	moveq	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e0a6      	b.n	8006070 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d104      	bne.n	8005f32 <HAL_TIM_PWM_Start+0xb6>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f30:	e023      	b.n	8005f7a <HAL_TIM_PWM_Start+0xfe>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b04      	cmp	r3, #4
 8005f36:	d104      	bne.n	8005f42 <HAL_TIM_PWM_Start+0xc6>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f40:	e01b      	b.n	8005f7a <HAL_TIM_PWM_Start+0xfe>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d104      	bne.n	8005f52 <HAL_TIM_PWM_Start+0xd6>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f50:	e013      	b.n	8005f7a <HAL_TIM_PWM_Start+0xfe>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b0c      	cmp	r3, #12
 8005f56:	d104      	bne.n	8005f62 <HAL_TIM_PWM_Start+0xe6>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f60:	e00b      	b.n	8005f7a <HAL_TIM_PWM_Start+0xfe>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b10      	cmp	r3, #16
 8005f66:	d104      	bne.n	8005f72 <HAL_TIM_PWM_Start+0xf6>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f70:	e003      	b.n	8005f7a <HAL_TIM_PWM_Start+0xfe>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2202      	movs	r2, #2
 8005f76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f001 f806 	bl	8006f94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a3a      	ldr	r2, [pc, #232]	@ (8006078 <HAL_TIM_PWM_Start+0x1fc>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d018      	beq.n	8005fc4 <HAL_TIM_PWM_Start+0x148>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a39      	ldr	r2, [pc, #228]	@ (800607c <HAL_TIM_PWM_Start+0x200>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d013      	beq.n	8005fc4 <HAL_TIM_PWM_Start+0x148>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a37      	ldr	r2, [pc, #220]	@ (8006080 <HAL_TIM_PWM_Start+0x204>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00e      	beq.n	8005fc4 <HAL_TIM_PWM_Start+0x148>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a36      	ldr	r2, [pc, #216]	@ (8006084 <HAL_TIM_PWM_Start+0x208>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d009      	beq.n	8005fc4 <HAL_TIM_PWM_Start+0x148>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a34      	ldr	r2, [pc, #208]	@ (8006088 <HAL_TIM_PWM_Start+0x20c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <HAL_TIM_PWM_Start+0x148>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a33      	ldr	r2, [pc, #204]	@ (800608c <HAL_TIM_PWM_Start+0x210>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d101      	bne.n	8005fc8 <HAL_TIM_PWM_Start+0x14c>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <HAL_TIM_PWM_Start+0x14e>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a25      	ldr	r2, [pc, #148]	@ (8006078 <HAL_TIM_PWM_Start+0x1fc>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d022      	beq.n	800602e <HAL_TIM_PWM_Start+0x1b2>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff0:	d01d      	beq.n	800602e <HAL_TIM_PWM_Start+0x1b2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a26      	ldr	r2, [pc, #152]	@ (8006090 <HAL_TIM_PWM_Start+0x214>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d018      	beq.n	800602e <HAL_TIM_PWM_Start+0x1b2>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a24      	ldr	r2, [pc, #144]	@ (8006094 <HAL_TIM_PWM_Start+0x218>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d013      	beq.n	800602e <HAL_TIM_PWM_Start+0x1b2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a23      	ldr	r2, [pc, #140]	@ (8006098 <HAL_TIM_PWM_Start+0x21c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00e      	beq.n	800602e <HAL_TIM_PWM_Start+0x1b2>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a19      	ldr	r2, [pc, #100]	@ (800607c <HAL_TIM_PWM_Start+0x200>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d009      	beq.n	800602e <HAL_TIM_PWM_Start+0x1b2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a18      	ldr	r2, [pc, #96]	@ (8006080 <HAL_TIM_PWM_Start+0x204>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d004      	beq.n	800602e <HAL_TIM_PWM_Start+0x1b2>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a18      	ldr	r2, [pc, #96]	@ (800608c <HAL_TIM_PWM_Start+0x210>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d115      	bne.n	800605a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	4b19      	ldr	r3, [pc, #100]	@ (800609c <HAL_TIM_PWM_Start+0x220>)
 8006036:	4013      	ands	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2b06      	cmp	r3, #6
 800603e:	d015      	beq.n	800606c <HAL_TIM_PWM_Start+0x1f0>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006046:	d011      	beq.n	800606c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0201 	orr.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006058:	e008      	b.n	800606c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f042 0201 	orr.w	r2, r2, #1
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	e000      	b.n	800606e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40012c00 	.word	0x40012c00
 800607c:	40013400 	.word	0x40013400
 8006080:	40014000 	.word	0x40014000
 8006084:	40014400 	.word	0x40014400
 8006088:	40014800 	.word	0x40014800
 800608c:	40015000 	.word	0x40015000
 8006090:	40000400 	.word	0x40000400
 8006094:	40000800 	.word	0x40000800
 8006098:	40000c00 	.word	0x40000c00
 800609c:	00010007 	.word	0x00010007

080060a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2200      	movs	r2, #0
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 ff6e 	bl	8006f94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a40      	ldr	r2, [pc, #256]	@ (80061c0 <HAL_TIM_PWM_Stop+0x120>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d018      	beq.n	80060f4 <HAL_TIM_PWM_Stop+0x54>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a3f      	ldr	r2, [pc, #252]	@ (80061c4 <HAL_TIM_PWM_Stop+0x124>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <HAL_TIM_PWM_Stop+0x54>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a3d      	ldr	r2, [pc, #244]	@ (80061c8 <HAL_TIM_PWM_Stop+0x128>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00e      	beq.n	80060f4 <HAL_TIM_PWM_Stop+0x54>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a3c      	ldr	r2, [pc, #240]	@ (80061cc <HAL_TIM_PWM_Stop+0x12c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d009      	beq.n	80060f4 <HAL_TIM_PWM_Stop+0x54>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a3a      	ldr	r2, [pc, #232]	@ (80061d0 <HAL_TIM_PWM_Stop+0x130>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d004      	beq.n	80060f4 <HAL_TIM_PWM_Stop+0x54>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a39      	ldr	r2, [pc, #228]	@ (80061d4 <HAL_TIM_PWM_Stop+0x134>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d101      	bne.n	80060f8 <HAL_TIM_PWM_Stop+0x58>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <HAL_TIM_PWM_Stop+0x5a>
 80060f8:	2300      	movs	r3, #0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d017      	beq.n	800612e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6a1a      	ldr	r2, [r3, #32]
 8006104:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006108:	4013      	ands	r3, r2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10f      	bne.n	800612e <HAL_TIM_PWM_Stop+0x8e>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6a1a      	ldr	r2, [r3, #32]
 8006114:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006118:	4013      	ands	r3, r2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d107      	bne.n	800612e <HAL_TIM_PWM_Stop+0x8e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800612c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6a1a      	ldr	r2, [r3, #32]
 8006134:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006138:	4013      	ands	r3, r2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10f      	bne.n	800615e <HAL_TIM_PWM_Stop+0xbe>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6a1a      	ldr	r2, [r3, #32]
 8006144:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006148:	4013      	ands	r3, r2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d107      	bne.n	800615e <HAL_TIM_PWM_Stop+0xbe>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0201 	bic.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d104      	bne.n	800616e <HAL_TIM_PWM_Stop+0xce>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800616c:	e023      	b.n	80061b6 <HAL_TIM_PWM_Stop+0x116>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b04      	cmp	r3, #4
 8006172:	d104      	bne.n	800617e <HAL_TIM_PWM_Stop+0xde>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800617c:	e01b      	b.n	80061b6 <HAL_TIM_PWM_Stop+0x116>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b08      	cmp	r3, #8
 8006182:	d104      	bne.n	800618e <HAL_TIM_PWM_Stop+0xee>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800618c:	e013      	b.n	80061b6 <HAL_TIM_PWM_Stop+0x116>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b0c      	cmp	r3, #12
 8006192:	d104      	bne.n	800619e <HAL_TIM_PWM_Stop+0xfe>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800619c:	e00b      	b.n	80061b6 <HAL_TIM_PWM_Stop+0x116>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b10      	cmp	r3, #16
 80061a2:	d104      	bne.n	80061ae <HAL_TIM_PWM_Stop+0x10e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061ac:	e003      	b.n	80061b6 <HAL_TIM_PWM_Stop+0x116>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40012c00 	.word	0x40012c00
 80061c4:	40013400 	.word	0x40013400
 80061c8:	40014000 	.word	0x40014000
 80061cc:	40014400 	.word	0x40014400
 80061d0:	40014800 	.word	0x40014800
 80061d4:	40015000 	.word	0x40015000

080061d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d020      	beq.n	800623c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d01b      	beq.n	800623c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f06f 0202 	mvn.w	r2, #2
 800620c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fa46 	bl	80066b4 <HAL_TIM_IC_CaptureCallback>
 8006228:	e005      	b.n	8006236 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fa38 	bl	80066a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fa49 	bl	80066c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	2b00      	cmp	r3, #0
 8006244:	d020      	beq.n	8006288 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	d01b      	beq.n	8006288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f06f 0204 	mvn.w	r2, #4
 8006258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2202      	movs	r2, #2
 800625e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa20 	bl	80066b4 <HAL_TIM_IC_CaptureCallback>
 8006274:	e005      	b.n	8006282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fa12 	bl	80066a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fa23 	bl	80066c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d020      	beq.n	80062d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b00      	cmp	r3, #0
 800629a:	d01b      	beq.n	80062d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0208 	mvn.w	r2, #8
 80062a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2204      	movs	r2, #4
 80062aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f9fa 	bl	80066b4 <HAL_TIM_IC_CaptureCallback>
 80062c0:	e005      	b.n	80062ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f9ec 	bl	80066a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f9fd 	bl	80066c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f003 0310 	and.w	r3, r3, #16
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d020      	beq.n	8006320 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f003 0310 	and.w	r3, r3, #16
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d01b      	beq.n	8006320 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f06f 0210 	mvn.w	r2, #16
 80062f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2208      	movs	r2, #8
 80062f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f9d4 	bl	80066b4 <HAL_TIM_IC_CaptureCallback>
 800630c:	e005      	b.n	800631a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f9c6 	bl	80066a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f9d7 	bl	80066c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00c      	beq.n	8006344 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d007      	beq.n	8006344 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0201 	mvn.w	r2, #1
 800633c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fa fcaa 	bl	8000c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800634a:	2b00      	cmp	r3, #0
 800634c:	d104      	bne.n	8006358 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00c      	beq.n	8006372 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800635e:	2b00      	cmp	r3, #0
 8006360:	d007      	beq.n	8006372 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800636a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f001 f939 	bl	80075e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00c      	beq.n	8006396 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006382:	2b00      	cmp	r3, #0
 8006384:	d007      	beq.n	8006396 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800638e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 f931 	bl	80075f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00c      	beq.n	80063ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d007      	beq.n	80063ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f991 	bl	80066dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f003 0320 	and.w	r3, r3, #32
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00c      	beq.n	80063de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d007      	beq.n	80063de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f06f 0220 	mvn.w	r2, #32
 80063d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f001 f8f9 	bl	80075d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00c      	beq.n	8006402 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d007      	beq.n	8006402 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80063fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f001 f905 	bl	800760c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00c      	beq.n	8006426 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d007      	beq.n	8006426 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800641e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 f8fd 	bl	8007620 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00c      	beq.n	800644a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d007      	beq.n	800644a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 f8f5 	bl	8007634 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00c      	beq.n	800646e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d007      	beq.n	800646e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 f8ed 	bl	8007648 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800646e:	bf00      	nop
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800648e:	2b01      	cmp	r3, #1
 8006490:	d101      	bne.n	8006496 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006492:	2302      	movs	r3, #2
 8006494:	e0ff      	b.n	8006696 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b14      	cmp	r3, #20
 80064a2:	f200 80f0 	bhi.w	8006686 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80064a6:	a201      	add	r2, pc, #4	@ (adr r2, 80064ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ac:	08006501 	.word	0x08006501
 80064b0:	08006687 	.word	0x08006687
 80064b4:	08006687 	.word	0x08006687
 80064b8:	08006687 	.word	0x08006687
 80064bc:	08006541 	.word	0x08006541
 80064c0:	08006687 	.word	0x08006687
 80064c4:	08006687 	.word	0x08006687
 80064c8:	08006687 	.word	0x08006687
 80064cc:	08006583 	.word	0x08006583
 80064d0:	08006687 	.word	0x08006687
 80064d4:	08006687 	.word	0x08006687
 80064d8:	08006687 	.word	0x08006687
 80064dc:	080065c3 	.word	0x080065c3
 80064e0:	08006687 	.word	0x08006687
 80064e4:	08006687 	.word	0x08006687
 80064e8:	08006687 	.word	0x08006687
 80064ec:	08006605 	.word	0x08006605
 80064f0:	08006687 	.word	0x08006687
 80064f4:	08006687 	.word	0x08006687
 80064f8:	08006687 	.word	0x08006687
 80064fc:	08006645 	.word	0x08006645
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	4618      	mov	r0, r3
 8006508:	f000 f9a6 	bl	8006858 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699a      	ldr	r2, [r3, #24]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0208 	orr.w	r2, r2, #8
 800651a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699a      	ldr	r2, [r3, #24]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0204 	bic.w	r2, r2, #4
 800652a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6999      	ldr	r1, [r3, #24]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	691a      	ldr	r2, [r3, #16]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	619a      	str	r2, [r3, #24]
      break;
 800653e:	e0a5      	b.n	800668c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68b9      	ldr	r1, [r7, #8]
 8006546:	4618      	mov	r0, r3
 8006548:	f000 fa20 	bl	800698c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699a      	ldr	r2, [r3, #24]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800655a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699a      	ldr	r2, [r3, #24]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800656a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6999      	ldr	r1, [r3, #24]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	021a      	lsls	r2, r3, #8
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	619a      	str	r2, [r3, #24]
      break;
 8006580:	e084      	b.n	800668c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fa93 	bl	8006ab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69da      	ldr	r2, [r3, #28]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0208 	orr.w	r2, r2, #8
 800659c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0204 	bic.w	r2, r2, #4
 80065ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69d9      	ldr	r1, [r3, #28]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	691a      	ldr	r2, [r3, #16]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	61da      	str	r2, [r3, #28]
      break;
 80065c0:	e064      	b.n	800668c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fb05 	bl	8006bd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69da      	ldr	r2, [r3, #28]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69da      	ldr	r2, [r3, #28]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69d9      	ldr	r1, [r3, #28]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	021a      	lsls	r2, r3, #8
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	61da      	str	r2, [r3, #28]
      break;
 8006602:	e043      	b.n	800668c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68b9      	ldr	r1, [r7, #8]
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fb78 	bl	8006d00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0208 	orr.w	r2, r2, #8
 800661e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0204 	bic.w	r2, r2, #4
 800662e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	691a      	ldr	r2, [r3, #16]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006642:	e023      	b.n	800668c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68b9      	ldr	r1, [r7, #8]
 800664a:	4618      	mov	r0, r3
 800664c:	f000 fbc2 	bl	8006dd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800665e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800666e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	021a      	lsls	r2, r3, #8
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006684:	e002      	b.n	800668c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	75fb      	strb	r3, [r7, #23]
      break;
 800668a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006694:	7dfb      	ldrb	r3, [r7, #23]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop

080066a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a4c      	ldr	r2, [pc, #304]	@ (8006834 <TIM_Base_SetConfig+0x144>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d017      	beq.n	8006738 <TIM_Base_SetConfig+0x48>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800670e:	d013      	beq.n	8006738 <TIM_Base_SetConfig+0x48>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a49      	ldr	r2, [pc, #292]	@ (8006838 <TIM_Base_SetConfig+0x148>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00f      	beq.n	8006738 <TIM_Base_SetConfig+0x48>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a48      	ldr	r2, [pc, #288]	@ (800683c <TIM_Base_SetConfig+0x14c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00b      	beq.n	8006738 <TIM_Base_SetConfig+0x48>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a47      	ldr	r2, [pc, #284]	@ (8006840 <TIM_Base_SetConfig+0x150>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d007      	beq.n	8006738 <TIM_Base_SetConfig+0x48>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a46      	ldr	r2, [pc, #280]	@ (8006844 <TIM_Base_SetConfig+0x154>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d003      	beq.n	8006738 <TIM_Base_SetConfig+0x48>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a45      	ldr	r2, [pc, #276]	@ (8006848 <TIM_Base_SetConfig+0x158>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d108      	bne.n	800674a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a39      	ldr	r2, [pc, #228]	@ (8006834 <TIM_Base_SetConfig+0x144>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d023      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006758:	d01f      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a36      	ldr	r2, [pc, #216]	@ (8006838 <TIM_Base_SetConfig+0x148>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01b      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a35      	ldr	r2, [pc, #212]	@ (800683c <TIM_Base_SetConfig+0x14c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d017      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a34      	ldr	r2, [pc, #208]	@ (8006840 <TIM_Base_SetConfig+0x150>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a33      	ldr	r2, [pc, #204]	@ (8006844 <TIM_Base_SetConfig+0x154>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00f      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a33      	ldr	r2, [pc, #204]	@ (800684c <TIM_Base_SetConfig+0x15c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00b      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a32      	ldr	r2, [pc, #200]	@ (8006850 <TIM_Base_SetConfig+0x160>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d007      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a31      	ldr	r2, [pc, #196]	@ (8006854 <TIM_Base_SetConfig+0x164>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a2c      	ldr	r2, [pc, #176]	@ (8006848 <TIM_Base_SetConfig+0x158>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d108      	bne.n	80067ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a18      	ldr	r2, [pc, #96]	@ (8006834 <TIM_Base_SetConfig+0x144>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d013      	beq.n	8006800 <TIM_Base_SetConfig+0x110>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a1a      	ldr	r2, [pc, #104]	@ (8006844 <TIM_Base_SetConfig+0x154>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00f      	beq.n	8006800 <TIM_Base_SetConfig+0x110>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a1a      	ldr	r2, [pc, #104]	@ (800684c <TIM_Base_SetConfig+0x15c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00b      	beq.n	8006800 <TIM_Base_SetConfig+0x110>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a19      	ldr	r2, [pc, #100]	@ (8006850 <TIM_Base_SetConfig+0x160>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_Base_SetConfig+0x110>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a18      	ldr	r2, [pc, #96]	@ (8006854 <TIM_Base_SetConfig+0x164>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_Base_SetConfig+0x110>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a13      	ldr	r2, [pc, #76]	@ (8006848 <TIM_Base_SetConfig+0x158>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d103      	bne.n	8006808 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b01      	cmp	r3, #1
 8006818:	d105      	bne.n	8006826 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f023 0201 	bic.w	r2, r3, #1
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	611a      	str	r2, [r3, #16]
  }
}
 8006826:	bf00      	nop
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40012c00 	.word	0x40012c00
 8006838:	40000400 	.word	0x40000400
 800683c:	40000800 	.word	0x40000800
 8006840:	40000c00 	.word	0x40000c00
 8006844:	40013400 	.word	0x40013400
 8006848:	40015000 	.word	0x40015000
 800684c:	40014000 	.word	0x40014000
 8006850:	40014400 	.word	0x40014400
 8006854:	40014800 	.word	0x40014800

08006858 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	f023 0201 	bic.w	r2, r3, #1
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800688a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0303 	bic.w	r3, r3, #3
 8006892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f023 0302 	bic.w	r3, r3, #2
 80068a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a30      	ldr	r2, [pc, #192]	@ (8006974 <TIM_OC1_SetConfig+0x11c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d013      	beq.n	80068e0 <TIM_OC1_SetConfig+0x88>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006978 <TIM_OC1_SetConfig+0x120>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00f      	beq.n	80068e0 <TIM_OC1_SetConfig+0x88>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a2e      	ldr	r2, [pc, #184]	@ (800697c <TIM_OC1_SetConfig+0x124>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d00b      	beq.n	80068e0 <TIM_OC1_SetConfig+0x88>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006980 <TIM_OC1_SetConfig+0x128>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d007      	beq.n	80068e0 <TIM_OC1_SetConfig+0x88>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006984 <TIM_OC1_SetConfig+0x12c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d003      	beq.n	80068e0 <TIM_OC1_SetConfig+0x88>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a2b      	ldr	r2, [pc, #172]	@ (8006988 <TIM_OC1_SetConfig+0x130>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d10c      	bne.n	80068fa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f023 0308 	bic.w	r3, r3, #8
 80068e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f023 0304 	bic.w	r3, r3, #4
 80068f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006974 <TIM_OC1_SetConfig+0x11c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d013      	beq.n	800692a <TIM_OC1_SetConfig+0xd2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a1c      	ldr	r2, [pc, #112]	@ (8006978 <TIM_OC1_SetConfig+0x120>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00f      	beq.n	800692a <TIM_OC1_SetConfig+0xd2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a1b      	ldr	r2, [pc, #108]	@ (800697c <TIM_OC1_SetConfig+0x124>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00b      	beq.n	800692a <TIM_OC1_SetConfig+0xd2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a1a      	ldr	r2, [pc, #104]	@ (8006980 <TIM_OC1_SetConfig+0x128>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d007      	beq.n	800692a <TIM_OC1_SetConfig+0xd2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a19      	ldr	r2, [pc, #100]	@ (8006984 <TIM_OC1_SetConfig+0x12c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d003      	beq.n	800692a <TIM_OC1_SetConfig+0xd2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a18      	ldr	r2, [pc, #96]	@ (8006988 <TIM_OC1_SetConfig+0x130>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d111      	bne.n	800694e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	621a      	str	r2, [r3, #32]
}
 8006968:	bf00      	nop
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	40012c00 	.word	0x40012c00
 8006978:	40013400 	.word	0x40013400
 800697c:	40014000 	.word	0x40014000
 8006980:	40014400 	.word	0x40014400
 8006984:	40014800 	.word	0x40014800
 8006988:	40015000 	.word	0x40015000

0800698c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	f023 0210 	bic.w	r2, r3, #16
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	021b      	lsls	r3, r3, #8
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f023 0320 	bic.w	r3, r3, #32
 80069da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a2c      	ldr	r2, [pc, #176]	@ (8006a9c <TIM_OC2_SetConfig+0x110>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d007      	beq.n	8006a00 <TIM_OC2_SetConfig+0x74>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a2b      	ldr	r2, [pc, #172]	@ (8006aa0 <TIM_OC2_SetConfig+0x114>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d003      	beq.n	8006a00 <TIM_OC2_SetConfig+0x74>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a2a      	ldr	r2, [pc, #168]	@ (8006aa4 <TIM_OC2_SetConfig+0x118>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d10d      	bne.n	8006a1c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8006a9c <TIM_OC2_SetConfig+0x110>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d013      	beq.n	8006a4c <TIM_OC2_SetConfig+0xc0>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa0 <TIM_OC2_SetConfig+0x114>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00f      	beq.n	8006a4c <TIM_OC2_SetConfig+0xc0>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa8 <TIM_OC2_SetConfig+0x11c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00b      	beq.n	8006a4c <TIM_OC2_SetConfig+0xc0>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a1d      	ldr	r2, [pc, #116]	@ (8006aac <TIM_OC2_SetConfig+0x120>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d007      	beq.n	8006a4c <TIM_OC2_SetConfig+0xc0>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ab0 <TIM_OC2_SetConfig+0x124>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d003      	beq.n	8006a4c <TIM_OC2_SetConfig+0xc0>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a17      	ldr	r2, [pc, #92]	@ (8006aa4 <TIM_OC2_SetConfig+0x118>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d113      	bne.n	8006a74 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	621a      	str	r2, [r3, #32]
}
 8006a8e:	bf00      	nop
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40012c00 	.word	0x40012c00
 8006aa0:	40013400 	.word	0x40013400
 8006aa4:	40015000 	.word	0x40015000
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	40014400 	.word	0x40014400
 8006ab0:	40014800 	.word	0x40014800

08006ab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	021b      	lsls	r3, r3, #8
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a2b      	ldr	r2, [pc, #172]	@ (8006bc0 <TIM_OC3_SetConfig+0x10c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d007      	beq.n	8006b26 <TIM_OC3_SetConfig+0x72>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a2a      	ldr	r2, [pc, #168]	@ (8006bc4 <TIM_OC3_SetConfig+0x110>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d003      	beq.n	8006b26 <TIM_OC3_SetConfig+0x72>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a29      	ldr	r2, [pc, #164]	@ (8006bc8 <TIM_OC3_SetConfig+0x114>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d10d      	bne.n	8006b42 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	021b      	lsls	r3, r3, #8
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a1e      	ldr	r2, [pc, #120]	@ (8006bc0 <TIM_OC3_SetConfig+0x10c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d013      	beq.n	8006b72 <TIM_OC3_SetConfig+0xbe>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bc4 <TIM_OC3_SetConfig+0x110>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00f      	beq.n	8006b72 <TIM_OC3_SetConfig+0xbe>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a1d      	ldr	r2, [pc, #116]	@ (8006bcc <TIM_OC3_SetConfig+0x118>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d00b      	beq.n	8006b72 <TIM_OC3_SetConfig+0xbe>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd0 <TIM_OC3_SetConfig+0x11c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d007      	beq.n	8006b72 <TIM_OC3_SetConfig+0xbe>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd4 <TIM_OC3_SetConfig+0x120>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d003      	beq.n	8006b72 <TIM_OC3_SetConfig+0xbe>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a16      	ldr	r2, [pc, #88]	@ (8006bc8 <TIM_OC3_SetConfig+0x114>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d113      	bne.n	8006b9a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	621a      	str	r2, [r3, #32]
}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	40012c00 	.word	0x40012c00
 8006bc4:	40013400 	.word	0x40013400
 8006bc8:	40015000 	.word	0x40015000
 8006bcc:	40014000 	.word	0x40014000
 8006bd0:	40014400 	.word	0x40014400
 8006bd4:	40014800 	.word	0x40014800

08006bd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	021b      	lsls	r3, r3, #8
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	031b      	lsls	r3, r3, #12
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a2c      	ldr	r2, [pc, #176]	@ (8006ce8 <TIM_OC4_SetConfig+0x110>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d007      	beq.n	8006c4c <TIM_OC4_SetConfig+0x74>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a2b      	ldr	r2, [pc, #172]	@ (8006cec <TIM_OC4_SetConfig+0x114>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d003      	beq.n	8006c4c <TIM_OC4_SetConfig+0x74>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a2a      	ldr	r2, [pc, #168]	@ (8006cf0 <TIM_OC4_SetConfig+0x118>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d10d      	bne.n	8006c68 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	031b      	lsls	r3, r3, #12
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ce8 <TIM_OC4_SetConfig+0x110>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d013      	beq.n	8006c98 <TIM_OC4_SetConfig+0xc0>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a1e      	ldr	r2, [pc, #120]	@ (8006cec <TIM_OC4_SetConfig+0x114>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00f      	beq.n	8006c98 <TIM_OC4_SetConfig+0xc0>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8006cf4 <TIM_OC4_SetConfig+0x11c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00b      	beq.n	8006c98 <TIM_OC4_SetConfig+0xc0>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf8 <TIM_OC4_SetConfig+0x120>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d007      	beq.n	8006c98 <TIM_OC4_SetConfig+0xc0>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8006cfc <TIM_OC4_SetConfig+0x124>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_OC4_SetConfig+0xc0>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a17      	ldr	r2, [pc, #92]	@ (8006cf0 <TIM_OC4_SetConfig+0x118>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d113      	bne.n	8006cc0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c9e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ca6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	019b      	lsls	r3, r3, #6
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	019b      	lsls	r3, r3, #6
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	40012c00 	.word	0x40012c00
 8006cec:	40013400 	.word	0x40013400
 8006cf0:	40015000 	.word	0x40015000
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40014400 	.word	0x40014400
 8006cfc:	40014800 	.word	0x40014800

08006d00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006d44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	041b      	lsls	r3, r3, #16
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a19      	ldr	r2, [pc, #100]	@ (8006dbc <TIM_OC5_SetConfig+0xbc>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d013      	beq.n	8006d82 <TIM_OC5_SetConfig+0x82>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a18      	ldr	r2, [pc, #96]	@ (8006dc0 <TIM_OC5_SetConfig+0xc0>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00f      	beq.n	8006d82 <TIM_OC5_SetConfig+0x82>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a17      	ldr	r2, [pc, #92]	@ (8006dc4 <TIM_OC5_SetConfig+0xc4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d00b      	beq.n	8006d82 <TIM_OC5_SetConfig+0x82>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a16      	ldr	r2, [pc, #88]	@ (8006dc8 <TIM_OC5_SetConfig+0xc8>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d007      	beq.n	8006d82 <TIM_OC5_SetConfig+0x82>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a15      	ldr	r2, [pc, #84]	@ (8006dcc <TIM_OC5_SetConfig+0xcc>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d003      	beq.n	8006d82 <TIM_OC5_SetConfig+0x82>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a14      	ldr	r2, [pc, #80]	@ (8006dd0 <TIM_OC5_SetConfig+0xd0>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d109      	bne.n	8006d96 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	021b      	lsls	r3, r3, #8
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	621a      	str	r2, [r3, #32]
}
 8006db0:	bf00      	nop
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	40012c00 	.word	0x40012c00
 8006dc0:	40013400 	.word	0x40013400
 8006dc4:	40014000 	.word	0x40014000
 8006dc8:	40014400 	.word	0x40014400
 8006dcc:	40014800 	.word	0x40014800
 8006dd0:	40015000 	.word	0x40015000

08006dd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	051b      	lsls	r3, r3, #20
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8006e94 <TIM_OC6_SetConfig+0xc0>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d013      	beq.n	8006e58 <TIM_OC6_SetConfig+0x84>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a19      	ldr	r2, [pc, #100]	@ (8006e98 <TIM_OC6_SetConfig+0xc4>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00f      	beq.n	8006e58 <TIM_OC6_SetConfig+0x84>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a18      	ldr	r2, [pc, #96]	@ (8006e9c <TIM_OC6_SetConfig+0xc8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00b      	beq.n	8006e58 <TIM_OC6_SetConfig+0x84>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a17      	ldr	r2, [pc, #92]	@ (8006ea0 <TIM_OC6_SetConfig+0xcc>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d007      	beq.n	8006e58 <TIM_OC6_SetConfig+0x84>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a16      	ldr	r2, [pc, #88]	@ (8006ea4 <TIM_OC6_SetConfig+0xd0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_OC6_SetConfig+0x84>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a15      	ldr	r2, [pc, #84]	@ (8006ea8 <TIM_OC6_SetConfig+0xd4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d109      	bne.n	8006e6c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	029b      	lsls	r3, r3, #10
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	621a      	str	r2, [r3, #32]
}
 8006e86:	bf00      	nop
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40012c00 	.word	0x40012c00
 8006e98:	40013400 	.word	0x40013400
 8006e9c:	40014000 	.word	0x40014000
 8006ea0:	40014400 	.word	0x40014400
 8006ea4:	40014800 	.word	0x40014800
 8006ea8:	40015000 	.word	0x40015000

08006eac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	f023 0201 	bic.w	r2, r3, #1
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4a28      	ldr	r2, [pc, #160]	@ (8006f78 <TIM_TI1_SetConfig+0xcc>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d01b      	beq.n	8006f12 <TIM_TI1_SetConfig+0x66>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ee0:	d017      	beq.n	8006f12 <TIM_TI1_SetConfig+0x66>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4a25      	ldr	r2, [pc, #148]	@ (8006f7c <TIM_TI1_SetConfig+0xd0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d013      	beq.n	8006f12 <TIM_TI1_SetConfig+0x66>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4a24      	ldr	r2, [pc, #144]	@ (8006f80 <TIM_TI1_SetConfig+0xd4>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00f      	beq.n	8006f12 <TIM_TI1_SetConfig+0x66>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4a23      	ldr	r2, [pc, #140]	@ (8006f84 <TIM_TI1_SetConfig+0xd8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00b      	beq.n	8006f12 <TIM_TI1_SetConfig+0x66>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4a22      	ldr	r2, [pc, #136]	@ (8006f88 <TIM_TI1_SetConfig+0xdc>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d007      	beq.n	8006f12 <TIM_TI1_SetConfig+0x66>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4a21      	ldr	r2, [pc, #132]	@ (8006f8c <TIM_TI1_SetConfig+0xe0>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d003      	beq.n	8006f12 <TIM_TI1_SetConfig+0x66>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4a20      	ldr	r2, [pc, #128]	@ (8006f90 <TIM_TI1_SetConfig+0xe4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d101      	bne.n	8006f16 <TIM_TI1_SetConfig+0x6a>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <TIM_TI1_SetConfig+0x6c>
 8006f16:	2300      	movs	r3, #0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d008      	beq.n	8006f2e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f023 0303 	bic.w	r3, r3, #3
 8006f22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	e003      	b.n	8006f36 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f043 0301 	orr.w	r3, r3, #1
 8006f34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	011b      	lsls	r3, r3, #4
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f023 030a 	bic.w	r3, r3, #10
 8006f50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f003 030a 	and.w	r3, r3, #10
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	621a      	str	r2, [r3, #32]
}
 8006f6a:	bf00      	nop
 8006f6c:	371c      	adds	r7, #28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40012c00 	.word	0x40012c00
 8006f7c:	40000400 	.word	0x40000400
 8006f80:	40000800 	.word	0x40000800
 8006f84:	40000c00 	.word	0x40000c00
 8006f88:	40013400 	.word	0x40013400
 8006f8c:	40014000 	.word	0x40014000
 8006f90:	40015000 	.word	0x40015000

08006f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	f003 031f 	and.w	r3, r3, #31
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6a1a      	ldr	r2, [r3, #32]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	43db      	mvns	r3, r3
 8006fb6:	401a      	ands	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a1a      	ldr	r2, [r3, #32]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f003 031f 	and.w	r3, r3, #31
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	621a      	str	r2, [r3, #32]
}
 8006fd2:	bf00      	nop
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b08a      	sub	sp, #40	@ 0x28
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e0a0      	b.n	8007134 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7fa f9f2 	bl	80013f0 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3304      	adds	r3, #4
 800701c:	4619      	mov	r1, r3
 800701e:	4610      	mov	r0, r2
 8007020:	f7ff fb66 	bl	80066f0 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6818      	ldr	r0, [r3, #0]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	6819      	ldr	r1, [r3, #0]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	2203      	movs	r2, #3
 8007032:	f7ff ff3b 	bl	8006eac <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	699a      	ldr	r2, [r3, #24]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 020c 	bic.w	r2, r2, #12
 8007044:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6999      	ldr	r1, [r3, #24]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007066:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	6812      	ldr	r2, [r2, #0]
 8007072:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800707a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800708a:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800709a:	f023 0307 	bic.w	r3, r3, #7
 800709e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f042 0204 	orr.w	r2, r2, #4
 80070ae:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80070b4:	2300      	movs	r3, #0
 80070b6:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80070b8:	2370      	movs	r3, #112	@ 0x70
 80070ba:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80070bc:	2300      	movs	r3, #0
 80070be:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80070c0:	2300      	movs	r3, #0
 80070c2:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80070c4:	2300      	movs	r3, #0
 80070c6:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f107 020c 	add.w	r2, r7, #12
 80070d6:	4611      	mov	r1, r2
 80070d8:	4618      	mov	r0, r3
 80070da:	f7ff fc57 	bl	800698c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6812      	ldr	r2, [r2, #0]
 80070e8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80070ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070f0:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8007100:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3728      	adds	r7, #40	@ 0x28
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d109      	bne.n	8007160 <HAL_TIMEx_PWMN_Start+0x24>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b01      	cmp	r3, #1
 8007156:	bf14      	ite	ne
 8007158:	2301      	movne	r3, #1
 800715a:	2300      	moveq	r3, #0
 800715c:	b2db      	uxtb	r3, r3
 800715e:	e022      	b.n	80071a6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	2b04      	cmp	r3, #4
 8007164:	d109      	bne.n	800717a <HAL_TIMEx_PWMN_Start+0x3e>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b01      	cmp	r3, #1
 8007170:	bf14      	ite	ne
 8007172:	2301      	movne	r3, #1
 8007174:	2300      	moveq	r3, #0
 8007176:	b2db      	uxtb	r3, r3
 8007178:	e015      	b.n	80071a6 <HAL_TIMEx_PWMN_Start+0x6a>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b08      	cmp	r3, #8
 800717e:	d109      	bne.n	8007194 <HAL_TIMEx_PWMN_Start+0x58>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b01      	cmp	r3, #1
 800718a:	bf14      	ite	ne
 800718c:	2301      	movne	r3, #1
 800718e:	2300      	moveq	r3, #0
 8007190:	b2db      	uxtb	r3, r3
 8007192:	e008      	b.n	80071a6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b01      	cmp	r3, #1
 800719e:	bf14      	ite	ne
 80071a0:	2301      	movne	r3, #1
 80071a2:	2300      	moveq	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e073      	b.n	8007296 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d104      	bne.n	80071be <HAL_TIMEx_PWMN_Start+0x82>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071bc:	e013      	b.n	80071e6 <HAL_TIMEx_PWMN_Start+0xaa>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b04      	cmp	r3, #4
 80071c2:	d104      	bne.n	80071ce <HAL_TIMEx_PWMN_Start+0x92>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2202      	movs	r2, #2
 80071c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071cc:	e00b      	b.n	80071e6 <HAL_TIMEx_PWMN_Start+0xaa>
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d104      	bne.n	80071de <HAL_TIMEx_PWMN_Start+0xa2>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071dc:	e003      	b.n	80071e6 <HAL_TIMEx_PWMN_Start+0xaa>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2204      	movs	r2, #4
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fa34 	bl	800765c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007202:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a25      	ldr	r2, [pc, #148]	@ (80072a0 <HAL_TIMEx_PWMN_Start+0x164>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d022      	beq.n	8007254 <HAL_TIMEx_PWMN_Start+0x118>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007216:	d01d      	beq.n	8007254 <HAL_TIMEx_PWMN_Start+0x118>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a21      	ldr	r2, [pc, #132]	@ (80072a4 <HAL_TIMEx_PWMN_Start+0x168>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d018      	beq.n	8007254 <HAL_TIMEx_PWMN_Start+0x118>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a20      	ldr	r2, [pc, #128]	@ (80072a8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d013      	beq.n	8007254 <HAL_TIMEx_PWMN_Start+0x118>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a1e      	ldr	r2, [pc, #120]	@ (80072ac <HAL_TIMEx_PWMN_Start+0x170>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d00e      	beq.n	8007254 <HAL_TIMEx_PWMN_Start+0x118>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a1d      	ldr	r2, [pc, #116]	@ (80072b0 <HAL_TIMEx_PWMN_Start+0x174>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d009      	beq.n	8007254 <HAL_TIMEx_PWMN_Start+0x118>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a1b      	ldr	r2, [pc, #108]	@ (80072b4 <HAL_TIMEx_PWMN_Start+0x178>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d004      	beq.n	8007254 <HAL_TIMEx_PWMN_Start+0x118>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a1a      	ldr	r2, [pc, #104]	@ (80072b8 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d115      	bne.n	8007280 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689a      	ldr	r2, [r3, #8]
 800725a:	4b18      	ldr	r3, [pc, #96]	@ (80072bc <HAL_TIMEx_PWMN_Start+0x180>)
 800725c:	4013      	ands	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b06      	cmp	r3, #6
 8007264:	d015      	beq.n	8007292 <HAL_TIMEx_PWMN_Start+0x156>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800726c:	d011      	beq.n	8007292 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0201 	orr.w	r2, r2, #1
 800727c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727e:	e008      	b.n	8007292 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f042 0201 	orr.w	r2, r2, #1
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	e000      	b.n	8007294 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007292:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	40012c00 	.word	0x40012c00
 80072a4:	40000400 	.word	0x40000400
 80072a8:	40000800 	.word	0x40000800
 80072ac:	40000c00 	.word	0x40000c00
 80072b0:	40013400 	.word	0x40013400
 80072b4:	40014000 	.word	0x40014000
 80072b8:	40015000 	.word	0x40015000
 80072bc:	00010007 	.word	0x00010007

080072c0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2200      	movs	r2, #0
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 f9c2 	bl	800765c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6a1a      	ldr	r2, [r3, #32]
 80072de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80072e2:	4013      	ands	r3, r2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10f      	bne.n	8007308 <HAL_TIMEx_PWMN_Stop+0x48>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6a1a      	ldr	r2, [r3, #32]
 80072ee:	f244 4344 	movw	r3, #17476	@ 0x4444
 80072f2:	4013      	ands	r3, r2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d107      	bne.n	8007308 <HAL_TIMEx_PWMN_Stop+0x48>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007306:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6a1a      	ldr	r2, [r3, #32]
 800730e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007312:	4013      	ands	r3, r2
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10f      	bne.n	8007338 <HAL_TIMEx_PWMN_Stop+0x78>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6a1a      	ldr	r2, [r3, #32]
 800731e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007322:	4013      	ands	r3, r2
 8007324:	2b00      	cmp	r3, #0
 8007326:	d107      	bne.n	8007338 <HAL_TIMEx_PWMN_Stop+0x78>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0201 	bic.w	r2, r2, #1
 8007336:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d104      	bne.n	8007348 <HAL_TIMEx_PWMN_Stop+0x88>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007346:	e013      	b.n	8007370 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b04      	cmp	r3, #4
 800734c:	d104      	bne.n	8007358 <HAL_TIMEx_PWMN_Stop+0x98>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007356:	e00b      	b.n	8007370 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	2b08      	cmp	r3, #8
 800735c:	d104      	bne.n	8007368 <HAL_TIMEx_PWMN_Stop+0xa8>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007366:	e003      	b.n	8007370 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800738c:	2b01      	cmp	r3, #1
 800738e:	d101      	bne.n	8007394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007390:	2302      	movs	r3, #2
 8007392:	e074      	b.n	800747e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a34      	ldr	r2, [pc, #208]	@ (800748c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d009      	beq.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a33      	ldr	r2, [pc, #204]	@ (8007490 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d004      	beq.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a31      	ldr	r2, [pc, #196]	@ (8007494 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d108      	bne.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80073d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80073ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a21      	ldr	r2, [pc, #132]	@ (800748c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d022      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007414:	d01d      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a1f      	ldr	r2, [pc, #124]	@ (8007498 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d018      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a1d      	ldr	r2, [pc, #116]	@ (800749c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d013      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a1c      	ldr	r2, [pc, #112]	@ (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d00e      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a15      	ldr	r2, [pc, #84]	@ (8007490 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d009      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a18      	ldr	r2, [pc, #96]	@ (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d004      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a11      	ldr	r2, [pc, #68]	@ (8007494 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d10c      	bne.n	800746c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	4313      	orrs	r3, r2
 8007462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	40012c00 	.word	0x40012c00
 8007490:	40013400 	.word	0x40013400
 8007494:	40015000 	.word	0x40015000
 8007498:	40000400 	.word	0x40000400
 800749c:	40000800 	.word	0x40000800
 80074a0:	40000c00 	.word	0x40000c00
 80074a4:	40014000 	.word	0x40014000

080074a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d101      	bne.n	80074c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074c0:	2302      	movs	r3, #2
 80074c2:	e078      	b.n	80075b6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	041b      	lsls	r3, r3, #16
 800753a:	4313      	orrs	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	4313      	orrs	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a1c      	ldr	r2, [pc, #112]	@ (80075c4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d009      	beq.n	800756a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a1b      	ldr	r2, [pc, #108]	@ (80075c8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d004      	beq.n	800756a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a19      	ldr	r2, [pc, #100]	@ (80075cc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d11c      	bne.n	80075a4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007574:	051b      	lsls	r3, r3, #20
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a0:	4313      	orrs	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	40012c00 	.word	0x40012c00
 80075c8:	40013400 	.word	0x40013400
 80075cc:	40015000 	.word	0x40015000

080075d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	2204      	movs	r2, #4
 8007670:	fa02 f303 	lsl.w	r3, r2, r3
 8007674:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a1a      	ldr	r2, [r3, #32]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	43db      	mvns	r3, r3
 800767e:	401a      	ands	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6a1a      	ldr	r2, [r3, #32]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	fa01 f303 	lsl.w	r3, r1, r3
 8007694:	431a      	orrs	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	621a      	str	r2, [r3, #32]
}
 800769a:	bf00      	nop
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e042      	b.n	800773e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d106      	bne.n	80076d0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7fa f818 	bl	8001700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2224      	movs	r2, #36	@ 0x24
 80076d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f022 0201 	bic.w	r2, r2, #1
 80076e6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 ff61 	bl	80085b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fc62 	bl	8007fc0 <UART_SetConfig>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d101      	bne.n	8007706 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e01b      	b.n	800773e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007714:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007724:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f042 0201 	orr.w	r2, r2, #1
 8007734:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 ffe0 	bl	80086fc <UART_CheckIdleState>
 800773c:	4603      	mov	r3, r0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b08a      	sub	sp, #40	@ 0x28
 800774a:	af02      	add	r7, sp, #8
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	60b9      	str	r1, [r7, #8]
 8007750:	603b      	str	r3, [r7, #0]
 8007752:	4613      	mov	r3, r2
 8007754:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800775c:	2b20      	cmp	r3, #32
 800775e:	d17b      	bne.n	8007858 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <HAL_UART_Transmit+0x26>
 8007766:	88fb      	ldrh	r3, [r7, #6]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e074      	b.n	800785a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2221      	movs	r2, #33	@ 0x21
 800777c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007780:	f7fa fc48 	bl	8002014 <HAL_GetTick>
 8007784:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	88fa      	ldrh	r2, [r7, #6]
 800778a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	88fa      	ldrh	r2, [r7, #6]
 8007792:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800779e:	d108      	bne.n	80077b2 <HAL_UART_Transmit+0x6c>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d104      	bne.n	80077b2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80077a8:	2300      	movs	r3, #0
 80077aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	61bb      	str	r3, [r7, #24]
 80077b0:	e003      	b.n	80077ba <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077ba:	e030      	b.n	800781e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	2200      	movs	r2, #0
 80077c4:	2180      	movs	r1, #128	@ 0x80
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f001 f842 	bl	8008850 <UART_WaitOnFlagUntilTimeout>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d005      	beq.n	80077de <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e03d      	b.n	800785a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10b      	bne.n	80077fc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	461a      	mov	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	3302      	adds	r3, #2
 80077f8:	61bb      	str	r3, [r7, #24]
 80077fa:	e007      	b.n	800780c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	781a      	ldrb	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	3301      	adds	r3, #1
 800780a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007812:	b29b      	uxth	r3, r3
 8007814:	3b01      	subs	r3, #1
 8007816:	b29a      	uxth	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1c8      	bne.n	80077bc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2200      	movs	r2, #0
 8007832:	2140      	movs	r1, #64	@ 0x40
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f001 f80b 	bl	8008850 <UART_WaitOnFlagUntilTimeout>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2220      	movs	r2, #32
 8007844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e006      	b.n	800785a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2220      	movs	r2, #32
 8007850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	e000      	b.n	800785a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007858:	2302      	movs	r3, #2
  }
}
 800785a:	4618      	mov	r0, r3
 800785c:	3720      	adds	r7, #32
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b08a      	sub	sp, #40	@ 0x28
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	4613      	mov	r3, r2
 8007870:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007878:	2b20      	cmp	r3, #32
 800787a:	d137      	bne.n	80078ec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d002      	beq.n	8007888 <HAL_UART_Receive_IT+0x24>
 8007882:	88fb      	ldrh	r3, [r7, #6]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d101      	bne.n	800788c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e030      	b.n	80078ee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a18      	ldr	r2, [pc, #96]	@ (80078f8 <HAL_UART_Receive_IT+0x94>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d01f      	beq.n	80078dc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d018      	beq.n	80078dc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	613b      	str	r3, [r7, #16]
   return(result);
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078be:	627b      	str	r3, [r7, #36]	@ 0x24
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c8:	623b      	str	r3, [r7, #32]
 80078ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	69f9      	ldr	r1, [r7, #28]
 80078ce:	6a3a      	ldr	r2, [r7, #32]
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e6      	bne.n	80078aa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80078dc:	88fb      	ldrh	r3, [r7, #6]
 80078de:	461a      	mov	r2, r3
 80078e0:	68b9      	ldr	r1, [r7, #8]
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f001 f822 	bl	800892c <UART_Start_Receive_IT>
 80078e8:	4603      	mov	r3, r0
 80078ea:	e000      	b.n	80078ee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80078ec:	2302      	movs	r3, #2
  }
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3728      	adds	r7, #40	@ 0x28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	40008000 	.word	0x40008000

080078fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b0ba      	sub	sp, #232	@ 0xe8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007922:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007926:	f640 030f 	movw	r3, #2063	@ 0x80f
 800792a:	4013      	ands	r3, r2
 800792c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007930:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007934:	2b00      	cmp	r3, #0
 8007936:	d11b      	bne.n	8007970 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d015      	beq.n	8007970 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007948:	f003 0320 	and.w	r3, r3, #32
 800794c:	2b00      	cmp	r3, #0
 800794e:	d105      	bne.n	800795c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d009      	beq.n	8007970 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 8300 	beq.w	8007f66 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
      }
      return;
 800796e:	e2fa      	b.n	8007f66 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007970:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 8123 	beq.w	8007bc0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800797a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800797e:	4b8d      	ldr	r3, [pc, #564]	@ (8007bb4 <HAL_UART_IRQHandler+0x2b8>)
 8007980:	4013      	ands	r3, r2
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007986:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800798a:	4b8b      	ldr	r3, [pc, #556]	@ (8007bb8 <HAL_UART_IRQHandler+0x2bc>)
 800798c:	4013      	ands	r3, r2
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 8116 	beq.w	8007bc0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d011      	beq.n	80079c4 <HAL_UART_IRQHandler+0xc8>
 80079a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00b      	beq.n	80079c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2201      	movs	r2, #1
 80079b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ba:	f043 0201 	orr.w	r2, r3, #1
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d011      	beq.n	80079f4 <HAL_UART_IRQHandler+0xf8>
 80079d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00b      	beq.n	80079f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2202      	movs	r2, #2
 80079e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ea:	f043 0204 	orr.w	r2, r3, #4
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d011      	beq.n	8007a24 <HAL_UART_IRQHandler+0x128>
 8007a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00b      	beq.n	8007a24 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2204      	movs	r2, #4
 8007a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a1a:	f043 0202 	orr.w	r2, r3, #2
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d017      	beq.n	8007a60 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a34:	f003 0320 	and.w	r3, r3, #32
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d105      	bne.n	8007a48 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a3c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007a40:	4b5c      	ldr	r3, [pc, #368]	@ (8007bb4 <HAL_UART_IRQHandler+0x2b8>)
 8007a42:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00b      	beq.n	8007a60 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2208      	movs	r2, #8
 8007a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a56:	f043 0208 	orr.w	r2, r3, #8
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d012      	beq.n	8007a92 <HAL_UART_IRQHandler+0x196>
 8007a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00c      	beq.n	8007a92 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a88:	f043 0220 	orr.w	r2, r3, #32
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8266 	beq.w	8007f6a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d013      	beq.n	8007ad2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d105      	bne.n	8007ac2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d007      	beq.n	8007ad2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ae6:	2b40      	cmp	r3, #64	@ 0x40
 8007ae8:	d005      	beq.n	8007af6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007aee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d054      	beq.n	8007ba0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 f83a 	bl	8008b70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b06:	2b40      	cmp	r3, #64	@ 0x40
 8007b08:	d146      	bne.n	8007b98 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3308      	adds	r3, #8
 8007b10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3308      	adds	r3, #8
 8007b32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1d9      	bne.n	8007b0a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d017      	beq.n	8007b90 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b66:	4a15      	ldr	r2, [pc, #84]	@ (8007bbc <HAL_UART_IRQHandler+0x2c0>)
 8007b68:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fc fbed 	bl	8004350 <HAL_DMA_Abort_IT>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d019      	beq.n	8007bb0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b8e:	e00f      	b.n	8007bb0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f9ff 	bl	8007f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b96:	e00b      	b.n	8007bb0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f9fb 	bl	8007f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b9e:	e007      	b.n	8007bb0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f9f7 	bl	8007f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007bae:	e1dc      	b.n	8007f6a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb0:	bf00      	nop
    return;
 8007bb2:	e1da      	b.n	8007f6a <HAL_UART_IRQHandler+0x66e>
 8007bb4:	10000001 	.word	0x10000001
 8007bb8:	04000120 	.word	0x04000120
 8007bbc:	08008c3d 	.word	0x08008c3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	f040 8170 	bne.w	8007eaa <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bce:	f003 0310 	and.w	r3, r3, #16
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 8169 	beq.w	8007eaa <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bdc:	f003 0310 	and.w	r3, r3, #16
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 8162 	beq.w	8007eaa <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2210      	movs	r2, #16
 8007bec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf8:	2b40      	cmp	r3, #64	@ 0x40
 8007bfa:	f040 80d8 	bne.w	8007dae <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 80af 	beq.w	8007d74 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c20:	429a      	cmp	r2, r3
 8007c22:	f080 80a7 	bcs.w	8007d74 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f040 8087 	bne.w	8007d52 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007c58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c72:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1da      	bne.n	8007c44 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3308      	adds	r3, #8
 8007c94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ca0:	f023 0301 	bic.w	r3, r3, #1
 8007ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3308      	adds	r3, #8
 8007cae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007cb2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007cb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007cba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007cc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e1      	bne.n	8007c8e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3308      	adds	r3, #8
 8007cd0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007cda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3308      	adds	r3, #8
 8007cea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007cee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007cf0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007cf4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007cfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e3      	bne.n	8007cca <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d20:	f023 0310 	bic.w	r3, r3, #16
 8007d24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d34:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d3a:	e841 2300 	strex	r3, r2, [r1]
 8007d3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1e4      	bne.n	8007d10 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fc faa6 	bl	800429e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2202      	movs	r2, #2
 8007d56:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f91b 	bl	8007fa8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007d72:	e0fc      	b.n	8007f6e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	f040 80f5 	bne.w	8007f6e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b20      	cmp	r3, #32
 8007d94:	f040 80eb 	bne.w	8007f6e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f8fe 	bl	8007fa8 <HAL_UARTEx_RxEventCallback>
      return;
 8007dac:	e0df      	b.n	8007f6e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 80d1 	beq.w	8007f72 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007dd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 80cc 	beq.w	8007f72 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de2:	e853 3f00 	ldrex	r3, [r3]
 8007de6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dfe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e04:	e841 2300 	strex	r3, r2, [r1]
 8007e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e4      	bne.n	8007dda <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3308      	adds	r3, #8
 8007e16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	623b      	str	r3, [r7, #32]
   return(result);
 8007e20:	6a3b      	ldr	r3, [r7, #32]
 8007e22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e26:	f023 0301 	bic.w	r3, r3, #1
 8007e2a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3308      	adds	r3, #8
 8007e34:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e38:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e1      	bne.n	8007e10 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f023 0310 	bic.w	r3, r3, #16
 8007e74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e82:	61fb      	str	r3, [r7, #28]
 8007e84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e86:	69b9      	ldr	r1, [r7, #24]
 8007e88:	69fa      	ldr	r2, [r7, #28]
 8007e8a:	e841 2300 	strex	r3, r2, [r1]
 8007e8e:	617b      	str	r3, [r7, #20]
   return(result);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e4      	bne.n	8007e60 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2202      	movs	r2, #2
 8007e9a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f880 	bl	8007fa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ea8:	e063      	b.n	8007f72 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00e      	beq.n	8007ed4 <HAL_UART_IRQHandler+0x5d8>
 8007eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d008      	beq.n	8007ed4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007eca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f001 fc13 	bl	80096f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ed2:	e051      	b.n	8007f78 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d014      	beq.n	8007f0a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d105      	bne.n	8007ef8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ef0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d008      	beq.n	8007f0a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d03a      	beq.n	8007f76 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	4798      	blx	r3
    }
    return;
 8007f08:	e035      	b.n	8007f76 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d009      	beq.n	8007f2a <HAL_UART_IRQHandler+0x62e>
 8007f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fe9c 	bl	8008c60 <UART_EndTransmit_IT>
    return;
 8007f28:	e026      	b.n	8007f78 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d009      	beq.n	8007f4a <HAL_UART_IRQHandler+0x64e>
 8007f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f3a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 fbec 	bl	8009720 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f48:	e016      	b.n	8007f78 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d010      	beq.n	8007f78 <HAL_UART_IRQHandler+0x67c>
 8007f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	da0c      	bge.n	8007f78 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 fbd4 	bl	800970c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f64:	e008      	b.n	8007f78 <HAL_UART_IRQHandler+0x67c>
      return;
 8007f66:	bf00      	nop
 8007f68:	e006      	b.n	8007f78 <HAL_UART_IRQHandler+0x67c>
    return;
 8007f6a:	bf00      	nop
 8007f6c:	e004      	b.n	8007f78 <HAL_UART_IRQHandler+0x67c>
      return;
 8007f6e:	bf00      	nop
 8007f70:	e002      	b.n	8007f78 <HAL_UART_IRQHandler+0x67c>
      return;
 8007f72:	bf00      	nop
 8007f74:	e000      	b.n	8007f78 <HAL_UART_IRQHandler+0x67c>
    return;
 8007f76:	bf00      	nop
  }
}
 8007f78:	37e8      	adds	r7, #232	@ 0xe8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop

08007f80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fc4:	b08c      	sub	sp, #48	@ 0x30
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	689a      	ldr	r2, [r3, #8]
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	69db      	ldr	r3, [r3, #28]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	4baa      	ldr	r3, [pc, #680]	@ (8008298 <UART_SetConfig+0x2d8>)
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	6812      	ldr	r2, [r2, #0]
 8007ff6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	430a      	orrs	r2, r1
 8008010:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a9f      	ldr	r2, [pc, #636]	@ (800829c <UART_SetConfig+0x2dc>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d004      	beq.n	800802c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008028:	4313      	orrs	r3, r2
 800802a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008036:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	6812      	ldr	r2, [r2, #0]
 800803e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008040:	430b      	orrs	r3, r1
 8008042:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804a:	f023 010f 	bic.w	r1, r3, #15
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a90      	ldr	r2, [pc, #576]	@ (80082a0 <UART_SetConfig+0x2e0>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d125      	bne.n	80080b0 <UART_SetConfig+0xf0>
 8008064:	4b8f      	ldr	r3, [pc, #572]	@ (80082a4 <UART_SetConfig+0x2e4>)
 8008066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800806a:	f003 0303 	and.w	r3, r3, #3
 800806e:	2b03      	cmp	r3, #3
 8008070:	d81a      	bhi.n	80080a8 <UART_SetConfig+0xe8>
 8008072:	a201      	add	r2, pc, #4	@ (adr r2, 8008078 <UART_SetConfig+0xb8>)
 8008074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008078:	08008089 	.word	0x08008089
 800807c:	08008099 	.word	0x08008099
 8008080:	08008091 	.word	0x08008091
 8008084:	080080a1 	.word	0x080080a1
 8008088:	2301      	movs	r3, #1
 800808a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800808e:	e116      	b.n	80082be <UART_SetConfig+0x2fe>
 8008090:	2302      	movs	r3, #2
 8008092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008096:	e112      	b.n	80082be <UART_SetConfig+0x2fe>
 8008098:	2304      	movs	r3, #4
 800809a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800809e:	e10e      	b.n	80082be <UART_SetConfig+0x2fe>
 80080a0:	2308      	movs	r3, #8
 80080a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080a6:	e10a      	b.n	80082be <UART_SetConfig+0x2fe>
 80080a8:	2310      	movs	r3, #16
 80080aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ae:	e106      	b.n	80082be <UART_SetConfig+0x2fe>
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a7c      	ldr	r2, [pc, #496]	@ (80082a8 <UART_SetConfig+0x2e8>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d138      	bne.n	800812c <UART_SetConfig+0x16c>
 80080ba:	4b7a      	ldr	r3, [pc, #488]	@ (80082a4 <UART_SetConfig+0x2e4>)
 80080bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080c0:	f003 030c 	and.w	r3, r3, #12
 80080c4:	2b0c      	cmp	r3, #12
 80080c6:	d82d      	bhi.n	8008124 <UART_SetConfig+0x164>
 80080c8:	a201      	add	r2, pc, #4	@ (adr r2, 80080d0 <UART_SetConfig+0x110>)
 80080ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ce:	bf00      	nop
 80080d0:	08008105 	.word	0x08008105
 80080d4:	08008125 	.word	0x08008125
 80080d8:	08008125 	.word	0x08008125
 80080dc:	08008125 	.word	0x08008125
 80080e0:	08008115 	.word	0x08008115
 80080e4:	08008125 	.word	0x08008125
 80080e8:	08008125 	.word	0x08008125
 80080ec:	08008125 	.word	0x08008125
 80080f0:	0800810d 	.word	0x0800810d
 80080f4:	08008125 	.word	0x08008125
 80080f8:	08008125 	.word	0x08008125
 80080fc:	08008125 	.word	0x08008125
 8008100:	0800811d 	.word	0x0800811d
 8008104:	2300      	movs	r3, #0
 8008106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800810a:	e0d8      	b.n	80082be <UART_SetConfig+0x2fe>
 800810c:	2302      	movs	r3, #2
 800810e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008112:	e0d4      	b.n	80082be <UART_SetConfig+0x2fe>
 8008114:	2304      	movs	r3, #4
 8008116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800811a:	e0d0      	b.n	80082be <UART_SetConfig+0x2fe>
 800811c:	2308      	movs	r3, #8
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008122:	e0cc      	b.n	80082be <UART_SetConfig+0x2fe>
 8008124:	2310      	movs	r3, #16
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800812a:	e0c8      	b.n	80082be <UART_SetConfig+0x2fe>
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a5e      	ldr	r2, [pc, #376]	@ (80082ac <UART_SetConfig+0x2ec>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d125      	bne.n	8008182 <UART_SetConfig+0x1c2>
 8008136:	4b5b      	ldr	r3, [pc, #364]	@ (80082a4 <UART_SetConfig+0x2e4>)
 8008138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800813c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008140:	2b30      	cmp	r3, #48	@ 0x30
 8008142:	d016      	beq.n	8008172 <UART_SetConfig+0x1b2>
 8008144:	2b30      	cmp	r3, #48	@ 0x30
 8008146:	d818      	bhi.n	800817a <UART_SetConfig+0x1ba>
 8008148:	2b20      	cmp	r3, #32
 800814a:	d00a      	beq.n	8008162 <UART_SetConfig+0x1a2>
 800814c:	2b20      	cmp	r3, #32
 800814e:	d814      	bhi.n	800817a <UART_SetConfig+0x1ba>
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <UART_SetConfig+0x19a>
 8008154:	2b10      	cmp	r3, #16
 8008156:	d008      	beq.n	800816a <UART_SetConfig+0x1aa>
 8008158:	e00f      	b.n	800817a <UART_SetConfig+0x1ba>
 800815a:	2300      	movs	r3, #0
 800815c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008160:	e0ad      	b.n	80082be <UART_SetConfig+0x2fe>
 8008162:	2302      	movs	r3, #2
 8008164:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008168:	e0a9      	b.n	80082be <UART_SetConfig+0x2fe>
 800816a:	2304      	movs	r3, #4
 800816c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008170:	e0a5      	b.n	80082be <UART_SetConfig+0x2fe>
 8008172:	2308      	movs	r3, #8
 8008174:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008178:	e0a1      	b.n	80082be <UART_SetConfig+0x2fe>
 800817a:	2310      	movs	r3, #16
 800817c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008180:	e09d      	b.n	80082be <UART_SetConfig+0x2fe>
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a4a      	ldr	r2, [pc, #296]	@ (80082b0 <UART_SetConfig+0x2f0>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d125      	bne.n	80081d8 <UART_SetConfig+0x218>
 800818c:	4b45      	ldr	r3, [pc, #276]	@ (80082a4 <UART_SetConfig+0x2e4>)
 800818e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008192:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008196:	2bc0      	cmp	r3, #192	@ 0xc0
 8008198:	d016      	beq.n	80081c8 <UART_SetConfig+0x208>
 800819a:	2bc0      	cmp	r3, #192	@ 0xc0
 800819c:	d818      	bhi.n	80081d0 <UART_SetConfig+0x210>
 800819e:	2b80      	cmp	r3, #128	@ 0x80
 80081a0:	d00a      	beq.n	80081b8 <UART_SetConfig+0x1f8>
 80081a2:	2b80      	cmp	r3, #128	@ 0x80
 80081a4:	d814      	bhi.n	80081d0 <UART_SetConfig+0x210>
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <UART_SetConfig+0x1f0>
 80081aa:	2b40      	cmp	r3, #64	@ 0x40
 80081ac:	d008      	beq.n	80081c0 <UART_SetConfig+0x200>
 80081ae:	e00f      	b.n	80081d0 <UART_SetConfig+0x210>
 80081b0:	2300      	movs	r3, #0
 80081b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081b6:	e082      	b.n	80082be <UART_SetConfig+0x2fe>
 80081b8:	2302      	movs	r3, #2
 80081ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081be:	e07e      	b.n	80082be <UART_SetConfig+0x2fe>
 80081c0:	2304      	movs	r3, #4
 80081c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081c6:	e07a      	b.n	80082be <UART_SetConfig+0x2fe>
 80081c8:	2308      	movs	r3, #8
 80081ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ce:	e076      	b.n	80082be <UART_SetConfig+0x2fe>
 80081d0:	2310      	movs	r3, #16
 80081d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081d6:	e072      	b.n	80082be <UART_SetConfig+0x2fe>
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a35      	ldr	r2, [pc, #212]	@ (80082b4 <UART_SetConfig+0x2f4>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d12a      	bne.n	8008238 <UART_SetConfig+0x278>
 80081e2:	4b30      	ldr	r3, [pc, #192]	@ (80082a4 <UART_SetConfig+0x2e4>)
 80081e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081f0:	d01a      	beq.n	8008228 <UART_SetConfig+0x268>
 80081f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081f6:	d81b      	bhi.n	8008230 <UART_SetConfig+0x270>
 80081f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081fc:	d00c      	beq.n	8008218 <UART_SetConfig+0x258>
 80081fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008202:	d815      	bhi.n	8008230 <UART_SetConfig+0x270>
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <UART_SetConfig+0x250>
 8008208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800820c:	d008      	beq.n	8008220 <UART_SetConfig+0x260>
 800820e:	e00f      	b.n	8008230 <UART_SetConfig+0x270>
 8008210:	2300      	movs	r3, #0
 8008212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008216:	e052      	b.n	80082be <UART_SetConfig+0x2fe>
 8008218:	2302      	movs	r3, #2
 800821a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800821e:	e04e      	b.n	80082be <UART_SetConfig+0x2fe>
 8008220:	2304      	movs	r3, #4
 8008222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008226:	e04a      	b.n	80082be <UART_SetConfig+0x2fe>
 8008228:	2308      	movs	r3, #8
 800822a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800822e:	e046      	b.n	80082be <UART_SetConfig+0x2fe>
 8008230:	2310      	movs	r3, #16
 8008232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008236:	e042      	b.n	80082be <UART_SetConfig+0x2fe>
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a17      	ldr	r2, [pc, #92]	@ (800829c <UART_SetConfig+0x2dc>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d13a      	bne.n	80082b8 <UART_SetConfig+0x2f8>
 8008242:	4b18      	ldr	r3, [pc, #96]	@ (80082a4 <UART_SetConfig+0x2e4>)
 8008244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008248:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800824c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008250:	d01a      	beq.n	8008288 <UART_SetConfig+0x2c8>
 8008252:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008256:	d81b      	bhi.n	8008290 <UART_SetConfig+0x2d0>
 8008258:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800825c:	d00c      	beq.n	8008278 <UART_SetConfig+0x2b8>
 800825e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008262:	d815      	bhi.n	8008290 <UART_SetConfig+0x2d0>
 8008264:	2b00      	cmp	r3, #0
 8008266:	d003      	beq.n	8008270 <UART_SetConfig+0x2b0>
 8008268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800826c:	d008      	beq.n	8008280 <UART_SetConfig+0x2c0>
 800826e:	e00f      	b.n	8008290 <UART_SetConfig+0x2d0>
 8008270:	2300      	movs	r3, #0
 8008272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008276:	e022      	b.n	80082be <UART_SetConfig+0x2fe>
 8008278:	2302      	movs	r3, #2
 800827a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800827e:	e01e      	b.n	80082be <UART_SetConfig+0x2fe>
 8008280:	2304      	movs	r3, #4
 8008282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008286:	e01a      	b.n	80082be <UART_SetConfig+0x2fe>
 8008288:	2308      	movs	r3, #8
 800828a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800828e:	e016      	b.n	80082be <UART_SetConfig+0x2fe>
 8008290:	2310      	movs	r3, #16
 8008292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008296:	e012      	b.n	80082be <UART_SetConfig+0x2fe>
 8008298:	cfff69f3 	.word	0xcfff69f3
 800829c:	40008000 	.word	0x40008000
 80082a0:	40013800 	.word	0x40013800
 80082a4:	40021000 	.word	0x40021000
 80082a8:	40004400 	.word	0x40004400
 80082ac:	40004800 	.word	0x40004800
 80082b0:	40004c00 	.word	0x40004c00
 80082b4:	40005000 	.word	0x40005000
 80082b8:	2310      	movs	r3, #16
 80082ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4aae      	ldr	r2, [pc, #696]	@ (800857c <UART_SetConfig+0x5bc>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	f040 8097 	bne.w	80083f8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80082ce:	2b08      	cmp	r3, #8
 80082d0:	d823      	bhi.n	800831a <UART_SetConfig+0x35a>
 80082d2:	a201      	add	r2, pc, #4	@ (adr r2, 80082d8 <UART_SetConfig+0x318>)
 80082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d8:	080082fd 	.word	0x080082fd
 80082dc:	0800831b 	.word	0x0800831b
 80082e0:	08008305 	.word	0x08008305
 80082e4:	0800831b 	.word	0x0800831b
 80082e8:	0800830b 	.word	0x0800830b
 80082ec:	0800831b 	.word	0x0800831b
 80082f0:	0800831b 	.word	0x0800831b
 80082f4:	0800831b 	.word	0x0800831b
 80082f8:	08008313 	.word	0x08008313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082fc:	f7fd f90c 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8008300:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008302:	e010      	b.n	8008326 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008304:	4b9e      	ldr	r3, [pc, #632]	@ (8008580 <UART_SetConfig+0x5c0>)
 8008306:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008308:	e00d      	b.n	8008326 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800830a:	f7fd f897 	bl	800543c <HAL_RCC_GetSysClockFreq>
 800830e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008310:	e009      	b.n	8008326 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008316:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008318:	e005      	b.n	8008326 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008324:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 8130 	beq.w	800858e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008332:	4a94      	ldr	r2, [pc, #592]	@ (8008584 <UART_SetConfig+0x5c4>)
 8008334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008338:	461a      	mov	r2, r3
 800833a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008340:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	4613      	mov	r3, r2
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	4413      	add	r3, r2
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	429a      	cmp	r2, r3
 8008350:	d305      	bcc.n	800835e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	429a      	cmp	r2, r3
 800835c:	d903      	bls.n	8008366 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008364:	e113      	b.n	800858e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	2200      	movs	r2, #0
 800836a:	60bb      	str	r3, [r7, #8]
 800836c:	60fa      	str	r2, [r7, #12]
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008372:	4a84      	ldr	r2, [pc, #528]	@ (8008584 <UART_SetConfig+0x5c4>)
 8008374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008378:	b29b      	uxth	r3, r3
 800837a:	2200      	movs	r2, #0
 800837c:	603b      	str	r3, [r7, #0]
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008384:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008388:	f7f7 ffb2 	bl	80002f0 <__aeabi_uldivmod>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	4610      	mov	r0, r2
 8008392:	4619      	mov	r1, r3
 8008394:	f04f 0200 	mov.w	r2, #0
 8008398:	f04f 0300 	mov.w	r3, #0
 800839c:	020b      	lsls	r3, r1, #8
 800839e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80083a2:	0202      	lsls	r2, r0, #8
 80083a4:	6979      	ldr	r1, [r7, #20]
 80083a6:	6849      	ldr	r1, [r1, #4]
 80083a8:	0849      	lsrs	r1, r1, #1
 80083aa:	2000      	movs	r0, #0
 80083ac:	460c      	mov	r4, r1
 80083ae:	4605      	mov	r5, r0
 80083b0:	eb12 0804 	adds.w	r8, r2, r4
 80083b4:	eb43 0905 	adc.w	r9, r3, r5
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	469a      	mov	sl, r3
 80083c0:	4693      	mov	fp, r2
 80083c2:	4652      	mov	r2, sl
 80083c4:	465b      	mov	r3, fp
 80083c6:	4640      	mov	r0, r8
 80083c8:	4649      	mov	r1, r9
 80083ca:	f7f7 ff91 	bl	80002f0 <__aeabi_uldivmod>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	4613      	mov	r3, r2
 80083d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083dc:	d308      	bcc.n	80083f0 <UART_SetConfig+0x430>
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083e4:	d204      	bcs.n	80083f0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6a3a      	ldr	r2, [r7, #32]
 80083ec:	60da      	str	r2, [r3, #12]
 80083ee:	e0ce      	b.n	800858e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083f6:	e0ca      	b.n	800858e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	69db      	ldr	r3, [r3, #28]
 80083fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008400:	d166      	bne.n	80084d0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008402:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008406:	2b08      	cmp	r3, #8
 8008408:	d827      	bhi.n	800845a <UART_SetConfig+0x49a>
 800840a:	a201      	add	r2, pc, #4	@ (adr r2, 8008410 <UART_SetConfig+0x450>)
 800840c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008410:	08008435 	.word	0x08008435
 8008414:	0800843d 	.word	0x0800843d
 8008418:	08008445 	.word	0x08008445
 800841c:	0800845b 	.word	0x0800845b
 8008420:	0800844b 	.word	0x0800844b
 8008424:	0800845b 	.word	0x0800845b
 8008428:	0800845b 	.word	0x0800845b
 800842c:	0800845b 	.word	0x0800845b
 8008430:	08008453 	.word	0x08008453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008434:	f7fd f870 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8008438:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800843a:	e014      	b.n	8008466 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800843c:	f7fd f882 	bl	8005544 <HAL_RCC_GetPCLK2Freq>
 8008440:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008442:	e010      	b.n	8008466 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008444:	4b4e      	ldr	r3, [pc, #312]	@ (8008580 <UART_SetConfig+0x5c0>)
 8008446:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008448:	e00d      	b.n	8008466 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800844a:	f7fc fff7 	bl	800543c <HAL_RCC_GetSysClockFreq>
 800844e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008450:	e009      	b.n	8008466 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008456:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008458:	e005      	b.n	8008466 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800845a:	2300      	movs	r3, #0
 800845c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008464:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 8090 	beq.w	800858e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008472:	4a44      	ldr	r2, [pc, #272]	@ (8008584 <UART_SetConfig+0x5c4>)
 8008474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008478:	461a      	mov	r2, r3
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008480:	005a      	lsls	r2, r3, #1
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	085b      	lsrs	r3, r3, #1
 8008488:	441a      	add	r2, r3
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008492:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	2b0f      	cmp	r3, #15
 8008498:	d916      	bls.n	80084c8 <UART_SetConfig+0x508>
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084a0:	d212      	bcs.n	80084c8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f023 030f 	bic.w	r3, r3, #15
 80084aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	085b      	lsrs	r3, r3, #1
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	8bfb      	ldrh	r3, [r7, #30]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	8bfa      	ldrh	r2, [r7, #30]
 80084c4:	60da      	str	r2, [r3, #12]
 80084c6:	e062      	b.n	800858e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80084ce:	e05e      	b.n	800858e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80084d4:	2b08      	cmp	r3, #8
 80084d6:	d828      	bhi.n	800852a <UART_SetConfig+0x56a>
 80084d8:	a201      	add	r2, pc, #4	@ (adr r2, 80084e0 <UART_SetConfig+0x520>)
 80084da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084de:	bf00      	nop
 80084e0:	08008505 	.word	0x08008505
 80084e4:	0800850d 	.word	0x0800850d
 80084e8:	08008515 	.word	0x08008515
 80084ec:	0800852b 	.word	0x0800852b
 80084f0:	0800851b 	.word	0x0800851b
 80084f4:	0800852b 	.word	0x0800852b
 80084f8:	0800852b 	.word	0x0800852b
 80084fc:	0800852b 	.word	0x0800852b
 8008500:	08008523 	.word	0x08008523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008504:	f7fd f808 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8008508:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800850a:	e014      	b.n	8008536 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800850c:	f7fd f81a 	bl	8005544 <HAL_RCC_GetPCLK2Freq>
 8008510:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008512:	e010      	b.n	8008536 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008514:	4b1a      	ldr	r3, [pc, #104]	@ (8008580 <UART_SetConfig+0x5c0>)
 8008516:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008518:	e00d      	b.n	8008536 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800851a:	f7fc ff8f 	bl	800543c <HAL_RCC_GetSysClockFreq>
 800851e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008520:	e009      	b.n	8008536 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008526:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008528:	e005      	b.n	8008536 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008534:	bf00      	nop
    }

    if (pclk != 0U)
 8008536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008538:	2b00      	cmp	r3, #0
 800853a:	d028      	beq.n	800858e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008540:	4a10      	ldr	r2, [pc, #64]	@ (8008584 <UART_SetConfig+0x5c4>)
 8008542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008546:	461a      	mov	r2, r3
 8008548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854a:	fbb3 f2f2 	udiv	r2, r3, r2
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	085b      	lsrs	r3, r3, #1
 8008554:	441a      	add	r2, r3
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	fbb2 f3f3 	udiv	r3, r2, r3
 800855e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	2b0f      	cmp	r3, #15
 8008564:	d910      	bls.n	8008588 <UART_SetConfig+0x5c8>
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800856c:	d20c      	bcs.n	8008588 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	b29a      	uxth	r2, r3
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60da      	str	r2, [r3, #12]
 8008578:	e009      	b.n	800858e <UART_SetConfig+0x5ce>
 800857a:	bf00      	nop
 800857c:	40008000 	.word	0x40008000
 8008580:	00f42400 	.word	0x00f42400
 8008584:	0800b0c4 	.word	0x0800b0c4
      }
      else
      {
        ret = HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2201      	movs	r2, #1
 8008592:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	2201      	movs	r2, #1
 800859a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2200      	movs	r2, #0
 80085a2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	2200      	movs	r2, #0
 80085a8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80085aa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3730      	adds	r7, #48	@ 0x30
 80085b2:	46bd      	mov	sp, r7
 80085b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080085b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c4:	f003 0308 	and.w	r3, r3, #8
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00a      	beq.n	80085e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	430a      	orrs	r2, r1
 80085e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	430a      	orrs	r2, r1
 8008602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008608:	f003 0302 	and.w	r3, r3, #2
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00a      	beq.n	8008626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862a:	f003 0304 	and.w	r3, r3, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00a      	beq.n	8008648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	430a      	orrs	r2, r1
 8008646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800864c:	f003 0310 	and.w	r3, r3, #16
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00a      	beq.n	800866a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	430a      	orrs	r2, r1
 8008668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00a      	beq.n	800868c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	430a      	orrs	r2, r1
 800868a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008694:	2b00      	cmp	r3, #0
 8008696:	d01a      	beq.n	80086ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086b6:	d10a      	bne.n	80086ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	430a      	orrs	r2, r1
 80086cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	430a      	orrs	r2, r1
 80086ee:	605a      	str	r2, [r3, #4]
  }
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b098      	sub	sp, #96	@ 0x60
 8008700:	af02      	add	r7, sp, #8
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800870c:	f7f9 fc82 	bl	8002014 <HAL_GetTick>
 8008710:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0308 	and.w	r3, r3, #8
 800871c:	2b08      	cmp	r3, #8
 800871e:	d12f      	bne.n	8008780 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008720:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008728:	2200      	movs	r2, #0
 800872a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f88e 	bl	8008850 <UART_WaitOnFlagUntilTimeout>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d022      	beq.n	8008780 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008742:	e853 3f00 	ldrex	r3, [r3]
 8008746:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800874a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800874e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	461a      	mov	r2, r3
 8008756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008758:	647b      	str	r3, [r7, #68]	@ 0x44
 800875a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800875e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008760:	e841 2300 	strex	r3, r2, [r1]
 8008764:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e6      	bne.n	800873a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2220      	movs	r2, #32
 8008770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e063      	b.n	8008848 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b04      	cmp	r3, #4
 800878c:	d149      	bne.n	8008822 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800878e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008796:	2200      	movs	r2, #0
 8008798:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f857 	bl	8008850 <UART_WaitOnFlagUntilTimeout>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d03c      	beq.n	8008822 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	623b      	str	r3, [r7, #32]
   return(result);
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80087c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e6      	bne.n	80087a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f023 0301 	bic.w	r3, r3, #1
 80087f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3308      	adds	r3, #8
 80087f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087fa:	61fa      	str	r2, [r7, #28]
 80087fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	69b9      	ldr	r1, [r7, #24]
 8008800:	69fa      	ldr	r2, [r7, #28]
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	617b      	str	r3, [r7, #20]
   return(result);
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e5      	bne.n	80087da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2220      	movs	r2, #32
 8008812:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e012      	b.n	8008848 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2220      	movs	r2, #32
 8008826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2220      	movs	r2, #32
 800882e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3758      	adds	r7, #88	@ 0x58
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	4613      	mov	r3, r2
 800885e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008860:	e04f      	b.n	8008902 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008868:	d04b      	beq.n	8008902 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800886a:	f7f9 fbd3 	bl	8002014 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	69ba      	ldr	r2, [r7, #24]
 8008876:	429a      	cmp	r2, r3
 8008878:	d302      	bcc.n	8008880 <UART_WaitOnFlagUntilTimeout+0x30>
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e04e      	b.n	8008922 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b00      	cmp	r3, #0
 8008890:	d037      	beq.n	8008902 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	2b80      	cmp	r3, #128	@ 0x80
 8008896:	d034      	beq.n	8008902 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2b40      	cmp	r3, #64	@ 0x40
 800889c:	d031      	beq.n	8008902 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	69db      	ldr	r3, [r3, #28]
 80088a4:	f003 0308 	and.w	r3, r3, #8
 80088a8:	2b08      	cmp	r3, #8
 80088aa:	d110      	bne.n	80088ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2208      	movs	r2, #8
 80088b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f95b 	bl	8008b70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2208      	movs	r2, #8
 80088be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e029      	b.n	8008922 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088dc:	d111      	bne.n	8008902 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 f941 	bl	8008b70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e00f      	b.n	8008922 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	69da      	ldr	r2, [r3, #28]
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	4013      	ands	r3, r2
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	429a      	cmp	r2, r3
 8008910:	bf0c      	ite	eq
 8008912:	2301      	moveq	r3, #1
 8008914:	2300      	movne	r3, #0
 8008916:	b2db      	uxtb	r3, r3
 8008918:	461a      	mov	r2, r3
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	429a      	cmp	r2, r3
 800891e:	d0a0      	beq.n	8008862 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
	...

0800892c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800892c:	b480      	push	{r7}
 800892e:	b0a3      	sub	sp, #140	@ 0x8c
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	4613      	mov	r3, r2
 8008938:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	88fa      	ldrh	r2, [r7, #6]
 8008944:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	88fa      	ldrh	r2, [r7, #6]
 800894c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800895e:	d10e      	bne.n	800897e <UART_Start_Receive_IT+0x52>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d105      	bne.n	8008974 <UART_Start_Receive_IT+0x48>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800896e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008972:	e02d      	b.n	80089d0 <UART_Start_Receive_IT+0xa4>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	22ff      	movs	r2, #255	@ 0xff
 8008978:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800897c:	e028      	b.n	80089d0 <UART_Start_Receive_IT+0xa4>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10d      	bne.n	80089a2 <UART_Start_Receive_IT+0x76>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d104      	bne.n	8008998 <UART_Start_Receive_IT+0x6c>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	22ff      	movs	r2, #255	@ 0xff
 8008992:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008996:	e01b      	b.n	80089d0 <UART_Start_Receive_IT+0xa4>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	227f      	movs	r2, #127	@ 0x7f
 800899c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80089a0:	e016      	b.n	80089d0 <UART_Start_Receive_IT+0xa4>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089aa:	d10d      	bne.n	80089c8 <UART_Start_Receive_IT+0x9c>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d104      	bne.n	80089be <UART_Start_Receive_IT+0x92>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	227f      	movs	r2, #127	@ 0x7f
 80089b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80089bc:	e008      	b.n	80089d0 <UART_Start_Receive_IT+0xa4>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	223f      	movs	r2, #63	@ 0x3f
 80089c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80089c6:	e003      	b.n	80089d0 <UART_Start_Receive_IT+0xa4>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2222      	movs	r2, #34	@ 0x22
 80089dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3308      	adds	r3, #8
 80089e6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089ea:	e853 3f00 	ldrex	r3, [r3]
 80089ee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80089f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089f2:	f043 0301 	orr.w	r3, r3, #1
 80089f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	3308      	adds	r3, #8
 8008a00:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008a04:	673a      	str	r2, [r7, #112]	@ 0x70
 8008a06:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a08:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008a0a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008a0c:	e841 2300 	strex	r3, r2, [r1]
 8008a10:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008a12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1e3      	bne.n	80089e0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a20:	d14f      	bne.n	8008ac2 <UART_Start_Receive_IT+0x196>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008a28:	88fa      	ldrh	r2, [r7, #6]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d349      	bcc.n	8008ac2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a36:	d107      	bne.n	8008a48 <UART_Start_Receive_IT+0x11c>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d103      	bne.n	8008a48 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	4a47      	ldr	r2, [pc, #284]	@ (8008b60 <UART_Start_Receive_IT+0x234>)
 8008a44:	675a      	str	r2, [r3, #116]	@ 0x74
 8008a46:	e002      	b.n	8008a4e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	4a46      	ldr	r2, [pc, #280]	@ (8008b64 <UART_Start_Receive_IT+0x238>)
 8008a4c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d01a      	beq.n	8008a8c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a5e:	e853 3f00 	ldrex	r3, [r3]
 8008a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a7a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008a7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008a80:	e841 2300 	strex	r3, r2, [r1]
 8008a84:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1e4      	bne.n	8008a56 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	3308      	adds	r3, #8
 8008a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a96:	e853 3f00 	ldrex	r3, [r3]
 8008a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008aa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008aac:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008aae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ab2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ab4:	e841 2300 	strex	r3, r2, [r1]
 8008ab8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e5      	bne.n	8008a8c <UART_Start_Receive_IT+0x160>
 8008ac0:	e046      	b.n	8008b50 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008aca:	d107      	bne.n	8008adc <UART_Start_Receive_IT+0x1b0>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d103      	bne.n	8008adc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4a24      	ldr	r2, [pc, #144]	@ (8008b68 <UART_Start_Receive_IT+0x23c>)
 8008ad8:	675a      	str	r2, [r3, #116]	@ 0x74
 8008ada:	e002      	b.n	8008ae2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4a23      	ldr	r2, [pc, #140]	@ (8008b6c <UART_Start_Receive_IT+0x240>)
 8008ae0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d019      	beq.n	8008b1e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008afe:	677b      	str	r3, [r7, #116]	@ 0x74
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	461a      	mov	r2, r3
 8008b06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b08:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b0a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008b0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b10:	e841 2300 	strex	r3, r2, [r1]
 8008b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1e6      	bne.n	8008aea <UART_Start_Receive_IT+0x1be>
 8008b1c:	e018      	b.n	8008b50 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f043 0320 	orr.w	r3, r3, #32
 8008b32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b3c:	623b      	str	r3, [r7, #32]
 8008b3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	69f9      	ldr	r1, [r7, #28]
 8008b42:	6a3a      	ldr	r2, [r7, #32]
 8008b44:	e841 2300 	strex	r3, r2, [r1]
 8008b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e6      	bne.n	8008b1e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	378c      	adds	r7, #140	@ 0x8c
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	0800938d 	.word	0x0800938d
 8008b64:	08009029 	.word	0x08009029
 8008b68:	08008e71 	.word	0x08008e71
 8008b6c:	08008cb9 	.word	0x08008cb9

08008b70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b095      	sub	sp, #84	@ 0x54
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b80:	e853 3f00 	ldrex	r3, [r3]
 8008b84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b96:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b9e:	e841 2300 	strex	r3, r2, [r1]
 8008ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1e6      	bne.n	8008b78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3308      	adds	r3, #8
 8008bb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb2:	6a3b      	ldr	r3, [r7, #32]
 8008bb4:	e853 3f00 	ldrex	r3, [r3]
 8008bb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bc0:	f023 0301 	bic.w	r3, r3, #1
 8008bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3308      	adds	r3, #8
 8008bcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bd6:	e841 2300 	strex	r3, r2, [r1]
 8008bda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1e3      	bne.n	8008baa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d118      	bne.n	8008c1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f023 0310 	bic.w	r3, r3, #16
 8008bfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	461a      	mov	r2, r3
 8008c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c08:	61bb      	str	r3, [r7, #24]
 8008c0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	6979      	ldr	r1, [r7, #20]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	e841 2300 	strex	r3, r2, [r1]
 8008c14:	613b      	str	r3, [r7, #16]
   return(result);
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e6      	bne.n	8008bea <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008c30:	bf00      	nop
 8008c32:	3754      	adds	r7, #84	@ 0x54
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f7ff f99e 	bl	8007f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c58:	bf00      	nop
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b088      	sub	sp, #32
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	e853 3f00 	ldrex	r3, [r3]
 8008c74:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c7c:	61fb      	str	r3, [r7, #28]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	461a      	mov	r2, r3
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	61bb      	str	r3, [r7, #24]
 8008c88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8a:	6979      	ldr	r1, [r7, #20]
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	e841 2300 	strex	r3, r2, [r1]
 8008c92:	613b      	str	r3, [r7, #16]
   return(result);
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1e6      	bne.n	8008c68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2220      	movs	r2, #32
 8008c9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7ff f969 	bl	8007f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cae:	bf00      	nop
 8008cb0:	3720      	adds	r7, #32
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
	...

08008cb8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b09c      	sub	sp, #112	@ 0x70
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008cc6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cd0:	2b22      	cmp	r3, #34	@ 0x22
 8008cd2:	f040 80be 	bne.w	8008e52 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cdc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ce0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008ce4:	b2d9      	uxtb	r1, r3
 8008ce6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cf0:	400a      	ands	r2, r1
 8008cf2:	b2d2      	uxtb	r2, r2
 8008cf4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f040 80a1 	bne.w	8008e62 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d28:	e853 3f00 	ldrex	r3, [r3]
 8008d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d46:	e841 2300 	strex	r3, r2, [r1]
 8008d4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1e6      	bne.n	8008d20 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3308      	adds	r3, #8
 8008d58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d64:	f023 0301 	bic.w	r3, r3, #1
 8008d68:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3308      	adds	r3, #8
 8008d70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008d72:	647a      	str	r2, [r7, #68]	@ 0x44
 8008d74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1e5      	bne.n	8008d52 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2220      	movs	r2, #32
 8008d8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a33      	ldr	r2, [pc, #204]	@ (8008e6c <UART_RxISR_8BIT+0x1b4>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d01f      	beq.n	8008de4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d018      	beq.n	8008de4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dba:	e853 3f00 	ldrex	r3, [r3]
 8008dbe:	623b      	str	r3, [r7, #32]
   return(result);
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008dc6:	663b      	str	r3, [r7, #96]	@ 0x60
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e6      	bne.n	8008db2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d12e      	bne.n	8008e4a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f023 0310 	bic.w	r3, r3, #16
 8008e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e10:	61fb      	str	r3, [r7, #28]
 8008e12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e14:	69b9      	ldr	r1, [r7, #24]
 8008e16:	69fa      	ldr	r2, [r7, #28]
 8008e18:	e841 2300 	strex	r3, r2, [r1]
 8008e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1e6      	bne.n	8008df2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	f003 0310 	and.w	r3, r3, #16
 8008e2e:	2b10      	cmp	r3, #16
 8008e30:	d103      	bne.n	8008e3a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2210      	movs	r2, #16
 8008e38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7ff f8b0 	bl	8007fa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e48:	e00b      	b.n	8008e62 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7f9 f874 	bl	8001f38 <HAL_UART_RxCpltCallback>
}
 8008e50:	e007      	b.n	8008e62 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	699a      	ldr	r2, [r3, #24]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f042 0208 	orr.w	r2, r2, #8
 8008e60:	619a      	str	r2, [r3, #24]
}
 8008e62:	bf00      	nop
 8008e64:	3770      	adds	r7, #112	@ 0x70
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	40008000 	.word	0x40008000

08008e70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b09c      	sub	sp, #112	@ 0x70
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e7e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e88:	2b22      	cmp	r3, #34	@ 0x22
 8008e8a:	f040 80be 	bne.w	800900a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e94:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e9c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e9e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008ea2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008eac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eb2:	1c9a      	adds	r2, r3, #2
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f040 80a1 	bne.w	800901a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ee0:	e853 3f00 	ldrex	r3, [r3]
 8008ee4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008ee6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ee8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008eec:	667b      	str	r3, [r7, #100]	@ 0x64
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ef6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ef8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008efc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008efe:	e841 2300 	strex	r3, r2, [r1]
 8008f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008f04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1e6      	bne.n	8008ed8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3308      	adds	r3, #8
 8008f10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f14:	e853 3f00 	ldrex	r3, [r3]
 8008f18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1c:	f023 0301 	bic.w	r3, r3, #1
 8008f20:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3308      	adds	r3, #8
 8008f28:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008f2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8008f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e5      	bne.n	8008f0a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2220      	movs	r2, #32
 8008f42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a33      	ldr	r2, [pc, #204]	@ (8009024 <UART_RxISR_16BIT+0x1b4>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d01f      	beq.n	8008f9c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d018      	beq.n	8008f9c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	461a      	mov	r2, r3
 8008f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f8a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e6      	bne.n	8008f6a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d12e      	bne.n	8009002 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	e853 3f00 	ldrex	r3, [r3]
 8008fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	f023 0310 	bic.w	r3, r3, #16
 8008fbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008fc8:	61bb      	str	r3, [r7, #24]
 8008fca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fcc:	6979      	ldr	r1, [r7, #20]
 8008fce:	69ba      	ldr	r2, [r7, #24]
 8008fd0:	e841 2300 	strex	r3, r2, [r1]
 8008fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1e6      	bne.n	8008faa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	f003 0310 	and.w	r3, r3, #16
 8008fe6:	2b10      	cmp	r3, #16
 8008fe8:	d103      	bne.n	8008ff2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2210      	movs	r2, #16
 8008ff0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7fe ffd4 	bl	8007fa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009000:	e00b      	b.n	800901a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7f8 ff98 	bl	8001f38 <HAL_UART_RxCpltCallback>
}
 8009008:	e007      	b.n	800901a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	699a      	ldr	r2, [r3, #24]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f042 0208 	orr.w	r2, r2, #8
 8009018:	619a      	str	r2, [r3, #24]
}
 800901a:	bf00      	nop
 800901c:	3770      	adds	r7, #112	@ 0x70
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	40008000 	.word	0x40008000

08009028 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b0ac      	sub	sp, #176	@ 0xb0
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009036:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	69db      	ldr	r3, [r3, #28]
 8009040:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800905e:	2b22      	cmp	r3, #34	@ 0x22
 8009060:	f040 8183 	bne.w	800936a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800906a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800906e:	e126      	b.n	80092be <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009076:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800907a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800907e:	b2d9      	uxtb	r1, r3
 8009080:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009084:	b2da      	uxtb	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800908a:	400a      	ands	r2, r1
 800908c:	b2d2      	uxtb	r2, r2
 800908e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009094:	1c5a      	adds	r2, r3, #1
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	3b01      	subs	r3, #1
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80090b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d053      	beq.n	800916a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d011      	beq.n	80090f2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80090ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80090d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00b      	beq.n	80090f2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2201      	movs	r2, #1
 80090e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090e8:	f043 0201 	orr.w	r2, r3, #1
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090f6:	f003 0302 	and.w	r3, r3, #2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d011      	beq.n	8009122 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80090fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009102:	f003 0301 	and.w	r3, r3, #1
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00b      	beq.n	8009122 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2202      	movs	r2, #2
 8009110:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009118:	f043 0204 	orr.w	r2, r3, #4
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009126:	f003 0304 	and.w	r3, r3, #4
 800912a:	2b00      	cmp	r3, #0
 800912c:	d011      	beq.n	8009152 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800912e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009132:	f003 0301 	and.w	r3, r3, #1
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00b      	beq.n	8009152 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2204      	movs	r2, #4
 8009140:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009148:	f043 0202 	orr.w	r2, r3, #2
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009158:	2b00      	cmp	r3, #0
 800915a:	d006      	beq.n	800916a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7fe ff19 	bl	8007f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009170:	b29b      	uxth	r3, r3
 8009172:	2b00      	cmp	r3, #0
 8009174:	f040 80a3 	bne.w	80092be <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009180:	e853 3f00 	ldrex	r3, [r3]
 8009184:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800918c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	461a      	mov	r2, r3
 8009196:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800919a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800919c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80091a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80091a2:	e841 2300 	strex	r3, r2, [r1]
 80091a6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80091a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1e4      	bne.n	8009178 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	3308      	adds	r3, #8
 80091b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091b8:	e853 3f00 	ldrex	r3, [r3]
 80091bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80091be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80091c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091c4:	f023 0301 	bic.w	r3, r3, #1
 80091c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3308      	adds	r3, #8
 80091d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80091d6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80091d8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091da:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80091dc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80091de:	e841 2300 	strex	r3, r2, [r1]
 80091e2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80091e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1e1      	bne.n	80091ae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2220      	movs	r2, #32
 80091ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a60      	ldr	r2, [pc, #384]	@ (8009384 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d021      	beq.n	800924c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d01a      	beq.n	800924c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009226:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800922a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	461a      	mov	r2, r3
 8009234:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009238:	657b      	str	r3, [r7, #84]	@ 0x54
 800923a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800923e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009240:	e841 2300 	strex	r3, r2, [r1]
 8009244:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1e4      	bne.n	8009216 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009250:	2b01      	cmp	r3, #1
 8009252:	d130      	bne.n	80092b6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009262:	e853 3f00 	ldrex	r3, [r3]
 8009266:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926a:	f023 0310 	bic.w	r3, r3, #16
 800926e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800927c:	643b      	str	r3, [r7, #64]	@ 0x40
 800927e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009280:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009282:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009284:	e841 2300 	strex	r3, r2, [r1]
 8009288:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800928a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1e4      	bne.n	800925a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	69db      	ldr	r3, [r3, #28]
 8009296:	f003 0310 	and.w	r3, r3, #16
 800929a:	2b10      	cmp	r3, #16
 800929c:	d103      	bne.n	80092a6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2210      	movs	r2, #16
 80092a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092ac:	4619      	mov	r1, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7fe fe7a 	bl	8007fa8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80092b4:	e00e      	b.n	80092d4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7f8 fe3e 	bl	8001f38 <HAL_UART_RxCpltCallback>
        break;
 80092bc:	e00a      	b.n	80092d4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092be:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d006      	beq.n	80092d4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80092c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092ca:	f003 0320 	and.w	r3, r3, #32
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f47f aece 	bne.w	8009070 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092da:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80092de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d049      	beq.n	800937a <UART_RxISR_8BIT_FIFOEN+0x352>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80092ec:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d242      	bcs.n	800937a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3308      	adds	r3, #8
 80092fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fc:	6a3b      	ldr	r3, [r7, #32]
 80092fe:	e853 3f00 	ldrex	r3, [r3]
 8009302:	61fb      	str	r3, [r7, #28]
   return(result);
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800930a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3308      	adds	r3, #8
 8009314:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009318:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800931a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800931e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009320:	e841 2300 	strex	r3, r2, [r1]
 8009324:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1e3      	bne.n	80092f4 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a16      	ldr	r2, [pc, #88]	@ (8009388 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009330:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	f043 0320 	orr.w	r3, r3, #32
 8009346:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	461a      	mov	r2, r3
 8009350:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009354:	61bb      	str	r3, [r7, #24]
 8009356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009358:	6979      	ldr	r1, [r7, #20]
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	e841 2300 	strex	r3, r2, [r1]
 8009360:	613b      	str	r3, [r7, #16]
   return(result);
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e4      	bne.n	8009332 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009368:	e007      	b.n	800937a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	699a      	ldr	r2, [r3, #24]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f042 0208 	orr.w	r2, r2, #8
 8009378:	619a      	str	r2, [r3, #24]
}
 800937a:	bf00      	nop
 800937c:	37b0      	adds	r7, #176	@ 0xb0
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	40008000 	.word	0x40008000
 8009388:	08008cb9 	.word	0x08008cb9

0800938c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b0ae      	sub	sp, #184	@ 0xb8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800939a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	69db      	ldr	r3, [r3, #28]
 80093a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093c2:	2b22      	cmp	r3, #34	@ 0x22
 80093c4:	f040 8187 	bne.w	80096d6 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80093ce:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093d2:	e12a      	b.n	800962a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093da:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80093e6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80093ea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80093ee:	4013      	ands	r3, r2
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80093f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093fc:	1c9a      	adds	r2, r3, #2
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009408:	b29b      	uxth	r3, r3
 800940a:	3b01      	subs	r3, #1
 800940c:	b29a      	uxth	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800941e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009422:	f003 0307 	and.w	r3, r3, #7
 8009426:	2b00      	cmp	r3, #0
 8009428:	d053      	beq.n	80094d2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800942a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	2b00      	cmp	r3, #0
 8009434:	d011      	beq.n	800945a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800943a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00b      	beq.n	800945a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2201      	movs	r2, #1
 8009448:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009450:	f043 0201 	orr.w	r2, r3, #1
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800945a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b00      	cmp	r3, #0
 8009464:	d011      	beq.n	800948a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009466:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00b      	beq.n	800948a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2202      	movs	r2, #2
 8009478:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009480:	f043 0204 	orr.w	r2, r3, #4
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800948a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800948e:	f003 0304 	and.w	r3, r3, #4
 8009492:	2b00      	cmp	r3, #0
 8009494:	d011      	beq.n	80094ba <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800949a:	f003 0301 	and.w	r3, r3, #1
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00b      	beq.n	80094ba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2204      	movs	r2, #4
 80094a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094b0:	f043 0202 	orr.w	r2, r3, #2
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d006      	beq.n	80094d2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7fe fd65 	bl	8007f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094d8:	b29b      	uxth	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f040 80a5 	bne.w	800962a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094e8:	e853 3f00 	ldrex	r3, [r3]
 80094ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80094ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	461a      	mov	r2, r3
 80094fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009502:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009506:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009508:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800950a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800950e:	e841 2300 	strex	r3, r2, [r1]
 8009512:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009514:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1e2      	bne.n	80094e0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3308      	adds	r3, #8
 8009520:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009522:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009524:	e853 3f00 	ldrex	r3, [r3]
 8009528:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800952a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800952c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009530:	f023 0301 	bic.w	r3, r3, #1
 8009534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3308      	adds	r3, #8
 800953e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009542:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009544:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009546:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009548:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800954a:	e841 2300 	strex	r3, r2, [r1]
 800954e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009550:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1e1      	bne.n	800951a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2220      	movs	r2, #32
 800955a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a60      	ldr	r2, [pc, #384]	@ (80096f0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d021      	beq.n	80095b8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d01a      	beq.n	80095b8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800958a:	e853 3f00 	ldrex	r3, [r3]
 800958e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009590:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009592:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009596:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80095a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095a6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095ac:	e841 2300 	strex	r3, r2, [r1]
 80095b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80095b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e4      	bne.n	8009582 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d130      	bne.n	8009622 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ce:	e853 3f00 	ldrex	r3, [r3]
 80095d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095d6:	f023 0310 	bic.w	r3, r3, #16
 80095da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	461a      	mov	r2, r3
 80095e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80095e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80095ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095f0:	e841 2300 	strex	r3, r2, [r1]
 80095f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1e4      	bne.n	80095c6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	69db      	ldr	r3, [r3, #28]
 8009602:	f003 0310 	and.w	r3, r3, #16
 8009606:	2b10      	cmp	r3, #16
 8009608:	d103      	bne.n	8009612 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2210      	movs	r2, #16
 8009610:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7fe fcc4 	bl	8007fa8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009620:	e00e      	b.n	8009640 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f7f8 fc88 	bl	8001f38 <HAL_UART_RxCpltCallback>
        break;
 8009628:	e00a      	b.n	8009640 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800962a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800962e:	2b00      	cmp	r3, #0
 8009630:	d006      	beq.n	8009640 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8009632:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009636:	f003 0320 	and.w	r3, r3, #32
 800963a:	2b00      	cmp	r3, #0
 800963c:	f47f aeca 	bne.w	80093d4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009646:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800964a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800964e:	2b00      	cmp	r3, #0
 8009650:	d049      	beq.n	80096e6 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009658:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800965c:	429a      	cmp	r2, r3
 800965e:	d242      	bcs.n	80096e6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	3308      	adds	r3, #8
 8009666:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966a:	e853 3f00 	ldrex	r3, [r3]
 800966e:	623b      	str	r3, [r7, #32]
   return(result);
 8009670:	6a3b      	ldr	r3, [r7, #32]
 8009672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009676:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3308      	adds	r3, #8
 8009680:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009684:	633a      	str	r2, [r7, #48]	@ 0x30
 8009686:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009688:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800968a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800968c:	e841 2300 	strex	r3, r2, [r1]
 8009690:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1e3      	bne.n	8009660 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a16      	ldr	r2, [pc, #88]	@ (80096f4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800969c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	e853 3f00 	ldrex	r3, [r3]
 80096aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f043 0320 	orr.w	r3, r3, #32
 80096b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	461a      	mov	r2, r3
 80096bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80096c0:	61fb      	str	r3, [r7, #28]
 80096c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c4:	69b9      	ldr	r1, [r7, #24]
 80096c6:	69fa      	ldr	r2, [r7, #28]
 80096c8:	e841 2300 	strex	r3, r2, [r1]
 80096cc:	617b      	str	r3, [r7, #20]
   return(result);
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e4      	bne.n	800969e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096d4:	e007      	b.n	80096e6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	699a      	ldr	r2, [r3, #24]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f042 0208 	orr.w	r2, r2, #8
 80096e4:	619a      	str	r2, [r3, #24]
}
 80096e6:	bf00      	nop
 80096e8:	37b8      	adds	r7, #184	@ 0xb8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	40008000 	.word	0x40008000
 80096f4:	08008e71 	.word	0x08008e71

080096f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009742:	2b01      	cmp	r3, #1
 8009744:	d101      	bne.n	800974a <HAL_UARTEx_DisableFifoMode+0x16>
 8009746:	2302      	movs	r3, #2
 8009748:	e027      	b.n	800979a <HAL_UARTEx_DisableFifoMode+0x66>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2224      	movs	r2, #36	@ 0x24
 8009756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f022 0201 	bic.w	r2, r2, #1
 8009770:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009778:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2220      	movs	r2, #32
 800978c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d101      	bne.n	80097be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097ba:	2302      	movs	r3, #2
 80097bc:	e02d      	b.n	800981a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2201      	movs	r2, #1
 80097c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2224      	movs	r2, #36	@ 0x24
 80097ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 0201 	bic.w	r2, r2, #1
 80097e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	430a      	orrs	r2, r1
 80097f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f850 	bl	80098a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2220      	movs	r2, #32
 800980c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009832:	2b01      	cmp	r3, #1
 8009834:	d101      	bne.n	800983a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009836:	2302      	movs	r3, #2
 8009838:	e02d      	b.n	8009896 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2224      	movs	r2, #36	@ 0x24
 8009846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f022 0201 	bic.w	r2, r2, #1
 8009860:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	430a      	orrs	r2, r1
 8009874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f812 	bl	80098a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2220      	movs	r2, #32
 8009888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d108      	bne.n	80098c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098c0:	e031      	b.n	8009926 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098c2:	2308      	movs	r3, #8
 80098c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098c6:	2308      	movs	r3, #8
 80098c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	0e5b      	lsrs	r3, r3, #25
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	f003 0307 	and.w	r3, r3, #7
 80098d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	0f5b      	lsrs	r3, r3, #29
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	f003 0307 	and.w	r3, r3, #7
 80098e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	7b3a      	ldrb	r2, [r7, #12]
 80098ee:	4911      	ldr	r1, [pc, #68]	@ (8009934 <UARTEx_SetNbDataToProcess+0x94>)
 80098f0:	5c8a      	ldrb	r2, [r1, r2]
 80098f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80098f6:	7b3a      	ldrb	r2, [r7, #12]
 80098f8:	490f      	ldr	r1, [pc, #60]	@ (8009938 <UARTEx_SetNbDataToProcess+0x98>)
 80098fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009900:	b29a      	uxth	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	7b7a      	ldrb	r2, [r7, #13]
 800990c:	4909      	ldr	r1, [pc, #36]	@ (8009934 <UARTEx_SetNbDataToProcess+0x94>)
 800990e:	5c8a      	ldrb	r2, [r1, r2]
 8009910:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009914:	7b7a      	ldrb	r2, [r7, #13]
 8009916:	4908      	ldr	r1, [pc, #32]	@ (8009938 <UARTEx_SetNbDataToProcess+0x98>)
 8009918:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800991a:	fb93 f3f2 	sdiv	r3, r3, r2
 800991e:	b29a      	uxth	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009926:	bf00      	nop
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	0800b0dc 	.word	0x0800b0dc
 8009938:	0800b0e4 	.word	0x0800b0e4

0800993c <atoi>:
 800993c:	220a      	movs	r2, #10
 800993e:	2100      	movs	r1, #0
 8009940:	f000 b938 	b.w	8009bb4 <strtol>

08009944 <malloc>:
 8009944:	4b02      	ldr	r3, [pc, #8]	@ (8009950 <malloc+0xc>)
 8009946:	4601      	mov	r1, r0
 8009948:	6818      	ldr	r0, [r3, #0]
 800994a:	f000 b82d 	b.w	80099a8 <_malloc_r>
 800994e:	bf00      	nop
 8009950:	200000c0 	.word	0x200000c0

08009954 <free>:
 8009954:	4b02      	ldr	r3, [pc, #8]	@ (8009960 <free+0xc>)
 8009956:	4601      	mov	r1, r0
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	f000 bb83 	b.w	800a064 <_free_r>
 800995e:	bf00      	nop
 8009960:	200000c0 	.word	0x200000c0

08009964 <sbrk_aligned>:
 8009964:	b570      	push	{r4, r5, r6, lr}
 8009966:	4e0f      	ldr	r6, [pc, #60]	@ (80099a4 <sbrk_aligned+0x40>)
 8009968:	460c      	mov	r4, r1
 800996a:	6831      	ldr	r1, [r6, #0]
 800996c:	4605      	mov	r5, r0
 800996e:	b911      	cbnz	r1, 8009976 <sbrk_aligned+0x12>
 8009970:	f000 fafc 	bl	8009f6c <_sbrk_r>
 8009974:	6030      	str	r0, [r6, #0]
 8009976:	4621      	mov	r1, r4
 8009978:	4628      	mov	r0, r5
 800997a:	f000 faf7 	bl	8009f6c <_sbrk_r>
 800997e:	1c43      	adds	r3, r0, #1
 8009980:	d103      	bne.n	800998a <sbrk_aligned+0x26>
 8009982:	f04f 34ff 	mov.w	r4, #4294967295
 8009986:	4620      	mov	r0, r4
 8009988:	bd70      	pop	{r4, r5, r6, pc}
 800998a:	1cc4      	adds	r4, r0, #3
 800998c:	f024 0403 	bic.w	r4, r4, #3
 8009990:	42a0      	cmp	r0, r4
 8009992:	d0f8      	beq.n	8009986 <sbrk_aligned+0x22>
 8009994:	1a21      	subs	r1, r4, r0
 8009996:	4628      	mov	r0, r5
 8009998:	f000 fae8 	bl	8009f6c <_sbrk_r>
 800999c:	3001      	adds	r0, #1
 800999e:	d1f2      	bne.n	8009986 <sbrk_aligned+0x22>
 80099a0:	e7ef      	b.n	8009982 <sbrk_aligned+0x1e>
 80099a2:	bf00      	nop
 80099a4:	20000518 	.word	0x20000518

080099a8 <_malloc_r>:
 80099a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099ac:	1ccd      	adds	r5, r1, #3
 80099ae:	f025 0503 	bic.w	r5, r5, #3
 80099b2:	3508      	adds	r5, #8
 80099b4:	2d0c      	cmp	r5, #12
 80099b6:	bf38      	it	cc
 80099b8:	250c      	movcc	r5, #12
 80099ba:	2d00      	cmp	r5, #0
 80099bc:	4606      	mov	r6, r0
 80099be:	db01      	blt.n	80099c4 <_malloc_r+0x1c>
 80099c0:	42a9      	cmp	r1, r5
 80099c2:	d904      	bls.n	80099ce <_malloc_r+0x26>
 80099c4:	230c      	movs	r3, #12
 80099c6:	6033      	str	r3, [r6, #0]
 80099c8:	2000      	movs	r0, #0
 80099ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009aa4 <_malloc_r+0xfc>
 80099d2:	f000 f869 	bl	8009aa8 <__malloc_lock>
 80099d6:	f8d8 3000 	ldr.w	r3, [r8]
 80099da:	461c      	mov	r4, r3
 80099dc:	bb44      	cbnz	r4, 8009a30 <_malloc_r+0x88>
 80099de:	4629      	mov	r1, r5
 80099e0:	4630      	mov	r0, r6
 80099e2:	f7ff ffbf 	bl	8009964 <sbrk_aligned>
 80099e6:	1c43      	adds	r3, r0, #1
 80099e8:	4604      	mov	r4, r0
 80099ea:	d158      	bne.n	8009a9e <_malloc_r+0xf6>
 80099ec:	f8d8 4000 	ldr.w	r4, [r8]
 80099f0:	4627      	mov	r7, r4
 80099f2:	2f00      	cmp	r7, #0
 80099f4:	d143      	bne.n	8009a7e <_malloc_r+0xd6>
 80099f6:	2c00      	cmp	r4, #0
 80099f8:	d04b      	beq.n	8009a92 <_malloc_r+0xea>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	4639      	mov	r1, r7
 80099fe:	4630      	mov	r0, r6
 8009a00:	eb04 0903 	add.w	r9, r4, r3
 8009a04:	f000 fab2 	bl	8009f6c <_sbrk_r>
 8009a08:	4581      	cmp	r9, r0
 8009a0a:	d142      	bne.n	8009a92 <_malloc_r+0xea>
 8009a0c:	6821      	ldr	r1, [r4, #0]
 8009a0e:	1a6d      	subs	r5, r5, r1
 8009a10:	4629      	mov	r1, r5
 8009a12:	4630      	mov	r0, r6
 8009a14:	f7ff ffa6 	bl	8009964 <sbrk_aligned>
 8009a18:	3001      	adds	r0, #1
 8009a1a:	d03a      	beq.n	8009a92 <_malloc_r+0xea>
 8009a1c:	6823      	ldr	r3, [r4, #0]
 8009a1e:	442b      	add	r3, r5
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	f8d8 3000 	ldr.w	r3, [r8]
 8009a26:	685a      	ldr	r2, [r3, #4]
 8009a28:	bb62      	cbnz	r2, 8009a84 <_malloc_r+0xdc>
 8009a2a:	f8c8 7000 	str.w	r7, [r8]
 8009a2e:	e00f      	b.n	8009a50 <_malloc_r+0xa8>
 8009a30:	6822      	ldr	r2, [r4, #0]
 8009a32:	1b52      	subs	r2, r2, r5
 8009a34:	d420      	bmi.n	8009a78 <_malloc_r+0xd0>
 8009a36:	2a0b      	cmp	r2, #11
 8009a38:	d917      	bls.n	8009a6a <_malloc_r+0xc2>
 8009a3a:	1961      	adds	r1, r4, r5
 8009a3c:	42a3      	cmp	r3, r4
 8009a3e:	6025      	str	r5, [r4, #0]
 8009a40:	bf18      	it	ne
 8009a42:	6059      	strne	r1, [r3, #4]
 8009a44:	6863      	ldr	r3, [r4, #4]
 8009a46:	bf08      	it	eq
 8009a48:	f8c8 1000 	streq.w	r1, [r8]
 8009a4c:	5162      	str	r2, [r4, r5]
 8009a4e:	604b      	str	r3, [r1, #4]
 8009a50:	4630      	mov	r0, r6
 8009a52:	f000 f82f 	bl	8009ab4 <__malloc_unlock>
 8009a56:	f104 000b 	add.w	r0, r4, #11
 8009a5a:	1d23      	adds	r3, r4, #4
 8009a5c:	f020 0007 	bic.w	r0, r0, #7
 8009a60:	1ac2      	subs	r2, r0, r3
 8009a62:	bf1c      	itt	ne
 8009a64:	1a1b      	subne	r3, r3, r0
 8009a66:	50a3      	strne	r3, [r4, r2]
 8009a68:	e7af      	b.n	80099ca <_malloc_r+0x22>
 8009a6a:	6862      	ldr	r2, [r4, #4]
 8009a6c:	42a3      	cmp	r3, r4
 8009a6e:	bf0c      	ite	eq
 8009a70:	f8c8 2000 	streq.w	r2, [r8]
 8009a74:	605a      	strne	r2, [r3, #4]
 8009a76:	e7eb      	b.n	8009a50 <_malloc_r+0xa8>
 8009a78:	4623      	mov	r3, r4
 8009a7a:	6864      	ldr	r4, [r4, #4]
 8009a7c:	e7ae      	b.n	80099dc <_malloc_r+0x34>
 8009a7e:	463c      	mov	r4, r7
 8009a80:	687f      	ldr	r7, [r7, #4]
 8009a82:	e7b6      	b.n	80099f2 <_malloc_r+0x4a>
 8009a84:	461a      	mov	r2, r3
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	42a3      	cmp	r3, r4
 8009a8a:	d1fb      	bne.n	8009a84 <_malloc_r+0xdc>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	6053      	str	r3, [r2, #4]
 8009a90:	e7de      	b.n	8009a50 <_malloc_r+0xa8>
 8009a92:	230c      	movs	r3, #12
 8009a94:	6033      	str	r3, [r6, #0]
 8009a96:	4630      	mov	r0, r6
 8009a98:	f000 f80c 	bl	8009ab4 <__malloc_unlock>
 8009a9c:	e794      	b.n	80099c8 <_malloc_r+0x20>
 8009a9e:	6005      	str	r5, [r0, #0]
 8009aa0:	e7d6      	b.n	8009a50 <_malloc_r+0xa8>
 8009aa2:	bf00      	nop
 8009aa4:	2000051c 	.word	0x2000051c

08009aa8 <__malloc_lock>:
 8009aa8:	4801      	ldr	r0, [pc, #4]	@ (8009ab0 <__malloc_lock+0x8>)
 8009aaa:	f000 baac 	b.w	800a006 <__retarget_lock_acquire_recursive>
 8009aae:	bf00      	nop
 8009ab0:	20000660 	.word	0x20000660

08009ab4 <__malloc_unlock>:
 8009ab4:	4801      	ldr	r0, [pc, #4]	@ (8009abc <__malloc_unlock+0x8>)
 8009ab6:	f000 baa7 	b.w	800a008 <__retarget_lock_release_recursive>
 8009aba:	bf00      	nop
 8009abc:	20000660 	.word	0x20000660

08009ac0 <_strtol_l.constprop.0>:
 8009ac0:	2b24      	cmp	r3, #36	@ 0x24
 8009ac2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac6:	4686      	mov	lr, r0
 8009ac8:	4690      	mov	r8, r2
 8009aca:	d801      	bhi.n	8009ad0 <_strtol_l.constprop.0+0x10>
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d106      	bne.n	8009ade <_strtol_l.constprop.0+0x1e>
 8009ad0:	f000 fa6e 	bl	8009fb0 <__errno>
 8009ad4:	2316      	movs	r3, #22
 8009ad6:	6003      	str	r3, [r0, #0]
 8009ad8:	2000      	movs	r0, #0
 8009ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ade:	4834      	ldr	r0, [pc, #208]	@ (8009bb0 <_strtol_l.constprop.0+0xf0>)
 8009ae0:	460d      	mov	r5, r1
 8009ae2:	462a      	mov	r2, r5
 8009ae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ae8:	5d06      	ldrb	r6, [r0, r4]
 8009aea:	f016 0608 	ands.w	r6, r6, #8
 8009aee:	d1f8      	bne.n	8009ae2 <_strtol_l.constprop.0+0x22>
 8009af0:	2c2d      	cmp	r4, #45	@ 0x2d
 8009af2:	d12d      	bne.n	8009b50 <_strtol_l.constprop.0+0x90>
 8009af4:	782c      	ldrb	r4, [r5, #0]
 8009af6:	2601      	movs	r6, #1
 8009af8:	1c95      	adds	r5, r2, #2
 8009afa:	f033 0210 	bics.w	r2, r3, #16
 8009afe:	d109      	bne.n	8009b14 <_strtol_l.constprop.0+0x54>
 8009b00:	2c30      	cmp	r4, #48	@ 0x30
 8009b02:	d12a      	bne.n	8009b5a <_strtol_l.constprop.0+0x9a>
 8009b04:	782a      	ldrb	r2, [r5, #0]
 8009b06:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009b0a:	2a58      	cmp	r2, #88	@ 0x58
 8009b0c:	d125      	bne.n	8009b5a <_strtol_l.constprop.0+0x9a>
 8009b0e:	786c      	ldrb	r4, [r5, #1]
 8009b10:	2310      	movs	r3, #16
 8009b12:	3502      	adds	r5, #2
 8009b14:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009b18:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	fbbc f9f3 	udiv	r9, ip, r3
 8009b22:	4610      	mov	r0, r2
 8009b24:	fb03 ca19 	mls	sl, r3, r9, ip
 8009b28:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009b2c:	2f09      	cmp	r7, #9
 8009b2e:	d81b      	bhi.n	8009b68 <_strtol_l.constprop.0+0xa8>
 8009b30:	463c      	mov	r4, r7
 8009b32:	42a3      	cmp	r3, r4
 8009b34:	dd27      	ble.n	8009b86 <_strtol_l.constprop.0+0xc6>
 8009b36:	1c57      	adds	r7, r2, #1
 8009b38:	d007      	beq.n	8009b4a <_strtol_l.constprop.0+0x8a>
 8009b3a:	4581      	cmp	r9, r0
 8009b3c:	d320      	bcc.n	8009b80 <_strtol_l.constprop.0+0xc0>
 8009b3e:	d101      	bne.n	8009b44 <_strtol_l.constprop.0+0x84>
 8009b40:	45a2      	cmp	sl, r4
 8009b42:	db1d      	blt.n	8009b80 <_strtol_l.constprop.0+0xc0>
 8009b44:	fb00 4003 	mla	r0, r0, r3, r4
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b4e:	e7eb      	b.n	8009b28 <_strtol_l.constprop.0+0x68>
 8009b50:	2c2b      	cmp	r4, #43	@ 0x2b
 8009b52:	bf04      	itt	eq
 8009b54:	782c      	ldrbeq	r4, [r5, #0]
 8009b56:	1c95      	addeq	r5, r2, #2
 8009b58:	e7cf      	b.n	8009afa <_strtol_l.constprop.0+0x3a>
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1da      	bne.n	8009b14 <_strtol_l.constprop.0+0x54>
 8009b5e:	2c30      	cmp	r4, #48	@ 0x30
 8009b60:	bf0c      	ite	eq
 8009b62:	2308      	moveq	r3, #8
 8009b64:	230a      	movne	r3, #10
 8009b66:	e7d5      	b.n	8009b14 <_strtol_l.constprop.0+0x54>
 8009b68:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009b6c:	2f19      	cmp	r7, #25
 8009b6e:	d801      	bhi.n	8009b74 <_strtol_l.constprop.0+0xb4>
 8009b70:	3c37      	subs	r4, #55	@ 0x37
 8009b72:	e7de      	b.n	8009b32 <_strtol_l.constprop.0+0x72>
 8009b74:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009b78:	2f19      	cmp	r7, #25
 8009b7a:	d804      	bhi.n	8009b86 <_strtol_l.constprop.0+0xc6>
 8009b7c:	3c57      	subs	r4, #87	@ 0x57
 8009b7e:	e7d8      	b.n	8009b32 <_strtol_l.constprop.0+0x72>
 8009b80:	f04f 32ff 	mov.w	r2, #4294967295
 8009b84:	e7e1      	b.n	8009b4a <_strtol_l.constprop.0+0x8a>
 8009b86:	1c53      	adds	r3, r2, #1
 8009b88:	d108      	bne.n	8009b9c <_strtol_l.constprop.0+0xdc>
 8009b8a:	2322      	movs	r3, #34	@ 0x22
 8009b8c:	f8ce 3000 	str.w	r3, [lr]
 8009b90:	4660      	mov	r0, ip
 8009b92:	f1b8 0f00 	cmp.w	r8, #0
 8009b96:	d0a0      	beq.n	8009ada <_strtol_l.constprop.0+0x1a>
 8009b98:	1e69      	subs	r1, r5, #1
 8009b9a:	e006      	b.n	8009baa <_strtol_l.constprop.0+0xea>
 8009b9c:	b106      	cbz	r6, 8009ba0 <_strtol_l.constprop.0+0xe0>
 8009b9e:	4240      	negs	r0, r0
 8009ba0:	f1b8 0f00 	cmp.w	r8, #0
 8009ba4:	d099      	beq.n	8009ada <_strtol_l.constprop.0+0x1a>
 8009ba6:	2a00      	cmp	r2, #0
 8009ba8:	d1f6      	bne.n	8009b98 <_strtol_l.constprop.0+0xd8>
 8009baa:	f8c8 1000 	str.w	r1, [r8]
 8009bae:	e794      	b.n	8009ada <_strtol_l.constprop.0+0x1a>
 8009bb0:	0800b0ed 	.word	0x0800b0ed

08009bb4 <strtol>:
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	460a      	mov	r2, r1
 8009bb8:	4601      	mov	r1, r0
 8009bba:	4802      	ldr	r0, [pc, #8]	@ (8009bc4 <strtol+0x10>)
 8009bbc:	6800      	ldr	r0, [r0, #0]
 8009bbe:	f7ff bf7f 	b.w	8009ac0 <_strtol_l.constprop.0>
 8009bc2:	bf00      	nop
 8009bc4:	200000c0 	.word	0x200000c0

08009bc8 <std>:
 8009bc8:	2300      	movs	r3, #0
 8009bca:	b510      	push	{r4, lr}
 8009bcc:	4604      	mov	r4, r0
 8009bce:	e9c0 3300 	strd	r3, r3, [r0]
 8009bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bd6:	6083      	str	r3, [r0, #8]
 8009bd8:	8181      	strh	r1, [r0, #12]
 8009bda:	6643      	str	r3, [r0, #100]	@ 0x64
 8009bdc:	81c2      	strh	r2, [r0, #14]
 8009bde:	6183      	str	r3, [r0, #24]
 8009be0:	4619      	mov	r1, r3
 8009be2:	2208      	movs	r2, #8
 8009be4:	305c      	adds	r0, #92	@ 0x5c
 8009be6:	f000 f928 	bl	8009e3a <memset>
 8009bea:	4b0d      	ldr	r3, [pc, #52]	@ (8009c20 <std+0x58>)
 8009bec:	6263      	str	r3, [r4, #36]	@ 0x24
 8009bee:	4b0d      	ldr	r3, [pc, #52]	@ (8009c24 <std+0x5c>)
 8009bf0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8009c28 <std+0x60>)
 8009bf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8009c2c <std+0x64>)
 8009bf8:	6323      	str	r3, [r4, #48]	@ 0x30
 8009bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8009c30 <std+0x68>)
 8009bfc:	6224      	str	r4, [r4, #32]
 8009bfe:	429c      	cmp	r4, r3
 8009c00:	d006      	beq.n	8009c10 <std+0x48>
 8009c02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c06:	4294      	cmp	r4, r2
 8009c08:	d002      	beq.n	8009c10 <std+0x48>
 8009c0a:	33d0      	adds	r3, #208	@ 0xd0
 8009c0c:	429c      	cmp	r4, r3
 8009c0e:	d105      	bne.n	8009c1c <std+0x54>
 8009c10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c18:	f000 b9f4 	b.w	800a004 <__retarget_lock_init_recursive>
 8009c1c:	bd10      	pop	{r4, pc}
 8009c1e:	bf00      	nop
 8009c20:	08009db5 	.word	0x08009db5
 8009c24:	08009dd7 	.word	0x08009dd7
 8009c28:	08009e0f 	.word	0x08009e0f
 8009c2c:	08009e33 	.word	0x08009e33
 8009c30:	20000520 	.word	0x20000520

08009c34 <stdio_exit_handler>:
 8009c34:	4a02      	ldr	r2, [pc, #8]	@ (8009c40 <stdio_exit_handler+0xc>)
 8009c36:	4903      	ldr	r1, [pc, #12]	@ (8009c44 <stdio_exit_handler+0x10>)
 8009c38:	4803      	ldr	r0, [pc, #12]	@ (8009c48 <stdio_exit_handler+0x14>)
 8009c3a:	f000 b869 	b.w	8009d10 <_fwalk_sglue>
 8009c3e:	bf00      	nop
 8009c40:	200000b4 	.word	0x200000b4
 8009c44:	0800a7cd 	.word	0x0800a7cd
 8009c48:	200000c4 	.word	0x200000c4

08009c4c <cleanup_stdio>:
 8009c4c:	6841      	ldr	r1, [r0, #4]
 8009c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8009c80 <cleanup_stdio+0x34>)
 8009c50:	4299      	cmp	r1, r3
 8009c52:	b510      	push	{r4, lr}
 8009c54:	4604      	mov	r4, r0
 8009c56:	d001      	beq.n	8009c5c <cleanup_stdio+0x10>
 8009c58:	f000 fdb8 	bl	800a7cc <_fflush_r>
 8009c5c:	68a1      	ldr	r1, [r4, #8]
 8009c5e:	4b09      	ldr	r3, [pc, #36]	@ (8009c84 <cleanup_stdio+0x38>)
 8009c60:	4299      	cmp	r1, r3
 8009c62:	d002      	beq.n	8009c6a <cleanup_stdio+0x1e>
 8009c64:	4620      	mov	r0, r4
 8009c66:	f000 fdb1 	bl	800a7cc <_fflush_r>
 8009c6a:	68e1      	ldr	r1, [r4, #12]
 8009c6c:	4b06      	ldr	r3, [pc, #24]	@ (8009c88 <cleanup_stdio+0x3c>)
 8009c6e:	4299      	cmp	r1, r3
 8009c70:	d004      	beq.n	8009c7c <cleanup_stdio+0x30>
 8009c72:	4620      	mov	r0, r4
 8009c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c78:	f000 bda8 	b.w	800a7cc <_fflush_r>
 8009c7c:	bd10      	pop	{r4, pc}
 8009c7e:	bf00      	nop
 8009c80:	20000520 	.word	0x20000520
 8009c84:	20000588 	.word	0x20000588
 8009c88:	200005f0 	.word	0x200005f0

08009c8c <global_stdio_init.part.0>:
 8009c8c:	b510      	push	{r4, lr}
 8009c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8009cbc <global_stdio_init.part.0+0x30>)
 8009c90:	4c0b      	ldr	r4, [pc, #44]	@ (8009cc0 <global_stdio_init.part.0+0x34>)
 8009c92:	4a0c      	ldr	r2, [pc, #48]	@ (8009cc4 <global_stdio_init.part.0+0x38>)
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	4620      	mov	r0, r4
 8009c98:	2200      	movs	r2, #0
 8009c9a:	2104      	movs	r1, #4
 8009c9c:	f7ff ff94 	bl	8009bc8 <std>
 8009ca0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	2109      	movs	r1, #9
 8009ca8:	f7ff ff8e 	bl	8009bc8 <std>
 8009cac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cb6:	2112      	movs	r1, #18
 8009cb8:	f7ff bf86 	b.w	8009bc8 <std>
 8009cbc:	20000658 	.word	0x20000658
 8009cc0:	20000520 	.word	0x20000520
 8009cc4:	08009c35 	.word	0x08009c35

08009cc8 <__sfp_lock_acquire>:
 8009cc8:	4801      	ldr	r0, [pc, #4]	@ (8009cd0 <__sfp_lock_acquire+0x8>)
 8009cca:	f000 b99c 	b.w	800a006 <__retarget_lock_acquire_recursive>
 8009cce:	bf00      	nop
 8009cd0:	20000661 	.word	0x20000661

08009cd4 <__sfp_lock_release>:
 8009cd4:	4801      	ldr	r0, [pc, #4]	@ (8009cdc <__sfp_lock_release+0x8>)
 8009cd6:	f000 b997 	b.w	800a008 <__retarget_lock_release_recursive>
 8009cda:	bf00      	nop
 8009cdc:	20000661 	.word	0x20000661

08009ce0 <__sinit>:
 8009ce0:	b510      	push	{r4, lr}
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	f7ff fff0 	bl	8009cc8 <__sfp_lock_acquire>
 8009ce8:	6a23      	ldr	r3, [r4, #32]
 8009cea:	b11b      	cbz	r3, 8009cf4 <__sinit+0x14>
 8009cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cf0:	f7ff bff0 	b.w	8009cd4 <__sfp_lock_release>
 8009cf4:	4b04      	ldr	r3, [pc, #16]	@ (8009d08 <__sinit+0x28>)
 8009cf6:	6223      	str	r3, [r4, #32]
 8009cf8:	4b04      	ldr	r3, [pc, #16]	@ (8009d0c <__sinit+0x2c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1f5      	bne.n	8009cec <__sinit+0xc>
 8009d00:	f7ff ffc4 	bl	8009c8c <global_stdio_init.part.0>
 8009d04:	e7f2      	b.n	8009cec <__sinit+0xc>
 8009d06:	bf00      	nop
 8009d08:	08009c4d 	.word	0x08009c4d
 8009d0c:	20000658 	.word	0x20000658

08009d10 <_fwalk_sglue>:
 8009d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d14:	4607      	mov	r7, r0
 8009d16:	4688      	mov	r8, r1
 8009d18:	4614      	mov	r4, r2
 8009d1a:	2600      	movs	r6, #0
 8009d1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d20:	f1b9 0901 	subs.w	r9, r9, #1
 8009d24:	d505      	bpl.n	8009d32 <_fwalk_sglue+0x22>
 8009d26:	6824      	ldr	r4, [r4, #0]
 8009d28:	2c00      	cmp	r4, #0
 8009d2a:	d1f7      	bne.n	8009d1c <_fwalk_sglue+0xc>
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d32:	89ab      	ldrh	r3, [r5, #12]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d907      	bls.n	8009d48 <_fwalk_sglue+0x38>
 8009d38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	d003      	beq.n	8009d48 <_fwalk_sglue+0x38>
 8009d40:	4629      	mov	r1, r5
 8009d42:	4638      	mov	r0, r7
 8009d44:	47c0      	blx	r8
 8009d46:	4306      	orrs	r6, r0
 8009d48:	3568      	adds	r5, #104	@ 0x68
 8009d4a:	e7e9      	b.n	8009d20 <_fwalk_sglue+0x10>

08009d4c <sniprintf>:
 8009d4c:	b40c      	push	{r2, r3}
 8009d4e:	b530      	push	{r4, r5, lr}
 8009d50:	4b17      	ldr	r3, [pc, #92]	@ (8009db0 <sniprintf+0x64>)
 8009d52:	1e0c      	subs	r4, r1, #0
 8009d54:	681d      	ldr	r5, [r3, #0]
 8009d56:	b09d      	sub	sp, #116	@ 0x74
 8009d58:	da08      	bge.n	8009d6c <sniprintf+0x20>
 8009d5a:	238b      	movs	r3, #139	@ 0x8b
 8009d5c:	602b      	str	r3, [r5, #0]
 8009d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d62:	b01d      	add	sp, #116	@ 0x74
 8009d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d68:	b002      	add	sp, #8
 8009d6a:	4770      	bx	lr
 8009d6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009d70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009d74:	bf14      	ite	ne
 8009d76:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009d7a:	4623      	moveq	r3, r4
 8009d7c:	9304      	str	r3, [sp, #16]
 8009d7e:	9307      	str	r3, [sp, #28]
 8009d80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009d84:	9002      	str	r0, [sp, #8]
 8009d86:	9006      	str	r0, [sp, #24]
 8009d88:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d8c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009d8e:	ab21      	add	r3, sp, #132	@ 0x84
 8009d90:	a902      	add	r1, sp, #8
 8009d92:	4628      	mov	r0, r5
 8009d94:	9301      	str	r3, [sp, #4]
 8009d96:	f000 fa0b 	bl	800a1b0 <_svfiprintf_r>
 8009d9a:	1c43      	adds	r3, r0, #1
 8009d9c:	bfbc      	itt	lt
 8009d9e:	238b      	movlt	r3, #139	@ 0x8b
 8009da0:	602b      	strlt	r3, [r5, #0]
 8009da2:	2c00      	cmp	r4, #0
 8009da4:	d0dd      	beq.n	8009d62 <sniprintf+0x16>
 8009da6:	9b02      	ldr	r3, [sp, #8]
 8009da8:	2200      	movs	r2, #0
 8009daa:	701a      	strb	r2, [r3, #0]
 8009dac:	e7d9      	b.n	8009d62 <sniprintf+0x16>
 8009dae:	bf00      	nop
 8009db0:	200000c0 	.word	0x200000c0

08009db4 <__sread>:
 8009db4:	b510      	push	{r4, lr}
 8009db6:	460c      	mov	r4, r1
 8009db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dbc:	f000 f8c4 	bl	8009f48 <_read_r>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	bfab      	itete	ge
 8009dc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8009dc8:	181b      	addge	r3, r3, r0
 8009dca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009dce:	bfac      	ite	ge
 8009dd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009dd2:	81a3      	strhlt	r3, [r4, #12]
 8009dd4:	bd10      	pop	{r4, pc}

08009dd6 <__swrite>:
 8009dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dda:	461f      	mov	r7, r3
 8009ddc:	898b      	ldrh	r3, [r1, #12]
 8009dde:	05db      	lsls	r3, r3, #23
 8009de0:	4605      	mov	r5, r0
 8009de2:	460c      	mov	r4, r1
 8009de4:	4616      	mov	r6, r2
 8009de6:	d505      	bpl.n	8009df4 <__swrite+0x1e>
 8009de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dec:	2302      	movs	r3, #2
 8009dee:	2200      	movs	r2, #0
 8009df0:	f000 f898 	bl	8009f24 <_lseek_r>
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009dfe:	81a3      	strh	r3, [r4, #12]
 8009e00:	4632      	mov	r2, r6
 8009e02:	463b      	mov	r3, r7
 8009e04:	4628      	mov	r0, r5
 8009e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0a:	f000 b8bf 	b.w	8009f8c <_write_r>

08009e0e <__sseek>:
 8009e0e:	b510      	push	{r4, lr}
 8009e10:	460c      	mov	r4, r1
 8009e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e16:	f000 f885 	bl	8009f24 <_lseek_r>
 8009e1a:	1c43      	adds	r3, r0, #1
 8009e1c:	89a3      	ldrh	r3, [r4, #12]
 8009e1e:	bf15      	itete	ne
 8009e20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e2a:	81a3      	strheq	r3, [r4, #12]
 8009e2c:	bf18      	it	ne
 8009e2e:	81a3      	strhne	r3, [r4, #12]
 8009e30:	bd10      	pop	{r4, pc}

08009e32 <__sclose>:
 8009e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e36:	f000 b865 	b.w	8009f04 <_close_r>

08009e3a <memset>:
 8009e3a:	4402      	add	r2, r0
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d100      	bne.n	8009e44 <memset+0xa>
 8009e42:	4770      	bx	lr
 8009e44:	f803 1b01 	strb.w	r1, [r3], #1
 8009e48:	e7f9      	b.n	8009e3e <memset+0x4>
	...

08009e4c <strtok>:
 8009e4c:	4b16      	ldr	r3, [pc, #88]	@ (8009ea8 <strtok+0x5c>)
 8009e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e52:	681f      	ldr	r7, [r3, #0]
 8009e54:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009e56:	4605      	mov	r5, r0
 8009e58:	460e      	mov	r6, r1
 8009e5a:	b9ec      	cbnz	r4, 8009e98 <strtok+0x4c>
 8009e5c:	2050      	movs	r0, #80	@ 0x50
 8009e5e:	f7ff fd71 	bl	8009944 <malloc>
 8009e62:	4602      	mov	r2, r0
 8009e64:	6478      	str	r0, [r7, #68]	@ 0x44
 8009e66:	b920      	cbnz	r0, 8009e72 <strtok+0x26>
 8009e68:	4b10      	ldr	r3, [pc, #64]	@ (8009eac <strtok+0x60>)
 8009e6a:	4811      	ldr	r0, [pc, #68]	@ (8009eb0 <strtok+0x64>)
 8009e6c:	215b      	movs	r1, #91	@ 0x5b
 8009e6e:	f000 f8db 	bl	800a028 <__assert_func>
 8009e72:	e9c0 4400 	strd	r4, r4, [r0]
 8009e76:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009e7a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009e7e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009e82:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009e86:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009e8a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009e8e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009e92:	6184      	str	r4, [r0, #24]
 8009e94:	7704      	strb	r4, [r0, #28]
 8009e96:	6244      	str	r4, [r0, #36]	@ 0x24
 8009e98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e9a:	4631      	mov	r1, r6
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea4:	f000 b806 	b.w	8009eb4 <__strtok_r>
 8009ea8:	200000c0 	.word	0x200000c0
 8009eac:	0800b1ed 	.word	0x0800b1ed
 8009eb0:	0800b204 	.word	0x0800b204

08009eb4 <__strtok_r>:
 8009eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	b908      	cbnz	r0, 8009ebe <__strtok_r+0xa>
 8009eba:	6814      	ldr	r4, [r2, #0]
 8009ebc:	b144      	cbz	r4, 8009ed0 <__strtok_r+0x1c>
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009ec4:	460f      	mov	r7, r1
 8009ec6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009eca:	b91e      	cbnz	r6, 8009ed4 <__strtok_r+0x20>
 8009ecc:	b965      	cbnz	r5, 8009ee8 <__strtok_r+0x34>
 8009ece:	6015      	str	r5, [r2, #0]
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	e005      	b.n	8009ee0 <__strtok_r+0x2c>
 8009ed4:	42b5      	cmp	r5, r6
 8009ed6:	d1f6      	bne.n	8009ec6 <__strtok_r+0x12>
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1f0      	bne.n	8009ebe <__strtok_r+0xa>
 8009edc:	6014      	str	r4, [r2, #0]
 8009ede:	7003      	strb	r3, [r0, #0]
 8009ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ee2:	461c      	mov	r4, r3
 8009ee4:	e00c      	b.n	8009f00 <__strtok_r+0x4c>
 8009ee6:	b915      	cbnz	r5, 8009eee <__strtok_r+0x3a>
 8009ee8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009eec:	460e      	mov	r6, r1
 8009eee:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009ef2:	42ab      	cmp	r3, r5
 8009ef4:	d1f7      	bne.n	8009ee6 <__strtok_r+0x32>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d0f3      	beq.n	8009ee2 <__strtok_r+0x2e>
 8009efa:	2300      	movs	r3, #0
 8009efc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009f00:	6014      	str	r4, [r2, #0]
 8009f02:	e7ed      	b.n	8009ee0 <__strtok_r+0x2c>

08009f04 <_close_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	4d06      	ldr	r5, [pc, #24]	@ (8009f20 <_close_r+0x1c>)
 8009f08:	2300      	movs	r3, #0
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	4608      	mov	r0, r1
 8009f0e:	602b      	str	r3, [r5, #0]
 8009f10:	f7f7 f89a 	bl	8001048 <_close>
 8009f14:	1c43      	adds	r3, r0, #1
 8009f16:	d102      	bne.n	8009f1e <_close_r+0x1a>
 8009f18:	682b      	ldr	r3, [r5, #0]
 8009f1a:	b103      	cbz	r3, 8009f1e <_close_r+0x1a>
 8009f1c:	6023      	str	r3, [r4, #0]
 8009f1e:	bd38      	pop	{r3, r4, r5, pc}
 8009f20:	2000065c 	.word	0x2000065c

08009f24 <_lseek_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	4d07      	ldr	r5, [pc, #28]	@ (8009f44 <_lseek_r+0x20>)
 8009f28:	4604      	mov	r4, r0
 8009f2a:	4608      	mov	r0, r1
 8009f2c:	4611      	mov	r1, r2
 8009f2e:	2200      	movs	r2, #0
 8009f30:	602a      	str	r2, [r5, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	f7f7 f8af 	bl	8001096 <_lseek>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d102      	bne.n	8009f42 <_lseek_r+0x1e>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	b103      	cbz	r3, 8009f42 <_lseek_r+0x1e>
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	bd38      	pop	{r3, r4, r5, pc}
 8009f44:	2000065c 	.word	0x2000065c

08009f48 <_read_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d07      	ldr	r5, [pc, #28]	@ (8009f68 <_read_r+0x20>)
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	4608      	mov	r0, r1
 8009f50:	4611      	mov	r1, r2
 8009f52:	2200      	movs	r2, #0
 8009f54:	602a      	str	r2, [r5, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	f7f7 f83d 	bl	8000fd6 <_read>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d102      	bne.n	8009f66 <_read_r+0x1e>
 8009f60:	682b      	ldr	r3, [r5, #0]
 8009f62:	b103      	cbz	r3, 8009f66 <_read_r+0x1e>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
 8009f68:	2000065c 	.word	0x2000065c

08009f6c <_sbrk_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4d06      	ldr	r5, [pc, #24]	@ (8009f88 <_sbrk_r+0x1c>)
 8009f70:	2300      	movs	r3, #0
 8009f72:	4604      	mov	r4, r0
 8009f74:	4608      	mov	r0, r1
 8009f76:	602b      	str	r3, [r5, #0]
 8009f78:	f7f7 f89a 	bl	80010b0 <_sbrk>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d102      	bne.n	8009f86 <_sbrk_r+0x1a>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	b103      	cbz	r3, 8009f86 <_sbrk_r+0x1a>
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	bd38      	pop	{r3, r4, r5, pc}
 8009f88:	2000065c 	.word	0x2000065c

08009f8c <_write_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4d07      	ldr	r5, [pc, #28]	@ (8009fac <_write_r+0x20>)
 8009f90:	4604      	mov	r4, r0
 8009f92:	4608      	mov	r0, r1
 8009f94:	4611      	mov	r1, r2
 8009f96:	2200      	movs	r2, #0
 8009f98:	602a      	str	r2, [r5, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f7f7 f838 	bl	8001010 <_write>
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	d102      	bne.n	8009faa <_write_r+0x1e>
 8009fa4:	682b      	ldr	r3, [r5, #0]
 8009fa6:	b103      	cbz	r3, 8009faa <_write_r+0x1e>
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	bd38      	pop	{r3, r4, r5, pc}
 8009fac:	2000065c 	.word	0x2000065c

08009fb0 <__errno>:
 8009fb0:	4b01      	ldr	r3, [pc, #4]	@ (8009fb8 <__errno+0x8>)
 8009fb2:	6818      	ldr	r0, [r3, #0]
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	200000c0 	.word	0x200000c0

08009fbc <__libc_init_array>:
 8009fbc:	b570      	push	{r4, r5, r6, lr}
 8009fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8009ff4 <__libc_init_array+0x38>)
 8009fc0:	4c0d      	ldr	r4, [pc, #52]	@ (8009ff8 <__libc_init_array+0x3c>)
 8009fc2:	1b64      	subs	r4, r4, r5
 8009fc4:	10a4      	asrs	r4, r4, #2
 8009fc6:	2600      	movs	r6, #0
 8009fc8:	42a6      	cmp	r6, r4
 8009fca:	d109      	bne.n	8009fe0 <__libc_init_array+0x24>
 8009fcc:	4d0b      	ldr	r5, [pc, #44]	@ (8009ffc <__libc_init_array+0x40>)
 8009fce:	4c0c      	ldr	r4, [pc, #48]	@ (800a000 <__libc_init_array+0x44>)
 8009fd0:	f000 ff2a 	bl	800ae28 <_init>
 8009fd4:	1b64      	subs	r4, r4, r5
 8009fd6:	10a4      	asrs	r4, r4, #2
 8009fd8:	2600      	movs	r6, #0
 8009fda:	42a6      	cmp	r6, r4
 8009fdc:	d105      	bne.n	8009fea <__libc_init_array+0x2e>
 8009fde:	bd70      	pop	{r4, r5, r6, pc}
 8009fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fe4:	4798      	blx	r3
 8009fe6:	3601      	adds	r6, #1
 8009fe8:	e7ee      	b.n	8009fc8 <__libc_init_array+0xc>
 8009fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fee:	4798      	blx	r3
 8009ff0:	3601      	adds	r6, #1
 8009ff2:	e7f2      	b.n	8009fda <__libc_init_array+0x1e>
 8009ff4:	0800b2d8 	.word	0x0800b2d8
 8009ff8:	0800b2d8 	.word	0x0800b2d8
 8009ffc:	0800b2d8 	.word	0x0800b2d8
 800a000:	0800b2dc 	.word	0x0800b2dc

0800a004 <__retarget_lock_init_recursive>:
 800a004:	4770      	bx	lr

0800a006 <__retarget_lock_acquire_recursive>:
 800a006:	4770      	bx	lr

0800a008 <__retarget_lock_release_recursive>:
 800a008:	4770      	bx	lr

0800a00a <memcpy>:
 800a00a:	440a      	add	r2, r1
 800a00c:	4291      	cmp	r1, r2
 800a00e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a012:	d100      	bne.n	800a016 <memcpy+0xc>
 800a014:	4770      	bx	lr
 800a016:	b510      	push	{r4, lr}
 800a018:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a01c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a020:	4291      	cmp	r1, r2
 800a022:	d1f9      	bne.n	800a018 <memcpy+0xe>
 800a024:	bd10      	pop	{r4, pc}
	...

0800a028 <__assert_func>:
 800a028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a02a:	4614      	mov	r4, r2
 800a02c:	461a      	mov	r2, r3
 800a02e:	4b09      	ldr	r3, [pc, #36]	@ (800a054 <__assert_func+0x2c>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4605      	mov	r5, r0
 800a034:	68d8      	ldr	r0, [r3, #12]
 800a036:	b954      	cbnz	r4, 800a04e <__assert_func+0x26>
 800a038:	4b07      	ldr	r3, [pc, #28]	@ (800a058 <__assert_func+0x30>)
 800a03a:	461c      	mov	r4, r3
 800a03c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a040:	9100      	str	r1, [sp, #0]
 800a042:	462b      	mov	r3, r5
 800a044:	4905      	ldr	r1, [pc, #20]	@ (800a05c <__assert_func+0x34>)
 800a046:	f000 fbe9 	bl	800a81c <fiprintf>
 800a04a:	f000 fc13 	bl	800a874 <abort>
 800a04e:	4b04      	ldr	r3, [pc, #16]	@ (800a060 <__assert_func+0x38>)
 800a050:	e7f4      	b.n	800a03c <__assert_func+0x14>
 800a052:	bf00      	nop
 800a054:	200000c0 	.word	0x200000c0
 800a058:	0800b299 	.word	0x0800b299
 800a05c:	0800b26b 	.word	0x0800b26b
 800a060:	0800b25e 	.word	0x0800b25e

0800a064 <_free_r>:
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	4605      	mov	r5, r0
 800a068:	2900      	cmp	r1, #0
 800a06a:	d041      	beq.n	800a0f0 <_free_r+0x8c>
 800a06c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a070:	1f0c      	subs	r4, r1, #4
 800a072:	2b00      	cmp	r3, #0
 800a074:	bfb8      	it	lt
 800a076:	18e4      	addlt	r4, r4, r3
 800a078:	f7ff fd16 	bl	8009aa8 <__malloc_lock>
 800a07c:	4a1d      	ldr	r2, [pc, #116]	@ (800a0f4 <_free_r+0x90>)
 800a07e:	6813      	ldr	r3, [r2, #0]
 800a080:	b933      	cbnz	r3, 800a090 <_free_r+0x2c>
 800a082:	6063      	str	r3, [r4, #4]
 800a084:	6014      	str	r4, [r2, #0]
 800a086:	4628      	mov	r0, r5
 800a088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a08c:	f7ff bd12 	b.w	8009ab4 <__malloc_unlock>
 800a090:	42a3      	cmp	r3, r4
 800a092:	d908      	bls.n	800a0a6 <_free_r+0x42>
 800a094:	6820      	ldr	r0, [r4, #0]
 800a096:	1821      	adds	r1, r4, r0
 800a098:	428b      	cmp	r3, r1
 800a09a:	bf01      	itttt	eq
 800a09c:	6819      	ldreq	r1, [r3, #0]
 800a09e:	685b      	ldreq	r3, [r3, #4]
 800a0a0:	1809      	addeq	r1, r1, r0
 800a0a2:	6021      	streq	r1, [r4, #0]
 800a0a4:	e7ed      	b.n	800a082 <_free_r+0x1e>
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	b10b      	cbz	r3, 800a0b0 <_free_r+0x4c>
 800a0ac:	42a3      	cmp	r3, r4
 800a0ae:	d9fa      	bls.n	800a0a6 <_free_r+0x42>
 800a0b0:	6811      	ldr	r1, [r2, #0]
 800a0b2:	1850      	adds	r0, r2, r1
 800a0b4:	42a0      	cmp	r0, r4
 800a0b6:	d10b      	bne.n	800a0d0 <_free_r+0x6c>
 800a0b8:	6820      	ldr	r0, [r4, #0]
 800a0ba:	4401      	add	r1, r0
 800a0bc:	1850      	adds	r0, r2, r1
 800a0be:	4283      	cmp	r3, r0
 800a0c0:	6011      	str	r1, [r2, #0]
 800a0c2:	d1e0      	bne.n	800a086 <_free_r+0x22>
 800a0c4:	6818      	ldr	r0, [r3, #0]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	6053      	str	r3, [r2, #4]
 800a0ca:	4408      	add	r0, r1
 800a0cc:	6010      	str	r0, [r2, #0]
 800a0ce:	e7da      	b.n	800a086 <_free_r+0x22>
 800a0d0:	d902      	bls.n	800a0d8 <_free_r+0x74>
 800a0d2:	230c      	movs	r3, #12
 800a0d4:	602b      	str	r3, [r5, #0]
 800a0d6:	e7d6      	b.n	800a086 <_free_r+0x22>
 800a0d8:	6820      	ldr	r0, [r4, #0]
 800a0da:	1821      	adds	r1, r4, r0
 800a0dc:	428b      	cmp	r3, r1
 800a0de:	bf04      	itt	eq
 800a0e0:	6819      	ldreq	r1, [r3, #0]
 800a0e2:	685b      	ldreq	r3, [r3, #4]
 800a0e4:	6063      	str	r3, [r4, #4]
 800a0e6:	bf04      	itt	eq
 800a0e8:	1809      	addeq	r1, r1, r0
 800a0ea:	6021      	streq	r1, [r4, #0]
 800a0ec:	6054      	str	r4, [r2, #4]
 800a0ee:	e7ca      	b.n	800a086 <_free_r+0x22>
 800a0f0:	bd38      	pop	{r3, r4, r5, pc}
 800a0f2:	bf00      	nop
 800a0f4:	2000051c 	.word	0x2000051c

0800a0f8 <__ssputs_r>:
 800a0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0fc:	688e      	ldr	r6, [r1, #8]
 800a0fe:	461f      	mov	r7, r3
 800a100:	42be      	cmp	r6, r7
 800a102:	680b      	ldr	r3, [r1, #0]
 800a104:	4682      	mov	sl, r0
 800a106:	460c      	mov	r4, r1
 800a108:	4690      	mov	r8, r2
 800a10a:	d82d      	bhi.n	800a168 <__ssputs_r+0x70>
 800a10c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a110:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a114:	d026      	beq.n	800a164 <__ssputs_r+0x6c>
 800a116:	6965      	ldr	r5, [r4, #20]
 800a118:	6909      	ldr	r1, [r1, #16]
 800a11a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a11e:	eba3 0901 	sub.w	r9, r3, r1
 800a122:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a126:	1c7b      	adds	r3, r7, #1
 800a128:	444b      	add	r3, r9
 800a12a:	106d      	asrs	r5, r5, #1
 800a12c:	429d      	cmp	r5, r3
 800a12e:	bf38      	it	cc
 800a130:	461d      	movcc	r5, r3
 800a132:	0553      	lsls	r3, r2, #21
 800a134:	d527      	bpl.n	800a186 <__ssputs_r+0x8e>
 800a136:	4629      	mov	r1, r5
 800a138:	f7ff fc36 	bl	80099a8 <_malloc_r>
 800a13c:	4606      	mov	r6, r0
 800a13e:	b360      	cbz	r0, 800a19a <__ssputs_r+0xa2>
 800a140:	6921      	ldr	r1, [r4, #16]
 800a142:	464a      	mov	r2, r9
 800a144:	f7ff ff61 	bl	800a00a <memcpy>
 800a148:	89a3      	ldrh	r3, [r4, #12]
 800a14a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a14e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	6126      	str	r6, [r4, #16]
 800a156:	6165      	str	r5, [r4, #20]
 800a158:	444e      	add	r6, r9
 800a15a:	eba5 0509 	sub.w	r5, r5, r9
 800a15e:	6026      	str	r6, [r4, #0]
 800a160:	60a5      	str	r5, [r4, #8]
 800a162:	463e      	mov	r6, r7
 800a164:	42be      	cmp	r6, r7
 800a166:	d900      	bls.n	800a16a <__ssputs_r+0x72>
 800a168:	463e      	mov	r6, r7
 800a16a:	6820      	ldr	r0, [r4, #0]
 800a16c:	4632      	mov	r2, r6
 800a16e:	4641      	mov	r1, r8
 800a170:	f000 fb66 	bl	800a840 <memmove>
 800a174:	68a3      	ldr	r3, [r4, #8]
 800a176:	1b9b      	subs	r3, r3, r6
 800a178:	60a3      	str	r3, [r4, #8]
 800a17a:	6823      	ldr	r3, [r4, #0]
 800a17c:	4433      	add	r3, r6
 800a17e:	6023      	str	r3, [r4, #0]
 800a180:	2000      	movs	r0, #0
 800a182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a186:	462a      	mov	r2, r5
 800a188:	f000 fb7b 	bl	800a882 <_realloc_r>
 800a18c:	4606      	mov	r6, r0
 800a18e:	2800      	cmp	r0, #0
 800a190:	d1e0      	bne.n	800a154 <__ssputs_r+0x5c>
 800a192:	6921      	ldr	r1, [r4, #16]
 800a194:	4650      	mov	r0, sl
 800a196:	f7ff ff65 	bl	800a064 <_free_r>
 800a19a:	230c      	movs	r3, #12
 800a19c:	f8ca 3000 	str.w	r3, [sl]
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1a6:	81a3      	strh	r3, [r4, #12]
 800a1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ac:	e7e9      	b.n	800a182 <__ssputs_r+0x8a>
	...

0800a1b0 <_svfiprintf_r>:
 800a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b4:	4698      	mov	r8, r3
 800a1b6:	898b      	ldrh	r3, [r1, #12]
 800a1b8:	061b      	lsls	r3, r3, #24
 800a1ba:	b09d      	sub	sp, #116	@ 0x74
 800a1bc:	4607      	mov	r7, r0
 800a1be:	460d      	mov	r5, r1
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	d510      	bpl.n	800a1e6 <_svfiprintf_r+0x36>
 800a1c4:	690b      	ldr	r3, [r1, #16]
 800a1c6:	b973      	cbnz	r3, 800a1e6 <_svfiprintf_r+0x36>
 800a1c8:	2140      	movs	r1, #64	@ 0x40
 800a1ca:	f7ff fbed 	bl	80099a8 <_malloc_r>
 800a1ce:	6028      	str	r0, [r5, #0]
 800a1d0:	6128      	str	r0, [r5, #16]
 800a1d2:	b930      	cbnz	r0, 800a1e2 <_svfiprintf_r+0x32>
 800a1d4:	230c      	movs	r3, #12
 800a1d6:	603b      	str	r3, [r7, #0]
 800a1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1dc:	b01d      	add	sp, #116	@ 0x74
 800a1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e2:	2340      	movs	r3, #64	@ 0x40
 800a1e4:	616b      	str	r3, [r5, #20]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1ea:	2320      	movs	r3, #32
 800a1ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1f4:	2330      	movs	r3, #48	@ 0x30
 800a1f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a394 <_svfiprintf_r+0x1e4>
 800a1fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1fe:	f04f 0901 	mov.w	r9, #1
 800a202:	4623      	mov	r3, r4
 800a204:	469a      	mov	sl, r3
 800a206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a20a:	b10a      	cbz	r2, 800a210 <_svfiprintf_r+0x60>
 800a20c:	2a25      	cmp	r2, #37	@ 0x25
 800a20e:	d1f9      	bne.n	800a204 <_svfiprintf_r+0x54>
 800a210:	ebba 0b04 	subs.w	fp, sl, r4
 800a214:	d00b      	beq.n	800a22e <_svfiprintf_r+0x7e>
 800a216:	465b      	mov	r3, fp
 800a218:	4622      	mov	r2, r4
 800a21a:	4629      	mov	r1, r5
 800a21c:	4638      	mov	r0, r7
 800a21e:	f7ff ff6b 	bl	800a0f8 <__ssputs_r>
 800a222:	3001      	adds	r0, #1
 800a224:	f000 80a7 	beq.w	800a376 <_svfiprintf_r+0x1c6>
 800a228:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a22a:	445a      	add	r2, fp
 800a22c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a22e:	f89a 3000 	ldrb.w	r3, [sl]
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 809f 	beq.w	800a376 <_svfiprintf_r+0x1c6>
 800a238:	2300      	movs	r3, #0
 800a23a:	f04f 32ff 	mov.w	r2, #4294967295
 800a23e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a242:	f10a 0a01 	add.w	sl, sl, #1
 800a246:	9304      	str	r3, [sp, #16]
 800a248:	9307      	str	r3, [sp, #28]
 800a24a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a24e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a250:	4654      	mov	r4, sl
 800a252:	2205      	movs	r2, #5
 800a254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a258:	484e      	ldr	r0, [pc, #312]	@ (800a394 <_svfiprintf_r+0x1e4>)
 800a25a:	f7f5 fff9 	bl	8000250 <memchr>
 800a25e:	9a04      	ldr	r2, [sp, #16]
 800a260:	b9d8      	cbnz	r0, 800a29a <_svfiprintf_r+0xea>
 800a262:	06d0      	lsls	r0, r2, #27
 800a264:	bf44      	itt	mi
 800a266:	2320      	movmi	r3, #32
 800a268:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a26c:	0711      	lsls	r1, r2, #28
 800a26e:	bf44      	itt	mi
 800a270:	232b      	movmi	r3, #43	@ 0x2b
 800a272:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a276:	f89a 3000 	ldrb.w	r3, [sl]
 800a27a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a27c:	d015      	beq.n	800a2aa <_svfiprintf_r+0xfa>
 800a27e:	9a07      	ldr	r2, [sp, #28]
 800a280:	4654      	mov	r4, sl
 800a282:	2000      	movs	r0, #0
 800a284:	f04f 0c0a 	mov.w	ip, #10
 800a288:	4621      	mov	r1, r4
 800a28a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a28e:	3b30      	subs	r3, #48	@ 0x30
 800a290:	2b09      	cmp	r3, #9
 800a292:	d94b      	bls.n	800a32c <_svfiprintf_r+0x17c>
 800a294:	b1b0      	cbz	r0, 800a2c4 <_svfiprintf_r+0x114>
 800a296:	9207      	str	r2, [sp, #28]
 800a298:	e014      	b.n	800a2c4 <_svfiprintf_r+0x114>
 800a29a:	eba0 0308 	sub.w	r3, r0, r8
 800a29e:	fa09 f303 	lsl.w	r3, r9, r3
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	9304      	str	r3, [sp, #16]
 800a2a6:	46a2      	mov	sl, r4
 800a2a8:	e7d2      	b.n	800a250 <_svfiprintf_r+0xa0>
 800a2aa:	9b03      	ldr	r3, [sp, #12]
 800a2ac:	1d19      	adds	r1, r3, #4
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	9103      	str	r1, [sp, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	bfbb      	ittet	lt
 800a2b6:	425b      	neglt	r3, r3
 800a2b8:	f042 0202 	orrlt.w	r2, r2, #2
 800a2bc:	9307      	strge	r3, [sp, #28]
 800a2be:	9307      	strlt	r3, [sp, #28]
 800a2c0:	bfb8      	it	lt
 800a2c2:	9204      	strlt	r2, [sp, #16]
 800a2c4:	7823      	ldrb	r3, [r4, #0]
 800a2c6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2c8:	d10a      	bne.n	800a2e0 <_svfiprintf_r+0x130>
 800a2ca:	7863      	ldrb	r3, [r4, #1]
 800a2cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2ce:	d132      	bne.n	800a336 <_svfiprintf_r+0x186>
 800a2d0:	9b03      	ldr	r3, [sp, #12]
 800a2d2:	1d1a      	adds	r2, r3, #4
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	9203      	str	r2, [sp, #12]
 800a2d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2dc:	3402      	adds	r4, #2
 800a2de:	9305      	str	r3, [sp, #20]
 800a2e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a3a4 <_svfiprintf_r+0x1f4>
 800a2e4:	7821      	ldrb	r1, [r4, #0]
 800a2e6:	2203      	movs	r2, #3
 800a2e8:	4650      	mov	r0, sl
 800a2ea:	f7f5 ffb1 	bl	8000250 <memchr>
 800a2ee:	b138      	cbz	r0, 800a300 <_svfiprintf_r+0x150>
 800a2f0:	9b04      	ldr	r3, [sp, #16]
 800a2f2:	eba0 000a 	sub.w	r0, r0, sl
 800a2f6:	2240      	movs	r2, #64	@ 0x40
 800a2f8:	4082      	lsls	r2, r0
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	3401      	adds	r4, #1
 800a2fe:	9304      	str	r3, [sp, #16]
 800a300:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a304:	4824      	ldr	r0, [pc, #144]	@ (800a398 <_svfiprintf_r+0x1e8>)
 800a306:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a30a:	2206      	movs	r2, #6
 800a30c:	f7f5 ffa0 	bl	8000250 <memchr>
 800a310:	2800      	cmp	r0, #0
 800a312:	d036      	beq.n	800a382 <_svfiprintf_r+0x1d2>
 800a314:	4b21      	ldr	r3, [pc, #132]	@ (800a39c <_svfiprintf_r+0x1ec>)
 800a316:	bb1b      	cbnz	r3, 800a360 <_svfiprintf_r+0x1b0>
 800a318:	9b03      	ldr	r3, [sp, #12]
 800a31a:	3307      	adds	r3, #7
 800a31c:	f023 0307 	bic.w	r3, r3, #7
 800a320:	3308      	adds	r3, #8
 800a322:	9303      	str	r3, [sp, #12]
 800a324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a326:	4433      	add	r3, r6
 800a328:	9309      	str	r3, [sp, #36]	@ 0x24
 800a32a:	e76a      	b.n	800a202 <_svfiprintf_r+0x52>
 800a32c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a330:	460c      	mov	r4, r1
 800a332:	2001      	movs	r0, #1
 800a334:	e7a8      	b.n	800a288 <_svfiprintf_r+0xd8>
 800a336:	2300      	movs	r3, #0
 800a338:	3401      	adds	r4, #1
 800a33a:	9305      	str	r3, [sp, #20]
 800a33c:	4619      	mov	r1, r3
 800a33e:	f04f 0c0a 	mov.w	ip, #10
 800a342:	4620      	mov	r0, r4
 800a344:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a348:	3a30      	subs	r2, #48	@ 0x30
 800a34a:	2a09      	cmp	r2, #9
 800a34c:	d903      	bls.n	800a356 <_svfiprintf_r+0x1a6>
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d0c6      	beq.n	800a2e0 <_svfiprintf_r+0x130>
 800a352:	9105      	str	r1, [sp, #20]
 800a354:	e7c4      	b.n	800a2e0 <_svfiprintf_r+0x130>
 800a356:	fb0c 2101 	mla	r1, ip, r1, r2
 800a35a:	4604      	mov	r4, r0
 800a35c:	2301      	movs	r3, #1
 800a35e:	e7f0      	b.n	800a342 <_svfiprintf_r+0x192>
 800a360:	ab03      	add	r3, sp, #12
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	462a      	mov	r2, r5
 800a366:	4b0e      	ldr	r3, [pc, #56]	@ (800a3a0 <_svfiprintf_r+0x1f0>)
 800a368:	a904      	add	r1, sp, #16
 800a36a:	4638      	mov	r0, r7
 800a36c:	f3af 8000 	nop.w
 800a370:	1c42      	adds	r2, r0, #1
 800a372:	4606      	mov	r6, r0
 800a374:	d1d6      	bne.n	800a324 <_svfiprintf_r+0x174>
 800a376:	89ab      	ldrh	r3, [r5, #12]
 800a378:	065b      	lsls	r3, r3, #25
 800a37a:	f53f af2d 	bmi.w	800a1d8 <_svfiprintf_r+0x28>
 800a37e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a380:	e72c      	b.n	800a1dc <_svfiprintf_r+0x2c>
 800a382:	ab03      	add	r3, sp, #12
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	462a      	mov	r2, r5
 800a388:	4b05      	ldr	r3, [pc, #20]	@ (800a3a0 <_svfiprintf_r+0x1f0>)
 800a38a:	a904      	add	r1, sp, #16
 800a38c:	4638      	mov	r0, r7
 800a38e:	f000 f879 	bl	800a484 <_printf_i>
 800a392:	e7ed      	b.n	800a370 <_svfiprintf_r+0x1c0>
 800a394:	0800b29a 	.word	0x0800b29a
 800a398:	0800b2a4 	.word	0x0800b2a4
 800a39c:	00000000 	.word	0x00000000
 800a3a0:	0800a0f9 	.word	0x0800a0f9
 800a3a4:	0800b2a0 	.word	0x0800b2a0

0800a3a8 <_printf_common>:
 800a3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3ac:	4616      	mov	r6, r2
 800a3ae:	4698      	mov	r8, r3
 800a3b0:	688a      	ldr	r2, [r1, #8]
 800a3b2:	690b      	ldr	r3, [r1, #16]
 800a3b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	bfb8      	it	lt
 800a3bc:	4613      	movlt	r3, r2
 800a3be:	6033      	str	r3, [r6, #0]
 800a3c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3c4:	4607      	mov	r7, r0
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	b10a      	cbz	r2, 800a3ce <_printf_common+0x26>
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	6033      	str	r3, [r6, #0]
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	0699      	lsls	r1, r3, #26
 800a3d2:	bf42      	ittt	mi
 800a3d4:	6833      	ldrmi	r3, [r6, #0]
 800a3d6:	3302      	addmi	r3, #2
 800a3d8:	6033      	strmi	r3, [r6, #0]
 800a3da:	6825      	ldr	r5, [r4, #0]
 800a3dc:	f015 0506 	ands.w	r5, r5, #6
 800a3e0:	d106      	bne.n	800a3f0 <_printf_common+0x48>
 800a3e2:	f104 0a19 	add.w	sl, r4, #25
 800a3e6:	68e3      	ldr	r3, [r4, #12]
 800a3e8:	6832      	ldr	r2, [r6, #0]
 800a3ea:	1a9b      	subs	r3, r3, r2
 800a3ec:	42ab      	cmp	r3, r5
 800a3ee:	dc26      	bgt.n	800a43e <_printf_common+0x96>
 800a3f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3f4:	6822      	ldr	r2, [r4, #0]
 800a3f6:	3b00      	subs	r3, #0
 800a3f8:	bf18      	it	ne
 800a3fa:	2301      	movne	r3, #1
 800a3fc:	0692      	lsls	r2, r2, #26
 800a3fe:	d42b      	bmi.n	800a458 <_printf_common+0xb0>
 800a400:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a404:	4641      	mov	r1, r8
 800a406:	4638      	mov	r0, r7
 800a408:	47c8      	blx	r9
 800a40a:	3001      	adds	r0, #1
 800a40c:	d01e      	beq.n	800a44c <_printf_common+0xa4>
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	6922      	ldr	r2, [r4, #16]
 800a412:	f003 0306 	and.w	r3, r3, #6
 800a416:	2b04      	cmp	r3, #4
 800a418:	bf02      	ittt	eq
 800a41a:	68e5      	ldreq	r5, [r4, #12]
 800a41c:	6833      	ldreq	r3, [r6, #0]
 800a41e:	1aed      	subeq	r5, r5, r3
 800a420:	68a3      	ldr	r3, [r4, #8]
 800a422:	bf0c      	ite	eq
 800a424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a428:	2500      	movne	r5, #0
 800a42a:	4293      	cmp	r3, r2
 800a42c:	bfc4      	itt	gt
 800a42e:	1a9b      	subgt	r3, r3, r2
 800a430:	18ed      	addgt	r5, r5, r3
 800a432:	2600      	movs	r6, #0
 800a434:	341a      	adds	r4, #26
 800a436:	42b5      	cmp	r5, r6
 800a438:	d11a      	bne.n	800a470 <_printf_common+0xc8>
 800a43a:	2000      	movs	r0, #0
 800a43c:	e008      	b.n	800a450 <_printf_common+0xa8>
 800a43e:	2301      	movs	r3, #1
 800a440:	4652      	mov	r2, sl
 800a442:	4641      	mov	r1, r8
 800a444:	4638      	mov	r0, r7
 800a446:	47c8      	blx	r9
 800a448:	3001      	adds	r0, #1
 800a44a:	d103      	bne.n	800a454 <_printf_common+0xac>
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295
 800a450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a454:	3501      	adds	r5, #1
 800a456:	e7c6      	b.n	800a3e6 <_printf_common+0x3e>
 800a458:	18e1      	adds	r1, r4, r3
 800a45a:	1c5a      	adds	r2, r3, #1
 800a45c:	2030      	movs	r0, #48	@ 0x30
 800a45e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a462:	4422      	add	r2, r4
 800a464:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a468:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a46c:	3302      	adds	r3, #2
 800a46e:	e7c7      	b.n	800a400 <_printf_common+0x58>
 800a470:	2301      	movs	r3, #1
 800a472:	4622      	mov	r2, r4
 800a474:	4641      	mov	r1, r8
 800a476:	4638      	mov	r0, r7
 800a478:	47c8      	blx	r9
 800a47a:	3001      	adds	r0, #1
 800a47c:	d0e6      	beq.n	800a44c <_printf_common+0xa4>
 800a47e:	3601      	adds	r6, #1
 800a480:	e7d9      	b.n	800a436 <_printf_common+0x8e>
	...

0800a484 <_printf_i>:
 800a484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a488:	7e0f      	ldrb	r7, [r1, #24]
 800a48a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a48c:	2f78      	cmp	r7, #120	@ 0x78
 800a48e:	4691      	mov	r9, r2
 800a490:	4680      	mov	r8, r0
 800a492:	460c      	mov	r4, r1
 800a494:	469a      	mov	sl, r3
 800a496:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a49a:	d807      	bhi.n	800a4ac <_printf_i+0x28>
 800a49c:	2f62      	cmp	r7, #98	@ 0x62
 800a49e:	d80a      	bhi.n	800a4b6 <_printf_i+0x32>
 800a4a0:	2f00      	cmp	r7, #0
 800a4a2:	f000 80d2 	beq.w	800a64a <_printf_i+0x1c6>
 800a4a6:	2f58      	cmp	r7, #88	@ 0x58
 800a4a8:	f000 80b9 	beq.w	800a61e <_printf_i+0x19a>
 800a4ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4b4:	e03a      	b.n	800a52c <_printf_i+0xa8>
 800a4b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4ba:	2b15      	cmp	r3, #21
 800a4bc:	d8f6      	bhi.n	800a4ac <_printf_i+0x28>
 800a4be:	a101      	add	r1, pc, #4	@ (adr r1, 800a4c4 <_printf_i+0x40>)
 800a4c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4c4:	0800a51d 	.word	0x0800a51d
 800a4c8:	0800a531 	.word	0x0800a531
 800a4cc:	0800a4ad 	.word	0x0800a4ad
 800a4d0:	0800a4ad 	.word	0x0800a4ad
 800a4d4:	0800a4ad 	.word	0x0800a4ad
 800a4d8:	0800a4ad 	.word	0x0800a4ad
 800a4dc:	0800a531 	.word	0x0800a531
 800a4e0:	0800a4ad 	.word	0x0800a4ad
 800a4e4:	0800a4ad 	.word	0x0800a4ad
 800a4e8:	0800a4ad 	.word	0x0800a4ad
 800a4ec:	0800a4ad 	.word	0x0800a4ad
 800a4f0:	0800a631 	.word	0x0800a631
 800a4f4:	0800a55b 	.word	0x0800a55b
 800a4f8:	0800a5eb 	.word	0x0800a5eb
 800a4fc:	0800a4ad 	.word	0x0800a4ad
 800a500:	0800a4ad 	.word	0x0800a4ad
 800a504:	0800a653 	.word	0x0800a653
 800a508:	0800a4ad 	.word	0x0800a4ad
 800a50c:	0800a55b 	.word	0x0800a55b
 800a510:	0800a4ad 	.word	0x0800a4ad
 800a514:	0800a4ad 	.word	0x0800a4ad
 800a518:	0800a5f3 	.word	0x0800a5f3
 800a51c:	6833      	ldr	r3, [r6, #0]
 800a51e:	1d1a      	adds	r2, r3, #4
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	6032      	str	r2, [r6, #0]
 800a524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a528:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a52c:	2301      	movs	r3, #1
 800a52e:	e09d      	b.n	800a66c <_printf_i+0x1e8>
 800a530:	6833      	ldr	r3, [r6, #0]
 800a532:	6820      	ldr	r0, [r4, #0]
 800a534:	1d19      	adds	r1, r3, #4
 800a536:	6031      	str	r1, [r6, #0]
 800a538:	0606      	lsls	r6, r0, #24
 800a53a:	d501      	bpl.n	800a540 <_printf_i+0xbc>
 800a53c:	681d      	ldr	r5, [r3, #0]
 800a53e:	e003      	b.n	800a548 <_printf_i+0xc4>
 800a540:	0645      	lsls	r5, r0, #25
 800a542:	d5fb      	bpl.n	800a53c <_printf_i+0xb8>
 800a544:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a548:	2d00      	cmp	r5, #0
 800a54a:	da03      	bge.n	800a554 <_printf_i+0xd0>
 800a54c:	232d      	movs	r3, #45	@ 0x2d
 800a54e:	426d      	negs	r5, r5
 800a550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a554:	4859      	ldr	r0, [pc, #356]	@ (800a6bc <_printf_i+0x238>)
 800a556:	230a      	movs	r3, #10
 800a558:	e011      	b.n	800a57e <_printf_i+0xfa>
 800a55a:	6821      	ldr	r1, [r4, #0]
 800a55c:	6833      	ldr	r3, [r6, #0]
 800a55e:	0608      	lsls	r0, r1, #24
 800a560:	f853 5b04 	ldr.w	r5, [r3], #4
 800a564:	d402      	bmi.n	800a56c <_printf_i+0xe8>
 800a566:	0649      	lsls	r1, r1, #25
 800a568:	bf48      	it	mi
 800a56a:	b2ad      	uxthmi	r5, r5
 800a56c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a56e:	4853      	ldr	r0, [pc, #332]	@ (800a6bc <_printf_i+0x238>)
 800a570:	6033      	str	r3, [r6, #0]
 800a572:	bf14      	ite	ne
 800a574:	230a      	movne	r3, #10
 800a576:	2308      	moveq	r3, #8
 800a578:	2100      	movs	r1, #0
 800a57a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a57e:	6866      	ldr	r6, [r4, #4]
 800a580:	60a6      	str	r6, [r4, #8]
 800a582:	2e00      	cmp	r6, #0
 800a584:	bfa2      	ittt	ge
 800a586:	6821      	ldrge	r1, [r4, #0]
 800a588:	f021 0104 	bicge.w	r1, r1, #4
 800a58c:	6021      	strge	r1, [r4, #0]
 800a58e:	b90d      	cbnz	r5, 800a594 <_printf_i+0x110>
 800a590:	2e00      	cmp	r6, #0
 800a592:	d04b      	beq.n	800a62c <_printf_i+0x1a8>
 800a594:	4616      	mov	r6, r2
 800a596:	fbb5 f1f3 	udiv	r1, r5, r3
 800a59a:	fb03 5711 	mls	r7, r3, r1, r5
 800a59e:	5dc7      	ldrb	r7, [r0, r7]
 800a5a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5a4:	462f      	mov	r7, r5
 800a5a6:	42bb      	cmp	r3, r7
 800a5a8:	460d      	mov	r5, r1
 800a5aa:	d9f4      	bls.n	800a596 <_printf_i+0x112>
 800a5ac:	2b08      	cmp	r3, #8
 800a5ae:	d10b      	bne.n	800a5c8 <_printf_i+0x144>
 800a5b0:	6823      	ldr	r3, [r4, #0]
 800a5b2:	07df      	lsls	r7, r3, #31
 800a5b4:	d508      	bpl.n	800a5c8 <_printf_i+0x144>
 800a5b6:	6923      	ldr	r3, [r4, #16]
 800a5b8:	6861      	ldr	r1, [r4, #4]
 800a5ba:	4299      	cmp	r1, r3
 800a5bc:	bfde      	ittt	le
 800a5be:	2330      	movle	r3, #48	@ 0x30
 800a5c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5c8:	1b92      	subs	r2, r2, r6
 800a5ca:	6122      	str	r2, [r4, #16]
 800a5cc:	f8cd a000 	str.w	sl, [sp]
 800a5d0:	464b      	mov	r3, r9
 800a5d2:	aa03      	add	r2, sp, #12
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	4640      	mov	r0, r8
 800a5d8:	f7ff fee6 	bl	800a3a8 <_printf_common>
 800a5dc:	3001      	adds	r0, #1
 800a5de:	d14a      	bne.n	800a676 <_printf_i+0x1f2>
 800a5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e4:	b004      	add	sp, #16
 800a5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	f043 0320 	orr.w	r3, r3, #32
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	4833      	ldr	r0, [pc, #204]	@ (800a6c0 <_printf_i+0x23c>)
 800a5f4:	2778      	movs	r7, #120	@ 0x78
 800a5f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5fa:	6823      	ldr	r3, [r4, #0]
 800a5fc:	6831      	ldr	r1, [r6, #0]
 800a5fe:	061f      	lsls	r7, r3, #24
 800a600:	f851 5b04 	ldr.w	r5, [r1], #4
 800a604:	d402      	bmi.n	800a60c <_printf_i+0x188>
 800a606:	065f      	lsls	r7, r3, #25
 800a608:	bf48      	it	mi
 800a60a:	b2ad      	uxthmi	r5, r5
 800a60c:	6031      	str	r1, [r6, #0]
 800a60e:	07d9      	lsls	r1, r3, #31
 800a610:	bf44      	itt	mi
 800a612:	f043 0320 	orrmi.w	r3, r3, #32
 800a616:	6023      	strmi	r3, [r4, #0]
 800a618:	b11d      	cbz	r5, 800a622 <_printf_i+0x19e>
 800a61a:	2310      	movs	r3, #16
 800a61c:	e7ac      	b.n	800a578 <_printf_i+0xf4>
 800a61e:	4827      	ldr	r0, [pc, #156]	@ (800a6bc <_printf_i+0x238>)
 800a620:	e7e9      	b.n	800a5f6 <_printf_i+0x172>
 800a622:	6823      	ldr	r3, [r4, #0]
 800a624:	f023 0320 	bic.w	r3, r3, #32
 800a628:	6023      	str	r3, [r4, #0]
 800a62a:	e7f6      	b.n	800a61a <_printf_i+0x196>
 800a62c:	4616      	mov	r6, r2
 800a62e:	e7bd      	b.n	800a5ac <_printf_i+0x128>
 800a630:	6833      	ldr	r3, [r6, #0]
 800a632:	6825      	ldr	r5, [r4, #0]
 800a634:	6961      	ldr	r1, [r4, #20]
 800a636:	1d18      	adds	r0, r3, #4
 800a638:	6030      	str	r0, [r6, #0]
 800a63a:	062e      	lsls	r6, r5, #24
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	d501      	bpl.n	800a644 <_printf_i+0x1c0>
 800a640:	6019      	str	r1, [r3, #0]
 800a642:	e002      	b.n	800a64a <_printf_i+0x1c6>
 800a644:	0668      	lsls	r0, r5, #25
 800a646:	d5fb      	bpl.n	800a640 <_printf_i+0x1bc>
 800a648:	8019      	strh	r1, [r3, #0]
 800a64a:	2300      	movs	r3, #0
 800a64c:	6123      	str	r3, [r4, #16]
 800a64e:	4616      	mov	r6, r2
 800a650:	e7bc      	b.n	800a5cc <_printf_i+0x148>
 800a652:	6833      	ldr	r3, [r6, #0]
 800a654:	1d1a      	adds	r2, r3, #4
 800a656:	6032      	str	r2, [r6, #0]
 800a658:	681e      	ldr	r6, [r3, #0]
 800a65a:	6862      	ldr	r2, [r4, #4]
 800a65c:	2100      	movs	r1, #0
 800a65e:	4630      	mov	r0, r6
 800a660:	f7f5 fdf6 	bl	8000250 <memchr>
 800a664:	b108      	cbz	r0, 800a66a <_printf_i+0x1e6>
 800a666:	1b80      	subs	r0, r0, r6
 800a668:	6060      	str	r0, [r4, #4]
 800a66a:	6863      	ldr	r3, [r4, #4]
 800a66c:	6123      	str	r3, [r4, #16]
 800a66e:	2300      	movs	r3, #0
 800a670:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a674:	e7aa      	b.n	800a5cc <_printf_i+0x148>
 800a676:	6923      	ldr	r3, [r4, #16]
 800a678:	4632      	mov	r2, r6
 800a67a:	4649      	mov	r1, r9
 800a67c:	4640      	mov	r0, r8
 800a67e:	47d0      	blx	sl
 800a680:	3001      	adds	r0, #1
 800a682:	d0ad      	beq.n	800a5e0 <_printf_i+0x15c>
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	079b      	lsls	r3, r3, #30
 800a688:	d413      	bmi.n	800a6b2 <_printf_i+0x22e>
 800a68a:	68e0      	ldr	r0, [r4, #12]
 800a68c:	9b03      	ldr	r3, [sp, #12]
 800a68e:	4298      	cmp	r0, r3
 800a690:	bfb8      	it	lt
 800a692:	4618      	movlt	r0, r3
 800a694:	e7a6      	b.n	800a5e4 <_printf_i+0x160>
 800a696:	2301      	movs	r3, #1
 800a698:	4632      	mov	r2, r6
 800a69a:	4649      	mov	r1, r9
 800a69c:	4640      	mov	r0, r8
 800a69e:	47d0      	blx	sl
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	d09d      	beq.n	800a5e0 <_printf_i+0x15c>
 800a6a4:	3501      	adds	r5, #1
 800a6a6:	68e3      	ldr	r3, [r4, #12]
 800a6a8:	9903      	ldr	r1, [sp, #12]
 800a6aa:	1a5b      	subs	r3, r3, r1
 800a6ac:	42ab      	cmp	r3, r5
 800a6ae:	dcf2      	bgt.n	800a696 <_printf_i+0x212>
 800a6b0:	e7eb      	b.n	800a68a <_printf_i+0x206>
 800a6b2:	2500      	movs	r5, #0
 800a6b4:	f104 0619 	add.w	r6, r4, #25
 800a6b8:	e7f5      	b.n	800a6a6 <_printf_i+0x222>
 800a6ba:	bf00      	nop
 800a6bc:	0800b2ab 	.word	0x0800b2ab
 800a6c0:	0800b2bc 	.word	0x0800b2bc

0800a6c4 <__sflush_r>:
 800a6c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6cc:	0716      	lsls	r6, r2, #28
 800a6ce:	4605      	mov	r5, r0
 800a6d0:	460c      	mov	r4, r1
 800a6d2:	d454      	bmi.n	800a77e <__sflush_r+0xba>
 800a6d4:	684b      	ldr	r3, [r1, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	dc02      	bgt.n	800a6e0 <__sflush_r+0x1c>
 800a6da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	dd48      	ble.n	800a772 <__sflush_r+0xae>
 800a6e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6e2:	2e00      	cmp	r6, #0
 800a6e4:	d045      	beq.n	800a772 <__sflush_r+0xae>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a6ec:	682f      	ldr	r7, [r5, #0]
 800a6ee:	6a21      	ldr	r1, [r4, #32]
 800a6f0:	602b      	str	r3, [r5, #0]
 800a6f2:	d030      	beq.n	800a756 <__sflush_r+0x92>
 800a6f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	0759      	lsls	r1, r3, #29
 800a6fa:	d505      	bpl.n	800a708 <__sflush_r+0x44>
 800a6fc:	6863      	ldr	r3, [r4, #4]
 800a6fe:	1ad2      	subs	r2, r2, r3
 800a700:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a702:	b10b      	cbz	r3, 800a708 <__sflush_r+0x44>
 800a704:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a706:	1ad2      	subs	r2, r2, r3
 800a708:	2300      	movs	r3, #0
 800a70a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a70c:	6a21      	ldr	r1, [r4, #32]
 800a70e:	4628      	mov	r0, r5
 800a710:	47b0      	blx	r6
 800a712:	1c43      	adds	r3, r0, #1
 800a714:	89a3      	ldrh	r3, [r4, #12]
 800a716:	d106      	bne.n	800a726 <__sflush_r+0x62>
 800a718:	6829      	ldr	r1, [r5, #0]
 800a71a:	291d      	cmp	r1, #29
 800a71c:	d82b      	bhi.n	800a776 <__sflush_r+0xb2>
 800a71e:	4a2a      	ldr	r2, [pc, #168]	@ (800a7c8 <__sflush_r+0x104>)
 800a720:	410a      	asrs	r2, r1
 800a722:	07d6      	lsls	r6, r2, #31
 800a724:	d427      	bmi.n	800a776 <__sflush_r+0xb2>
 800a726:	2200      	movs	r2, #0
 800a728:	6062      	str	r2, [r4, #4]
 800a72a:	04d9      	lsls	r1, r3, #19
 800a72c:	6922      	ldr	r2, [r4, #16]
 800a72e:	6022      	str	r2, [r4, #0]
 800a730:	d504      	bpl.n	800a73c <__sflush_r+0x78>
 800a732:	1c42      	adds	r2, r0, #1
 800a734:	d101      	bne.n	800a73a <__sflush_r+0x76>
 800a736:	682b      	ldr	r3, [r5, #0]
 800a738:	b903      	cbnz	r3, 800a73c <__sflush_r+0x78>
 800a73a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a73c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a73e:	602f      	str	r7, [r5, #0]
 800a740:	b1b9      	cbz	r1, 800a772 <__sflush_r+0xae>
 800a742:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a746:	4299      	cmp	r1, r3
 800a748:	d002      	beq.n	800a750 <__sflush_r+0x8c>
 800a74a:	4628      	mov	r0, r5
 800a74c:	f7ff fc8a 	bl	800a064 <_free_r>
 800a750:	2300      	movs	r3, #0
 800a752:	6363      	str	r3, [r4, #52]	@ 0x34
 800a754:	e00d      	b.n	800a772 <__sflush_r+0xae>
 800a756:	2301      	movs	r3, #1
 800a758:	4628      	mov	r0, r5
 800a75a:	47b0      	blx	r6
 800a75c:	4602      	mov	r2, r0
 800a75e:	1c50      	adds	r0, r2, #1
 800a760:	d1c9      	bne.n	800a6f6 <__sflush_r+0x32>
 800a762:	682b      	ldr	r3, [r5, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d0c6      	beq.n	800a6f6 <__sflush_r+0x32>
 800a768:	2b1d      	cmp	r3, #29
 800a76a:	d001      	beq.n	800a770 <__sflush_r+0xac>
 800a76c:	2b16      	cmp	r3, #22
 800a76e:	d11e      	bne.n	800a7ae <__sflush_r+0xea>
 800a770:	602f      	str	r7, [r5, #0]
 800a772:	2000      	movs	r0, #0
 800a774:	e022      	b.n	800a7bc <__sflush_r+0xf8>
 800a776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a77a:	b21b      	sxth	r3, r3
 800a77c:	e01b      	b.n	800a7b6 <__sflush_r+0xf2>
 800a77e:	690f      	ldr	r7, [r1, #16]
 800a780:	2f00      	cmp	r7, #0
 800a782:	d0f6      	beq.n	800a772 <__sflush_r+0xae>
 800a784:	0793      	lsls	r3, r2, #30
 800a786:	680e      	ldr	r6, [r1, #0]
 800a788:	bf08      	it	eq
 800a78a:	694b      	ldreq	r3, [r1, #20]
 800a78c:	600f      	str	r7, [r1, #0]
 800a78e:	bf18      	it	ne
 800a790:	2300      	movne	r3, #0
 800a792:	eba6 0807 	sub.w	r8, r6, r7
 800a796:	608b      	str	r3, [r1, #8]
 800a798:	f1b8 0f00 	cmp.w	r8, #0
 800a79c:	dde9      	ble.n	800a772 <__sflush_r+0xae>
 800a79e:	6a21      	ldr	r1, [r4, #32]
 800a7a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a7a2:	4643      	mov	r3, r8
 800a7a4:	463a      	mov	r2, r7
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	47b0      	blx	r6
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	dc08      	bgt.n	800a7c0 <__sflush_r+0xfc>
 800a7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7b6:	81a3      	strh	r3, [r4, #12]
 800a7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c0:	4407      	add	r7, r0
 800a7c2:	eba8 0800 	sub.w	r8, r8, r0
 800a7c6:	e7e7      	b.n	800a798 <__sflush_r+0xd4>
 800a7c8:	dfbffffe 	.word	0xdfbffffe

0800a7cc <_fflush_r>:
 800a7cc:	b538      	push	{r3, r4, r5, lr}
 800a7ce:	690b      	ldr	r3, [r1, #16]
 800a7d0:	4605      	mov	r5, r0
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	b913      	cbnz	r3, 800a7dc <_fflush_r+0x10>
 800a7d6:	2500      	movs	r5, #0
 800a7d8:	4628      	mov	r0, r5
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	b118      	cbz	r0, 800a7e6 <_fflush_r+0x1a>
 800a7de:	6a03      	ldr	r3, [r0, #32]
 800a7e0:	b90b      	cbnz	r3, 800a7e6 <_fflush_r+0x1a>
 800a7e2:	f7ff fa7d 	bl	8009ce0 <__sinit>
 800a7e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d0f3      	beq.n	800a7d6 <_fflush_r+0xa>
 800a7ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a7f0:	07d0      	lsls	r0, r2, #31
 800a7f2:	d404      	bmi.n	800a7fe <_fflush_r+0x32>
 800a7f4:	0599      	lsls	r1, r3, #22
 800a7f6:	d402      	bmi.n	800a7fe <_fflush_r+0x32>
 800a7f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7fa:	f7ff fc04 	bl	800a006 <__retarget_lock_acquire_recursive>
 800a7fe:	4628      	mov	r0, r5
 800a800:	4621      	mov	r1, r4
 800a802:	f7ff ff5f 	bl	800a6c4 <__sflush_r>
 800a806:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a808:	07da      	lsls	r2, r3, #31
 800a80a:	4605      	mov	r5, r0
 800a80c:	d4e4      	bmi.n	800a7d8 <_fflush_r+0xc>
 800a80e:	89a3      	ldrh	r3, [r4, #12]
 800a810:	059b      	lsls	r3, r3, #22
 800a812:	d4e1      	bmi.n	800a7d8 <_fflush_r+0xc>
 800a814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a816:	f7ff fbf7 	bl	800a008 <__retarget_lock_release_recursive>
 800a81a:	e7dd      	b.n	800a7d8 <_fflush_r+0xc>

0800a81c <fiprintf>:
 800a81c:	b40e      	push	{r1, r2, r3}
 800a81e:	b503      	push	{r0, r1, lr}
 800a820:	4601      	mov	r1, r0
 800a822:	ab03      	add	r3, sp, #12
 800a824:	4805      	ldr	r0, [pc, #20]	@ (800a83c <fiprintf+0x20>)
 800a826:	f853 2b04 	ldr.w	r2, [r3], #4
 800a82a:	6800      	ldr	r0, [r0, #0]
 800a82c:	9301      	str	r3, [sp, #4]
 800a82e:	f000 f87f 	bl	800a930 <_vfiprintf_r>
 800a832:	b002      	add	sp, #8
 800a834:	f85d eb04 	ldr.w	lr, [sp], #4
 800a838:	b003      	add	sp, #12
 800a83a:	4770      	bx	lr
 800a83c:	200000c0 	.word	0x200000c0

0800a840 <memmove>:
 800a840:	4288      	cmp	r0, r1
 800a842:	b510      	push	{r4, lr}
 800a844:	eb01 0402 	add.w	r4, r1, r2
 800a848:	d902      	bls.n	800a850 <memmove+0x10>
 800a84a:	4284      	cmp	r4, r0
 800a84c:	4623      	mov	r3, r4
 800a84e:	d807      	bhi.n	800a860 <memmove+0x20>
 800a850:	1e43      	subs	r3, r0, #1
 800a852:	42a1      	cmp	r1, r4
 800a854:	d008      	beq.n	800a868 <memmove+0x28>
 800a856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a85a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a85e:	e7f8      	b.n	800a852 <memmove+0x12>
 800a860:	4402      	add	r2, r0
 800a862:	4601      	mov	r1, r0
 800a864:	428a      	cmp	r2, r1
 800a866:	d100      	bne.n	800a86a <memmove+0x2a>
 800a868:	bd10      	pop	{r4, pc}
 800a86a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a86e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a872:	e7f7      	b.n	800a864 <memmove+0x24>

0800a874 <abort>:
 800a874:	b508      	push	{r3, lr}
 800a876:	2006      	movs	r0, #6
 800a878:	f000 fa2e 	bl	800acd8 <raise>
 800a87c:	2001      	movs	r0, #1
 800a87e:	f7f6 fb9f 	bl	8000fc0 <_exit>

0800a882 <_realloc_r>:
 800a882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a886:	4680      	mov	r8, r0
 800a888:	4615      	mov	r5, r2
 800a88a:	460c      	mov	r4, r1
 800a88c:	b921      	cbnz	r1, 800a898 <_realloc_r+0x16>
 800a88e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a892:	4611      	mov	r1, r2
 800a894:	f7ff b888 	b.w	80099a8 <_malloc_r>
 800a898:	b92a      	cbnz	r2, 800a8a6 <_realloc_r+0x24>
 800a89a:	f7ff fbe3 	bl	800a064 <_free_r>
 800a89e:	2400      	movs	r4, #0
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a6:	f000 fa33 	bl	800ad10 <_malloc_usable_size_r>
 800a8aa:	4285      	cmp	r5, r0
 800a8ac:	4606      	mov	r6, r0
 800a8ae:	d802      	bhi.n	800a8b6 <_realloc_r+0x34>
 800a8b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a8b4:	d8f4      	bhi.n	800a8a0 <_realloc_r+0x1e>
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	4640      	mov	r0, r8
 800a8ba:	f7ff f875 	bl	80099a8 <_malloc_r>
 800a8be:	4607      	mov	r7, r0
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d0ec      	beq.n	800a89e <_realloc_r+0x1c>
 800a8c4:	42b5      	cmp	r5, r6
 800a8c6:	462a      	mov	r2, r5
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	bf28      	it	cs
 800a8cc:	4632      	movcs	r2, r6
 800a8ce:	f7ff fb9c 	bl	800a00a <memcpy>
 800a8d2:	4621      	mov	r1, r4
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	f7ff fbc5 	bl	800a064 <_free_r>
 800a8da:	463c      	mov	r4, r7
 800a8dc:	e7e0      	b.n	800a8a0 <_realloc_r+0x1e>

0800a8de <__sfputc_r>:
 800a8de:	6893      	ldr	r3, [r2, #8]
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	b410      	push	{r4}
 800a8e6:	6093      	str	r3, [r2, #8]
 800a8e8:	da08      	bge.n	800a8fc <__sfputc_r+0x1e>
 800a8ea:	6994      	ldr	r4, [r2, #24]
 800a8ec:	42a3      	cmp	r3, r4
 800a8ee:	db01      	blt.n	800a8f4 <__sfputc_r+0x16>
 800a8f0:	290a      	cmp	r1, #10
 800a8f2:	d103      	bne.n	800a8fc <__sfputc_r+0x1e>
 800a8f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8f8:	f000 b932 	b.w	800ab60 <__swbuf_r>
 800a8fc:	6813      	ldr	r3, [r2, #0]
 800a8fe:	1c58      	adds	r0, r3, #1
 800a900:	6010      	str	r0, [r2, #0]
 800a902:	7019      	strb	r1, [r3, #0]
 800a904:	4608      	mov	r0, r1
 800a906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <__sfputs_r>:
 800a90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90e:	4606      	mov	r6, r0
 800a910:	460f      	mov	r7, r1
 800a912:	4614      	mov	r4, r2
 800a914:	18d5      	adds	r5, r2, r3
 800a916:	42ac      	cmp	r4, r5
 800a918:	d101      	bne.n	800a91e <__sfputs_r+0x12>
 800a91a:	2000      	movs	r0, #0
 800a91c:	e007      	b.n	800a92e <__sfputs_r+0x22>
 800a91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a922:	463a      	mov	r2, r7
 800a924:	4630      	mov	r0, r6
 800a926:	f7ff ffda 	bl	800a8de <__sfputc_r>
 800a92a:	1c43      	adds	r3, r0, #1
 800a92c:	d1f3      	bne.n	800a916 <__sfputs_r+0xa>
 800a92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a930 <_vfiprintf_r>:
 800a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	460d      	mov	r5, r1
 800a936:	b09d      	sub	sp, #116	@ 0x74
 800a938:	4614      	mov	r4, r2
 800a93a:	4698      	mov	r8, r3
 800a93c:	4606      	mov	r6, r0
 800a93e:	b118      	cbz	r0, 800a948 <_vfiprintf_r+0x18>
 800a940:	6a03      	ldr	r3, [r0, #32]
 800a942:	b90b      	cbnz	r3, 800a948 <_vfiprintf_r+0x18>
 800a944:	f7ff f9cc 	bl	8009ce0 <__sinit>
 800a948:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a94a:	07d9      	lsls	r1, r3, #31
 800a94c:	d405      	bmi.n	800a95a <_vfiprintf_r+0x2a>
 800a94e:	89ab      	ldrh	r3, [r5, #12]
 800a950:	059a      	lsls	r2, r3, #22
 800a952:	d402      	bmi.n	800a95a <_vfiprintf_r+0x2a>
 800a954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a956:	f7ff fb56 	bl	800a006 <__retarget_lock_acquire_recursive>
 800a95a:	89ab      	ldrh	r3, [r5, #12]
 800a95c:	071b      	lsls	r3, r3, #28
 800a95e:	d501      	bpl.n	800a964 <_vfiprintf_r+0x34>
 800a960:	692b      	ldr	r3, [r5, #16]
 800a962:	b99b      	cbnz	r3, 800a98c <_vfiprintf_r+0x5c>
 800a964:	4629      	mov	r1, r5
 800a966:	4630      	mov	r0, r6
 800a968:	f000 f938 	bl	800abdc <__swsetup_r>
 800a96c:	b170      	cbz	r0, 800a98c <_vfiprintf_r+0x5c>
 800a96e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a970:	07dc      	lsls	r4, r3, #31
 800a972:	d504      	bpl.n	800a97e <_vfiprintf_r+0x4e>
 800a974:	f04f 30ff 	mov.w	r0, #4294967295
 800a978:	b01d      	add	sp, #116	@ 0x74
 800a97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a97e:	89ab      	ldrh	r3, [r5, #12]
 800a980:	0598      	lsls	r0, r3, #22
 800a982:	d4f7      	bmi.n	800a974 <_vfiprintf_r+0x44>
 800a984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a986:	f7ff fb3f 	bl	800a008 <__retarget_lock_release_recursive>
 800a98a:	e7f3      	b.n	800a974 <_vfiprintf_r+0x44>
 800a98c:	2300      	movs	r3, #0
 800a98e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a990:	2320      	movs	r3, #32
 800a992:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a996:	f8cd 800c 	str.w	r8, [sp, #12]
 800a99a:	2330      	movs	r3, #48	@ 0x30
 800a99c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab4c <_vfiprintf_r+0x21c>
 800a9a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9a4:	f04f 0901 	mov.w	r9, #1
 800a9a8:	4623      	mov	r3, r4
 800a9aa:	469a      	mov	sl, r3
 800a9ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9b0:	b10a      	cbz	r2, 800a9b6 <_vfiprintf_r+0x86>
 800a9b2:	2a25      	cmp	r2, #37	@ 0x25
 800a9b4:	d1f9      	bne.n	800a9aa <_vfiprintf_r+0x7a>
 800a9b6:	ebba 0b04 	subs.w	fp, sl, r4
 800a9ba:	d00b      	beq.n	800a9d4 <_vfiprintf_r+0xa4>
 800a9bc:	465b      	mov	r3, fp
 800a9be:	4622      	mov	r2, r4
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f7ff ffa2 	bl	800a90c <__sfputs_r>
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	f000 80a7 	beq.w	800ab1c <_vfiprintf_r+0x1ec>
 800a9ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9d0:	445a      	add	r2, fp
 800a9d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 809f 	beq.w	800ab1c <_vfiprintf_r+0x1ec>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9e8:	f10a 0a01 	add.w	sl, sl, #1
 800a9ec:	9304      	str	r3, [sp, #16]
 800a9ee:	9307      	str	r3, [sp, #28]
 800a9f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9f6:	4654      	mov	r4, sl
 800a9f8:	2205      	movs	r2, #5
 800a9fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9fe:	4853      	ldr	r0, [pc, #332]	@ (800ab4c <_vfiprintf_r+0x21c>)
 800aa00:	f7f5 fc26 	bl	8000250 <memchr>
 800aa04:	9a04      	ldr	r2, [sp, #16]
 800aa06:	b9d8      	cbnz	r0, 800aa40 <_vfiprintf_r+0x110>
 800aa08:	06d1      	lsls	r1, r2, #27
 800aa0a:	bf44      	itt	mi
 800aa0c:	2320      	movmi	r3, #32
 800aa0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa12:	0713      	lsls	r3, r2, #28
 800aa14:	bf44      	itt	mi
 800aa16:	232b      	movmi	r3, #43	@ 0x2b
 800aa18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa1c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa20:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa22:	d015      	beq.n	800aa50 <_vfiprintf_r+0x120>
 800aa24:	9a07      	ldr	r2, [sp, #28]
 800aa26:	4654      	mov	r4, sl
 800aa28:	2000      	movs	r0, #0
 800aa2a:	f04f 0c0a 	mov.w	ip, #10
 800aa2e:	4621      	mov	r1, r4
 800aa30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa34:	3b30      	subs	r3, #48	@ 0x30
 800aa36:	2b09      	cmp	r3, #9
 800aa38:	d94b      	bls.n	800aad2 <_vfiprintf_r+0x1a2>
 800aa3a:	b1b0      	cbz	r0, 800aa6a <_vfiprintf_r+0x13a>
 800aa3c:	9207      	str	r2, [sp, #28]
 800aa3e:	e014      	b.n	800aa6a <_vfiprintf_r+0x13a>
 800aa40:	eba0 0308 	sub.w	r3, r0, r8
 800aa44:	fa09 f303 	lsl.w	r3, r9, r3
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	9304      	str	r3, [sp, #16]
 800aa4c:	46a2      	mov	sl, r4
 800aa4e:	e7d2      	b.n	800a9f6 <_vfiprintf_r+0xc6>
 800aa50:	9b03      	ldr	r3, [sp, #12]
 800aa52:	1d19      	adds	r1, r3, #4
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	9103      	str	r1, [sp, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	bfbb      	ittet	lt
 800aa5c:	425b      	neglt	r3, r3
 800aa5e:	f042 0202 	orrlt.w	r2, r2, #2
 800aa62:	9307      	strge	r3, [sp, #28]
 800aa64:	9307      	strlt	r3, [sp, #28]
 800aa66:	bfb8      	it	lt
 800aa68:	9204      	strlt	r2, [sp, #16]
 800aa6a:	7823      	ldrb	r3, [r4, #0]
 800aa6c:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa6e:	d10a      	bne.n	800aa86 <_vfiprintf_r+0x156>
 800aa70:	7863      	ldrb	r3, [r4, #1]
 800aa72:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa74:	d132      	bne.n	800aadc <_vfiprintf_r+0x1ac>
 800aa76:	9b03      	ldr	r3, [sp, #12]
 800aa78:	1d1a      	adds	r2, r3, #4
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	9203      	str	r2, [sp, #12]
 800aa7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa82:	3402      	adds	r4, #2
 800aa84:	9305      	str	r3, [sp, #20]
 800aa86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ab5c <_vfiprintf_r+0x22c>
 800aa8a:	7821      	ldrb	r1, [r4, #0]
 800aa8c:	2203      	movs	r2, #3
 800aa8e:	4650      	mov	r0, sl
 800aa90:	f7f5 fbde 	bl	8000250 <memchr>
 800aa94:	b138      	cbz	r0, 800aaa6 <_vfiprintf_r+0x176>
 800aa96:	9b04      	ldr	r3, [sp, #16]
 800aa98:	eba0 000a 	sub.w	r0, r0, sl
 800aa9c:	2240      	movs	r2, #64	@ 0x40
 800aa9e:	4082      	lsls	r2, r0
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	3401      	adds	r4, #1
 800aaa4:	9304      	str	r3, [sp, #16]
 800aaa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaaa:	4829      	ldr	r0, [pc, #164]	@ (800ab50 <_vfiprintf_r+0x220>)
 800aaac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aab0:	2206      	movs	r2, #6
 800aab2:	f7f5 fbcd 	bl	8000250 <memchr>
 800aab6:	2800      	cmp	r0, #0
 800aab8:	d03f      	beq.n	800ab3a <_vfiprintf_r+0x20a>
 800aaba:	4b26      	ldr	r3, [pc, #152]	@ (800ab54 <_vfiprintf_r+0x224>)
 800aabc:	bb1b      	cbnz	r3, 800ab06 <_vfiprintf_r+0x1d6>
 800aabe:	9b03      	ldr	r3, [sp, #12]
 800aac0:	3307      	adds	r3, #7
 800aac2:	f023 0307 	bic.w	r3, r3, #7
 800aac6:	3308      	adds	r3, #8
 800aac8:	9303      	str	r3, [sp, #12]
 800aaca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aacc:	443b      	add	r3, r7
 800aace:	9309      	str	r3, [sp, #36]	@ 0x24
 800aad0:	e76a      	b.n	800a9a8 <_vfiprintf_r+0x78>
 800aad2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aad6:	460c      	mov	r4, r1
 800aad8:	2001      	movs	r0, #1
 800aada:	e7a8      	b.n	800aa2e <_vfiprintf_r+0xfe>
 800aadc:	2300      	movs	r3, #0
 800aade:	3401      	adds	r4, #1
 800aae0:	9305      	str	r3, [sp, #20]
 800aae2:	4619      	mov	r1, r3
 800aae4:	f04f 0c0a 	mov.w	ip, #10
 800aae8:	4620      	mov	r0, r4
 800aaea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaee:	3a30      	subs	r2, #48	@ 0x30
 800aaf0:	2a09      	cmp	r2, #9
 800aaf2:	d903      	bls.n	800aafc <_vfiprintf_r+0x1cc>
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d0c6      	beq.n	800aa86 <_vfiprintf_r+0x156>
 800aaf8:	9105      	str	r1, [sp, #20]
 800aafa:	e7c4      	b.n	800aa86 <_vfiprintf_r+0x156>
 800aafc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab00:	4604      	mov	r4, r0
 800ab02:	2301      	movs	r3, #1
 800ab04:	e7f0      	b.n	800aae8 <_vfiprintf_r+0x1b8>
 800ab06:	ab03      	add	r3, sp, #12
 800ab08:	9300      	str	r3, [sp, #0]
 800ab0a:	462a      	mov	r2, r5
 800ab0c:	4b12      	ldr	r3, [pc, #72]	@ (800ab58 <_vfiprintf_r+0x228>)
 800ab0e:	a904      	add	r1, sp, #16
 800ab10:	4630      	mov	r0, r6
 800ab12:	f3af 8000 	nop.w
 800ab16:	4607      	mov	r7, r0
 800ab18:	1c78      	adds	r0, r7, #1
 800ab1a:	d1d6      	bne.n	800aaca <_vfiprintf_r+0x19a>
 800ab1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab1e:	07d9      	lsls	r1, r3, #31
 800ab20:	d405      	bmi.n	800ab2e <_vfiprintf_r+0x1fe>
 800ab22:	89ab      	ldrh	r3, [r5, #12]
 800ab24:	059a      	lsls	r2, r3, #22
 800ab26:	d402      	bmi.n	800ab2e <_vfiprintf_r+0x1fe>
 800ab28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab2a:	f7ff fa6d 	bl	800a008 <__retarget_lock_release_recursive>
 800ab2e:	89ab      	ldrh	r3, [r5, #12]
 800ab30:	065b      	lsls	r3, r3, #25
 800ab32:	f53f af1f 	bmi.w	800a974 <_vfiprintf_r+0x44>
 800ab36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab38:	e71e      	b.n	800a978 <_vfiprintf_r+0x48>
 800ab3a:	ab03      	add	r3, sp, #12
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	462a      	mov	r2, r5
 800ab40:	4b05      	ldr	r3, [pc, #20]	@ (800ab58 <_vfiprintf_r+0x228>)
 800ab42:	a904      	add	r1, sp, #16
 800ab44:	4630      	mov	r0, r6
 800ab46:	f7ff fc9d 	bl	800a484 <_printf_i>
 800ab4a:	e7e4      	b.n	800ab16 <_vfiprintf_r+0x1e6>
 800ab4c:	0800b29a 	.word	0x0800b29a
 800ab50:	0800b2a4 	.word	0x0800b2a4
 800ab54:	00000000 	.word	0x00000000
 800ab58:	0800a90d 	.word	0x0800a90d
 800ab5c:	0800b2a0 	.word	0x0800b2a0

0800ab60 <__swbuf_r>:
 800ab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab62:	460e      	mov	r6, r1
 800ab64:	4614      	mov	r4, r2
 800ab66:	4605      	mov	r5, r0
 800ab68:	b118      	cbz	r0, 800ab72 <__swbuf_r+0x12>
 800ab6a:	6a03      	ldr	r3, [r0, #32]
 800ab6c:	b90b      	cbnz	r3, 800ab72 <__swbuf_r+0x12>
 800ab6e:	f7ff f8b7 	bl	8009ce0 <__sinit>
 800ab72:	69a3      	ldr	r3, [r4, #24]
 800ab74:	60a3      	str	r3, [r4, #8]
 800ab76:	89a3      	ldrh	r3, [r4, #12]
 800ab78:	071a      	lsls	r2, r3, #28
 800ab7a:	d501      	bpl.n	800ab80 <__swbuf_r+0x20>
 800ab7c:	6923      	ldr	r3, [r4, #16]
 800ab7e:	b943      	cbnz	r3, 800ab92 <__swbuf_r+0x32>
 800ab80:	4621      	mov	r1, r4
 800ab82:	4628      	mov	r0, r5
 800ab84:	f000 f82a 	bl	800abdc <__swsetup_r>
 800ab88:	b118      	cbz	r0, 800ab92 <__swbuf_r+0x32>
 800ab8a:	f04f 37ff 	mov.w	r7, #4294967295
 800ab8e:	4638      	mov	r0, r7
 800ab90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab92:	6823      	ldr	r3, [r4, #0]
 800ab94:	6922      	ldr	r2, [r4, #16]
 800ab96:	1a98      	subs	r0, r3, r2
 800ab98:	6963      	ldr	r3, [r4, #20]
 800ab9a:	b2f6      	uxtb	r6, r6
 800ab9c:	4283      	cmp	r3, r0
 800ab9e:	4637      	mov	r7, r6
 800aba0:	dc05      	bgt.n	800abae <__swbuf_r+0x4e>
 800aba2:	4621      	mov	r1, r4
 800aba4:	4628      	mov	r0, r5
 800aba6:	f7ff fe11 	bl	800a7cc <_fflush_r>
 800abaa:	2800      	cmp	r0, #0
 800abac:	d1ed      	bne.n	800ab8a <__swbuf_r+0x2a>
 800abae:	68a3      	ldr	r3, [r4, #8]
 800abb0:	3b01      	subs	r3, #1
 800abb2:	60a3      	str	r3, [r4, #8]
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	1c5a      	adds	r2, r3, #1
 800abb8:	6022      	str	r2, [r4, #0]
 800abba:	701e      	strb	r6, [r3, #0]
 800abbc:	6962      	ldr	r2, [r4, #20]
 800abbe:	1c43      	adds	r3, r0, #1
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d004      	beq.n	800abce <__swbuf_r+0x6e>
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	07db      	lsls	r3, r3, #31
 800abc8:	d5e1      	bpl.n	800ab8e <__swbuf_r+0x2e>
 800abca:	2e0a      	cmp	r6, #10
 800abcc:	d1df      	bne.n	800ab8e <__swbuf_r+0x2e>
 800abce:	4621      	mov	r1, r4
 800abd0:	4628      	mov	r0, r5
 800abd2:	f7ff fdfb 	bl	800a7cc <_fflush_r>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d0d9      	beq.n	800ab8e <__swbuf_r+0x2e>
 800abda:	e7d6      	b.n	800ab8a <__swbuf_r+0x2a>

0800abdc <__swsetup_r>:
 800abdc:	b538      	push	{r3, r4, r5, lr}
 800abde:	4b29      	ldr	r3, [pc, #164]	@ (800ac84 <__swsetup_r+0xa8>)
 800abe0:	4605      	mov	r5, r0
 800abe2:	6818      	ldr	r0, [r3, #0]
 800abe4:	460c      	mov	r4, r1
 800abe6:	b118      	cbz	r0, 800abf0 <__swsetup_r+0x14>
 800abe8:	6a03      	ldr	r3, [r0, #32]
 800abea:	b90b      	cbnz	r3, 800abf0 <__swsetup_r+0x14>
 800abec:	f7ff f878 	bl	8009ce0 <__sinit>
 800abf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abf4:	0719      	lsls	r1, r3, #28
 800abf6:	d422      	bmi.n	800ac3e <__swsetup_r+0x62>
 800abf8:	06da      	lsls	r2, r3, #27
 800abfa:	d407      	bmi.n	800ac0c <__swsetup_r+0x30>
 800abfc:	2209      	movs	r2, #9
 800abfe:	602a      	str	r2, [r5, #0]
 800ac00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac04:	81a3      	strh	r3, [r4, #12]
 800ac06:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0a:	e033      	b.n	800ac74 <__swsetup_r+0x98>
 800ac0c:	0758      	lsls	r0, r3, #29
 800ac0e:	d512      	bpl.n	800ac36 <__swsetup_r+0x5a>
 800ac10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac12:	b141      	cbz	r1, 800ac26 <__swsetup_r+0x4a>
 800ac14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac18:	4299      	cmp	r1, r3
 800ac1a:	d002      	beq.n	800ac22 <__swsetup_r+0x46>
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	f7ff fa21 	bl	800a064 <_free_r>
 800ac22:	2300      	movs	r3, #0
 800ac24:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac26:	89a3      	ldrh	r3, [r4, #12]
 800ac28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac2c:	81a3      	strh	r3, [r4, #12]
 800ac2e:	2300      	movs	r3, #0
 800ac30:	6063      	str	r3, [r4, #4]
 800ac32:	6923      	ldr	r3, [r4, #16]
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	89a3      	ldrh	r3, [r4, #12]
 800ac38:	f043 0308 	orr.w	r3, r3, #8
 800ac3c:	81a3      	strh	r3, [r4, #12]
 800ac3e:	6923      	ldr	r3, [r4, #16]
 800ac40:	b94b      	cbnz	r3, 800ac56 <__swsetup_r+0x7a>
 800ac42:	89a3      	ldrh	r3, [r4, #12]
 800ac44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac4c:	d003      	beq.n	800ac56 <__swsetup_r+0x7a>
 800ac4e:	4621      	mov	r1, r4
 800ac50:	4628      	mov	r0, r5
 800ac52:	f000 f88b 	bl	800ad6c <__smakebuf_r>
 800ac56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac5a:	f013 0201 	ands.w	r2, r3, #1
 800ac5e:	d00a      	beq.n	800ac76 <__swsetup_r+0x9a>
 800ac60:	2200      	movs	r2, #0
 800ac62:	60a2      	str	r2, [r4, #8]
 800ac64:	6962      	ldr	r2, [r4, #20]
 800ac66:	4252      	negs	r2, r2
 800ac68:	61a2      	str	r2, [r4, #24]
 800ac6a:	6922      	ldr	r2, [r4, #16]
 800ac6c:	b942      	cbnz	r2, 800ac80 <__swsetup_r+0xa4>
 800ac6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac72:	d1c5      	bne.n	800ac00 <__swsetup_r+0x24>
 800ac74:	bd38      	pop	{r3, r4, r5, pc}
 800ac76:	0799      	lsls	r1, r3, #30
 800ac78:	bf58      	it	pl
 800ac7a:	6962      	ldrpl	r2, [r4, #20]
 800ac7c:	60a2      	str	r2, [r4, #8]
 800ac7e:	e7f4      	b.n	800ac6a <__swsetup_r+0x8e>
 800ac80:	2000      	movs	r0, #0
 800ac82:	e7f7      	b.n	800ac74 <__swsetup_r+0x98>
 800ac84:	200000c0 	.word	0x200000c0

0800ac88 <_raise_r>:
 800ac88:	291f      	cmp	r1, #31
 800ac8a:	b538      	push	{r3, r4, r5, lr}
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	460c      	mov	r4, r1
 800ac90:	d904      	bls.n	800ac9c <_raise_r+0x14>
 800ac92:	2316      	movs	r3, #22
 800ac94:	6003      	str	r3, [r0, #0]
 800ac96:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9a:	bd38      	pop	{r3, r4, r5, pc}
 800ac9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ac9e:	b112      	cbz	r2, 800aca6 <_raise_r+0x1e>
 800aca0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aca4:	b94b      	cbnz	r3, 800acba <_raise_r+0x32>
 800aca6:	4628      	mov	r0, r5
 800aca8:	f000 f830 	bl	800ad0c <_getpid_r>
 800acac:	4622      	mov	r2, r4
 800acae:	4601      	mov	r1, r0
 800acb0:	4628      	mov	r0, r5
 800acb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acb6:	f000 b817 	b.w	800ace8 <_kill_r>
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d00a      	beq.n	800acd4 <_raise_r+0x4c>
 800acbe:	1c59      	adds	r1, r3, #1
 800acc0:	d103      	bne.n	800acca <_raise_r+0x42>
 800acc2:	2316      	movs	r3, #22
 800acc4:	6003      	str	r3, [r0, #0]
 800acc6:	2001      	movs	r0, #1
 800acc8:	e7e7      	b.n	800ac9a <_raise_r+0x12>
 800acca:	2100      	movs	r1, #0
 800accc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800acd0:	4620      	mov	r0, r4
 800acd2:	4798      	blx	r3
 800acd4:	2000      	movs	r0, #0
 800acd6:	e7e0      	b.n	800ac9a <_raise_r+0x12>

0800acd8 <raise>:
 800acd8:	4b02      	ldr	r3, [pc, #8]	@ (800ace4 <raise+0xc>)
 800acda:	4601      	mov	r1, r0
 800acdc:	6818      	ldr	r0, [r3, #0]
 800acde:	f7ff bfd3 	b.w	800ac88 <_raise_r>
 800ace2:	bf00      	nop
 800ace4:	200000c0 	.word	0x200000c0

0800ace8 <_kill_r>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	4d07      	ldr	r5, [pc, #28]	@ (800ad08 <_kill_r+0x20>)
 800acec:	2300      	movs	r3, #0
 800acee:	4604      	mov	r4, r0
 800acf0:	4608      	mov	r0, r1
 800acf2:	4611      	mov	r1, r2
 800acf4:	602b      	str	r3, [r5, #0]
 800acf6:	f7f6 f953 	bl	8000fa0 <_kill>
 800acfa:	1c43      	adds	r3, r0, #1
 800acfc:	d102      	bne.n	800ad04 <_kill_r+0x1c>
 800acfe:	682b      	ldr	r3, [r5, #0]
 800ad00:	b103      	cbz	r3, 800ad04 <_kill_r+0x1c>
 800ad02:	6023      	str	r3, [r4, #0]
 800ad04:	bd38      	pop	{r3, r4, r5, pc}
 800ad06:	bf00      	nop
 800ad08:	2000065c 	.word	0x2000065c

0800ad0c <_getpid_r>:
 800ad0c:	f7f6 b940 	b.w	8000f90 <_getpid>

0800ad10 <_malloc_usable_size_r>:
 800ad10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad14:	1f18      	subs	r0, r3, #4
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	bfbc      	itt	lt
 800ad1a:	580b      	ldrlt	r3, [r1, r0]
 800ad1c:	18c0      	addlt	r0, r0, r3
 800ad1e:	4770      	bx	lr

0800ad20 <__swhatbuf_r>:
 800ad20:	b570      	push	{r4, r5, r6, lr}
 800ad22:	460c      	mov	r4, r1
 800ad24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad28:	2900      	cmp	r1, #0
 800ad2a:	b096      	sub	sp, #88	@ 0x58
 800ad2c:	4615      	mov	r5, r2
 800ad2e:	461e      	mov	r6, r3
 800ad30:	da0d      	bge.n	800ad4e <__swhatbuf_r+0x2e>
 800ad32:	89a3      	ldrh	r3, [r4, #12]
 800ad34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad38:	f04f 0100 	mov.w	r1, #0
 800ad3c:	bf14      	ite	ne
 800ad3e:	2340      	movne	r3, #64	@ 0x40
 800ad40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad44:	2000      	movs	r0, #0
 800ad46:	6031      	str	r1, [r6, #0]
 800ad48:	602b      	str	r3, [r5, #0]
 800ad4a:	b016      	add	sp, #88	@ 0x58
 800ad4c:	bd70      	pop	{r4, r5, r6, pc}
 800ad4e:	466a      	mov	r2, sp
 800ad50:	f000 f848 	bl	800ade4 <_fstat_r>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	dbec      	blt.n	800ad32 <__swhatbuf_r+0x12>
 800ad58:	9901      	ldr	r1, [sp, #4]
 800ad5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad62:	4259      	negs	r1, r3
 800ad64:	4159      	adcs	r1, r3
 800ad66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad6a:	e7eb      	b.n	800ad44 <__swhatbuf_r+0x24>

0800ad6c <__smakebuf_r>:
 800ad6c:	898b      	ldrh	r3, [r1, #12]
 800ad6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad70:	079d      	lsls	r5, r3, #30
 800ad72:	4606      	mov	r6, r0
 800ad74:	460c      	mov	r4, r1
 800ad76:	d507      	bpl.n	800ad88 <__smakebuf_r+0x1c>
 800ad78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	6123      	str	r3, [r4, #16]
 800ad80:	2301      	movs	r3, #1
 800ad82:	6163      	str	r3, [r4, #20]
 800ad84:	b003      	add	sp, #12
 800ad86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad88:	ab01      	add	r3, sp, #4
 800ad8a:	466a      	mov	r2, sp
 800ad8c:	f7ff ffc8 	bl	800ad20 <__swhatbuf_r>
 800ad90:	9f00      	ldr	r7, [sp, #0]
 800ad92:	4605      	mov	r5, r0
 800ad94:	4639      	mov	r1, r7
 800ad96:	4630      	mov	r0, r6
 800ad98:	f7fe fe06 	bl	80099a8 <_malloc_r>
 800ad9c:	b948      	cbnz	r0, 800adb2 <__smakebuf_r+0x46>
 800ad9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ada2:	059a      	lsls	r2, r3, #22
 800ada4:	d4ee      	bmi.n	800ad84 <__smakebuf_r+0x18>
 800ada6:	f023 0303 	bic.w	r3, r3, #3
 800adaa:	f043 0302 	orr.w	r3, r3, #2
 800adae:	81a3      	strh	r3, [r4, #12]
 800adb0:	e7e2      	b.n	800ad78 <__smakebuf_r+0xc>
 800adb2:	89a3      	ldrh	r3, [r4, #12]
 800adb4:	6020      	str	r0, [r4, #0]
 800adb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adba:	81a3      	strh	r3, [r4, #12]
 800adbc:	9b01      	ldr	r3, [sp, #4]
 800adbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800adc2:	b15b      	cbz	r3, 800addc <__smakebuf_r+0x70>
 800adc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adc8:	4630      	mov	r0, r6
 800adca:	f000 f81d 	bl	800ae08 <_isatty_r>
 800adce:	b128      	cbz	r0, 800addc <__smakebuf_r+0x70>
 800add0:	89a3      	ldrh	r3, [r4, #12]
 800add2:	f023 0303 	bic.w	r3, r3, #3
 800add6:	f043 0301 	orr.w	r3, r3, #1
 800adda:	81a3      	strh	r3, [r4, #12]
 800addc:	89a3      	ldrh	r3, [r4, #12]
 800adde:	431d      	orrs	r5, r3
 800ade0:	81a5      	strh	r5, [r4, #12]
 800ade2:	e7cf      	b.n	800ad84 <__smakebuf_r+0x18>

0800ade4 <_fstat_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	4d07      	ldr	r5, [pc, #28]	@ (800ae04 <_fstat_r+0x20>)
 800ade8:	2300      	movs	r3, #0
 800adea:	4604      	mov	r4, r0
 800adec:	4608      	mov	r0, r1
 800adee:	4611      	mov	r1, r2
 800adf0:	602b      	str	r3, [r5, #0]
 800adf2:	f7f6 f935 	bl	8001060 <_fstat>
 800adf6:	1c43      	adds	r3, r0, #1
 800adf8:	d102      	bne.n	800ae00 <_fstat_r+0x1c>
 800adfa:	682b      	ldr	r3, [r5, #0]
 800adfc:	b103      	cbz	r3, 800ae00 <_fstat_r+0x1c>
 800adfe:	6023      	str	r3, [r4, #0]
 800ae00:	bd38      	pop	{r3, r4, r5, pc}
 800ae02:	bf00      	nop
 800ae04:	2000065c 	.word	0x2000065c

0800ae08 <_isatty_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	4d06      	ldr	r5, [pc, #24]	@ (800ae24 <_isatty_r+0x1c>)
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	4604      	mov	r4, r0
 800ae10:	4608      	mov	r0, r1
 800ae12:	602b      	str	r3, [r5, #0]
 800ae14:	f7f6 f934 	bl	8001080 <_isatty>
 800ae18:	1c43      	adds	r3, r0, #1
 800ae1a:	d102      	bne.n	800ae22 <_isatty_r+0x1a>
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	b103      	cbz	r3, 800ae22 <_isatty_r+0x1a>
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	bd38      	pop	{r3, r4, r5, pc}
 800ae24:	2000065c 	.word	0x2000065c

0800ae28 <_init>:
 800ae28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2a:	bf00      	nop
 800ae2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae2e:	bc08      	pop	{r3}
 800ae30:	469e      	mov	lr, r3
 800ae32:	4770      	bx	lr

0800ae34 <_fini>:
 800ae34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae36:	bf00      	nop
 800ae38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae3a:	bc08      	pop	{r3}
 800ae3c:	469e      	mov	lr, r3
 800ae3e:	4770      	bx	lr
