
TP_ACTIONNEUR_FRICOT_CHAPART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b414  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800b5f4  0800b5f4  0000c5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb98  0800bb98  0000d110  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb98  0800bb98  0000cb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bba0  0800bba0  0000d110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bba0  0800bba0  0000cba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bba4  0800bba4  0000cba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800bba8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  20000110  0800bcb8  0000d110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000096c  0800bcb8  0000d96c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001edbc  00000000  00000000  0000d140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000400e  00000000  00000000  0002befc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  0002ff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e3  00000000  00000000  00031648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b350  00000000  00000000  0003282b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ca5f  00000000  00000000  0005db7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115e9a  00000000  00000000  0007a5da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00190474  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cf4  00000000  00000000  001904b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  001971ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000110 	.word	0x20000110
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b5dc 	.word	0x0800b5dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000114 	.word	0x20000114
 800021c:	0800b5dc 	.word	0x0800b5dc

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f009 fff8 	bl	800a5ee <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b41      	ldr	r3, [pc, #260]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4b3f      	ldr	r3, [pc, #252]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b3d      	ldr	r3, [pc, #244]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b3b      	ldr	r3, [pc, #236]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b3a      	ldr	r3, [pc, #232]	@ (8000704 <MX_ADC1_Init+0x124>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000620:	4b38      	ldr	r3, [pc, #224]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000622:	2201      	movs	r2, #1
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b35      	ldr	r3, [pc, #212]	@ (8000704 <MX_ADC1_Init+0x124>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000632:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000634:	2201      	movs	r2, #1
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000638:	4b32      	ldr	r3, [pc, #200]	@ (8000704 <MX_ADC1_Init+0x124>)
 800063a:	2203      	movs	r2, #3
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b31      	ldr	r3, [pc, #196]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000646:	4b2f      	ldr	r3, [pc, #188]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000648:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800064c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800064e:	4b2d      	ldr	r3, [pc, #180]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000650:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000654:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000656:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000658:	2201      	movs	r2, #1
 800065a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065e:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000660:	2200      	movs	r2, #0
 8000662:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	4825      	ldr	r0, [pc, #148]	@ (8000704 <MX_ADC1_Init+0x124>)
 800066e:	f002 f959 	bl	8002924 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000678:	f000 fbbc 	bl	8000df4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000684:	4619      	mov	r1, r3
 8000686:	481f      	ldr	r0, [pc, #124]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000688:	f003 fd0a 	bl	80040a0 <HAL_ADCEx_MultiModeConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000692:	f000 fbaf 	bl	8000df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000696:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <MX_ADC1_Init+0x128>)
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069a:	2306      	movs	r3, #6
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800069e:	2307      	movs	r3, #7
 80006a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a2:	237f      	movs	r3, #127	@ 0x7f
 80006a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a6:	2304      	movs	r3, #4
 80006a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	4814      	ldr	r0, [pc, #80]	@ (8000704 <MX_ADC1_Init+0x124>)
 80006b4:	f002 fe44 	bl	8003340 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006be:	f000 fb99 	bl	8000df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_ADC1_Init+0x12c>)
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c6:	230c      	movs	r3, #12
 80006c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	480d      	ldr	r0, [pc, #52]	@ (8000704 <MX_ADC1_Init+0x124>)
 80006d0:	f002 fe36 	bl	8003340 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80006da:	f000 fb8b 	bl	8000df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_ADC1_Init+0x130>)
 80006e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e2:	2312      	movs	r3, #18
 80006e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	@ (8000704 <MX_ADC1_Init+0x124>)
 80006ec:	f002 fe28 	bl	8003340 <HAL_ADC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80006f6:	f000 fb7d 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	3730      	adds	r7, #48	@ 0x30
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000012c 	.word	0x2000012c
 8000708:	08600004 	.word	0x08600004
 800070c:	32601000 	.word	0x32601000
 8000710:	21800100 	.word	0x21800100

08000714 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071a:	463b      	mov	r3, r7
 800071c:	2220      	movs	r2, #32
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f009 ff64 	bl	800a5ee <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000726:	4b2c      	ldr	r3, [pc, #176]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 8000728:	4a2c      	ldr	r2, [pc, #176]	@ (80007dc <MX_ADC2_Init+0xc8>)
 800072a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800072c:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 800072e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000732:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000734:	4b28      	ldr	r3, [pc, #160]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073a:	4b27      	ldr	r3, [pc, #156]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000740:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000746:	4b24      	ldr	r3, [pc, #144]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074c:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 800074e:	2204      	movs	r2, #4
 8000750:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000752:	4b21      	ldr	r3, [pc, #132]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 8000754:	2200      	movs	r2, #0
 8000756:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000758:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 800075a:	2201      	movs	r2, #1
 800075c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800075e:	4b1e      	ldr	r3, [pc, #120]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 8000760:	2201      	movs	r2, #1
 8000762:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000764:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800076c:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 800076e:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000772:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 8000776:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800077a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800077c:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 800077e:	2201      	movs	r2, #1
 8000780:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 8000786:	2200      	movs	r2, #0
 8000788:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800078a:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000792:	4811      	ldr	r0, [pc, #68]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 8000794:	f002 f8c6 	bl	8002924 <HAL_ADC_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800079e:	f000 fb29 	bl	8000df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_ADC2_Init+0xcc>)
 80007a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a6:	2306      	movs	r3, #6
 80007a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80007aa:	2307      	movs	r3, #7
 80007ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ae:	237f      	movs	r3, #127	@ 0x7f
 80007b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007b2:	2304      	movs	r3, #4
 80007b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	4806      	ldr	r0, [pc, #24]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 80007c0:	f002 fdbe 	bl	8003340 <HAL_ADC_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80007ca:	f000 fb13 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000198 	.word	0x20000198
 80007dc:	50000100 	.word	0x50000100
 80007e0:	04300002 	.word	0x04300002

080007e4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b0a4      	sub	sp, #144	@ 0x90
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000800:	2254      	movs	r2, #84	@ 0x54
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f009 fef2 	bl	800a5ee <memset>
  if(adcHandle->Instance==ADC1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000812:	f040 80a8 	bne.w	8000966 <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800081a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800081c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000820:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000822:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000826:	4618      	mov	r0, r3
 8000828:	f005 f926 	bl	8005a78 <HAL_RCCEx_PeriphCLKConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000832:	f000 fadf 	bl	8000df4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000836:	4b97      	ldr	r3, [pc, #604]	@ (8000a94 <HAL_ADC_MspInit+0x2b0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	4a95      	ldr	r2, [pc, #596]	@ (8000a94 <HAL_ADC_MspInit+0x2b0>)
 800083e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000840:	4b94      	ldr	r3, [pc, #592]	@ (8000a94 <HAL_ADC_MspInit+0x2b0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d10b      	bne.n	8000860 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000848:	4b93      	ldr	r3, [pc, #588]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084c:	4a92      	ldr	r2, [pc, #584]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 800084e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000852:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000854:	4b90      	ldr	r3, [pc, #576]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 8000856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000858:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
 800085e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000860:	4b8d      	ldr	r3, [pc, #564]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 8000862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000864:	4a8c      	ldr	r2, [pc, #560]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086c:	4b8a      	ldr	r3, [pc, #552]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 800086e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	623b      	str	r3, [r7, #32]
 8000876:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000878:	4b87      	ldr	r3, [pc, #540]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 800087a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087c:	4a86      	ldr	r2, [pc, #536]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000884:	4b84      	ldr	r3, [pc, #528]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 8000886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
 800088e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000890:	4b81      	ldr	r3, [pc, #516]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 8000892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000894:	4a80      	ldr	r2, [pc, #512]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 8000896:	f043 0302 	orr.w	r3, r3, #2
 800089a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089c:	4b7e      	ldr	r3, [pc, #504]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 800089e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a0:	f003 0302 	and.w	r3, r3, #2
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80008a8:	2304      	movs	r3, #4
 80008aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ac:	2303      	movs	r3, #3
 80008ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008bc:	4619      	mov	r1, r3
 80008be:	4877      	ldr	r0, [pc, #476]	@ (8000a9c <HAL_ADC_MspInit+0x2b8>)
 80008c0:	f004 f908 	bl	8004ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80008c4:	2302      	movs	r3, #2
 80008c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c8:	2303      	movs	r3, #3
 80008ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008d8:	4619      	mov	r1, r3
 80008da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008de:	f004 f8f9 	bl	8004ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|V_Imes_Pin;
 80008e2:	2303      	movs	r3, #3
 80008e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e6:	2303      	movs	r3, #3
 80008e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008f6:	4619      	mov	r1, r3
 80008f8:	4869      	ldr	r0, [pc, #420]	@ (8000aa0 <HAL_ADC_MspInit+0x2bc>)
 80008fa:	f004 f8eb 	bl	8004ad4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008fe:	4b69      	ldr	r3, [pc, #420]	@ (8000aa4 <HAL_ADC_MspInit+0x2c0>)
 8000900:	4a69      	ldr	r2, [pc, #420]	@ (8000aa8 <HAL_ADC_MspInit+0x2c4>)
 8000902:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000904:	4b67      	ldr	r3, [pc, #412]	@ (8000aa4 <HAL_ADC_MspInit+0x2c0>)
 8000906:	2205      	movs	r2, #5
 8000908:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800090a:	4b66      	ldr	r3, [pc, #408]	@ (8000aa4 <HAL_ADC_MspInit+0x2c0>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000910:	4b64      	ldr	r3, [pc, #400]	@ (8000aa4 <HAL_ADC_MspInit+0x2c0>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000916:	4b63      	ldr	r3, [pc, #396]	@ (8000aa4 <HAL_ADC_MspInit+0x2c0>)
 8000918:	2280      	movs	r2, #128	@ 0x80
 800091a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800091c:	4b61      	ldr	r3, [pc, #388]	@ (8000aa4 <HAL_ADC_MspInit+0x2c0>)
 800091e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000922:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000924:	4b5f      	ldr	r3, [pc, #380]	@ (8000aa4 <HAL_ADC_MspInit+0x2c0>)
 8000926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800092a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800092c:	4b5d      	ldr	r3, [pc, #372]	@ (8000aa4 <HAL_ADC_MspInit+0x2c0>)
 800092e:	2220      	movs	r2, #32
 8000930:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000932:	4b5c      	ldr	r3, [pc, #368]	@ (8000aa4 <HAL_ADC_MspInit+0x2c0>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000938:	485a      	ldr	r0, [pc, #360]	@ (8000aa4 <HAL_ADC_MspInit+0x2c0>)
 800093a:	f003 fd99 	bl	8004470 <HAL_DMA_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8000944:	f000 fa56 	bl	8000df4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a56      	ldr	r2, [pc, #344]	@ (8000aa4 <HAL_ADC_MspInit+0x2c0>)
 800094c:	655a      	str	r2, [r3, #84]	@ 0x54
 800094e:	4a55      	ldr	r2, [pc, #340]	@ (8000aa4 <HAL_ADC_MspInit+0x2c0>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	2012      	movs	r0, #18
 800095a:	f003 fd61 	bl	8004420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800095e:	2012      	movs	r0, #18
 8000960:	f003 fd78 	bl	8004454 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000964:	e092      	b.n	8000a8c <HAL_ADC_MspInit+0x2a8>
  else if(adcHandle->Instance==ADC2)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a50      	ldr	r2, [pc, #320]	@ (8000aac <HAL_ADC_MspInit+0x2c8>)
 800096c:	4293      	cmp	r3, r2
 800096e:	f040 808d 	bne.w	8000a8c <HAL_ADC_MspInit+0x2a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000978:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800097c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000982:	4618      	mov	r0, r3
 8000984:	f005 f878 	bl	8005a78 <HAL_RCCEx_PeriphCLKConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 800098e:	f000 fa31 	bl	8000df4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000992:	4b40      	ldr	r3, [pc, #256]	@ (8000a94 <HAL_ADC_MspInit+0x2b0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	4a3e      	ldr	r2, [pc, #248]	@ (8000a94 <HAL_ADC_MspInit+0x2b0>)
 800099a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800099c:	4b3d      	ldr	r3, [pc, #244]	@ (8000a94 <HAL_ADC_MspInit+0x2b0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d10b      	bne.n	80009bc <HAL_ADC_MspInit+0x1d8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009a4:	4b3c      	ldr	r3, [pc, #240]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a8:	4a3b      	ldr	r2, [pc, #236]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 80009aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b0:	4b39      	ldr	r3, [pc, #228]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 80009b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009bc:	4b36      	ldr	r3, [pc, #216]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 80009be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c0:	4a35      	ldr	r2, [pc, #212]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c8:	4b33      	ldr	r3, [pc, #204]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 80009ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b30      	ldr	r3, [pc, #192]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 80009d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d8:	4a2f      	ldr	r2, [pc, #188]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a98 <HAL_ADC_MspInit+0x2b4>)
 80009e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80009ec:	230b      	movs	r3, #11
 80009ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f0:	2303      	movs	r3, #3
 80009f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a00:	4619      	mov	r1, r3
 8000a02:	4826      	ldr	r0, [pc, #152]	@ (8000a9c <HAL_ADC_MspInit+0x2b8>)
 8000a04:	f004 f866 	bl	8004ad4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a22:	f004 f857 	bl	8004ad4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000a26:	4b22      	ldr	r3, [pc, #136]	@ (8000ab0 <HAL_ADC_MspInit+0x2cc>)
 8000a28:	4a22      	ldr	r2, [pc, #136]	@ (8000ab4 <HAL_ADC_MspInit+0x2d0>)
 8000a2a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000a2c:	4b20      	ldr	r3, [pc, #128]	@ (8000ab0 <HAL_ADC_MspInit+0x2cc>)
 8000a2e:	2224      	movs	r2, #36	@ 0x24
 8000a30:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a32:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab0 <HAL_ADC_MspInit+0x2cc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab0 <HAL_ADC_MspInit+0x2cc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab0 <HAL_ADC_MspInit+0x2cc>)
 8000a40:	2280      	movs	r2, #128	@ 0x80
 8000a42:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <HAL_ADC_MspInit+0x2cc>)
 8000a46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a4a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <HAL_ADC_MspInit+0x2cc>)
 8000a4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a52:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000a54:	4b16      	ldr	r3, [pc, #88]	@ (8000ab0 <HAL_ADC_MspInit+0x2cc>)
 8000a56:	2220      	movs	r2, #32
 8000a58:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <HAL_ADC_MspInit+0x2cc>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a60:	4813      	ldr	r0, [pc, #76]	@ (8000ab0 <HAL_ADC_MspInit+0x2cc>)
 8000a62:	f003 fd05 	bl	8004470 <HAL_DMA_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_ADC_MspInit+0x28c>
      Error_Handler();
 8000a6c:	f000 f9c2 	bl	8000df4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab0 <HAL_ADC_MspInit+0x2cc>)
 8000a74:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a76:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab0 <HAL_ADC_MspInit+0x2cc>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2012      	movs	r0, #18
 8000a82:	f003 fccd 	bl	8004420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a86:	2012      	movs	r0, #18
 8000a88:	f003 fce4 	bl	8004454 <HAL_NVIC_EnableIRQ>
}
 8000a8c:	bf00      	nop
 8000a8e:	3790      	adds	r7, #144	@ 0x90
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200002c4 	.word	0x200002c4
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	48000800 	.word	0x48000800
 8000aa0:	48000400 	.word	0x48000400
 8000aa4:	20000204 	.word	0x20000204
 8000aa8:	40020008 	.word	0x40020008
 8000aac:	50000100 	.word	0x50000100
 8000ab0:	20000264 	.word	0x20000264
 8000ab4:	4002001c 	.word	0x4002001c

08000ab8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000abe:	4b16      	ldr	r3, [pc, #88]	@ (8000b18 <MX_DMA_Init+0x60>)
 8000ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ac2:	4a15      	ldr	r2, [pc, #84]	@ (8000b18 <MX_DMA_Init+0x60>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000aca:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <MX_DMA_Init+0x60>)
 8000acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ad6:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <MX_DMA_Init+0x60>)
 8000ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ada:	4a0f      	ldr	r2, [pc, #60]	@ (8000b18 <MX_DMA_Init+0x60>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <MX_DMA_Init+0x60>)
 8000ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	200b      	movs	r0, #11
 8000af4:	f003 fc94 	bl	8004420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000af8:	200b      	movs	r0, #11
 8000afa:	f003 fcab 	bl	8004454 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	200c      	movs	r0, #12
 8000b04:	f003 fc8c 	bl	8004420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b08:	200c      	movs	r0, #12
 8000b0a:	f003 fca3 	bl	8004454 <HAL_NVIC_EnableIRQ>

}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000

08000b1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	@ 0x28
 8000b20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b3f      	ldr	r3, [pc, #252]	@ (8000c30 <MX_GPIO_Init+0x114>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	4a3e      	ldr	r2, [pc, #248]	@ (8000c30 <MX_GPIO_Init+0x114>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c30 <MX_GPIO_Init+0x114>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4a:	4b39      	ldr	r3, [pc, #228]	@ (8000c30 <MX_GPIO_Init+0x114>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	4a38      	ldr	r2, [pc, #224]	@ (8000c30 <MX_GPIO_Init+0x114>)
 8000b50:	f043 0320 	orr.w	r3, r3, #32
 8000b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b56:	4b36      	ldr	r3, [pc, #216]	@ (8000c30 <MX_GPIO_Init+0x114>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5a:	f003 0320 	and.w	r3, r3, #32
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b33      	ldr	r3, [pc, #204]	@ (8000c30 <MX_GPIO_Init+0x114>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b66:	4a32      	ldr	r2, [pc, #200]	@ (8000c30 <MX_GPIO_Init+0x114>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6e:	4b30      	ldr	r3, [pc, #192]	@ (8000c30 <MX_GPIO_Init+0x114>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c30 <MX_GPIO_Init+0x114>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	4a2c      	ldr	r2, [pc, #176]	@ (8000c30 <MX_GPIO_Init+0x114>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b86:	4b2a      	ldr	r3, [pc, #168]	@ (8000c30 <MX_GPIO_Init+0x114>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	4b27      	ldr	r3, [pc, #156]	@ (8000c30 <MX_GPIO_Init+0x114>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	4a26      	ldr	r2, [pc, #152]	@ (8000c30 <MX_GPIO_Init+0x114>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9e:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <MX_GPIO_Init+0x114>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2120      	movs	r1, #32
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb2:	f004 f911 	bl	8004dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2104      	movs	r1, #4
 8000bba:	481e      	ldr	r0, [pc, #120]	@ (8000c34 <MX_GPIO_Init+0x118>)
 8000bbc:	f004 f90c 	bl	8004dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000bc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4818      	ldr	r0, [pc, #96]	@ (8000c38 <MX_GPIO_Init+0x11c>)
 8000bd8:	f003 ff7c 	bl	8004ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf6:	f003 ff6d 	bl	8004ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4808      	ldr	r0, [pc, #32]	@ (8000c34 <MX_GPIO_Init+0x118>)
 8000c12:	f003 ff5f 	bl	8004ad4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2028      	movs	r0, #40	@ 0x28
 8000c1c:	f003 fc00 	bl	8004420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c20:	2028      	movs	r0, #40	@ 0x28
 8000c22:	f003 fc17 	bl	8004454 <HAL_NVIC_EnableIRQ>

}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	@ 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000
 8000c34:	48000c00 	.word	0x48000c00
 8000c38:	48000800 	.word	0x48000800

08000c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c40:	f001 fbd3 	bl	80023ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c44:	f000 f820 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c48:	f7ff ff68 	bl	8000b1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c4c:	f7ff ff34 	bl	8000ab8 <MX_DMA_Init>
  MX_ADC2_Init();
 8000c50:	f7ff fd60 	bl	8000714 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000c54:	f7ff fcc4 	bl	80005e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000c58:	f000 fad4 	bl	8001204 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c5c:	f000 fb9e 	bl	800139c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000c60:	f000 fd80 	bl	8001764 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c64:	f000 fdca 	bl	80017fc <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000c68:	f000 fbee 	bl	8001448 <MX_TIM7_Init>
  MX_TIM16_Init();
 8000c6c:	f000 fc22 	bl	80014b4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	Shell_Init(&h_shell);
 8000c70:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <main+0x48>)
 8000c72:	f001 f9bf 	bl	8001ff4 <Shell_Init>
	ADC_Start();
 8000c76:	f000 ff9f 	bl	8001bb8 <ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop(&h_shell);
 8000c7a:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <main+0x48>)
 8000c7c:	f001 fac2 	bl	8002204 <Shell_Loop>
 8000c80:	e7fb      	b.n	8000c7a <main+0x3e>
 8000c82:	bf00      	nop
 8000c84:	200005a0 	.word	0x200005a0

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b094      	sub	sp, #80	@ 0x50
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0318 	add.w	r3, r7, #24
 8000c92:	2238      	movs	r2, #56	@ 0x38
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f009 fca9 	bl	800a5ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f004 f8d0 	bl	8004e50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cb8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000cc2:	2306      	movs	r3, #6
 8000cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cc6:	2355      	movs	r3, #85	@ 0x55
 8000cc8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd6:	f107 0318 	add.w	r3, r7, #24
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f004 f96c 	bl	8004fb8 <HAL_RCC_OscConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000ce6:	f000 f885 	bl	8000df4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cea:	230f      	movs	r3, #15
 8000cec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2104      	movs	r1, #4
 8000d02:	4618      	mov	r0, r3
 8000d04:	f004 fc6a 	bl	80055dc <HAL_RCC_ClockConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d0e:	f000 f871 	bl	8000df4 <Error_Handler>
  }
}
 8000d12:	bf00      	nop
 8000d14:	3750      	adds	r7, #80	@ 0x50
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a2c      	ldr	r2, [pc, #176]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d101      	bne.n	8000d32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d2e:	f001 fb75 	bl	800241c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM7)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a2a      	ldr	r2, [pc, #168]	@ (8000de0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d145      	bne.n	8000dc8 <HAL_TIM_PeriodElapsedCallback+0xac>
	{
		if(pwm_handle.interrupt_counter < RAMP_TIME - 1) //on update la valeur de pulse chaque miliseconde
 8000d3c:	4b29      	ldr	r3, [pc, #164]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d3e:	899b      	ldrh	r3, [r3, #12]
 8000d40:	f241 726e 	movw	r2, #5998	@ 0x176e
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d83f      	bhi.n	8000dc8 <HAL_TIM_PeriodElapsedCallback+0xac>
		{
			pwm_handle.intermediate_pulse1 = pwm_handle.previous_pulse1 + (pwm_handle.pulse1 - pwm_handle.previous_pulse1)  * (pwm_handle.interrupt_counter+1)/RAMP_TIME ;
 8000d48:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d4a:	889a      	ldrh	r2, [r3, #4]
 8000d4c:	4b25      	ldr	r3, [pc, #148]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	4b24      	ldr	r3, [pc, #144]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d54:	889b      	ldrh	r3, [r3, #4]
 8000d56:	1acb      	subs	r3, r1, r3
 8000d58:	4922      	ldr	r1, [pc, #136]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d5a:	8989      	ldrh	r1, [r1, #12]
 8000d5c:	3101      	adds	r1, #1
 8000d5e:	fb01 f303 	mul.w	r3, r1, r3
 8000d62:	4921      	ldr	r1, [pc, #132]	@ (8000de8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000d64:	fb81 0103 	smull	r0, r1, r1, r3
 8000d68:	11c9      	asrs	r1, r1, #7
 8000d6a:	17db      	asrs	r3, r3, #31
 8000d6c:	1acb      	subs	r3, r1, r3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	4413      	add	r3, r2
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d76:	811a      	strh	r2, [r3, #8]
			pwm_handle.intermediate_pulse2 = pwm_handle.previous_pulse2 + (pwm_handle.pulse2 - pwm_handle.previous_pulse2)  * (pwm_handle.interrupt_counter+1)/RAMP_TIME ;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d7a:	88da      	ldrh	r2, [r3, #6]
 8000d7c:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d7e:	885b      	ldrh	r3, [r3, #2]
 8000d80:	4619      	mov	r1, r3
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d84:	88db      	ldrh	r3, [r3, #6]
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	4916      	ldr	r1, [pc, #88]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d8a:	8989      	ldrh	r1, [r1, #12]
 8000d8c:	3101      	adds	r1, #1
 8000d8e:	fb01 f303 	mul.w	r3, r1, r3
 8000d92:	4915      	ldr	r1, [pc, #84]	@ (8000de8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000d94:	fb81 0103 	smull	r0, r1, r1, r3
 8000d98:	11c9      	asrs	r1, r1, #7
 8000d9a:	17db      	asrs	r3, r3, #31
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	4413      	add	r3, r2
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000da6:	815a      	strh	r2, [r3, #10]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm_handle.intermediate_pulse1);
 8000da8:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000daa:	891a      	ldrh	r2, [r3, #8]
 8000dac:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,pwm_handle.intermediate_pulse2);
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000db4:	895a      	ldrh	r2, [r3, #10]
 8000db6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	639a      	str	r2, [r3, #56]	@ 0x38

			pwm_handle.interrupt_counter++;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000dbe:	899b      	ldrh	r3, [r3, #12]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000dc6:	819a      	strh	r2, [r3, #12]
		}
	}

    if (htim == &htim16) { //on lance le calcul de vitesse toutes les secondes
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a09      	ldr	r2, [pc, #36]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d101      	bne.n	8000dd4 <HAL_TIM_PeriodElapsedCallback+0xb8>
        calculate_motor_speed();
 8000dd0:	f000 fe08 	bl	80019e4 <calculate_motor_speed>

    }
  /* USER CODE END Callback 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40001000 	.word	0x40001000
 8000de0:	40001400 	.word	0x40001400
 8000de4:	2000058c 	.word	0x2000058c
 8000de8:	057619f1 	.word	0x057619f1
 8000dec:	20000318 	.word	0x20000318
 8000df0:	200003fc 	.word	0x200003fc

08000df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
}
 8000dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <Error_Handler+0x8>

08000e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e22:	4a08      	ldr	r2, [pc, #32]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e28:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e36:	f004 f8af 	bl	8004f98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40021000 	.word	0x40021000

08000e48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	@ 0x30
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e58:	4b2c      	ldr	r3, [pc, #176]	@ (8000f0c <HAL_InitTick+0xc4>)
 8000e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8000f0c <HAL_InitTick+0xc4>)
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e64:	4b29      	ldr	r3, [pc, #164]	@ (8000f0c <HAL_InitTick+0xc4>)
 8000e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e70:	f107 020c 	add.w	r2, r7, #12
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f004 fd84 	bl	8005988 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e80:	f004 fd56 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 8000e84:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e88:	4a21      	ldr	r2, [pc, #132]	@ (8000f10 <HAL_InitTick+0xc8>)
 8000e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8e:	0c9b      	lsrs	r3, r3, #18
 8000e90:	3b01      	subs	r3, #1
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <HAL_InitTick+0xcc>)
 8000e96:	4a20      	ldr	r2, [pc, #128]	@ (8000f18 <HAL_InitTick+0xd0>)
 8000e98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f14 <HAL_InitTick+0xcc>)
 8000e9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ea0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f14 <HAL_InitTick+0xcc>)
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <HAL_InitTick+0xcc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <HAL_InitTick+0xcc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000eb4:	4817      	ldr	r0, [pc, #92]	@ (8000f14 <HAL_InitTick+0xcc>)
 8000eb6:	f005 f82d 	bl	8005f14 <HAL_TIM_Base_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000ec0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d11b      	bne.n	8000f00 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ec8:	4812      	ldr	r0, [pc, #72]	@ (8000f14 <HAL_InitTick+0xcc>)
 8000eca:	f005 f913 	bl	80060f4 <HAL_TIM_Base_Start_IT>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ed4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d111      	bne.n	8000f00 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000edc:	2036      	movs	r0, #54	@ 0x36
 8000ede:	f003 fab9 	bl	8004454 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d808      	bhi.n	8000efa <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	2036      	movs	r0, #54	@ 0x36
 8000eee:	f003 fa97 	bl	8004420 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <HAL_InitTick+0xd4>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	e002      	b.n	8000f00 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3730      	adds	r7, #48	@ 0x30
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	431bde83 	.word	0x431bde83
 8000f14:	200002c8 	.word	0x200002c8
 8000f18:	40001000 	.word	0x40001000
 8000f1c:	200000ac 	.word	0x200000ac

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <NMI_Handler+0x4>

08000f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <MemManage_Handler+0x4>

08000f38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f84:	4802      	ldr	r0, [pc, #8]	@ (8000f90 <DMA1_Channel1_IRQHandler+0x10>)
 8000f86:	f003 fc56 	bl	8004836 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000204 	.word	0x20000204

08000f94 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <DMA1_Channel2_IRQHandler+0x10>)
 8000f9a:	f003 fc4c 	bl	8004836 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000264 	.word	0x20000264

08000fa8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fac:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <ADC1_2_IRQHandler+0x14>)
 8000fae:	f001 ff49 	bl	8002e44 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000fb2:	4803      	ldr	r0, [pc, #12]	@ (8000fc0 <ADC1_2_IRQHandler+0x18>)
 8000fb4:	f001 ff46 	bl	8002e44 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000012c 	.word	0x2000012c
 8000fc0:	20000198 	.word	0x20000198

08000fc4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fc8:	4803      	ldr	r0, [pc, #12]	@ (8000fd8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000fca:	f005 fc4f 	bl	800686c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000fce:	4803      	ldr	r0, [pc, #12]	@ (8000fdc <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000fd0:	f005 fc4c 	bl	800686c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000318 	.word	0x20000318
 8000fdc:	200003fc 	.word	0x200003fc

08000fe0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000fe6:	f005 fc41 	bl	800686c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000318 	.word	0x20000318

08000ff4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <USART2_IRQHandler+0x10>)
 8000ffa:	f007 f859 	bl	80080b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000448 	.word	0x20000448

08001008 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <USART3_IRQHandler+0x10>)
 800100e:	f007 f84f 	bl	80080b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200004dc 	.word	0x200004dc

0800101c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001020:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001024:	f003 fef0 	bl	8004e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <TIM6_DAC_IRQHandler+0x10>)
 8001032:	f005 fc1b 	bl	800686c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200002c8 	.word	0x200002c8

08001040 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <TIM7_DAC_IRQHandler+0x10>)
 8001046:	f005 fc11 	bl	800686c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200003b0 	.word	0x200003b0

08001054 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return 1;
 8001058:	2301      	movs	r3, #1
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_kill>:

int _kill(int pid, int sig)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800106e:	f009 fb79 	bl	800a764 <__errno>
 8001072:	4603      	mov	r3, r0
 8001074:	2216      	movs	r2, #22
 8001076:	601a      	str	r2, [r3, #0]
  return -1;
 8001078:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <_exit>:

void _exit (int status)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800108c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ffe7 	bl	8001064 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001096:	bf00      	nop
 8001098:	e7fd      	b.n	8001096 <_exit+0x12>

0800109a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	e00a      	b.n	80010c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010ac:	f3af 8000 	nop.w
 80010b0:	4601      	mov	r1, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	60ba      	str	r2, [r7, #8]
 80010b8:	b2ca      	uxtb	r2, r1
 80010ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3301      	adds	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dbf0      	blt.n	80010ac <_read+0x12>
  }

  return len;
 80010ca:	687b      	ldr	r3, [r7, #4]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	e009      	b.n	80010fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	60ba      	str	r2, [r7, #8]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	3301      	adds	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	429a      	cmp	r2, r3
 8001100:	dbf1      	blt.n	80010e6 <_write+0x12>
  }
  return len;
 8001102:	687b      	ldr	r3, [r7, #4]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <_close>:

int _close(int file)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001114:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001134:	605a      	str	r2, [r3, #4]
  return 0;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_isatty>:

int _isatty(int file)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800114c:	2301      	movs	r3, #1
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800115a:	b480      	push	{r7}
 800115c:	b085      	sub	sp, #20
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800117c:	4a14      	ldr	r2, [pc, #80]	@ (80011d0 <_sbrk+0x5c>)
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <_sbrk+0x60>)
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001188:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <_sbrk+0x64>)
 8001192:	4a12      	ldr	r2, [pc, #72]	@ (80011dc <_sbrk+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d207      	bcs.n	80011b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a4:	f009 fade 	bl	800a764 <__errno>
 80011a8:	4603      	mov	r3, r0
 80011aa:	220c      	movs	r2, #12
 80011ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011b2:	e009      	b.n	80011c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ba:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a05      	ldr	r2, [pc, #20]	@ (80011d8 <_sbrk+0x64>)
 80011c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20020000 	.word	0x20020000
 80011d4:	00000400 	.word	0x00000400
 80011d8:	20000314 	.word	0x20000314
 80011dc:	20000970 	.word	0x20000970

080011e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <SystemInit+0x20>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ea:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <SystemInit+0x20>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b09c      	sub	sp, #112	@ 0x70
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001224:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	615a      	str	r2, [r3, #20]
 8001236:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2234      	movs	r2, #52	@ 0x34
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f009 f9d5 	bl	800a5ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001244:	4b53      	ldr	r3, [pc, #332]	@ (8001394 <MX_TIM1_Init+0x190>)
 8001246:	4a54      	ldr	r2, [pc, #336]	@ (8001398 <MX_TIM1_Init+0x194>)
 8001248:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800124a:	4b52      	ldr	r3, [pc, #328]	@ (8001394 <MX_TIM1_Init+0x190>)
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001250:	4b50      	ldr	r3, [pc, #320]	@ (8001394 <MX_TIM1_Init+0x190>)
 8001252:	2220      	movs	r2, #32
 8001254:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8001256:	4b4f      	ldr	r3, [pc, #316]	@ (8001394 <MX_TIM1_Init+0x190>)
 8001258:	f242 1233 	movw	r2, #8499	@ 0x2133
 800125c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125e:	4b4d      	ldr	r3, [pc, #308]	@ (8001394 <MX_TIM1_Init+0x190>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001264:	4b4b      	ldr	r3, [pc, #300]	@ (8001394 <MX_TIM1_Init+0x190>)
 8001266:	2200      	movs	r2, #0
 8001268:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800126a:	4b4a      	ldr	r3, [pc, #296]	@ (8001394 <MX_TIM1_Init+0x190>)
 800126c:	2280      	movs	r2, #128	@ 0x80
 800126e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001270:	4848      	ldr	r0, [pc, #288]	@ (8001394 <MX_TIM1_Init+0x190>)
 8001272:	f004 fe4f 	bl	8005f14 <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800127c:	f7ff fdba 	bl	8000df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001280:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001284:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001286:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800128a:	4619      	mov	r1, r3
 800128c:	4841      	ldr	r0, [pc, #260]	@ (8001394 <MX_TIM1_Init+0x190>)
 800128e:	f005 fd51 	bl	8006d34 <HAL_TIM_ConfigClockSource>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001298:	f7ff fdac 	bl	8000df4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800129c:	483d      	ldr	r0, [pc, #244]	@ (8001394 <MX_TIM1_Init+0x190>)
 800129e:	f004 ffa1 	bl	80061e4 <HAL_TIM_PWM_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012a8:	f7ff fda4 	bl	8000df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012ac:	2320      	movs	r3, #32
 80012ae:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80012b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80012b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012be:	4619      	mov	r1, r3
 80012c0:	4834      	ldr	r0, [pc, #208]	@ (8001394 <MX_TIM1_Init+0x190>)
 80012c2:	f006 fc35 	bl	8007b30 <HAL_TIMEx_MasterConfigSynchronization>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80012cc:	f7ff fd92 	bl	8000df4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d0:	2360      	movs	r3, #96	@ 0x60
 80012d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 4249;
 80012d4:	f241 0399 	movw	r3, #4249	@ 0x1099
 80012d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012da:	2300      	movs	r3, #0
 80012dc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012de:	2300      	movs	r3, #0
 80012e0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	4827      	ldr	r0, [pc, #156]	@ (8001394 <MX_TIM1_Init+0x190>)
 80012f8:	f005 fc08 	bl	8006b0c <HAL_TIM_PWM_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001302:	f7ff fd77 	bl	8000df4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001306:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800130a:	2204      	movs	r2, #4
 800130c:	4619      	mov	r1, r3
 800130e:	4821      	ldr	r0, [pc, #132]	@ (8001394 <MX_TIM1_Init+0x190>)
 8001310:	f005 fbfc 	bl	8006b0c <HAL_TIM_PWM_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 800131a:	f7ff fd6b 	bl	8000df4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001322:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001326:	2208      	movs	r2, #8
 8001328:	4619      	mov	r1, r3
 800132a:	481a      	ldr	r0, [pc, #104]	@ (8001394 <MX_TIM1_Init+0x190>)
 800132c:	f005 fbee 	bl	8006b0c <HAL_TIM_PWM_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8001336:	f7ff fd5d 	bl	8000df4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8001346:	2314      	movs	r3, #20
 8001348:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800134e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001352:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001360:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800136a:	2300      	movs	r3, #0
 800136c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	4619      	mov	r1, r3
 8001376:	4807      	ldr	r0, [pc, #28]	@ (8001394 <MX_TIM1_Init+0x190>)
 8001378:	f006 fc70 	bl	8007c5c <HAL_TIMEx_ConfigBreakDeadTime>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 8001382:	f7ff fd37 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001386:	4803      	ldr	r0, [pc, #12]	@ (8001394 <MX_TIM1_Init+0x190>)
 8001388:	f000 f984 	bl	8001694 <HAL_TIM_MspPostInit>

}
 800138c:	bf00      	nop
 800138e:	3770      	adds	r7, #112	@ 0x70
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000318 	.word	0x20000318
 8001398:	40012c00 	.word	0x40012c00

0800139c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	@ 0x30
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	2224      	movs	r2, #36	@ 0x24
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f009 f91f 	bl	800a5ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ba:	4b21      	ldr	r3, [pc, #132]	@ (8001440 <MX_TIM3_Init+0xa4>)
 80013bc:	4a21      	ldr	r2, [pc, #132]	@ (8001444 <MX_TIM3_Init+0xa8>)
 80013be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001440 <MX_TIM3_Init+0xa4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001440 <MX_TIM3_Init+0xa4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <MX_TIM3_Init+0xa4>)
 80013ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <MX_TIM3_Init+0xa4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013da:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <MX_TIM3_Init+0xa4>)
 80013dc:	2280      	movs	r2, #128	@ 0x80
 80013de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013e0:	2303      	movs	r3, #3
 80013e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013e8:	2301      	movs	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013f8:	2301      	movs	r3, #1
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4619      	mov	r1, r3
 800140a:	480d      	ldr	r0, [pc, #52]	@ (8001440 <MX_TIM3_Init+0xa4>)
 800140c:	f005 f8fa 	bl	8006604 <HAL_TIM_Encoder_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001416:	f7ff fced 	bl	8000df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001422:	463b      	mov	r3, r7
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	@ (8001440 <MX_TIM3_Init+0xa4>)
 8001428:	f006 fb82 	bl	8007b30 <HAL_TIMEx_MasterConfigSynchronization>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001432:	f7ff fcdf 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3730      	adds	r7, #48	@ 0x30
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000364 	.word	0x20000364
 8001444:	40000400 	.word	0x40000400

08001448 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001458:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <MX_TIM7_Init+0x64>)
 800145a:	4a15      	ldr	r2, [pc, #84]	@ (80014b0 <MX_TIM7_Init+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 800145e:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <MX_TIM7_Init+0x64>)
 8001460:	22a9      	movs	r2, #169	@ 0xa9
 8001462:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_TIM7_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <MX_TIM7_Init+0x64>)
 800146c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001470:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <MX_TIM7_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001478:	480c      	ldr	r0, [pc, #48]	@ (80014ac <MX_TIM7_Init+0x64>)
 800147a:	f004 fd4b 	bl	8005f14 <HAL_TIM_Base_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001484:	f7ff fcb6 	bl	8000df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	@ (80014ac <MX_TIM7_Init+0x64>)
 8001496:	f006 fb4b 	bl	8007b30 <HAL_TIMEx_MasterConfigSynchronization>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80014a0:	f7ff fca8 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200003b0 	.word	0x200003b0
 80014b0:	40001400 	.word	0x40001400

080014b4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <MX_TIM16_Init+0x48>)
 80014ba:	4a11      	ldr	r2, [pc, #68]	@ (8001500 <MX_TIM16_Init+0x4c>)
 80014bc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1699;
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <MX_TIM16_Init+0x48>)
 80014c0:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80014c4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c6:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <MX_TIM16_Init+0x48>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <MX_TIM16_Init+0x48>)
 80014ce:	f242 720f 	movw	r2, #9999	@ 0x270f
 80014d2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <MX_TIM16_Init+0x48>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80014da:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <MX_TIM16_Init+0x48>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <MX_TIM16_Init+0x48>)
 80014e2:	2280      	movs	r2, #128	@ 0x80
 80014e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <MX_TIM16_Init+0x48>)
 80014e8:	f004 fd14 	bl	8005f14 <HAL_TIM_Base_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80014f2:	f7ff fc7f 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200003fc 	.word	0x200003fc
 8001500:	40014400 	.word	0x40014400

08001504 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a2b      	ldr	r2, [pc, #172]	@ (80015c0 <HAL_TIM_Base_MspInit+0xbc>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d11c      	bne.n	8001550 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001516:	4b2b      	ldr	r3, [pc, #172]	@ (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 8001518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151a:	4a2a      	ldr	r2, [pc, #168]	@ (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 800151c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001520:	6613      	str	r3, [r2, #96]	@ 0x60
 8001522:	4b28      	ldr	r3, [pc, #160]	@ (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001526:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2019      	movs	r0, #25
 8001534:	f002 ff74 	bl	8004420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001538:	2019      	movs	r0, #25
 800153a:	f002 ff8b 	bl	8004454 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	201a      	movs	r0, #26
 8001544:	f002 ff6c 	bl	8004420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001548:	201a      	movs	r0, #26
 800154a:	f002 ff83 	bl	8004454 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800154e:	e032      	b.n	80015b6 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM7)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1c      	ldr	r2, [pc, #112]	@ (80015c8 <HAL_TIM_Base_MspInit+0xc4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d114      	bne.n	8001584 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800155a:	4b1a      	ldr	r3, [pc, #104]	@ (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155e:	4a19      	ldr	r2, [pc, #100]	@ (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 8001560:	f043 0320 	orr.w	r3, r3, #32
 8001564:	6593      	str	r3, [r2, #88]	@ 0x58
 8001566:	4b17      	ldr	r3, [pc, #92]	@ (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2037      	movs	r0, #55	@ 0x37
 8001578:	f002 ff52 	bl	8004420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800157c:	2037      	movs	r0, #55	@ 0x37
 800157e:	f002 ff69 	bl	8004454 <HAL_NVIC_EnableIRQ>
}
 8001582:	e018      	b.n	80015b6 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM16)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a10      	ldr	r2, [pc, #64]	@ (80015cc <HAL_TIM_Base_MspInit+0xc8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d113      	bne.n	80015b6 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800158e:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 8001590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001592:	4a0c      	ldr	r2, [pc, #48]	@ (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 8001594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001598:	6613      	str	r3, [r2, #96]	@ 0x60
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2019      	movs	r0, #25
 80015ac:	f002 ff38 	bl	8004420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80015b0:	2019      	movs	r0, #25
 80015b2:	f002 ff4f 	bl	8004454 <HAL_NVIC_EnableIRQ>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40012c00 	.word	0x40012c00
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40001400 	.word	0x40001400
 80015cc:	40014400 	.word	0x40014400

080015d0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	@ 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a26      	ldr	r2, [pc, #152]	@ (8001688 <HAL_TIM_Encoder_MspInit+0xb8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d145      	bne.n	800167e <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015f2:	4b26      	ldr	r3, [pc, #152]	@ (800168c <HAL_TIM_Encoder_MspInit+0xbc>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f6:	4a25      	ldr	r2, [pc, #148]	@ (800168c <HAL_TIM_Encoder_MspInit+0xbc>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80015fe:	4b23      	ldr	r3, [pc, #140]	@ (800168c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	4b20      	ldr	r3, [pc, #128]	@ (800168c <HAL_TIM_Encoder_MspInit+0xbc>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160e:	4a1f      	ldr	r2, [pc, #124]	@ (800168c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001616:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	4a19      	ldr	r2, [pc, #100]	@ (800168c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162e:	4b17      	ldr	r3, [pc, #92]	@ (800168c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800163a:	2350      	movs	r3, #80	@ 0x50
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800164a:	2302      	movs	r3, #2
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001658:	f003 fa3c 	bl	8004ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800165c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800166e:	2302      	movs	r3, #2
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	4805      	ldr	r0, [pc, #20]	@ (8001690 <HAL_TIM_Encoder_MspInit+0xc0>)
 800167a:	f003 fa2b 	bl	8004ad4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	@ 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40000400 	.word	0x40000400
 800168c:	40021000 	.word	0x40021000
 8001690:	48000800 	.word	0x48000800

08001694 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	@ 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a29      	ldr	r2, [pc, #164]	@ (8001758 <HAL_TIM_MspPostInit+0xc4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d14b      	bne.n	800174e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	4b29      	ldr	r3, [pc, #164]	@ (800175c <HAL_TIM_MspPostInit+0xc8>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	4a28      	ldr	r2, [pc, #160]	@ (800175c <HAL_TIM_MspPostInit+0xc8>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c2:	4b26      	ldr	r3, [pc, #152]	@ (800175c <HAL_TIM_MspPostInit+0xc8>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	4b23      	ldr	r3, [pc, #140]	@ (800175c <HAL_TIM_MspPostInit+0xc8>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	4a22      	ldr	r2, [pc, #136]	@ (800175c <HAL_TIM_MspPostInit+0xc8>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016da:	4b20      	ldr	r3, [pc, #128]	@ (800175c <HAL_TIM_MspPostInit+0xc8>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80016e6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80016ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016f8:	2306      	movs	r3, #6
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	4817      	ldr	r0, [pc, #92]	@ (8001760 <HAL_TIM_MspPostInit+0xcc>)
 8001704:	f003 f9e6 	bl	8004ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001708:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800170c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800171a:	2304      	movs	r3, #4
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	480e      	ldr	r0, [pc, #56]	@ (8001760 <HAL_TIM_MspPostInit+0xcc>)
 8001726:	f003 f9d5 	bl	8004ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 800172a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800173c:	2306      	movs	r3, #6
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174a:	f003 f9c3 	bl	8004ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	@ 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40012c00 	.word	0x40012c00
 800175c:	40021000 	.word	0x40021000
 8001760:	48000400 	.word	0x48000400

08001764 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001768:	4b22      	ldr	r3, [pc, #136]	@ (80017f4 <MX_USART2_UART_Init+0x90>)
 800176a:	4a23      	ldr	r2, [pc, #140]	@ (80017f8 <MX_USART2_UART_Init+0x94>)
 800176c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800176e:	4b21      	ldr	r3, [pc, #132]	@ (80017f4 <MX_USART2_UART_Init+0x90>)
 8001770:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b1f      	ldr	r3, [pc, #124]	@ (80017f4 <MX_USART2_UART_Init+0x90>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <MX_USART2_UART_Init+0x90>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001782:	4b1c      	ldr	r3, [pc, #112]	@ (80017f4 <MX_USART2_UART_Init+0x90>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <MX_USART2_UART_Init+0x90>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b19      	ldr	r3, [pc, #100]	@ (80017f4 <MX_USART2_UART_Init+0x90>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b17      	ldr	r3, [pc, #92]	@ (80017f4 <MX_USART2_UART_Init+0x90>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179a:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <MX_USART2_UART_Init+0x90>)
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017a0:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <MX_USART2_UART_Init+0x90>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a6:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <MX_USART2_UART_Init+0x90>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ac:	4811      	ldr	r0, [pc, #68]	@ (80017f4 <MX_USART2_UART_Init+0x90>)
 80017ae:	f006 fb54 	bl	8007e5a <HAL_UART_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80017b8:	f7ff fb1c 	bl	8000df4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017bc:	2100      	movs	r1, #0
 80017be:	480d      	ldr	r0, [pc, #52]	@ (80017f4 <MX_USART2_UART_Init+0x90>)
 80017c0:	f008 fbcb 	bl	8009f5a <HAL_UARTEx_SetTxFifoThreshold>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80017ca:	f7ff fb13 	bl	8000df4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ce:	2100      	movs	r1, #0
 80017d0:	4808      	ldr	r0, [pc, #32]	@ (80017f4 <MX_USART2_UART_Init+0x90>)
 80017d2:	f008 fc00 	bl	8009fd6 <HAL_UARTEx_SetRxFifoThreshold>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80017dc:	f7ff fb0a 	bl	8000df4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017e0:	4804      	ldr	r0, [pc, #16]	@ (80017f4 <MX_USART2_UART_Init+0x90>)
 80017e2:	f008 fb81 	bl	8009ee8 <HAL_UARTEx_DisableFifoMode>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017ec:	f7ff fb02 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000448 	.word	0x20000448
 80017f8:	40004400 	.word	0x40004400

080017fc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001800:	4b22      	ldr	r3, [pc, #136]	@ (800188c <MX_USART3_UART_Init+0x90>)
 8001802:	4a23      	ldr	r2, [pc, #140]	@ (8001890 <MX_USART3_UART_Init+0x94>)
 8001804:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001806:	4b21      	ldr	r3, [pc, #132]	@ (800188c <MX_USART3_UART_Init+0x90>)
 8001808:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800180c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800180e:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <MX_USART3_UART_Init+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001814:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <MX_USART3_UART_Init+0x90>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800181a:	4b1c      	ldr	r3, [pc, #112]	@ (800188c <MX_USART3_UART_Init+0x90>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001820:	4b1a      	ldr	r3, [pc, #104]	@ (800188c <MX_USART3_UART_Init+0x90>)
 8001822:	220c      	movs	r2, #12
 8001824:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001826:	4b19      	ldr	r3, [pc, #100]	@ (800188c <MX_USART3_UART_Init+0x90>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800182c:	4b17      	ldr	r3, [pc, #92]	@ (800188c <MX_USART3_UART_Init+0x90>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001832:	4b16      	ldr	r3, [pc, #88]	@ (800188c <MX_USART3_UART_Init+0x90>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001838:	4b14      	ldr	r3, [pc, #80]	@ (800188c <MX_USART3_UART_Init+0x90>)
 800183a:	2200      	movs	r2, #0
 800183c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800183e:	4b13      	ldr	r3, [pc, #76]	@ (800188c <MX_USART3_UART_Init+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001844:	4811      	ldr	r0, [pc, #68]	@ (800188c <MX_USART3_UART_Init+0x90>)
 8001846:	f006 fb08 	bl	8007e5a <HAL_UART_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001850:	f7ff fad0 	bl	8000df4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001854:	2100      	movs	r1, #0
 8001856:	480d      	ldr	r0, [pc, #52]	@ (800188c <MX_USART3_UART_Init+0x90>)
 8001858:	f008 fb7f 	bl	8009f5a <HAL_UARTEx_SetTxFifoThreshold>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001862:	f7ff fac7 	bl	8000df4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001866:	2100      	movs	r1, #0
 8001868:	4808      	ldr	r0, [pc, #32]	@ (800188c <MX_USART3_UART_Init+0x90>)
 800186a:	f008 fbb4 	bl	8009fd6 <HAL_UARTEx_SetRxFifoThreshold>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001874:	f7ff fabe 	bl	8000df4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001878:	4804      	ldr	r0, [pc, #16]	@ (800188c <MX_USART3_UART_Init+0x90>)
 800187a:	f008 fb35 	bl	8009ee8 <HAL_UARTEx_DisableFifoMode>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001884:	f7ff fab6 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200004dc 	.word	0x200004dc
 8001890:	40004800 	.word	0x40004800

08001894 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b0a0      	sub	sp, #128	@ 0x80
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018ac:	f107 0318 	add.w	r3, r7, #24
 80018b0:	2254      	movs	r2, #84	@ 0x54
 80018b2:	2100      	movs	r1, #0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f008 fe9a 	bl	800a5ee <memset>
  if(uartHandle->Instance==USART2)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a45      	ldr	r2, [pc, #276]	@ (80019d4 <HAL_UART_MspInit+0x140>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d13f      	bne.n	8001944 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018cc:	f107 0318 	add.w	r3, r7, #24
 80018d0:	4618      	mov	r0, r3
 80018d2:	f004 f8d1 	bl	8005a78 <HAL_RCCEx_PeriphCLKConfig>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018dc:	f7ff fa8a 	bl	8000df4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018e0:	4b3d      	ldr	r3, [pc, #244]	@ (80019d8 <HAL_UART_MspInit+0x144>)
 80018e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e4:	4a3c      	ldr	r2, [pc, #240]	@ (80019d8 <HAL_UART_MspInit+0x144>)
 80018e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ec:	4b3a      	ldr	r3, [pc, #232]	@ (80019d8 <HAL_UART_MspInit+0x144>)
 80018ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	4b37      	ldr	r3, [pc, #220]	@ (80019d8 <HAL_UART_MspInit+0x144>)
 80018fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fc:	4a36      	ldr	r2, [pc, #216]	@ (80019d8 <HAL_UART_MspInit+0x144>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001904:	4b34      	ldr	r3, [pc, #208]	@ (80019d8 <HAL_UART_MspInit+0x144>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001910:	230c      	movs	r3, #12
 8001912:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001920:	2307      	movs	r3, #7
 8001922:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001928:	4619      	mov	r1, r3
 800192a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192e:	f003 f8d1 	bl	8004ad4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	2026      	movs	r0, #38	@ 0x26
 8001938:	f002 fd72 	bl	8004420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800193c:	2026      	movs	r0, #38	@ 0x26
 800193e:	f002 fd89 	bl	8004454 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001942:	e043      	b.n	80019cc <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a24      	ldr	r2, [pc, #144]	@ (80019dc <HAL_UART_MspInit+0x148>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d13e      	bne.n	80019cc <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800194e:	2304      	movs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001956:	f107 0318 	add.w	r3, r7, #24
 800195a:	4618      	mov	r0, r3
 800195c:	f004 f88c 	bl	8005a78 <HAL_RCCEx_PeriphCLKConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001966:	f7ff fa45 	bl	8000df4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800196a:	4b1b      	ldr	r3, [pc, #108]	@ (80019d8 <HAL_UART_MspInit+0x144>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196e:	4a1a      	ldr	r2, [pc, #104]	@ (80019d8 <HAL_UART_MspInit+0x144>)
 8001970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001974:	6593      	str	r3, [r2, #88]	@ 0x58
 8001976:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <HAL_UART_MspInit+0x144>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <HAL_UART_MspInit+0x144>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001986:	4a14      	ldr	r2, [pc, #80]	@ (80019d8 <HAL_UART_MspInit+0x144>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800198e:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_UART_MspInit+0x144>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800199a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800199e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019ac:	2307      	movs	r3, #7
 80019ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019b4:	4619      	mov	r1, r3
 80019b6:	480a      	ldr	r0, [pc, #40]	@ (80019e0 <HAL_UART_MspInit+0x14c>)
 80019b8:	f003 f88c 	bl	8004ad4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	2027      	movs	r0, #39	@ 0x27
 80019c2:	f002 fd2d 	bl	8004420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019c6:	2027      	movs	r0, #39	@ 0x27
 80019c8:	f002 fd44 	bl	8004454 <HAL_NVIC_EnableIRQ>
}
 80019cc:	bf00      	nop
 80019ce:	3780      	adds	r7, #128	@ 0x80
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40004400 	.word	0x40004400
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40004800 	.word	0x40004800
 80019e0:	48000800 	.word	0x48000800

080019e4 <calculate_motor_speed>:
#define DELTA_T 1000
int32_t last_count;
int32_t current_count;
//this function is called every second/10
void calculate_motor_speed()
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
	current_count = __HAL_TIM_GET_COUNTER(&htim3);
 80019ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <calculate_motor_speed+0x84>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a6c <calculate_motor_speed+0x88>)
 80019f4:	601a      	str	r2, [r3, #0]
	int32_t delta_count;

	// Handle counter overflow/underflow
	if (current_count < last_count) {
 80019f6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a6c <calculate_motor_speed+0x88>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <calculate_motor_speed+0x8c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	da09      	bge.n	8001a16 <calculate_motor_speed+0x32>
		delta_count = (TIMER_MAX_COUNT + current_count) - last_count;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <calculate_motor_speed+0x88>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001a0a:	33ff      	adds	r3, #255	@ 0xff
 8001a0c:	4a18      	ldr	r2, [pc, #96]	@ (8001a70 <calculate_motor_speed+0x8c>)
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	1a9b      	subs	r3, r3, r2
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	e005      	b.n	8001a22 <calculate_motor_speed+0x3e>
	} else {
		delta_count = current_count - last_count;
 8001a16:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <calculate_motor_speed+0x88>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <calculate_motor_speed+0x8c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	607b      	str	r3, [r7, #4]
	}

	// Update last count
	last_count = current_count;
 8001a22:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <calculate_motor_speed+0x88>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a12      	ldr	r2, [pc, #72]	@ (8001a70 <calculate_motor_speed+0x8c>)
 8001a28:	6013      	str	r3, [r2, #0]
	pulses_per_second = delta_count * 10;
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <calculate_motor_speed+0x90>)
 8001a3e:	edc3 7a00 	vstr	s15, [r3]
	rotation_sign = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 8001a42:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <calculate_motor_speed+0x84>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	2b10      	cmp	r3, #16
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <calculate_motor_speed+0x94>)
 8001a5a:	601a      	str	r2, [r3, #0]
	// Calculate speed (RPM)
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	20000364 	.word	0x20000364
 8001a6c:	2000057c 	.word	0x2000057c
 8001a70:	20000578 	.word	0x20000578
 8001a74:	20000574 	.word	0x20000574
 8001a78:	20000570 	.word	0x20000570

08001a7c <ENCODER_print_speed>:

void ENCODER_print_speed(h_shell_t *h_shell, char **argv, int argc)
{
 8001a7c:	b5b0      	push	{r4, r5, r7, lr}
 8001a7e:	b090      	sub	sp, #64	@ 0x40
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
	if(rotation_sign == 1)
 8001a88:	4b22      	ldr	r3, [pc, #136]	@ (8001b14 <ENCODER_print_speed+0x98>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d110      	bne.n	8001ab2 <ENCODER_print_speed+0x36>
	{
		uint8_t update_message[] =
 8001a90:	4b21      	ldr	r3, [pc, #132]	@ (8001b18 <ENCODER_print_speed+0x9c>)
 8001a92:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001a96:	461d      	mov	r5, r3
 8001a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a9c:	682b      	ldr	r3, [r5, #0]
 8001a9e:	7023      	strb	r3, [r4, #0]
				"Counting Up!  \r\n";
		HAL_UART_Transmit(&huart2, update_message, sizeof(update_message),
 8001aa0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001aa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aa8:	2211      	movs	r2, #17
 8001aaa:	481c      	ldr	r0, [pc, #112]	@ (8001b1c <ENCODER_print_speed+0xa0>)
 8001aac:	f006 fa25 	bl	8007efa <HAL_UART_Transmit>
 8001ab0:	e013      	b.n	8001ada <ENCODER_print_speed+0x5e>
				HAL_MAX_DELAY);
	}
	else{


		uint8_t update_message[] =
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b20 <ENCODER_print_speed+0xa4>)
 8001ab4:	f107 0414 	add.w	r4, r7, #20
 8001ab8:	461d      	mov	r5, r3
 8001aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001abe:	682b      	ldr	r3, [r5, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	8022      	strh	r2, [r4, #0]
 8001ac4:	3402      	adds	r4, #2
 8001ac6:	0c1b      	lsrs	r3, r3, #16
 8001ac8:	7023      	strb	r3, [r4, #0]
				"Counting Down!  \r\n";
		HAL_UART_Transmit(&huart2, update_message, sizeof(update_message),
 8001aca:	f107 0114 	add.w	r1, r7, #20
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ad2:	2213      	movs	r2, #19
 8001ad4:	4811      	ldr	r0, [pc, #68]	@ (8001b1c <ENCODER_print_speed+0xa0>)
 8001ad6:	f006 fa10 	bl	8007efa <HAL_UART_Transmit>
				HAL_MAX_DELAY);

	}
	int uartTxStringLength = snprintf((char*) h_shell->uartTxBuffer,
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f203 1085 	addw	r0, r3, #389	@ 0x185
 8001ae0:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <ENCODER_print_speed+0xa8>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aea:	ee17 3a90 	vmov	r3, s15
 8001aee:	4a0e      	ldr	r2, [pc, #56]	@ (8001b28 <ENCODER_print_speed+0xac>)
 8001af0:	2180      	movs	r1, #128	@ 0x80
 8001af2:	f008 fd05 	bl	800a500 <sniprintf>
 8001af6:	63f8      	str	r0, [r7, #60]	@ 0x3c
			UART_TX_BUFFER_SIZE, "pulse per seconds %d \r\n",
			(int) pulses_per_second);
	HAL_UART_Transmit(&huart2, h_shell->uartTxBuffer, uartTxStringLength,
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f203 1185 	addw	r1, r3, #389	@ 0x185
 8001afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b06:	4805      	ldr	r0, [pc, #20]	@ (8001b1c <ENCODER_print_speed+0xa0>)
 8001b08:	f006 f9f7 	bl	8007efa <HAL_UART_Transmit>
			HAL_MAX_DELAY);

}
 8001b0c:	bf00      	nop
 8001b0e:	3740      	adds	r7, #64	@ 0x40
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bdb0      	pop	{r4, r5, r7, pc}
 8001b14:	20000570 	.word	0x20000570
 8001b18:	0800b60c 	.word	0x0800b60c
 8001b1c:	20000448 	.word	0x20000448
 8001b20:	0800b620 	.word	0x0800b620
 8001b24:	20000574 	.word	0x20000574
 8001b28:	0800b5f4 	.word	0x0800b5f4

08001b2c <ENCODER_start>:
void ENCODER_start(h_shell_t *h_shell, char **argv, int argc)
{
 8001b2c:	b5b0      	push	{r4, r5, r7, lr}
 8001b2e:	b08a      	sub	sp, #40	@ 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
	rotation_sign = 0;
 8001b38:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <ENCODER_start+0x6c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
	pulses_per_second = 0;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <ENCODER_start+0x70>)
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
	last_count=0;
 8001b46:	4b16      	ldr	r3, [pc, #88]	@ (8001ba0 <ENCODER_start+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
	current_count=0;
 8001b4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <ENCODER_start+0x78>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8001b52:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <ENCODER_start+0x7c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2200      	movs	r2, #0
 8001b58:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b5a:	213c      	movs	r1, #60	@ 0x3c
 8001b5c:	4812      	ldr	r0, [pc, #72]	@ (8001ba8 <ENCODER_start+0x7c>)
 8001b5e:	f004 fdf7 	bl	8006750 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim16);
 8001b62:	4812      	ldr	r0, [pc, #72]	@ (8001bac <ENCODER_start+0x80>)
 8001b64:	f004 fac6 	bl	80060f4 <HAL_TIM_Base_Start_IT>

	uint8_t update_message[] =
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <ENCODER_start+0x84>)
 8001b6a:	f107 0410 	add.w	r4, r7, #16
 8001b6e:	461d      	mov	r5, r3
 8001b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b74:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b78:	6020      	str	r0, [r4, #0]
 8001b7a:	3404      	adds	r4, #4
 8001b7c:	8021      	strh	r1, [r4, #0]
			"Encoder started !  \r\n";
	HAL_UART_Transmit(&huart2, update_message, sizeof(update_message),
 8001b7e:	f107 0110 	add.w	r1, r7, #16
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b86:	2216      	movs	r2, #22
 8001b88:	480a      	ldr	r0, [pc, #40]	@ (8001bb4 <ENCODER_start+0x88>)
 8001b8a:	f006 f9b6 	bl	8007efa <HAL_UART_Transmit>
			HAL_MAX_DELAY);
}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	@ 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bdb0      	pop	{r4, r5, r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000570 	.word	0x20000570
 8001b9c:	20000574 	.word	0x20000574
 8001ba0:	20000578 	.word	0x20000578
 8001ba4:	2000057c 	.word	0x2000057c
 8001ba8:	20000364 	.word	0x20000364
 8001bac:	200003fc 	.word	0x200003fc
 8001bb0:	0800b634 	.word	0x0800b634
 8001bb4:	20000448 	.word	0x20000448

08001bb8 <ADC_Start>:

uint16_t adc_values[ADC_BUFFER_SIZE];

// Initialize ADC and start conversion
int ADC_Start()
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
	// Clear ADC value arrays
	memset(adc_values, 0, ADC_BUFFER_SIZE);
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4808      	ldr	r0, [pc, #32]	@ (8001be4 <ADC_Start+0x2c>)
 8001bc2:	f008 fd14 	bl	800a5ee <memset>

	// Calibrate ADCs
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001bc6:	217f      	movs	r1, #127	@ 0x7f
 8001bc8:	4807      	ldr	r0, [pc, #28]	@ (8001be8 <ADC_Start+0x30>)
 8001bca:	f002 f9d5 	bl	8003f78 <HAL_ADCEx_Calibration_Start>

	// Set up DMA for ADCs
	HAL_ADC_Start_DMA(&hadc1, adc_values, ADC_BUFFER_SIZE);
 8001bce:	2203      	movs	r2, #3
 8001bd0:	4904      	ldr	r1, [pc, #16]	@ (8001be4 <ADC_Start+0x2c>)
 8001bd2:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <ADC_Start+0x30>)
 8001bd4:	f001 f862 	bl	8002c9c <HAL_ADC_Start_DMA>

	// Start the timer to trigger ADC conversions
	HAL_TIM_Base_Start(&htim1);
 8001bd8:	4804      	ldr	r0, [pc, #16]	@ (8001bec <ADC_Start+0x34>)
 8001bda:	f004 f9f3 	bl	8005fc4 <HAL_TIM_Base_Start>

	return 0;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000584 	.word	0x20000584
 8001be8:	2000012c 	.word	0x2000012c
 8001bec:	20000318 	.word	0x20000318

08001bf0 <HAL_ADC_ConvCpltCallback>:

// Callback when ADC conversion is complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c00:	d102      	bne.n	8001c08 <HAL_ADC_ConvCpltCallback+0x18>
	{
		// ADC1 completed conversion
		adc_value_available = 1;
 8001c02:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <HAL_ADC_ConvCpltCallback+0x24>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
	}

}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	20000580 	.word	0x20000580

08001c18 <ADC_Read>:

// Example read function (extend as needed)
int ADC_Read(h_shell_t *h_shell, char **argv, int argcn)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
	if (adc_value_available)
 8001c24:	4b14      	ldr	r3, [pc, #80]	@ (8001c78 <ADC_Read+0x60>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d01f      	beq.n	8001c6c <ADC_Read+0x54>
	{
		adc_value_available = 0;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <ADC_Read+0x60>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]

		// Process ADC values (e.g., print or send to shell)

		int uartTxStringLength = snprintf((char*) h_shell->uartTxBuffer,
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f203 1085 	addw	r0, r3, #389	@ 0x185
				UART_TX_BUFFER_SIZE, "U_imes = %d ,V_imes = %d ,Bus_imes = %d \r\n",
				(int) adc_values[0],(int) adc_values[1],(int) adc_values[2]);
 8001c38:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <ADC_Read+0x64>)
 8001c3a:	881b      	ldrh	r3, [r3, #0]
		int uartTxStringLength = snprintf((char*) h_shell->uartTxBuffer,
 8001c3c:	4619      	mov	r1, r3
				(int) adc_values[0],(int) adc_values[1],(int) adc_values[2]);
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <ADC_Read+0x64>)
 8001c40:	885b      	ldrh	r3, [r3, #2]
		int uartTxStringLength = snprintf((char*) h_shell->uartTxBuffer,
 8001c42:	461a      	mov	r2, r3
				(int) adc_values[0],(int) adc_values[1],(int) adc_values[2]);
 8001c44:	4b0d      	ldr	r3, [pc, #52]	@ (8001c7c <ADC_Read+0x64>)
 8001c46:	889b      	ldrh	r3, [r3, #4]
		int uartTxStringLength = snprintf((char*) h_shell->uartTxBuffer,
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	9200      	str	r2, [sp, #0]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c80 <ADC_Read+0x68>)
 8001c50:	2180      	movs	r1, #128	@ 0x80
 8001c52:	f008 fc55 	bl	800a500 <sniprintf>
 8001c56:	6178      	str	r0, [r7, #20]
		HAL_UART_Transmit(&huart2, h_shell->uartTxBuffer, uartTxStringLength,
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f203 1185 	addw	r1, r3, #389	@ 0x185
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c66:	4807      	ldr	r0, [pc, #28]	@ (8001c84 <ADC_Read+0x6c>)
 8001c68:	f006 f947 	bl	8007efa <HAL_UART_Transmit>
				HAL_MAX_DELAY);


	}
	return 0;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000580 	.word	0x20000580
 8001c7c:	20000584 	.word	0x20000584
 8001c80:	0800b64c 	.word	0x0800b64c
 8001c84:	20000448 	.word	0x20000448

08001c88 <PWM_Set_Pulse>:
#include <stdlib.h>

PWM_HandleTypeDef pwm_handle;
uint32_t speed; // between 0-100 for motor speed. 0 is max speed in reverse, 50 is neutral and 100 is max speed in the other direction.
int PWM_Set_Pulse(uint32_t speed)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
	//on disable l'intteruption pour éviter la modification des variables global dans l'interrupt du timer 7
	__disable_irq();  // Disable interrupts
	pwm_handle.pulse1 = MAX_PULSE * speed / 100;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f242 1233 	movw	r2, #8499	@ 0x2133
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	4a13      	ldr	r2, [pc, #76]	@ (8001cec <PWM_Set_Pulse+0x64>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	095b      	lsrs	r3, r3, #5
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <PWM_Set_Pulse+0x68>)
 8001caa:	801a      	strh	r2, [r3, #0]
	pwm_handle.pulse2 = MAX_PULSE - pwm_handle.pulse1;
 8001cac:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <PWM_Set_Pulse+0x68>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 8001cb4:	3333      	adds	r3, #51	@ 0x33
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <PWM_Set_Pulse+0x68>)
 8001cba:	805a      	strh	r2, [r3, #2]
	pwm_handle.previous_pulse1 = htim1.Instance->CCR1;
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf4 <PWM_Set_Pulse+0x6c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <PWM_Set_Pulse+0x68>)
 8001cc6:	809a      	strh	r2, [r3, #4]
	pwm_handle.previous_pulse2 = htim1.Instance->CCR2;
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf4 <PWM_Set_Pulse+0x6c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <PWM_Set_Pulse+0x68>)
 8001cd2:	80da      	strh	r2, [r3, #6]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cd4:	b662      	cpsie	i
}
 8001cd6:	bf00      	nop
	__enable_irq();   // Enable interrupts

	pwm_handle.interrupt_counter = 0;
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <PWM_Set_Pulse+0x68>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	819a      	strh	r2, [r3, #12]
	return 0;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	51eb851f 	.word	0x51eb851f
 8001cf0:	2000058c 	.word	0x2000058c
 8001cf4:	20000318 	.word	0x20000318

08001cf8 <PWM_Speed_Control>:

int PWM_Speed_Control(h_shell_t *h_shell, char **argv, int argc)
{
 8001cf8:	b5b0      	push	{r4, r5, r7, lr}
 8001cfa:	b0a0      	sub	sp, #128	@ 0x80
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
	uint32_t new_speed = atoi(argv[1]);   //speed in expected in % of max speed
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	3304      	adds	r3, #4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f008 f9f0 	bl	800a0f0 <atoi>
 8001d10:	4603      	mov	r3, r0
 8001d12:	67fb      	str	r3, [r7, #124]	@ 0x7c

	if (argc != 2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d018      	beq.n	8001d4c <PWM_Speed_Control+0x54>
	{
		uint8_t error_message[] =
 8001d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e08 <PWM_Speed_Control+0x110>)
 8001d1c:	f107 0410 	add.w	r4, r7, #16
 8001d20:	461d      	mov	r5, r3
 8001d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d32:	6020      	str	r0, [r4, #0]
 8001d34:	3404      	adds	r4, #4
 8001d36:	7021      	strb	r1, [r4, #0]
				"Error : speed function expect exactly 1 parameter \r\n";
		HAL_UART_Transmit(&huart2, error_message, sizeof(error_message),
 8001d38:	f107 0110 	add.w	r1, r7, #16
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d40:	2235      	movs	r2, #53	@ 0x35
 8001d42:	4832      	ldr	r0, [pc, #200]	@ (8001e0c <PWM_Speed_Control+0x114>)
 8001d44:	f006 f8d9 	bl	8007efa <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		return 1;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e058      	b.n	8001dfe <PWM_Speed_Control+0x106>
	}

	else if (new_speed > 90 || new_speed < 10) //on vérifie qu'on met pas la vitesse ne soit pas au dessus de 95% de la max par sécurité
 8001d4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d4e:	2b5a      	cmp	r3, #90	@ 0x5a
 8001d50:	d802      	bhi.n	8001d58 <PWM_Speed_Control+0x60>
 8001d52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d54:	2b09      	cmp	r3, #9
 8001d56:	d815      	bhi.n	8001d84 <PWM_Speed_Control+0x8c>
	{
		uint8_t error_message[] =
 8001d58:	4b2d      	ldr	r3, [pc, #180]	@ (8001e10 <PWM_Speed_Control+0x118>)
 8001d5a:	f107 0410 	add.w	r4, r7, #16
 8001d5e:	461d      	mov	r5, r3
 8001d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d6c:	682b      	ldr	r3, [r5, #0]
 8001d6e:	6023      	str	r3, [r4, #0]
				"speed function must not exceed 90% of max value  \r\n";
		HAL_UART_Transmit(&huart2, error_message, sizeof(error_message),
 8001d70:	f107 0110 	add.w	r1, r7, #16
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d78:	2234      	movs	r2, #52	@ 0x34
 8001d7a:	4824      	ldr	r0, [pc, #144]	@ (8001e0c <PWM_Speed_Control+0x114>)
 8001d7c:	f006 f8bd 	bl	8007efa <HAL_UART_Transmit>
				HAL_MAX_DELAY);
		return 1;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e03c      	b.n	8001dfe <PWM_Speed_Control+0x106>

	}
	else if ((speed < 50 && new_speed > 50) || (speed > 50 && new_speed < 50))
 8001d84:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <PWM_Speed_Control+0x11c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b31      	cmp	r3, #49	@ 0x31
 8001d8a:	d802      	bhi.n	8001d92 <PWM_Speed_Control+0x9a>
 8001d8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d8e:	2b32      	cmp	r3, #50	@ 0x32
 8001d90:	d806      	bhi.n	8001da0 <PWM_Speed_Control+0xa8>
 8001d92:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <PWM_Speed_Control+0x11c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b32      	cmp	r3, #50	@ 0x32
 8001d98:	d914      	bls.n	8001dc4 <PWM_Speed_Control+0xcc>
 8001d9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d9c:	2b31      	cmp	r3, #49	@ 0x31
 8001d9e:	d811      	bhi.n	8001dc4 <PWM_Speed_Control+0xcc>
	{
		uint8_t error_message[] =
 8001da0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e18 <PWM_Speed_Control+0x120>)
 8001da2:	f107 0310 	add.w	r3, r7, #16
 8001da6:	4611      	mov	r1, r2
 8001da8:	2267      	movs	r2, #103	@ 0x67
 8001daa:	4618      	mov	r0, r3
 8001dac:	f008 fd07 	bl	800a7be <memcpy>
				"speed function must not change the direction of rotation, please go to neutral by entering 50 before\r\n";
		HAL_UART_Transmit(&huart2, error_message, sizeof(error_message),
 8001db0:	f107 0110 	add.w	r1, r7, #16
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001db8:	2267      	movs	r2, #103	@ 0x67
 8001dba:	4814      	ldr	r0, [pc, #80]	@ (8001e0c <PWM_Speed_Control+0x114>)
 8001dbc:	f006 f89d 	bl	8007efa <HAL_UART_Transmit>
				HAL_MAX_DELAY);
		return 1;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e01c      	b.n	8001dfe <PWM_Speed_Control+0x106>
	}
	speed = new_speed;
 8001dc4:	4a13      	ldr	r2, [pc, #76]	@ (8001e14 <PWM_Speed_Control+0x11c>)
 8001dc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001dc8:	6013      	str	r3, [r2, #0]
	PWM_Set_Pulse(speed);
 8001dca:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <PWM_Speed_Control+0x11c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff5a 	bl	8001c88 <PWM_Set_Pulse>
	int uartTxStringLength = snprintf((char*) h_shell->uartTxBuffer,
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f203 1085 	addw	r0, r3, #389	@ 0x185
 8001dda:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <PWM_Speed_Control+0x11c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a0f      	ldr	r2, [pc, #60]	@ (8001e1c <PWM_Speed_Control+0x124>)
 8001de0:	2180      	movs	r1, #128	@ 0x80
 8001de2:	f008 fb8d 	bl	800a500 <sniprintf>
 8001de6:	67b8      	str	r0, [r7, #120]	@ 0x78
			UART_TX_BUFFER_SIZE, "speed set to %lu of max value \r\n",
			(unsigned long) speed);
	HAL_UART_Transmit(&huart2, h_shell->uartTxBuffer, uartTxStringLength,
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f203 1185 	addw	r1, r3, #389	@ 0x185
 8001dee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001df6:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <PWM_Speed_Control+0x114>)
 8001df8:	f006 f87f 	bl	8007efa <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	return 0;
 8001dfc:	2300      	movs	r3, #0

}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3780      	adds	r7, #128	@ 0x80
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bdb0      	pop	{r4, r5, r7, pc}
 8001e06:	bf00      	nop
 8001e08:	0800b69c 	.word	0x0800b69c
 8001e0c:	20000448 	.word	0x20000448
 8001e10:	0800b6d4 	.word	0x0800b6d4
 8001e14:	2000059c 	.word	0x2000059c
 8001e18:	0800b708 	.word	0x0800b708
 8001e1c:	0800b678 	.word	0x0800b678

08001e20 <PWM_Start>:

int PWM_Start(h_shell_t *h_shell, char **argv, int argc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	481a      	ldr	r0, [pc, #104]	@ (8001e98 <PWM_Start+0x78>)
 8001e30:	f004 fa3a 	bl	80062a8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001e34:	2100      	movs	r1, #0
 8001e36:	4818      	ldr	r0, [pc, #96]	@ (8001e98 <PWM_Start+0x78>)
 8001e38:	f005 fd5a 	bl	80078f0 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	4816      	ldr	r0, [pc, #88]	@ (8001e98 <PWM_Start+0x78>)
 8001e40:	f004 fa32 	bl	80062a8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001e44:	2104      	movs	r1, #4
 8001e46:	4814      	ldr	r0, [pc, #80]	@ (8001e98 <PWM_Start+0x78>)
 8001e48:	f005 fd52 	bl	80078f0 <HAL_TIMEx_PWMN_Start>

	speed = 50; //speed à 50 % du max
 8001e4c:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <PWM_Start+0x7c>)
 8001e4e:	2232      	movs	r2, #50	@ 0x32
 8001e50:	601a      	str	r2, [r3, #0]
	pwm_handle.interrupt_counter = 0;
 8001e52:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <PWM_Start+0x80>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	819a      	strh	r2, [r3, #12]

	pwm_handle.previous_pulse1 = htim1.Instance->CCR1;
 8001e58:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <PWM_Start+0x78>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <PWM_Start+0x80>)
 8001e62:	809a      	strh	r2, [r3, #4]
	pwm_handle.previous_pulse2 = htim1.Instance->CCR2;
 8001e64:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <PWM_Start+0x78>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <PWM_Start+0x80>)
 8001e6e:	80da      	strh	r2, [r3, #6]
	pwm_handle.pulse1 = htim1.Instance->CCR1;
 8001e70:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <PWM_Start+0x78>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <PWM_Start+0x80>)
 8001e7a:	801a      	strh	r2, [r3, #0]
	pwm_handle.pulse2 = htim1.Instance->CCR2;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <PWM_Start+0x78>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <PWM_Start+0x80>)
 8001e86:	805a      	strh	r2, [r3, #2]

	HAL_TIM_Base_Start_IT(&htim7);
 8001e88:	4806      	ldr	r0, [pc, #24]	@ (8001ea4 <PWM_Start+0x84>)
 8001e8a:	f004 f933 	bl	80060f4 <HAL_TIM_Base_Start_IT>
	return 0;
 8001e8e:	2300      	movs	r3, #0

}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000318 	.word	0x20000318
 8001e9c:	2000059c 	.word	0x2000059c
 8001ea0:	2000058c 	.word	0x2000058c
 8001ea4:	200003b0 	.word	0x200003b0

08001ea8 <PWM_Stop>:

int PWM_Stop(h_shell_t *h_shell, char **argv, int argc)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	480b      	ldr	r0, [pc, #44]	@ (8001ee4 <PWM_Stop+0x3c>)
 8001eb8:	f004 fb08 	bl	80064cc <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4809      	ldr	r0, [pc, #36]	@ (8001ee4 <PWM_Stop+0x3c>)
 8001ec0:	f005 fdd8 	bl	8007a74 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001ec4:	2104      	movs	r1, #4
 8001ec6:	4807      	ldr	r0, [pc, #28]	@ (8001ee4 <PWM_Stop+0x3c>)
 8001ec8:	f004 fb00 	bl	80064cc <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001ecc:	2104      	movs	r1, #4
 8001ece:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <PWM_Stop+0x3c>)
 8001ed0:	f005 fdd0 	bl	8007a74 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_Base_Stop(&htim7);
 8001ed4:	4804      	ldr	r0, [pc, #16]	@ (8001ee8 <PWM_Stop+0x40>)
 8001ed6:	f004 f8e5 	bl	80060a4 <HAL_TIM_Base_Stop>
	return 0;
 8001eda:	2300      	movs	r3, #0

}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000318 	.word	0x20000318
 8001ee8:	200003b0 	.word	0x200003b0

08001eec <Shell_Add>:




int Shell_Add(h_shell_t *h_shell, char *name, shell_func_pointer_t pfunc, char *description)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
	if (h_shell->shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b1f      	cmp	r3, #31
 8001f00:	dc27      	bgt.n	8001f52 <Shell_Add+0x66>
	{
		h_shell->shell_func_list[h_shell->shell_func_list_size].name = name;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68f9      	ldr	r1, [r7, #12]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	3304      	adds	r3, #4
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	601a      	str	r2, [r3, #0]
		h_shell->shell_func_list[h_shell->shell_func_list_size].func = pfunc;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68f9      	ldr	r1, [r7, #12]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	3308      	adds	r3, #8
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	601a      	str	r2, [r3, #0]
		h_shell->shell_func_list[h_shell->shell_func_list_size].description = description;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68f9      	ldr	r1, [r7, #12]
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	330c      	adds	r3, #12
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	601a      	str	r2, [r3, #0]
		h_shell->shell_func_list_size++;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	601a      	str	r2, [r3, #0]
		return 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e001      	b.n	8001f56 <Shell_Add+0x6a>
	}
	return -1;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <Shell_Help>:

int Shell_Help(h_shell_t *h_shell,char **argv,int argc)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b089      	sub	sp, #36	@ 0x24
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
	int i;
	for (i = 0; i < h_shell->shell_func_list_size; i++)
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	e030      	b.n	8001fd8 <Shell_Help+0x74>
	{
		int size;
		memset(h_shell->uartTxBuffer, 0, UART_TX_BUFFER_SIZE);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f203 1385 	addw	r3, r3, #389	@ 0x185
 8001f7c:	2280      	movs	r2, #128	@ 0x80
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f008 fb34 	bl	800a5ee <memset>
		size = snprintf((char *)h_shell->uartTxBuffer, UART_TX_BUFFER_SIZE, "%s: %s\r\n",
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f203 1085 	addw	r0, r3, #389	@ 0x185
 8001f8c:	68f9      	ldr	r1, [r7, #12]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	681c      	ldr	r4, [r3, #0]
 8001f9e:	68f9      	ldr	r1, [r7, #12]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	330c      	adds	r3, #12
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	4623      	mov	r3, r4
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001fec <Shell_Help+0x88>)
 8001fb6:	2180      	movs	r1, #128	@ 0x80
 8001fb8:	f008 faa2 	bl	800a500 <sniprintf>
 8001fbc:	6138      	str	r0, [r7, #16]
		                h_shell->shell_func_list[i].name,
		                h_shell->shell_func_list[i].description);

		HAL_UART_Transmit(&huart2, h_shell->uartTxBuffer,size, HAL_MAX_DELAY);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f203 1185 	addw	r1, r3, #389	@ 0x185
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fcc:	4808      	ldr	r0, [pc, #32]	@ (8001ff0 <Shell_Help+0x8c>)
 8001fce:	f005 ff94 	bl	8007efa <HAL_UART_Transmit>
	for (i = 0; i < h_shell->shell_func_list_size; i++)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	dbc9      	blt.n	8001f76 <Shell_Help+0x12>

	}

	return 0;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	371c      	adds	r7, #28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd90      	pop	{r4, r7, pc}
 8001fec:	0800b770 	.word	0x0800b770
 8001ff0:	20000448 	.word	0x20000448

08001ff4 <Shell_Init>:


void Shell_Init( h_shell_t *h_shell)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	memset(argv, 0, MAX_ARGS*sizeof(char*));
 8001ffc:	2224      	movs	r2, #36	@ 0x24
 8001ffe:	2100      	movs	r1, #0
 8002000:	4835      	ldr	r0, [pc, #212]	@ (80020d8 <Shell_Init+0xe4>)
 8002002:	f008 faf4 	bl	800a5ee <memset>
	memset(h_shell->cmdBuffer, 0, CMD_BUFFER_SIZE*sizeof(char));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f203 2305 	addw	r3, r3, #517	@ 0x205
 800200c:	2240      	movs	r2, #64	@ 0x40
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f008 faec 	bl	800a5ee <memset>
	memset(h_shell->uartRxBuffer, 0, UART_RX_BUFFER_SIZE*sizeof(char));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800201c:	2201      	movs	r2, #1
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f008 fae4 	bl	800a5ee <memset>
	memset(h_shell->uartTxBuffer, 0, UART_TX_BUFFER_SIZE*sizeof(char));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f203 1385 	addw	r3, r3, #389	@ 0x185
 800202c:	2280      	movs	r2, #128	@ 0x80
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f008 fadc 	bl	800a5ee <memset>

	Shell_Add(h_shell, "help", Shell_Help, "Display help for known functions of the shell");
 8002036:	4b29      	ldr	r3, [pc, #164]	@ (80020dc <Shell_Init+0xe8>)
 8002038:	4a29      	ldr	r2, [pc, #164]	@ (80020e0 <Shell_Init+0xec>)
 800203a:	492a      	ldr	r1, [pc, #168]	@ (80020e4 <Shell_Init+0xf0>)
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff55 	bl	8001eec <Shell_Add>
	Shell_Add(h_shell, "PWM_speed_control", PWM_Speed_Control, "Set the speed of the motor in %. 0 being Full reverse speed, 50 neutral and 100 full forward speed");
 8002042:	4b29      	ldr	r3, [pc, #164]	@ (80020e8 <Shell_Init+0xf4>)
 8002044:	4a29      	ldr	r2, [pc, #164]	@ (80020ec <Shell_Init+0xf8>)
 8002046:	492a      	ldr	r1, [pc, #168]	@ (80020f0 <Shell_Init+0xfc>)
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ff4f 	bl	8001eec <Shell_Add>
	Shell_Add(h_shell, "PWM_Start", PWM_Start, "Start PWM generation output to control motor speed");
 800204e:	4b29      	ldr	r3, [pc, #164]	@ (80020f4 <Shell_Init+0x100>)
 8002050:	4a29      	ldr	r2, [pc, #164]	@ (80020f8 <Shell_Init+0x104>)
 8002052:	492a      	ldr	r1, [pc, #168]	@ (80020fc <Shell_Init+0x108>)
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff49 	bl	8001eec <Shell_Add>
	Shell_Add(h_shell, "PWM_Stop", PWM_Stop, "Stop PWM generation output to disable motor");
 800205a:	4b29      	ldr	r3, [pc, #164]	@ (8002100 <Shell_Init+0x10c>)
 800205c:	4a29      	ldr	r2, [pc, #164]	@ (8002104 <Shell_Init+0x110>)
 800205e:	492a      	ldr	r1, [pc, #168]	@ (8002108 <Shell_Init+0x114>)
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff43 	bl	8001eec <Shell_Add>
	Shell_Add(h_shell, "ADC_Read", ADC_Read, "Display ADC_values concerning motor currents.");
 8002066:	4b29      	ldr	r3, [pc, #164]	@ (800210c <Shell_Init+0x118>)
 8002068:	4a29      	ldr	r2, [pc, #164]	@ (8002110 <Shell_Init+0x11c>)
 800206a:	492a      	ldr	r1, [pc, #168]	@ (8002114 <Shell_Init+0x120>)
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff3d 	bl	8001eec <Shell_Add>
	Shell_Add(h_shell, "ENCODER_start", ENCODER_start, "Start the encoder to calculate pulses per second");
 8002072:	4b29      	ldr	r3, [pc, #164]	@ (8002118 <Shell_Init+0x124>)
 8002074:	4a29      	ldr	r2, [pc, #164]	@ (800211c <Shell_Init+0x128>)
 8002076:	492a      	ldr	r1, [pc, #168]	@ (8002120 <Shell_Init+0x12c>)
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ff37 	bl	8001eec <Shell_Add>
	Shell_Add(h_shell, "ENCODER_print_speed", ENCODER_print_speed, "Display the pulses per minute of the motor encoder.");
 800207e:	4b29      	ldr	r3, [pc, #164]	@ (8002124 <Shell_Init+0x130>)
 8002080:	4a29      	ldr	r2, [pc, #164]	@ (8002128 <Shell_Init+0x134>)
 8002082:	492a      	ldr	r1, [pc, #168]	@ (800212c <Shell_Init+0x138>)
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ff31 	bl	8001eec <Shell_Add>

	h_shell->idx_cmd = 0;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f8c3 2248 	str.w	r2, [r3, #584]	@ 0x248


	HAL_UART_Receive_IT(&huart2, h_shell->uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8002098:	2201      	movs	r2, #1
 800209a:	4619      	mov	r1, r3
 800209c:	4824      	ldr	r0, [pc, #144]	@ (8002130 <Shell_Init+0x13c>)
 800209e:	f005 ffbb 	bl	8008018 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 80020a2:	4824      	ldr	r0, [pc, #144]	@ (8002134 <Shell_Init+0x140>)
 80020a4:	f7fe f8c6 	bl	8000234 <strlen>
 80020a8:	4603      	mov	r3, r0
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020b0:	4920      	ldr	r1, [pc, #128]	@ (8002134 <Shell_Init+0x140>)
 80020b2:	481f      	ldr	r0, [pc, #124]	@ (8002130 <Shell_Init+0x13c>)
 80020b4:	f005 ff21 	bl	8007efa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80020b8:	481f      	ldr	r0, [pc, #124]	@ (8002138 <Shell_Init+0x144>)
 80020ba:	f7fe f8bb 	bl	8000234 <strlen>
 80020be:	4603      	mov	r3, r0
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020c6:	491c      	ldr	r1, [pc, #112]	@ (8002138 <Shell_Init+0x144>)
 80020c8:	4819      	ldr	r0, [pc, #100]	@ (8002130 <Shell_Init+0x13c>)
 80020ca:	f005 ff16 	bl	8007efa <HAL_UART_Transmit>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200007ec 	.word	0x200007ec
 80020dc:	0800b77c 	.word	0x0800b77c
 80020e0:	08001f65 	.word	0x08001f65
 80020e4:	0800b7ac 	.word	0x0800b7ac
 80020e8:	0800b7b4 	.word	0x0800b7b4
 80020ec:	08001cf9 	.word	0x08001cf9
 80020f0:	0800b818 	.word	0x0800b818
 80020f4:	0800b82c 	.word	0x0800b82c
 80020f8:	08001e21 	.word	0x08001e21
 80020fc:	0800b860 	.word	0x0800b860
 8002100:	0800b86c 	.word	0x0800b86c
 8002104:	08001ea9 	.word	0x08001ea9
 8002108:	0800b898 	.word	0x0800b898
 800210c:	0800b8a4 	.word	0x0800b8a4
 8002110:	08001c19 	.word	0x08001c19
 8002114:	0800b8d4 	.word	0x0800b8d4
 8002118:	0800b8e0 	.word	0x0800b8e0
 800211c:	08001b2d 	.word	0x08001b2d
 8002120:	0800b914 	.word	0x0800b914
 8002124:	0800b924 	.word	0x0800b924
 8002128:	08001a7d 	.word	0x08001a7d
 800212c:	0800b958 	.word	0x0800b958
 8002130:	20000448 	.word	0x20000448
 8002134:	20000028 	.word	0x20000028
 8002138:	20000004 	.word	0x20000004

0800213c <Shell_Exec>:

static int Shell_Exec(h_shell_t *h_shell,char **argv,int argc)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
	// Lookup and execute the command
	char *user_func = argv[0]; // First token is the command
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < h_shell->shell_func_list_size; i++)
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	e034      	b.n	80021be <Shell_Exec+0x82>
	{
		if (strcmp(h_shell->shell_func_list[i].name, user_func) == 0)
 8002154:	68f9      	ldr	r1, [r7, #12]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3304      	adds	r3, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6979      	ldr	r1, [r7, #20]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f859 	bl	8000220 <strcmp>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d121      	bne.n	80021b8 <Shell_Exec+0x7c>
		{
			// Execute the command
			int result = h_shell->shell_func_list[i].func(h_shell,argv,argc );
 8002174:	68f9      	ldr	r1, [r7, #12]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	3308      	adds	r3, #8
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	4798      	blx	r3
 800218e:	6138      	str	r0, [r7, #16]

			// Clean up dynamically allocated memory
			for (int j = 0; j < argc; j++)
 8002190:	2300      	movs	r3, #0
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	e00a      	b.n	80021ac <Shell_Exec+0x70>
			{
				free(argv[j]);
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	4413      	add	r3, r2
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f007 ffb1 	bl	800a108 <free>
			for (int j = 0; j < argc; j++)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	3301      	adds	r3, #1
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	dbf0      	blt.n	8002196 <Shell_Exec+0x5a>
			}
			return result;
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	e01a      	b.n	80021ee <Shell_Exec+0xb2>
	for (int i = 0; i < h_shell->shell_func_list_size; i++)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	3301      	adds	r3, #1
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dbc5      	blt.n	8002154 <Shell_Exec+0x18>

		}
	}
	HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021cc:	2214      	movs	r2, #20
 80021ce:	490a      	ldr	r1, [pc, #40]	@ (80021f8 <Shell_Exec+0xbc>)
 80021d0:	480a      	ldr	r0, [pc, #40]	@ (80021fc <Shell_Exec+0xc0>)
 80021d2:	f005 fe92 	bl	8007efa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80021d6:	480a      	ldr	r0, [pc, #40]	@ (8002200 <Shell_Exec+0xc4>)
 80021d8:	f7fe f82c 	bl	8000234 <strlen>
 80021dc:	4603      	mov	r3, r0
 80021de:	b29a      	uxth	r2, r3
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021e4:	4906      	ldr	r1, [pc, #24]	@ (8002200 <Shell_Exec+0xc4>)
 80021e6:	4805      	ldr	r0, [pc, #20]	@ (80021fc <Shell_Exec+0xc0>)
 80021e8:	f005 fe87 	bl	8007efa <HAL_UART_Transmit>

	return 1;
 80021ec:	2301      	movs	r3, #1
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000098 	.word	0x20000098
 80021fc:	20000448 	.word	0x20000448
 8002200:	20000004 	.word	0x20000004

08002204 <Shell_Loop>:

void Shell_Loop(h_shell_t *h_shell){
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	if(h_shell->uartRxReceived){
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3245 	ldrb.w	r3, [r3, #581]	@ 0x245
 8002212:	2b00      	cmp	r3, #0
 8002214:	d070      	beq.n	80022f8 <Shell_Loop+0xf4>
		switch(h_shell->uartRxBuffer[0]){
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 800221c:	2b08      	cmp	r3, #8
 800221e:	d03b      	beq.n	8002298 <Shell_Loop+0x94>
 8002220:	2b0d      	cmp	r3, #13
 8002222:	d14d      	bne.n	80022c0 <Shell_Loop+0xbc>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8002224:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002228:	2203      	movs	r2, #3
 800222a:	4945      	ldr	r1, [pc, #276]	@ (8002340 <Shell_Loop+0x13c>)
 800222c:	4845      	ldr	r0, [pc, #276]	@ (8002344 <Shell_Loop+0x140>)
 800222e:	f005 fe64 	bl	8007efa <HAL_UART_Transmit>
			h_shell->cmdBuffer[h_shell->idx_cmd] = '\0';
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
			argc = 0;
 8002242:	4b41      	ldr	r3, [pc, #260]	@ (8002348 <Shell_Loop+0x144>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
			token = strtok(h_shell->cmdBuffer, " ");
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f203 2305 	addw	r3, r3, #517	@ 0x205
 800224e:	493f      	ldr	r1, [pc, #252]	@ (800234c <Shell_Loop+0x148>)
 8002250:	4618      	mov	r0, r3
 8002252:	f008 f9d5 	bl	800a600 <strtok>
 8002256:	4603      	mov	r3, r0
 8002258:	4a3d      	ldr	r2, [pc, #244]	@ (8002350 <Shell_Loop+0x14c>)
 800225a:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800225c:	e010      	b.n	8002280 <Shell_Loop+0x7c>
				argv[argc++] = token;
 800225e:	4b3a      	ldr	r3, [pc, #232]	@ (8002348 <Shell_Loop+0x144>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	4938      	ldr	r1, [pc, #224]	@ (8002348 <Shell_Loop+0x144>)
 8002266:	600a      	str	r2, [r1, #0]
 8002268:	4a39      	ldr	r2, [pc, #228]	@ (8002350 <Shell_Loop+0x14c>)
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	4939      	ldr	r1, [pc, #228]	@ (8002354 <Shell_Loop+0x150>)
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8002272:	4936      	ldr	r1, [pc, #216]	@ (800234c <Shell_Loop+0x148>)
 8002274:	2000      	movs	r0, #0
 8002276:	f008 f9c3 	bl	800a600 <strtok>
 800227a:	4603      	mov	r3, r0
 800227c:	4a34      	ldr	r2, [pc, #208]	@ (8002350 <Shell_Loop+0x14c>)
 800227e:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8002280:	4b33      	ldr	r3, [pc, #204]	@ (8002350 <Shell_Loop+0x14c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ea      	bne.n	800225e <Shell_Loop+0x5a>
			}
			h_shell->idx_cmd = 0;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f8c3 2248 	str.w	r2, [r3, #584]	@ 0x248
			newCmdReady = 1;
 8002290:	4b31      	ldr	r3, [pc, #196]	@ (8002358 <Shell_Loop+0x154>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]
			break;
 8002296:	e02b      	b.n	80022f0 <Shell_Loop+0xec>
		case ASCII_BACK: // Suppression du dernier caractère
			h_shell->cmdBuffer[h_shell->idx_cmd--] = '\0';
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 800229e:	1e59      	subs	r1, r3, #1
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	f8c2 1248 	str.w	r1, [r2, #584]	@ 0x248
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80022b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022b4:	2204      	movs	r2, #4
 80022b6:	4929      	ldr	r1, [pc, #164]	@ (800235c <Shell_Loop+0x158>)
 80022b8:	4822      	ldr	r0, [pc, #136]	@ (8002344 <Shell_Loop+0x140>)
 80022ba:	f005 fe1e 	bl	8007efa <HAL_UART_Transmit>
			break;
 80022be:	e017      	b.n	80022f0 <Shell_Loop+0xec>

		default: // Nouveau caractère
			h_shell->cmdBuffer[h_shell->idx_cmd++] = h_shell->uartRxBuffer[0];
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 80022c6:	1c59      	adds	r1, r3, #1
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	f8c2 1248 	str.w	r1, [r2, #584]	@ 0x248
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	f892 1184 	ldrb.w	r1, [r2, #388]	@ 0x184
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4413      	add	r3, r2
 80022d8:	460a      	mov	r2, r1
 80022da:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
			HAL_UART_Transmit(&huart2, h_shell->uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f503 71c2 	add.w	r1, r3, #388	@ 0x184
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022e8:	2201      	movs	r2, #1
 80022ea:	4816      	ldr	r0, [pc, #88]	@ (8002344 <Shell_Loop+0x140>)
 80022ec:	f005 fe05 	bl	8007efa <HAL_UART_Transmit>
		}
		h_shell->uartRxReceived = 0;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2245 	strb.w	r2, [r3, #581]	@ 0x245
	}

	if(newCmdReady){
 80022f8:	4b17      	ldr	r3, [pc, #92]	@ (8002358 <Shell_Loop+0x154>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d01b      	beq.n	8002338 <Shell_Loop+0x134>

		Shell_Exec(h_shell, argv,argc);
 8002300:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <Shell_Loop+0x144>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	4913      	ldr	r1, [pc, #76]	@ (8002354 <Shell_Loop+0x150>)
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff17 	bl	800213c <Shell_Exec>
		newCmdReady = 0;
 800230e:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <Shell_Loop+0x154>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 8002314:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002318:	2202      	movs	r2, #2
 800231a:	4911      	ldr	r1, [pc, #68]	@ (8002360 <Shell_Loop+0x15c>)
 800231c:	4809      	ldr	r0, [pc, #36]	@ (8002344 <Shell_Loop+0x140>)
 800231e:	f005 fdec 	bl	8007efa <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8002322:	4810      	ldr	r0, [pc, #64]	@ (8002364 <Shell_Loop+0x160>)
 8002324:	f7fd ff86 	bl	8000234 <strlen>
 8002328:	4603      	mov	r3, r0
 800232a:	b29a      	uxth	r2, r3
 800232c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002330:	490c      	ldr	r1, [pc, #48]	@ (8002364 <Shell_Loop+0x160>)
 8002332:	4804      	ldr	r0, [pc, #16]	@ (8002344 <Shell_Loop+0x140>)
 8002334:	f005 fde1 	bl	8007efa <HAL_UART_Transmit>
	}
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000090 	.word	0x20000090
 8002344:	20000448 	.word	0x20000448
 8002348:	20000810 	.word	0x20000810
 800234c:	0800b96c 	.word	0x0800b96c
 8002350:	20000814 	.word	0x20000814
 8002354:	200007ec 	.word	0x200007ec
 8002358:	20000818 	.word	0x20000818
 800235c:	20000094 	.word	0x20000094
 8002360:	0800b970 	.word	0x0800b970
 8002364:	20000004 	.word	0x20000004

08002368 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	h_shell.uartRxReceived = 1;
 8002370:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_UART_RxCpltCallback+0x24>)
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2245 	strb.w	r2, [r3, #581]	@ 0x245
	HAL_UART_Receive_IT(&huart2, h_shell.uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002378:	2201      	movs	r2, #1
 800237a:	4905      	ldr	r1, [pc, #20]	@ (8002390 <HAL_UART_RxCpltCallback+0x28>)
 800237c:	4805      	ldr	r0, [pc, #20]	@ (8002394 <HAL_UART_RxCpltCallback+0x2c>)
 800237e:	f005 fe4b 	bl	8008018 <HAL_UART_Receive_IT>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200005a0 	.word	0x200005a0
 8002390:	20000724 	.word	0x20000724
 8002394:	20000448 	.word	0x20000448

08002398 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002398:	480d      	ldr	r0, [pc, #52]	@ (80023d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800239a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800239c:	480d      	ldr	r0, [pc, #52]	@ (80023d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800239e:	490e      	ldr	r1, [pc, #56]	@ (80023d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023a0:	4a0e      	ldr	r2, [pc, #56]	@ (80023dc <LoopForever+0xe>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023a4:	e002      	b.n	80023ac <LoopCopyDataInit>

080023a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023aa:	3304      	adds	r3, #4

080023ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b0:	d3f9      	bcc.n	80023a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b2:	4a0b      	ldr	r2, [pc, #44]	@ (80023e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023b4:	4c0b      	ldr	r4, [pc, #44]	@ (80023e4 <LoopForever+0x16>)
  movs r3, #0
 80023b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b8:	e001      	b.n	80023be <LoopFillZerobss>

080023ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023bc:	3204      	adds	r2, #4

080023be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c0:	d3fb      	bcc.n	80023ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023c2:	f7fe ff0d 	bl	80011e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023c6:	f008 f9d3 	bl	800a770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ca:	f7fe fc37 	bl	8000c3c <main>

080023ce <LoopForever>:

LoopForever:
    b LoopForever
 80023ce:	e7fe      	b.n	80023ce <LoopForever>
  ldr   r0, =_estack
 80023d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d8:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80023dc:	0800bba8 	.word	0x0800bba8
  ldr r2, =_sbss
 80023e0:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80023e4:	2000096c 	.word	0x2000096c

080023e8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023e8:	e7fe      	b.n	80023e8 <ADC3_IRQHandler>

080023ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f4:	2003      	movs	r0, #3
 80023f6:	f002 f808 	bl	800440a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023fa:	200f      	movs	r0, #15
 80023fc:	f7fe fd24 	bl	8000e48 <HAL_InitTick>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	71fb      	strb	r3, [r7, #7]
 800240a:	e001      	b.n	8002410 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800240c:	f7fe fcf8 	bl	8000e00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002410:	79fb      	ldrb	r3, [r7, #7]

}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002420:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_IncTick+0x1c>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b05      	ldr	r3, [pc, #20]	@ (800243c <HAL_IncTick+0x20>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4413      	add	r3, r2
 800242a:	4a03      	ldr	r2, [pc, #12]	@ (8002438 <HAL_IncTick+0x1c>)
 800242c:	6013      	str	r3, [r2, #0]
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	2000081c 	.word	0x2000081c
 800243c:	200000b0 	.word	0x200000b0

08002440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return uwTick;
 8002444:	4b03      	ldr	r3, [pc, #12]	@ (8002454 <HAL_GetTick+0x14>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	2000081c 	.word	0x2000081c

08002458 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	609a      	str	r2, [r3, #8]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	609a      	str	r2, [r3, #8]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3360      	adds	r3, #96	@ 0x60
 80024d2:	461a      	mov	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b08      	ldr	r3, [pc, #32]	@ (8002504 <LL_ADC_SetOffset+0x44>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024f8:	bf00      	nop
 80024fa:	371c      	adds	r7, #28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	03fff000 	.word	0x03fff000

08002508 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3360      	adds	r3, #96	@ 0x60
 8002516:	461a      	mov	r2, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3360      	adds	r3, #96	@ 0x60
 8002544:	461a      	mov	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	431a      	orrs	r2, r3
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800255e:	bf00      	nop
 8002560:	371c      	adds	r7, #28
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800256a:	b480      	push	{r7}
 800256c:	b087      	sub	sp, #28
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3360      	adds	r3, #96	@ 0x60
 800257a:	461a      	mov	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	431a      	orrs	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002594:	bf00      	nop
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3360      	adds	r3, #96	@ 0x60
 80025b0:	461a      	mov	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80025ca:	bf00      	nop
 80025cc:	371c      	adds	r7, #28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	615a      	str	r2, [r3, #20]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002622:	b480      	push	{r7}
 8002624:	b087      	sub	sp, #28
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3330      	adds	r3, #48	@ 0x30
 8002632:	461a      	mov	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	4413      	add	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	211f      	movs	r1, #31
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	401a      	ands	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	0e9b      	lsrs	r3, r3, #26
 800265a:	f003 011f 	and.w	r1, r3, #31
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	431a      	orrs	r2, r3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800266e:	bf00      	nop
 8002670:	371c      	adds	r7, #28
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002686:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	3314      	adds	r3, #20
 80026b0:	461a      	mov	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	0e5b      	lsrs	r3, r3, #25
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	4413      	add	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	0d1b      	lsrs	r3, r3, #20
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	2107      	movs	r1, #7
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	401a      	ands	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	0d1b      	lsrs	r3, r3, #20
 80026da:	f003 031f 	and.w	r3, r3, #31
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	fa01 f303 	lsl.w	r3, r1, r3
 80026e4:	431a      	orrs	r2, r3
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026ea:	bf00      	nop
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002710:	43db      	mvns	r3, r3
 8002712:	401a      	ands	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f003 0318 	and.w	r3, r3, #24
 800271a:	4908      	ldr	r1, [pc, #32]	@ (800273c <LL_ADC_SetChannelSingleDiff+0x44>)
 800271c:	40d9      	lsrs	r1, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	400b      	ands	r3, r1
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	431a      	orrs	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800272e:	bf00      	nop
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	0007ffff 	.word	0x0007ffff

08002740 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 031f 	and.w	r3, r3, #31
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002788:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6093      	str	r3, [r2, #8]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027b0:	d101      	bne.n	80027b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80027d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027d8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002800:	d101      	bne.n	8002806 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002824:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002828:	f043 0201 	orr.w	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800284c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002850:	f043 0202 	orr.w	r2, r3, #2
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <LL_ADC_IsEnabled+0x18>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <LL_ADC_IsEnabled+0x1a>
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b02      	cmp	r3, #2
 800289c:	d101      	bne.n	80028a2 <LL_ADC_IsDisableOngoing+0x18>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <LL_ADC_IsDisableOngoing+0x1a>
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028c4:	f043 0204 	orr.w	r2, r3, #4
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d101      	bne.n	80028f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b08      	cmp	r3, #8
 8002910:	d101      	bne.n	8002916 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002924:	b590      	push	{r4, r7, lr}
 8002926:	b089      	sub	sp, #36	@ 0x24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e1a9      	b.n	8002c92 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7fd ff49 	bl	80007e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff19 	bl	800279c <LL_ADC_IsDeepPowerDownEnabled>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d004      	beq.n	800297a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff feff 	bl	8002778 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff ff34 	bl	80027ec <LL_ADC_IsInternalRegulatorEnabled>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d115      	bne.n	80029b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff ff18 	bl	80027c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002994:	4b9c      	ldr	r3, [pc, #624]	@ (8002c08 <HAL_ADC_Init+0x2e4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	099b      	lsrs	r3, r3, #6
 800299a:	4a9c      	ldr	r2, [pc, #624]	@ (8002c0c <HAL_ADC_Init+0x2e8>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	099b      	lsrs	r3, r3, #6
 80029a2:	3301      	adds	r3, #1
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029a8:	e002      	b.n	80029b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f9      	bne.n	80029aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff16 	bl	80027ec <LL_ADC_IsInternalRegulatorEnabled>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10d      	bne.n	80029e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ca:	f043 0210 	orr.w	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ff76 	bl	80028d8 <LL_ADC_REG_IsConversionOngoing>
 80029ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f040 8142 	bne.w	8002c80 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 813e 	bne.w	8002c80 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a08:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a0c:	f043 0202 	orr.w	r2, r3, #2
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff23 	bl	8002864 <LL_ADC_IsEnabled>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d141      	bne.n	8002aa8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a2c:	d004      	beq.n	8002a38 <HAL_ADC_Init+0x114>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a77      	ldr	r2, [pc, #476]	@ (8002c10 <HAL_ADC_Init+0x2ec>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d10f      	bne.n	8002a58 <HAL_ADC_Init+0x134>
 8002a38:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a3c:	f7ff ff12 	bl	8002864 <LL_ADC_IsEnabled>
 8002a40:	4604      	mov	r4, r0
 8002a42:	4873      	ldr	r0, [pc, #460]	@ (8002c10 <HAL_ADC_Init+0x2ec>)
 8002a44:	f7ff ff0e 	bl	8002864 <LL_ADC_IsEnabled>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4323      	orrs	r3, r4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf0c      	ite	eq
 8002a50:	2301      	moveq	r3, #1
 8002a52:	2300      	movne	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e012      	b.n	8002a7e <HAL_ADC_Init+0x15a>
 8002a58:	486e      	ldr	r0, [pc, #440]	@ (8002c14 <HAL_ADC_Init+0x2f0>)
 8002a5a:	f7ff ff03 	bl	8002864 <LL_ADC_IsEnabled>
 8002a5e:	4604      	mov	r4, r0
 8002a60:	486d      	ldr	r0, [pc, #436]	@ (8002c18 <HAL_ADC_Init+0x2f4>)
 8002a62:	f7ff feff 	bl	8002864 <LL_ADC_IsEnabled>
 8002a66:	4603      	mov	r3, r0
 8002a68:	431c      	orrs	r4, r3
 8002a6a:	486c      	ldr	r0, [pc, #432]	@ (8002c1c <HAL_ADC_Init+0x2f8>)
 8002a6c:	f7ff fefa 	bl	8002864 <LL_ADC_IsEnabled>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4323      	orrs	r3, r4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d012      	beq.n	8002aa8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a8a:	d004      	beq.n	8002a96 <HAL_ADC_Init+0x172>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a5f      	ldr	r2, [pc, #380]	@ (8002c10 <HAL_ADC_Init+0x2ec>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_ADC_Init+0x176>
 8002a96:	4a62      	ldr	r2, [pc, #392]	@ (8002c20 <HAL_ADC_Init+0x2fc>)
 8002a98:	e000      	b.n	8002a9c <HAL_ADC_Init+0x178>
 8002a9a:	4a62      	ldr	r2, [pc, #392]	@ (8002c24 <HAL_ADC_Init+0x300>)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	f7ff fcd8 	bl	8002458 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	7f5b      	ldrb	r3, [r3, #29]
 8002aac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ab2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ab8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002abe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ac6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d106      	bne.n	8002ae4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ada:	3b01      	subs	r3, #1
 8002adc:	045b      	lsls	r3, r3, #17
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d009      	beq.n	8002b00 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	4b48      	ldr	r3, [pc, #288]	@ (8002c28 <HAL_ADC_Init+0x304>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	69b9      	ldr	r1, [r7, #24]
 8002b10:	430b      	orrs	r3, r1
 8002b12:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fee5 	bl	80028fe <LL_ADC_INJ_IsConversionOngoing>
 8002b34:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d17f      	bne.n	8002c3c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d17c      	bne.n	8002c3c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b46:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b4e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b5e:	f023 0302 	bic.w	r3, r3, #2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	69b9      	ldr	r1, [r7, #24]
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d017      	beq.n	8002ba4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002b82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002b8c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6911      	ldr	r1, [r2, #16]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002ba2:	e013      	b.n	8002bcc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002bb2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002bc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bc8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d12a      	bne.n	8002c2c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002be0:	f023 0304 	bic.w	r3, r3, #4
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bec:	4311      	orrs	r1, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002bf2:	4311      	orrs	r1, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	611a      	str	r2, [r3, #16]
 8002c06:	e019      	b.n	8002c3c <HAL_ADC_Init+0x318>
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	053e2d63 	.word	0x053e2d63
 8002c10:	50000100 	.word	0x50000100
 8002c14:	50000400 	.word	0x50000400
 8002c18:	50000500 	.word	0x50000500
 8002c1c:	50000600 	.word	0x50000600
 8002c20:	50000300 	.word	0x50000300
 8002c24:	50000700 	.word	0x50000700
 8002c28:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d10c      	bne.n	8002c5e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	f023 010f 	bic.w	r1, r3, #15
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	1e5a      	subs	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c5c:	e007      	b.n	8002c6e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 020f 	bic.w	r2, r2, #15
 8002c6c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c72:	f023 0303 	bic.w	r3, r3, #3
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c7e:	e007      	b.n	8002c90 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c84:	f043 0210 	orr.w	r2, r3, #16
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c90:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3724      	adds	r7, #36	@ 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd90      	pop	{r4, r7, pc}
 8002c9a:	bf00      	nop

08002c9c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cb0:	d004      	beq.n	8002cbc <HAL_ADC_Start_DMA+0x20>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a5a      	ldr	r2, [pc, #360]	@ (8002e20 <HAL_ADC_Start_DMA+0x184>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_Start_DMA+0x24>
 8002cbc:	4b59      	ldr	r3, [pc, #356]	@ (8002e24 <HAL_ADC_Start_DMA+0x188>)
 8002cbe:	e000      	b.n	8002cc2 <HAL_ADC_Start_DMA+0x26>
 8002cc0:	4b59      	ldr	r3, [pc, #356]	@ (8002e28 <HAL_ADC_Start_DMA+0x18c>)
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fd3c 	bl	8002740 <LL_ADC_GetMultimode>
 8002cc8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fe02 	bl	80028d8 <LL_ADC_REG_IsConversionOngoing>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f040 809b 	bne.w	8002e12 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_Start_DMA+0x4e>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e096      	b.n	8002e18 <HAL_ADC_Start_DMA+0x17c>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a4d      	ldr	r2, [pc, #308]	@ (8002e2c <HAL_ADC_Start_DMA+0x190>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d008      	beq.n	8002d0e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d002      	beq.n	8002d0e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	2b09      	cmp	r3, #9
 8002d0c:	d17a      	bne.n	8002e04 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 ff56 	bl	8003bc0 <ADC_Enable>
 8002d14:	4603      	mov	r3, r0
 8002d16:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002d18:	7dfb      	ldrb	r3, [r7, #23]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d16d      	bne.n	8002dfa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d26:	f023 0301 	bic.w	r3, r3, #1
 8002d2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a3a      	ldr	r2, [pc, #232]	@ (8002e20 <HAL_ADC_Start_DMA+0x184>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d009      	beq.n	8002d50 <HAL_ADC_Start_DMA+0xb4>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a3b      	ldr	r2, [pc, #236]	@ (8002e30 <HAL_ADC_Start_DMA+0x194>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d002      	beq.n	8002d4c <HAL_ADC_Start_DMA+0xb0>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	e003      	b.n	8002d54 <HAL_ADC_Start_DMA+0xb8>
 8002d4c:	4b39      	ldr	r3, [pc, #228]	@ (8002e34 <HAL_ADC_Start_DMA+0x198>)
 8002d4e:	e001      	b.n	8002d54 <HAL_ADC_Start_DMA+0xb8>
 8002d50:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d002      	beq.n	8002d62 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d105      	bne.n	8002d6e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d66:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d006      	beq.n	8002d88 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d7e:	f023 0206 	bic.w	r2, r3, #6
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d86:	e002      	b.n	8002d8e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d92:	4a29      	ldr	r2, [pc, #164]	@ (8002e38 <HAL_ADC_Start_DMA+0x19c>)
 8002d94:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9a:	4a28      	ldr	r2, [pc, #160]	@ (8002e3c <HAL_ADC_Start_DMA+0x1a0>)
 8002d9c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da2:	4a27      	ldr	r2, [pc, #156]	@ (8002e40 <HAL_ADC_Start_DMA+0x1a4>)
 8002da4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	221c      	movs	r2, #28
 8002dac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0210 	orr.w	r2, r2, #16
 8002dc4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3340      	adds	r3, #64	@ 0x40
 8002de0:	4619      	mov	r1, r3
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f001 fbeb 	bl	80045c0 <HAL_DMA_Start_IT>
 8002dea:	4603      	mov	r3, r0
 8002dec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fd5c 	bl	80028b0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002df8:	e00d      	b.n	8002e16 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002e02:	e008      	b.n	8002e16 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002e10:	e001      	b.n	8002e16 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
 8002e14:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	50000100 	.word	0x50000100
 8002e24:	50000300 	.word	0x50000300
 8002e28:	50000700 	.word	0x50000700
 8002e2c:	50000600 	.word	0x50000600
 8002e30:	50000500 	.word	0x50000500
 8002e34:	50000400 	.word	0x50000400
 8002e38:	08003dab 	.word	0x08003dab
 8002e3c:	08003e83 	.word	0x08003e83
 8002e40:	08003e9f 	.word	0x08003e9f

08002e44 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	@ 0x28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e68:	d004      	beq.n	8002e74 <HAL_ADC_IRQHandler+0x30>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a8e      	ldr	r2, [pc, #568]	@ (80030a8 <HAL_ADC_IRQHandler+0x264>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d101      	bne.n	8002e78 <HAL_ADC_IRQHandler+0x34>
 8002e74:	4b8d      	ldr	r3, [pc, #564]	@ (80030ac <HAL_ADC_IRQHandler+0x268>)
 8002e76:	e000      	b.n	8002e7a <HAL_ADC_IRQHandler+0x36>
 8002e78:	4b8d      	ldr	r3, [pc, #564]	@ (80030b0 <HAL_ADC_IRQHandler+0x26c>)
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fc60 	bl	8002740 <LL_ADC_GetMultimode>
 8002e80:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d017      	beq.n	8002ebc <HAL_ADC_IRQHandler+0x78>
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d012      	beq.n	8002ebc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d105      	bne.n	8002eae <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f001 f8ec 	bl	800408c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d004      	beq.n	8002ed0 <HAL_ADC_IRQHandler+0x8c>
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10b      	bne.n	8002ee8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 8094 	beq.w	8003004 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 808e 	beq.w	8003004 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d105      	bne.n	8002f00 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fb79 	bl	80025fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d072      	beq.n	8002ff6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a64      	ldr	r2, [pc, #400]	@ (80030a8 <HAL_ADC_IRQHandler+0x264>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d009      	beq.n	8002f2e <HAL_ADC_IRQHandler+0xea>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a65      	ldr	r2, [pc, #404]	@ (80030b4 <HAL_ADC_IRQHandler+0x270>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d002      	beq.n	8002f2a <HAL_ADC_IRQHandler+0xe6>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	e003      	b.n	8002f32 <HAL_ADC_IRQHandler+0xee>
 8002f2a:	4b63      	ldr	r3, [pc, #396]	@ (80030b8 <HAL_ADC_IRQHandler+0x274>)
 8002f2c:	e001      	b.n	8002f32 <HAL_ADC_IRQHandler+0xee>
 8002f2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d008      	beq.n	8002f4c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b05      	cmp	r3, #5
 8002f44:	d002      	beq.n	8002f4c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b09      	cmp	r3, #9
 8002f4a:	d104      	bne.n	8002f56 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	623b      	str	r3, [r7, #32]
 8002f54:	e014      	b.n	8002f80 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a53      	ldr	r2, [pc, #332]	@ (80030a8 <HAL_ADC_IRQHandler+0x264>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d009      	beq.n	8002f74 <HAL_ADC_IRQHandler+0x130>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a53      	ldr	r2, [pc, #332]	@ (80030b4 <HAL_ADC_IRQHandler+0x270>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d002      	beq.n	8002f70 <HAL_ADC_IRQHandler+0x12c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	e003      	b.n	8002f78 <HAL_ADC_IRQHandler+0x134>
 8002f70:	4b51      	ldr	r3, [pc, #324]	@ (80030b8 <HAL_ADC_IRQHandler+0x274>)
 8002f72:	e001      	b.n	8002f78 <HAL_ADC_IRQHandler+0x134>
 8002f74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f78:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d135      	bne.n	8002ff6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d12e      	bne.n	8002ff6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fc9b 	bl	80028d8 <LL_ADC_REG_IsConversionOngoing>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d11a      	bne.n	8002fde <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 020c 	bic.w	r2, r2, #12
 8002fb6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d112      	bne.n	8002ff6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd4:	f043 0201 	orr.w	r2, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fdc:	e00b      	b.n	8002ff6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe2:	f043 0210 	orr.w	r2, r3, #16
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fee:	f043 0201 	orr.w	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fe fdfa 	bl	8001bf0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	220c      	movs	r2, #12
 8003002:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_ADC_IRQHandler+0x1d4>
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10b      	bne.n	8003030 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80b3 	beq.w	800318a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80ad 	beq.w	800318a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fb14 	bl	800267a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003052:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff facf 	bl	80025fc <LL_ADC_REG_IsTriggerSourceSWStart>
 800305e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a10      	ldr	r2, [pc, #64]	@ (80030a8 <HAL_ADC_IRQHandler+0x264>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d009      	beq.n	800307e <HAL_ADC_IRQHandler+0x23a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a11      	ldr	r2, [pc, #68]	@ (80030b4 <HAL_ADC_IRQHandler+0x270>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d002      	beq.n	800307a <HAL_ADC_IRQHandler+0x236>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	e003      	b.n	8003082 <HAL_ADC_IRQHandler+0x23e>
 800307a:	4b0f      	ldr	r3, [pc, #60]	@ (80030b8 <HAL_ADC_IRQHandler+0x274>)
 800307c:	e001      	b.n	8003082 <HAL_ADC_IRQHandler+0x23e>
 800307e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	4293      	cmp	r3, r2
 8003088:	d008      	beq.n	800309c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2b06      	cmp	r3, #6
 8003094:	d002      	beq.n	800309c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b07      	cmp	r3, #7
 800309a:	d10f      	bne.n	80030bc <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	623b      	str	r3, [r7, #32]
 80030a4:	e01f      	b.n	80030e6 <HAL_ADC_IRQHandler+0x2a2>
 80030a6:	bf00      	nop
 80030a8:	50000100 	.word	0x50000100
 80030ac:	50000300 	.word	0x50000300
 80030b0:	50000700 	.word	0x50000700
 80030b4:	50000500 	.word	0x50000500
 80030b8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a8b      	ldr	r2, [pc, #556]	@ (80032f0 <HAL_ADC_IRQHandler+0x4ac>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d009      	beq.n	80030da <HAL_ADC_IRQHandler+0x296>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a8a      	ldr	r2, [pc, #552]	@ (80032f4 <HAL_ADC_IRQHandler+0x4b0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d002      	beq.n	80030d6 <HAL_ADC_IRQHandler+0x292>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	e003      	b.n	80030de <HAL_ADC_IRQHandler+0x29a>
 80030d6:	4b88      	ldr	r3, [pc, #544]	@ (80032f8 <HAL_ADC_IRQHandler+0x4b4>)
 80030d8:	e001      	b.n	80030de <HAL_ADC_IRQHandler+0x29a>
 80030da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030de:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d047      	beq.n	800317c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d007      	beq.n	8003106 <HAL_ADC_IRQHandler+0x2c2>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d03f      	beq.n	800317c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003102:	2b00      	cmp	r3, #0
 8003104:	d13a      	bne.n	800317c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003110:	2b40      	cmp	r3, #64	@ 0x40
 8003112:	d133      	bne.n	800317c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d12e      	bne.n	800317c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fbeb 	bl	80028fe <LL_ADC_INJ_IsConversionOngoing>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d11a      	bne.n	8003164 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800313c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003142:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d112      	bne.n	800317c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003162:	e00b      	b.n	800317c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003168:	f043 0210 	orr.w	r2, r3, #16
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003174:	f043 0201 	orr.w	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 ff5d 	bl	800403c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2260      	movs	r2, #96	@ 0x60
 8003188:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003190:	2b00      	cmp	r3, #0
 8003192:	d011      	beq.n	80031b8 <HAL_ADC_IRQHandler+0x374>
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00c      	beq.n	80031b8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8b4 	bl	8003318 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2280      	movs	r2, #128	@ 0x80
 80031b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d012      	beq.n	80031e8 <HAL_ADC_IRQHandler+0x3a4>
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00d      	beq.n	80031e8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 ff43 	bl	8004064 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d012      	beq.n	8003218 <HAL_ADC_IRQHandler+0x3d4>
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003200:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 ff35 	bl	8004078 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003216:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	d043      	beq.n	80032aa <HAL_ADC_IRQHandler+0x466>
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b00      	cmp	r3, #0
 800322a:	d03e      	beq.n	80032aa <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003234:	2301      	movs	r3, #1
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
 8003238:	e021      	b.n	800327e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d015      	beq.n	800326c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003248:	d004      	beq.n	8003254 <HAL_ADC_IRQHandler+0x410>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a28      	ldr	r2, [pc, #160]	@ (80032f0 <HAL_ADC_IRQHandler+0x4ac>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d101      	bne.n	8003258 <HAL_ADC_IRQHandler+0x414>
 8003254:	4b29      	ldr	r3, [pc, #164]	@ (80032fc <HAL_ADC_IRQHandler+0x4b8>)
 8003256:	e000      	b.n	800325a <HAL_ADC_IRQHandler+0x416>
 8003258:	4b29      	ldr	r3, [pc, #164]	@ (8003300 <HAL_ADC_IRQHandler+0x4bc>)
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fa7e 	bl	800275c <LL_ADC_GetMultiDMATransfer>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003266:	2301      	movs	r3, #1
 8003268:	627b      	str	r3, [r7, #36]	@ 0x24
 800326a:	e008      	b.n	800327e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800327a:	2301      	movs	r3, #1
 800327c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	2b01      	cmp	r3, #1
 8003282:	d10e      	bne.n	80032a2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003288:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003294:	f043 0202 	orr.w	r2, r3, #2
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f845 	bl	800332c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2210      	movs	r2, #16
 80032a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d018      	beq.n	80032e6 <HAL_ADC_IRQHandler+0x4a2>
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d013      	beq.n	80032e6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ce:	f043 0208 	orr.w	r2, r3, #8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032de:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 feb5 	bl	8004050 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80032e6:	bf00      	nop
 80032e8:	3728      	adds	r7, #40	@ 0x28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	50000100 	.word	0x50000100
 80032f4:	50000500 	.word	0x50000500
 80032f8:	50000400 	.word	0x50000400
 80032fc:	50000300 	.word	0x50000300
 8003300:	50000700 	.word	0x50000700

08003304 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b0b6      	sub	sp, #216	@ 0xd8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800335a:	2b01      	cmp	r3, #1
 800335c:	d102      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x24>
 800335e:	2302      	movs	r3, #2
 8003360:	f000 bc13 	b.w	8003b8a <HAL_ADC_ConfigChannel+0x84a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fab1 	bl	80028d8 <LL_ADC_REG_IsConversionOngoing>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	f040 83f3 	bne.w	8003b64 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	f7ff f949 	bl	8002622 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fa9f 	bl	80028d8 <LL_ADC_REG_IsConversionOngoing>
 800339a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff faab 	bl	80028fe <LL_ADC_INJ_IsConversionOngoing>
 80033a8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f040 81d9 	bne.w	8003768 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f040 81d4 	bne.w	8003768 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033c8:	d10f      	bne.n	80033ea <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2200      	movs	r2, #0
 80033d4:	4619      	mov	r1, r3
 80033d6:	f7ff f963 	bl	80026a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff f8f7 	bl	80025d6 <LL_ADC_SetSamplingTimeCommonConfig>
 80033e8:	e00e      	b.n	8003408 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6819      	ldr	r1, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f7ff f952 	bl	80026a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2100      	movs	r1, #0
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff f8e7 	bl	80025d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	08db      	lsrs	r3, r3, #3
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b04      	cmp	r3, #4
 8003428:	d022      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6919      	ldr	r1, [r3, #16]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800343a:	f7ff f841 	bl	80024c0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6919      	ldr	r1, [r3, #16]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	461a      	mov	r2, r3
 800344c:	f7ff f88d 	bl	800256a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800345c:	2b01      	cmp	r3, #1
 800345e:	d102      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x126>
 8003460:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003464:	e000      	b.n	8003468 <HAL_ADC_ConfigChannel+0x128>
 8003466:	2300      	movs	r3, #0
 8003468:	461a      	mov	r2, r3
 800346a:	f7ff f899 	bl	80025a0 <LL_ADC_SetOffsetSaturation>
 800346e:	e17b      	b.n	8003768 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2100      	movs	r1, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff f846 	bl	8002508 <LL_ADC_GetOffsetChannel>
 800347c:	4603      	mov	r3, r0
 800347e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <HAL_ADC_ConfigChannel+0x15c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff f83b 	bl	8002508 <LL_ADC_GetOffsetChannel>
 8003492:	4603      	mov	r3, r0
 8003494:	0e9b      	lsrs	r3, r3, #26
 8003496:	f003 021f 	and.w	r2, r3, #31
 800349a:	e01e      	b.n	80034da <HAL_ADC_ConfigChannel+0x19a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff f830 	bl	8002508 <LL_ADC_GetOffsetChannel>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80034ca:	2320      	movs	r3, #32
 80034cc:	e004      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80034ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d105      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x1b2>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	0e9b      	lsrs	r3, r3, #26
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	e018      	b.n	8003524 <HAL_ADC_ConfigChannel+0x1e4>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800350a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800350e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003516:	2320      	movs	r3, #32
 8003518:	e004      	b.n	8003524 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800351a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003524:	429a      	cmp	r2, r3
 8003526:	d106      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2200      	movs	r2, #0
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f7fe ffff 	bl	8002534 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2101      	movs	r1, #1
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe ffe3 	bl	8002508 <LL_ADC_GetOffsetChannel>
 8003542:	4603      	mov	r3, r0
 8003544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10a      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x222>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2101      	movs	r1, #1
 8003552:	4618      	mov	r0, r3
 8003554:	f7fe ffd8 	bl	8002508 <LL_ADC_GetOffsetChannel>
 8003558:	4603      	mov	r3, r0
 800355a:	0e9b      	lsrs	r3, r3, #26
 800355c:	f003 021f 	and.w	r2, r3, #31
 8003560:	e01e      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x260>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2101      	movs	r1, #1
 8003568:	4618      	mov	r0, r3
 800356a:	f7fe ffcd 	bl	8002508 <LL_ADC_GetOffsetChannel>
 800356e:	4603      	mov	r3, r0
 8003570:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003578:	fa93 f3a3 	rbit	r3, r3
 800357c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003580:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003584:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003588:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003590:	2320      	movs	r3, #32
 8003592:	e004      	b.n	800359e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003594:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003598:	fab3 f383 	clz	r3, r3
 800359c:	b2db      	uxtb	r3, r3
 800359e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d105      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x278>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	0e9b      	lsrs	r3, r3, #26
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	e018      	b.n	80035ea <HAL_ADC_ConfigChannel+0x2aa>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035c4:	fa93 f3a3 	rbit	r3, r3
 80035c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80035cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80035d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80035dc:	2320      	movs	r3, #32
 80035de:	e004      	b.n	80035ea <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80035e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d106      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2200      	movs	r2, #0
 80035f4:	2101      	movs	r1, #1
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe ff9c 	bl	8002534 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2102      	movs	r1, #2
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe ff80 	bl	8002508 <LL_ADC_GetOffsetChannel>
 8003608:	4603      	mov	r3, r0
 800360a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10a      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x2e8>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2102      	movs	r1, #2
 8003618:	4618      	mov	r0, r3
 800361a:	f7fe ff75 	bl	8002508 <LL_ADC_GetOffsetChannel>
 800361e:	4603      	mov	r3, r0
 8003620:	0e9b      	lsrs	r3, r3, #26
 8003622:	f003 021f 	and.w	r2, r3, #31
 8003626:	e01e      	b.n	8003666 <HAL_ADC_ConfigChannel+0x326>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2102      	movs	r1, #2
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe ff6a 	bl	8002508 <LL_ADC_GetOffsetChannel>
 8003634:	4603      	mov	r3, r0
 8003636:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003646:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800364a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800364e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003656:	2320      	movs	r3, #32
 8003658:	e004      	b.n	8003664 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800365a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800366e:	2b00      	cmp	r3, #0
 8003670:	d105      	bne.n	800367e <HAL_ADC_ConfigChannel+0x33e>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	0e9b      	lsrs	r3, r3, #26
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	e016      	b.n	80036ac <HAL_ADC_ConfigChannel+0x36c>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003690:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003692:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003696:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800369e:	2320      	movs	r3, #32
 80036a0:	e004      	b.n	80036ac <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80036a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d106      	bne.n	80036be <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2200      	movs	r2, #0
 80036b6:	2102      	movs	r1, #2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fe ff3b 	bl	8002534 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2103      	movs	r1, #3
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe ff1f 	bl	8002508 <LL_ADC_GetOffsetChannel>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10a      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x3aa>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2103      	movs	r1, #3
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fe ff14 	bl	8002508 <LL_ADC_GetOffsetChannel>
 80036e0:	4603      	mov	r3, r0
 80036e2:	0e9b      	lsrs	r3, r3, #26
 80036e4:	f003 021f 	and.w	r2, r3, #31
 80036e8:	e017      	b.n	800371a <HAL_ADC_ConfigChannel+0x3da>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2103      	movs	r1, #3
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe ff09 	bl	8002508 <LL_ADC_GetOffsetChannel>
 80036f6:	4603      	mov	r3, r0
 80036f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003704:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003706:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800370c:	2320      	movs	r3, #32
 800370e:	e003      	b.n	8003718 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003710:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003712:	fab3 f383 	clz	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003722:	2b00      	cmp	r3, #0
 8003724:	d105      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x3f2>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	0e9b      	lsrs	r3, r3, #26
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	e011      	b.n	8003756 <HAL_ADC_ConfigChannel+0x416>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003738:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003742:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800374a:	2320      	movs	r3, #32
 800374c:	e003      	b.n	8003756 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800374e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003750:	fab3 f383 	clz	r3, r3
 8003754:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003756:	429a      	cmp	r2, r3
 8003758:	d106      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2200      	movs	r2, #0
 8003760:	2103      	movs	r1, #3
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe fee6 	bl	8002534 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff f879 	bl	8002864 <LL_ADC_IsEnabled>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	f040 813d 	bne.w	80039f4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6819      	ldr	r1, [r3, #0]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	461a      	mov	r2, r3
 8003788:	f7fe ffb6 	bl	80026f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4aa2      	ldr	r2, [pc, #648]	@ (8003a1c <HAL_ADC_ConfigChannel+0x6dc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	f040 812e 	bne.w	80039f4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10b      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x480>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	0e9b      	lsrs	r3, r3, #26
 80037ae:	3301      	adds	r3, #1
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	2b09      	cmp	r3, #9
 80037b6:	bf94      	ite	ls
 80037b8:	2301      	movls	r3, #1
 80037ba:	2300      	movhi	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	e019      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x4b4>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037c8:	fa93 f3a3 	rbit	r3, r3
 80037cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80037ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037d0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80037d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80037d8:	2320      	movs	r3, #32
 80037da:	e003      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80037dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037de:	fab3 f383 	clz	r3, r3
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	3301      	adds	r3, #1
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	2b09      	cmp	r3, #9
 80037ec:	bf94      	ite	ls
 80037ee:	2301      	movls	r3, #1
 80037f0:	2300      	movhi	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d079      	beq.n	80038ec <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003800:	2b00      	cmp	r3, #0
 8003802:	d107      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x4d4>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	0e9b      	lsrs	r3, r3, #26
 800380a:	3301      	adds	r3, #1
 800380c:	069b      	lsls	r3, r3, #26
 800380e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003812:	e015      	b.n	8003840 <HAL_ADC_ConfigChannel+0x500>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800381c:	fa93 f3a3 	rbit	r3, r3
 8003820:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003822:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003824:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800382c:	2320      	movs	r3, #32
 800382e:	e003      	b.n	8003838 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	3301      	adds	r3, #1
 800383a:	069b      	lsls	r3, r3, #26
 800383c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003848:	2b00      	cmp	r3, #0
 800384a:	d109      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x520>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	0e9b      	lsrs	r3, r3, #26
 8003852:	3301      	adds	r3, #1
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	2101      	movs	r1, #1
 800385a:	fa01 f303 	lsl.w	r3, r1, r3
 800385e:	e017      	b.n	8003890 <HAL_ADC_ConfigChannel+0x550>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800386e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003870:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003878:	2320      	movs	r3, #32
 800387a:	e003      	b.n	8003884 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800387c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	3301      	adds	r3, #1
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	2101      	movs	r1, #1
 800388c:	fa01 f303 	lsl.w	r3, r1, r3
 8003890:	ea42 0103 	orr.w	r1, r2, r3
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x576>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	0e9b      	lsrs	r3, r3, #26
 80038a6:	3301      	adds	r3, #1
 80038a8:	f003 021f 	and.w	r2, r3, #31
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	051b      	lsls	r3, r3, #20
 80038b4:	e018      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x5a8>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80038c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80038c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80038ce:	2320      	movs	r3, #32
 80038d0:	e003      	b.n	80038da <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80038d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d4:	fab3 f383 	clz	r3, r3
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	3301      	adds	r3, #1
 80038dc:	f003 021f 	and.w	r2, r3, #31
 80038e0:	4613      	mov	r3, r2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4413      	add	r3, r2
 80038e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038e8:	430b      	orrs	r3, r1
 80038ea:	e07e      	b.n	80039ea <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d107      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x5c8>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	0e9b      	lsrs	r3, r3, #26
 80038fe:	3301      	adds	r3, #1
 8003900:	069b      	lsls	r3, r3, #26
 8003902:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003906:	e015      	b.n	8003934 <HAL_ADC_ConfigChannel+0x5f4>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003910:	fa93 f3a3 	rbit	r3, r3
 8003914:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003918:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800391a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003920:	2320      	movs	r3, #32
 8003922:	e003      	b.n	800392c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	fab3 f383 	clz	r3, r3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	3301      	adds	r3, #1
 800392e:	069b      	lsls	r3, r3, #26
 8003930:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x614>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	0e9b      	lsrs	r3, r3, #26
 8003946:	3301      	adds	r3, #1
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	2101      	movs	r1, #1
 800394e:	fa01 f303 	lsl.w	r3, r1, r3
 8003952:	e017      	b.n	8003984 <HAL_ADC_ConfigChannel+0x644>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	61fb      	str	r3, [r7, #28]
  return result;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800396c:	2320      	movs	r3, #32
 800396e:	e003      	b.n	8003978 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	3301      	adds	r3, #1
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	2101      	movs	r1, #1
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	ea42 0103 	orr.w	r1, r2, r3
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10d      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x670>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	0e9b      	lsrs	r3, r3, #26
 800399a:	3301      	adds	r3, #1
 800399c:	f003 021f 	and.w	r2, r3, #31
 80039a0:	4613      	mov	r3, r2
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4413      	add	r3, r2
 80039a6:	3b1e      	subs	r3, #30
 80039a8:	051b      	lsls	r3, r3, #20
 80039aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039ae:	e01b      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x6a8>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	fa93 f3a3 	rbit	r3, r3
 80039bc:	613b      	str	r3, [r7, #16]
  return result;
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80039c8:	2320      	movs	r3, #32
 80039ca:	e003      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	fab3 f383 	clz	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	3301      	adds	r3, #1
 80039d6:	f003 021f 	and.w	r2, r3, #31
 80039da:	4613      	mov	r3, r2
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	4413      	add	r3, r2
 80039e0:	3b1e      	subs	r3, #30
 80039e2:	051b      	lsls	r3, r3, #20
 80039e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039e8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ee:	4619      	mov	r1, r3
 80039f0:	f7fe fe56 	bl	80026a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b09      	ldr	r3, [pc, #36]	@ (8003a20 <HAL_ADC_ConfigChannel+0x6e0>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80be 	beq.w	8003b7e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a0a:	d004      	beq.n	8003a16 <HAL_ADC_ConfigChannel+0x6d6>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a04      	ldr	r2, [pc, #16]	@ (8003a24 <HAL_ADC_ConfigChannel+0x6e4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d10a      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x6ec>
 8003a16:	4b04      	ldr	r3, [pc, #16]	@ (8003a28 <HAL_ADC_ConfigChannel+0x6e8>)
 8003a18:	e009      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x6ee>
 8003a1a:	bf00      	nop
 8003a1c:	407f0000 	.word	0x407f0000
 8003a20:	80080000 	.word	0x80080000
 8003a24:	50000100 	.word	0x50000100
 8003a28:	50000300 	.word	0x50000300
 8003a2c:	4b59      	ldr	r3, [pc, #356]	@ (8003b94 <HAL_ADC_ConfigChannel+0x854>)
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe fd38 	bl	80024a4 <LL_ADC_GetCommonPathInternalCh>
 8003a34:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a56      	ldr	r2, [pc, #344]	@ (8003b98 <HAL_ADC_ConfigChannel+0x858>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <HAL_ADC_ConfigChannel+0x70c>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a55      	ldr	r2, [pc, #340]	@ (8003b9c <HAL_ADC_ConfigChannel+0x85c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d13a      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d134      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a60:	d005      	beq.n	8003a6e <HAL_ADC_ConfigChannel+0x72e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a4e      	ldr	r2, [pc, #312]	@ (8003ba0 <HAL_ADC_ConfigChannel+0x860>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	f040 8085 	bne.w	8003b78 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a76:	d004      	beq.n	8003a82 <HAL_ADC_ConfigChannel+0x742>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a49      	ldr	r2, [pc, #292]	@ (8003ba4 <HAL_ADC_ConfigChannel+0x864>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d101      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x746>
 8003a82:	4a49      	ldr	r2, [pc, #292]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x868>)
 8003a84:	e000      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x748>
 8003a86:	4a43      	ldr	r2, [pc, #268]	@ (8003b94 <HAL_ADC_ConfigChannel+0x854>)
 8003a88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f7fe fcf3 	bl	800247e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a98:	4b44      	ldr	r3, [pc, #272]	@ (8003bac <HAL_ADC_ConfigChannel+0x86c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	099b      	lsrs	r3, r3, #6
 8003a9e:	4a44      	ldr	r2, [pc, #272]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x870>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	099b      	lsrs	r3, r3, #6
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ab2:	e002      	b.n	8003aba <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f9      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ac0:	e05a      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a3b      	ldr	r2, [pc, #236]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x874>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d125      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003acc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ad0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d11f      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a31      	ldr	r2, [pc, #196]	@ (8003ba4 <HAL_ADC_ConfigChannel+0x864>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d104      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x7ac>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a34      	ldr	r2, [pc, #208]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x878>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d047      	beq.n	8003b7c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003af4:	d004      	beq.n	8003b00 <HAL_ADC_ConfigChannel+0x7c0>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a2a      	ldr	r2, [pc, #168]	@ (8003ba4 <HAL_ADC_ConfigChannel+0x864>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d101      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x7c4>
 8003b00:	4a29      	ldr	r2, [pc, #164]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x868>)
 8003b02:	e000      	b.n	8003b06 <HAL_ADC_ConfigChannel+0x7c6>
 8003b04:	4a23      	ldr	r2, [pc, #140]	@ (8003b94 <HAL_ADC_ConfigChannel+0x854>)
 8003b06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4610      	mov	r0, r2
 8003b12:	f7fe fcb4 	bl	800247e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b16:	e031      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a27      	ldr	r2, [pc, #156]	@ (8003bbc <HAL_ADC_ConfigChannel+0x87c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d12d      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d127      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba4 <HAL_ADC_ConfigChannel+0x864>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d022      	beq.n	8003b7e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b40:	d004      	beq.n	8003b4c <HAL_ADC_ConfigChannel+0x80c>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a17      	ldr	r2, [pc, #92]	@ (8003ba4 <HAL_ADC_ConfigChannel+0x864>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d101      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x810>
 8003b4c:	4a16      	ldr	r2, [pc, #88]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x868>)
 8003b4e:	e000      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x812>
 8003b50:	4a10      	ldr	r2, [pc, #64]	@ (8003b94 <HAL_ADC_ConfigChannel+0x854>)
 8003b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	f7fe fc8e 	bl	800247e <LL_ADC_SetCommonPathInternalCh>
 8003b62:	e00c      	b.n	8003b7e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b68:	f043 0220 	orr.w	r2, r3, #32
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003b76:	e002      	b.n	8003b7e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b78:	bf00      	nop
 8003b7a:	e000      	b.n	8003b7e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b86:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	37d8      	adds	r7, #216	@ 0xd8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	50000700 	.word	0x50000700
 8003b98:	c3210000 	.word	0xc3210000
 8003b9c:	90c00010 	.word	0x90c00010
 8003ba0:	50000600 	.word	0x50000600
 8003ba4:	50000100 	.word	0x50000100
 8003ba8:	50000300 	.word	0x50000300
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	053e2d63 	.word	0x053e2d63
 8003bb4:	c7520000 	.word	0xc7520000
 8003bb8:	50000500 	.word	0x50000500
 8003bbc:	cb840000 	.word	0xcb840000

08003bc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe fe47 	bl	8002864 <LL_ADC_IsEnabled>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d176      	bne.n	8003cca <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	4b3c      	ldr	r3, [pc, #240]	@ (8003cd4 <ADC_Enable+0x114>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00d      	beq.n	8003c06 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bee:	f043 0210 	orr.w	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bfa:	f043 0201 	orr.w	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e062      	b.n	8003ccc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe fe02 	bl	8002814 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c18:	d004      	beq.n	8003c24 <ADC_Enable+0x64>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd8 <ADC_Enable+0x118>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d101      	bne.n	8003c28 <ADC_Enable+0x68>
 8003c24:	4b2d      	ldr	r3, [pc, #180]	@ (8003cdc <ADC_Enable+0x11c>)
 8003c26:	e000      	b.n	8003c2a <ADC_Enable+0x6a>
 8003c28:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce0 <ADC_Enable+0x120>)
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe fc3a 	bl	80024a4 <LL_ADC_GetCommonPathInternalCh>
 8003c30:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003c32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d013      	beq.n	8003c62 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce4 <ADC_Enable+0x124>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	099b      	lsrs	r3, r3, #6
 8003c40:	4a29      	ldr	r2, [pc, #164]	@ (8003ce8 <ADC_Enable+0x128>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	099b      	lsrs	r3, r3, #6
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c54:	e002      	b.n	8003c5c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f9      	bne.n	8003c56 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c62:	f7fe fbed 	bl	8002440 <HAL_GetTick>
 8003c66:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c68:	e028      	b.n	8003cbc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe fdf8 	bl	8002864 <LL_ADC_IsEnabled>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d104      	bne.n	8003c84 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe fdc8 	bl	8002814 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c84:	f7fe fbdc 	bl	8002440 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d914      	bls.n	8003cbc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d00d      	beq.n	8003cbc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca4:	f043 0210 	orr.w	r2, r3, #16
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb0:	f043 0201 	orr.w	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e007      	b.n	8003ccc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d1cf      	bne.n	8003c6a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	8000003f 	.word	0x8000003f
 8003cd8:	50000100 	.word	0x50000100
 8003cdc:	50000300 	.word	0x50000300
 8003ce0:	50000700 	.word	0x50000700
 8003ce4:	20000000 	.word	0x20000000
 8003ce8:	053e2d63 	.word	0x053e2d63

08003cec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe fdc6 	bl	800288a <LL_ADC_IsDisableOngoing>
 8003cfe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe fdad 	bl	8002864 <LL_ADC_IsEnabled>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d047      	beq.n	8003da0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d144      	bne.n	8003da0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 030d 	and.w	r3, r3, #13
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d10c      	bne.n	8003d3e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe fd87 	bl	800283c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2203      	movs	r2, #3
 8003d34:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d36:	f7fe fb83 	bl	8002440 <HAL_GetTick>
 8003d3a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d3c:	e029      	b.n	8003d92 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d42:	f043 0210 	orr.w	r2, r3, #16
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d4e:	f043 0201 	orr.w	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e023      	b.n	8003da2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d5a:	f7fe fb71 	bl	8002440 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d914      	bls.n	8003d92 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7a:	f043 0210 	orr.w	r2, r3, #16
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d86:	f043 0201 	orr.w	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e007      	b.n	8003da2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1dc      	bne.n	8003d5a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d14b      	bne.n	8003e5c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d021      	beq.n	8003e22 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe fc0a 	bl	80025fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d032      	beq.n	8003e54 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d12b      	bne.n	8003e54 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d11f      	bne.n	8003e54 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e18:	f043 0201 	orr.w	r2, r3, #1
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e20:	e018      	b.n	8003e54 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d111      	bne.n	8003e54 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d105      	bne.n	8003e54 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4c:	f043 0201 	orr.w	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f7fd fecb 	bl	8001bf0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e5a:	e00e      	b.n	8003e7a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff fa5f 	bl	800332c <HAL_ADC_ErrorCallback>
}
 8003e6e:	e004      	b.n	8003e7a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff fa37 	bl	8003304 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ebc:	f043 0204 	orr.w	r2, r3, #4
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff fa31 	bl	800332c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <LL_ADC_IsEnabled>:
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <LL_ADC_IsEnabled+0x18>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <LL_ADC_IsEnabled+0x1a>
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LL_ADC_StartCalibration>:
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003f0a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	609a      	str	r2, [r3, #8]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <LL_ADC_IsCalibrationOnGoing>:
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f3e:	d101      	bne.n	8003f44 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d101      	bne.n	8003f6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_ADCEx_Calibration_Start+0x1c>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e04d      	b.n	8004030 <HAL_ADCEx_Calibration_Start+0xb8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff fea5 	bl	8003cec <ADC_Disable>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d136      	bne.n	800401a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003fb4:	f023 0302 	bic.w	r3, r3, #2
 8003fb8:	f043 0202 	orr.w	r2, r3, #2
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6839      	ldr	r1, [r7, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff ff96 	bl	8003ef8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fcc:	e014      	b.n	8003ff8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4a18      	ldr	r2, [pc, #96]	@ (8004038 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d90d      	bls.n	8003ff8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe0:	f023 0312 	bic.w	r3, r3, #18
 8003fe4:	f043 0210 	orr.w	r2, r3, #16
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e01b      	b.n	8004030 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff ff94 	bl	8003f2a <LL_ADC_IsCalibrationOnGoing>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e2      	bne.n	8003fce <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400c:	f023 0303 	bic.w	r3, r3, #3
 8004010:	f043 0201 	orr.w	r2, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004018:	e005      	b.n	8004026 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401e:	f043 0210 	orr.w	r2, r3, #16
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800402e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	0004de01 	.word	0x0004de01

0800403c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b0a1      	sub	sp, #132	@ 0x84
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e0e7      	b.n	800428e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80040c6:	2300      	movs	r3, #0
 80040c8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80040ca:	2300      	movs	r3, #0
 80040cc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040d6:	d102      	bne.n	80040de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	e009      	b.n	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a6e      	ldr	r2, [pc, #440]	@ (800429c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d102      	bne.n	80040ee <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80040e8:	4b6d      	ldr	r3, [pc, #436]	@ (80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	e001      	b.n	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fc:	f043 0220 	orr.w	r2, r3, #32
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0be      	b.n	800428e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff ff1d 	bl	8003f52 <LL_ADC_REG_IsConversionOngoing>
 8004118:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff ff17 	bl	8003f52 <LL_ADC_REG_IsConversionOngoing>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	f040 80a0 	bne.w	800426c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800412c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800412e:	2b00      	cmp	r3, #0
 8004130:	f040 809c 	bne.w	800426c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800413c:	d004      	beq.n	8004148 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a55      	ldr	r2, [pc, #340]	@ (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d101      	bne.n	800414c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004148:	4b56      	ldr	r3, [pc, #344]	@ (80042a4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800414a:	e000      	b.n	800414e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800414c:	4b56      	ldr	r3, [pc, #344]	@ (80042a8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800414e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d04b      	beq.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004158:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800416a:	035b      	lsls	r3, r3, #13
 800416c:	430b      	orrs	r3, r1
 800416e:	431a      	orrs	r2, r3
 8004170:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004172:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800417c:	d004      	beq.n	8004188 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a45      	ldr	r2, [pc, #276]	@ (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d10f      	bne.n	80041a8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004188:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800418c:	f7ff fea1 	bl	8003ed2 <LL_ADC_IsEnabled>
 8004190:	4604      	mov	r4, r0
 8004192:	4841      	ldr	r0, [pc, #260]	@ (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004194:	f7ff fe9d 	bl	8003ed2 <LL_ADC_IsEnabled>
 8004198:	4603      	mov	r3, r0
 800419a:	4323      	orrs	r3, r4
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf0c      	ite	eq
 80041a0:	2301      	moveq	r3, #1
 80041a2:	2300      	movne	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e012      	b.n	80041ce <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80041a8:	483c      	ldr	r0, [pc, #240]	@ (800429c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80041aa:	f7ff fe92 	bl	8003ed2 <LL_ADC_IsEnabled>
 80041ae:	4604      	mov	r4, r0
 80041b0:	483b      	ldr	r0, [pc, #236]	@ (80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80041b2:	f7ff fe8e 	bl	8003ed2 <LL_ADC_IsEnabled>
 80041b6:	4603      	mov	r3, r0
 80041b8:	431c      	orrs	r4, r3
 80041ba:	483c      	ldr	r0, [pc, #240]	@ (80042ac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80041bc:	f7ff fe89 	bl	8003ed2 <LL_ADC_IsEnabled>
 80041c0:	4603      	mov	r3, r0
 80041c2:	4323      	orrs	r3, r4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bf0c      	ite	eq
 80041c8:	2301      	moveq	r3, #1
 80041ca:	2300      	movne	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d056      	beq.n	8004280 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80041d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80041da:	f023 030f 	bic.w	r3, r3, #15
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	6811      	ldr	r1, [r2, #0]
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	6892      	ldr	r2, [r2, #8]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	431a      	orrs	r2, r3
 80041ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041ec:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80041ee:	e047      	b.n	8004280 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80041f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041fa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004204:	d004      	beq.n	8004210 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a23      	ldr	r2, [pc, #140]	@ (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d10f      	bne.n	8004230 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004210:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004214:	f7ff fe5d 	bl	8003ed2 <LL_ADC_IsEnabled>
 8004218:	4604      	mov	r4, r0
 800421a:	481f      	ldr	r0, [pc, #124]	@ (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800421c:	f7ff fe59 	bl	8003ed2 <LL_ADC_IsEnabled>
 8004220:	4603      	mov	r3, r0
 8004222:	4323      	orrs	r3, r4
 8004224:	2b00      	cmp	r3, #0
 8004226:	bf0c      	ite	eq
 8004228:	2301      	moveq	r3, #1
 800422a:	2300      	movne	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	e012      	b.n	8004256 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004230:	481a      	ldr	r0, [pc, #104]	@ (800429c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004232:	f7ff fe4e 	bl	8003ed2 <LL_ADC_IsEnabled>
 8004236:	4604      	mov	r4, r0
 8004238:	4819      	ldr	r0, [pc, #100]	@ (80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800423a:	f7ff fe4a 	bl	8003ed2 <LL_ADC_IsEnabled>
 800423e:	4603      	mov	r3, r0
 8004240:	431c      	orrs	r4, r3
 8004242:	481a      	ldr	r0, [pc, #104]	@ (80042ac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004244:	f7ff fe45 	bl	8003ed2 <LL_ADC_IsEnabled>
 8004248:	4603      	mov	r3, r0
 800424a:	4323      	orrs	r3, r4
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf0c      	ite	eq
 8004250:	2301      	moveq	r3, #1
 8004252:	2300      	movne	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d012      	beq.n	8004280 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800425a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004262:	f023 030f 	bic.w	r3, r3, #15
 8004266:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004268:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800426a:	e009      	b.n	8004280 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004270:	f043 0220 	orr.w	r2, r3, #32
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800427e:	e000      	b.n	8004282 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004280:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800428a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800428e:	4618      	mov	r0, r3
 8004290:	3784      	adds	r7, #132	@ 0x84
 8004292:	46bd      	mov	sp, r7
 8004294:	bd90      	pop	{r4, r7, pc}
 8004296:	bf00      	nop
 8004298:	50000100 	.word	0x50000100
 800429c:	50000400 	.word	0x50000400
 80042a0:	50000500 	.word	0x50000500
 80042a4:	50000300 	.word	0x50000300
 80042a8:	50000700 	.word	0x50000700
 80042ac:	50000600 	.word	0x50000600

080042b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042c0:	4b0c      	ldr	r3, [pc, #48]	@ (80042f4 <__NVIC_SetPriorityGrouping+0x44>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042cc:	4013      	ands	r3, r2
 80042ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042e2:	4a04      	ldr	r2, [pc, #16]	@ (80042f4 <__NVIC_SetPriorityGrouping+0x44>)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	60d3      	str	r3, [r2, #12]
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	e000ed00 	.word	0xe000ed00

080042f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042fc:	4b04      	ldr	r3, [pc, #16]	@ (8004310 <__NVIC_GetPriorityGrouping+0x18>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	0a1b      	lsrs	r3, r3, #8
 8004302:	f003 0307 	and.w	r3, r3, #7
}
 8004306:	4618      	mov	r0, r3
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	e000ed00 	.word	0xe000ed00

08004314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	2b00      	cmp	r3, #0
 8004324:	db0b      	blt.n	800433e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	f003 021f 	and.w	r2, r3, #31
 800432c:	4907      	ldr	r1, [pc, #28]	@ (800434c <__NVIC_EnableIRQ+0x38>)
 800432e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	2001      	movs	r0, #1
 8004336:	fa00 f202 	lsl.w	r2, r0, r2
 800433a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	e000e100 	.word	0xe000e100

08004350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	6039      	str	r1, [r7, #0]
 800435a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004360:	2b00      	cmp	r3, #0
 8004362:	db0a      	blt.n	800437a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	b2da      	uxtb	r2, r3
 8004368:	490c      	ldr	r1, [pc, #48]	@ (800439c <__NVIC_SetPriority+0x4c>)
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	0112      	lsls	r2, r2, #4
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	440b      	add	r3, r1
 8004374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004378:	e00a      	b.n	8004390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	4908      	ldr	r1, [pc, #32]	@ (80043a0 <__NVIC_SetPriority+0x50>)
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	3b04      	subs	r3, #4
 8004388:	0112      	lsls	r2, r2, #4
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	440b      	add	r3, r1
 800438e:	761a      	strb	r2, [r3, #24]
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	e000e100 	.word	0xe000e100
 80043a0:	e000ed00 	.word	0xe000ed00

080043a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b089      	sub	sp, #36	@ 0x24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f1c3 0307 	rsb	r3, r3, #7
 80043be:	2b04      	cmp	r3, #4
 80043c0:	bf28      	it	cs
 80043c2:	2304      	movcs	r3, #4
 80043c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	3304      	adds	r3, #4
 80043ca:	2b06      	cmp	r3, #6
 80043cc:	d902      	bls.n	80043d4 <NVIC_EncodePriority+0x30>
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	3b03      	subs	r3, #3
 80043d2:	e000      	b.n	80043d6 <NVIC_EncodePriority+0x32>
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43da      	mvns	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	401a      	ands	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	fa01 f303 	lsl.w	r3, r1, r3
 80043f6:	43d9      	mvns	r1, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043fc:	4313      	orrs	r3, r2
         );
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3724      	adds	r7, #36	@ 0x24
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff ff4c 	bl	80042b0 <__NVIC_SetPriorityGrouping>
}
 8004418:	bf00      	nop
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800442e:	f7ff ff63 	bl	80042f8 <__NVIC_GetPriorityGrouping>
 8004432:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	6978      	ldr	r0, [r7, #20]
 800443a:	f7ff ffb3 	bl	80043a4 <NVIC_EncodePriority>
 800443e:	4602      	mov	r2, r0
 8004440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004444:	4611      	mov	r1, r2
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff ff82 	bl	8004350 <__NVIC_SetPriority>
}
 800444c:	bf00      	nop
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800445e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff ff56 	bl	8004314 <__NVIC_EnableIRQ>
}
 8004468:	bf00      	nop
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e08d      	b.n	800459e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	4b47      	ldr	r3, [pc, #284]	@ (80045a8 <HAL_DMA_Init+0x138>)
 800448a:	429a      	cmp	r2, r3
 800448c:	d80f      	bhi.n	80044ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	4b45      	ldr	r3, [pc, #276]	@ (80045ac <HAL_DMA_Init+0x13c>)
 8004496:	4413      	add	r3, r2
 8004498:	4a45      	ldr	r2, [pc, #276]	@ (80045b0 <HAL_DMA_Init+0x140>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	091b      	lsrs	r3, r3, #4
 80044a0:	009a      	lsls	r2, r3, #2
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a42      	ldr	r2, [pc, #264]	@ (80045b4 <HAL_DMA_Init+0x144>)
 80044aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80044ac:	e00e      	b.n	80044cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	4b40      	ldr	r3, [pc, #256]	@ (80045b8 <HAL_DMA_Init+0x148>)
 80044b6:	4413      	add	r3, r2
 80044b8:	4a3d      	ldr	r2, [pc, #244]	@ (80045b0 <HAL_DMA_Init+0x140>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	009a      	lsls	r2, r3, #2
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a3c      	ldr	r2, [pc, #240]	@ (80045bc <HAL_DMA_Init+0x14c>)
 80044ca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80044e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80044f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004508:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fa76 	bl	8004a10 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800452c:	d102      	bne.n	8004534 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004548:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d010      	beq.n	8004574 <HAL_DMA_Init+0x104>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b04      	cmp	r3, #4
 8004558:	d80c      	bhi.n	8004574 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fa96 	bl	8004a8c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	e008      	b.n	8004586 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40020407 	.word	0x40020407
 80045ac:	bffdfff8 	.word	0xbffdfff8
 80045b0:	cccccccd 	.word	0xcccccccd
 80045b4:	40020000 	.word	0x40020000
 80045b8:	bffdfbf8 	.word	0xbffdfbf8
 80045bc:	40020400 	.word	0x40020400

080045c0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_DMA_Start_IT+0x20>
 80045dc:	2302      	movs	r3, #2
 80045de:	e066      	b.n	80046ae <HAL_DMA_Start_IT+0xee>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d155      	bne.n	80046a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f9bb 	bl	8004994 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004622:	2b00      	cmp	r3, #0
 8004624:	d008      	beq.n	8004638 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 020e 	orr.w	r2, r2, #14
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e00f      	b.n	8004658 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0204 	bic.w	r2, r2, #4
 8004646:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 020a 	orr.w	r2, r2, #10
 8004656:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004670:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004674:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004688:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800468c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0201 	orr.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	e005      	b.n	80046ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
 80046aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b085      	sub	sp, #20
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d005      	beq.n	80046da <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2204      	movs	r2, #4
 80046d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	e037      	b.n	800474a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 020e 	bic.w	r2, r2, #14
 80046e8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046f8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0201 	bic.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470e:	f003 021f 	and.w	r2, r3, #31
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	2101      	movs	r1, #1
 8004718:	fa01 f202 	lsl.w	r2, r1, r2
 800471c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004726:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00c      	beq.n	800474a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800473e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004748:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d00d      	beq.n	800479c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2204      	movs	r2, #4
 8004784:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	73fb      	strb	r3, [r7, #15]
 800479a:	e047      	b.n	800482c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 020e 	bic.w	r2, r2, #14
 80047aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d0:	f003 021f 	and.w	r2, r3, #31
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d8:	2101      	movs	r1, #1
 80047da:	fa01 f202 	lsl.w	r2, r1, r2
 80047de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00c      	beq.n	800480c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004800:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800480a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	4798      	blx	r3
    }
  }
  return status;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	2204      	movs	r2, #4
 8004858:	409a      	lsls	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4013      	ands	r3, r2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d026      	beq.n	80048b0 <HAL_DMA_IRQHandler+0x7a>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d021      	beq.n	80048b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d107      	bne.n	800488a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0204 	bic.w	r2, r2, #4
 8004888:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488e:	f003 021f 	and.w	r2, r3, #31
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	2104      	movs	r1, #4
 8004898:	fa01 f202 	lsl.w	r2, r1, r2
 800489c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d071      	beq.n	800498a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80048ae:	e06c      	b.n	800498a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	2202      	movs	r2, #2
 80048ba:	409a      	lsls	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d02e      	beq.n	8004922 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d029      	beq.n	8004922 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10b      	bne.n	80048f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 020a 	bic.w	r2, r2, #10
 80048ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f8:	f003 021f 	and.w	r2, r3, #31
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004900:	2102      	movs	r1, #2
 8004902:	fa01 f202 	lsl.w	r2, r1, r2
 8004906:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004914:	2b00      	cmp	r3, #0
 8004916:	d038      	beq.n	800498a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004920:	e033      	b.n	800498a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004926:	f003 031f 	and.w	r3, r3, #31
 800492a:	2208      	movs	r2, #8
 800492c:	409a      	lsls	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d02a      	beq.n	800498c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b00      	cmp	r3, #0
 800493e:	d025      	beq.n	800498c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 020e 	bic.w	r2, r2, #14
 800494e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004954:	f003 021f 	and.w	r2, r3, #31
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	2101      	movs	r1, #1
 800495e:	fa01 f202 	lsl.w	r2, r1, r2
 8004962:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800497e:	2b00      	cmp	r3, #0
 8004980:	d004      	beq.n	800498c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800498a:	bf00      	nop
 800498c:	bf00      	nop
}
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049aa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d004      	beq.n	80049be <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049bc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c2:	f003 021f 	and.w	r2, r3, #31
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	2101      	movs	r1, #1
 80049cc:	fa01 f202 	lsl.w	r2, r1, r2
 80049d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b10      	cmp	r3, #16
 80049e0:	d108      	bne.n	80049f4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049f2:	e007      	b.n	8004a04 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	60da      	str	r2, [r3, #12]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4b16      	ldr	r3, [pc, #88]	@ (8004a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d802      	bhi.n	8004a2a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004a24:	4b15      	ldr	r3, [pc, #84]	@ (8004a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	e001      	b.n	8004a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004a2a:	4b15      	ldr	r3, [pc, #84]	@ (8004a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004a2c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	3b08      	subs	r3, #8
 8004a3a:	4a12      	ldr	r2, [pc, #72]	@ (8004a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a40:	091b      	lsrs	r3, r3, #4
 8004a42:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a48:	089b      	lsrs	r3, r3, #2
 8004a4a:	009a      	lsls	r2, r3, #2
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4413      	add	r3, r2
 8004a50:	461a      	mov	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a0b      	ldr	r2, [pc, #44]	@ (8004a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004a5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	2201      	movs	r2, #1
 8004a64:	409a      	lsls	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40020407 	.word	0x40020407
 8004a7c:	40020800 	.word	0x40020800
 8004a80:	40020820 	.word	0x40020820
 8004a84:	cccccccd 	.word	0xcccccccd
 8004a88:	40020880 	.word	0x40020880

08004a8c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a08      	ldr	r2, [pc, #32]	@ (8004ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004aae:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	2201      	movs	r2, #1
 8004aba:	409a      	lsls	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	1000823f 	.word	0x1000823f
 8004ad0:	40020940 	.word	0x40020940

08004ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ae2:	e15a      	b.n	8004d9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	2101      	movs	r1, #1
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	fa01 f303 	lsl.w	r3, r1, r3
 8004af0:	4013      	ands	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 814c 	beq.w	8004d94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d005      	beq.n	8004b14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d130      	bne.n	8004b76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	2203      	movs	r2, #3
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	43db      	mvns	r3, r3
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	43db      	mvns	r3, r3
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4013      	ands	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	091b      	lsrs	r3, r3, #4
 8004b60:	f003 0201 	and.w	r2, r3, #1
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d017      	beq.n	8004bb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	43db      	mvns	r3, r3
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4013      	ands	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d123      	bne.n	8004c06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	08da      	lsrs	r2, r3, #3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3208      	adds	r2, #8
 8004bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	220f      	movs	r2, #15
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4013      	ands	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	08da      	lsrs	r2, r3, #3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3208      	adds	r2, #8
 8004c00:	6939      	ldr	r1, [r7, #16]
 8004c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	2203      	movs	r2, #3
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43db      	mvns	r3, r3
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f003 0203 	and.w	r2, r3, #3
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80a6 	beq.w	8004d94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c48:	4b5b      	ldr	r3, [pc, #364]	@ (8004db8 <HAL_GPIO_Init+0x2e4>)
 8004c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c4c:	4a5a      	ldr	r2, [pc, #360]	@ (8004db8 <HAL_GPIO_Init+0x2e4>)
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c54:	4b58      	ldr	r3, [pc, #352]	@ (8004db8 <HAL_GPIO_Init+0x2e4>)
 8004c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c60:	4a56      	ldr	r2, [pc, #344]	@ (8004dbc <HAL_GPIO_Init+0x2e8>)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	089b      	lsrs	r3, r3, #2
 8004c66:	3302      	adds	r3, #2
 8004c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f003 0303 	and.w	r3, r3, #3
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	220f      	movs	r2, #15
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4013      	ands	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c8a:	d01f      	beq.n	8004ccc <HAL_GPIO_Init+0x1f8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a4c      	ldr	r2, [pc, #304]	@ (8004dc0 <HAL_GPIO_Init+0x2ec>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d019      	beq.n	8004cc8 <HAL_GPIO_Init+0x1f4>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a4b      	ldr	r2, [pc, #300]	@ (8004dc4 <HAL_GPIO_Init+0x2f0>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <HAL_GPIO_Init+0x1f0>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a4a      	ldr	r2, [pc, #296]	@ (8004dc8 <HAL_GPIO_Init+0x2f4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00d      	beq.n	8004cc0 <HAL_GPIO_Init+0x1ec>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a49      	ldr	r2, [pc, #292]	@ (8004dcc <HAL_GPIO_Init+0x2f8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d007      	beq.n	8004cbc <HAL_GPIO_Init+0x1e8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a48      	ldr	r2, [pc, #288]	@ (8004dd0 <HAL_GPIO_Init+0x2fc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d101      	bne.n	8004cb8 <HAL_GPIO_Init+0x1e4>
 8004cb4:	2305      	movs	r3, #5
 8004cb6:	e00a      	b.n	8004cce <HAL_GPIO_Init+0x1fa>
 8004cb8:	2306      	movs	r3, #6
 8004cba:	e008      	b.n	8004cce <HAL_GPIO_Init+0x1fa>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	e006      	b.n	8004cce <HAL_GPIO_Init+0x1fa>
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e004      	b.n	8004cce <HAL_GPIO_Init+0x1fa>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e002      	b.n	8004cce <HAL_GPIO_Init+0x1fa>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <HAL_GPIO_Init+0x1fa>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	f002 0203 	and.w	r2, r2, #3
 8004cd4:	0092      	lsls	r2, r2, #2
 8004cd6:	4093      	lsls	r3, r2
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cde:	4937      	ldr	r1, [pc, #220]	@ (8004dbc <HAL_GPIO_Init+0x2e8>)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	089b      	lsrs	r3, r3, #2
 8004ce4:	3302      	adds	r3, #2
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004cec:	4b39      	ldr	r3, [pc, #228]	@ (8004dd4 <HAL_GPIO_Init+0x300>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d10:	4a30      	ldr	r2, [pc, #192]	@ (8004dd4 <HAL_GPIO_Init+0x300>)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d16:	4b2f      	ldr	r3, [pc, #188]	@ (8004dd4 <HAL_GPIO_Init+0x300>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4013      	ands	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d3a:	4a26      	ldr	r2, [pc, #152]	@ (8004dd4 <HAL_GPIO_Init+0x300>)
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d40:	4b24      	ldr	r3, [pc, #144]	@ (8004dd4 <HAL_GPIO_Init+0x300>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d64:	4a1b      	ldr	r2, [pc, #108]	@ (8004dd4 <HAL_GPIO_Init+0x300>)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd4 <HAL_GPIO_Init+0x300>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	43db      	mvns	r3, r3
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4013      	ands	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d8e:	4a11      	ldr	r2, [pc, #68]	@ (8004dd4 <HAL_GPIO_Init+0x300>)
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	3301      	adds	r3, #1
 8004d98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f47f ae9d 	bne.w	8004ae4 <HAL_GPIO_Init+0x10>
  }
}
 8004daa:	bf00      	nop
 8004dac:	bf00      	nop
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40010000 	.word	0x40010000
 8004dc0:	48000400 	.word	0x48000400
 8004dc4:	48000800 	.word	0x48000800
 8004dc8:	48000c00 	.word	0x48000c00
 8004dcc:	48001000 	.word	0x48001000
 8004dd0:	48001400 	.word	0x48001400
 8004dd4:	40010400 	.word	0x40010400

08004dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	807b      	strh	r3, [r7, #2]
 8004de4:	4613      	mov	r3, r2
 8004de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004de8:	787b      	ldrb	r3, [r7, #1]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004dee:	887a      	ldrh	r2, [r7, #2]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004df4:	e002      	b.n	8004dfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004df6:	887a      	ldrh	r2, [r7, #2]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e12:	4b08      	ldr	r3, [pc, #32]	@ (8004e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e14:	695a      	ldr	r2, [r3, #20]
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d006      	beq.n	8004e2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e1e:	4a05      	ldr	r2, [pc, #20]	@ (8004e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e20:	88fb      	ldrh	r3, [r7, #6]
 8004e22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e24:	88fb      	ldrh	r3, [r7, #6]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 f806 	bl	8004e38 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40010400 	.word	0x40010400

08004e38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d141      	bne.n	8004ee2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e5e:	4b4b      	ldr	r3, [pc, #300]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e6a:	d131      	bne.n	8004ed0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e6c:	4b47      	ldr	r3, [pc, #284]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e72:	4a46      	ldr	r2, [pc, #280]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e7c:	4b43      	ldr	r3, [pc, #268]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e84:	4a41      	ldr	r2, [pc, #260]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e8c:	4b40      	ldr	r3, [pc, #256]	@ (8004f90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2232      	movs	r2, #50	@ 0x32
 8004e92:	fb02 f303 	mul.w	r3, r2, r3
 8004e96:	4a3f      	ldr	r2, [pc, #252]	@ (8004f94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e98:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9c:	0c9b      	lsrs	r3, r3, #18
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ea2:	e002      	b.n	8004eaa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eaa:	4b38      	ldr	r3, [pc, #224]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eb6:	d102      	bne.n	8004ebe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f2      	bne.n	8004ea4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ebe:	4b33      	ldr	r3, [pc, #204]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eca:	d158      	bne.n	8004f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e057      	b.n	8004f80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004edc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ee0:	e04d      	b.n	8004f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee8:	d141      	bne.n	8004f6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004eea:	4b28      	ldr	r3, [pc, #160]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ef6:	d131      	bne.n	8004f5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ef8:	4b24      	ldr	r3, [pc, #144]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004efe:	4a23      	ldr	r2, [pc, #140]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f08:	4b20      	ldr	r3, [pc, #128]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f10:	4a1e      	ldr	r2, [pc, #120]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f18:	4b1d      	ldr	r3, [pc, #116]	@ (8004f90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2232      	movs	r2, #50	@ 0x32
 8004f1e:	fb02 f303 	mul.w	r3, r2, r3
 8004f22:	4a1c      	ldr	r2, [pc, #112]	@ (8004f94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f24:	fba2 2303 	umull	r2, r3, r2, r3
 8004f28:	0c9b      	lsrs	r3, r3, #18
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f2e:	e002      	b.n	8004f36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f36:	4b15      	ldr	r3, [pc, #84]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f42:	d102      	bne.n	8004f4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f2      	bne.n	8004f30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f4a:	4b10      	ldr	r3, [pc, #64]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f56:	d112      	bne.n	8004f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e011      	b.n	8004f80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f62:	4a0a      	ldr	r2, [pc, #40]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f6c:	e007      	b.n	8004f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f6e:	4b07      	ldr	r3, [pc, #28]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f76:	4a05      	ldr	r2, [pc, #20]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	40007000 	.word	0x40007000
 8004f90:	20000000 	.word	0x20000000
 8004f94:	431bde83 	.word	0x431bde83

08004f98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f9c:	4b05      	ldr	r3, [pc, #20]	@ (8004fb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4a04      	ldr	r2, [pc, #16]	@ (8004fb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fa6:	6093      	str	r3, [r2, #8]
}
 8004fa8:	bf00      	nop
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40007000 	.word	0x40007000

08004fb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e2fe      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d075      	beq.n	80050c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fd6:	4b97      	ldr	r3, [pc, #604]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
 8004fde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fe0:	4b94      	ldr	r3, [pc, #592]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0303 	and.w	r3, r3, #3
 8004fe8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	2b0c      	cmp	r3, #12
 8004fee:	d102      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x3e>
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d002      	beq.n	8004ffc <HAL_RCC_OscConfig+0x44>
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d10b      	bne.n	8005014 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ffc:	4b8d      	ldr	r3, [pc, #564]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d05b      	beq.n	80050c0 <HAL_RCC_OscConfig+0x108>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d157      	bne.n	80050c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e2d9      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800501c:	d106      	bne.n	800502c <HAL_RCC_OscConfig+0x74>
 800501e:	4b85      	ldr	r3, [pc, #532]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a84      	ldr	r2, [pc, #528]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 8005024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e01d      	b.n	8005068 <HAL_RCC_OscConfig+0xb0>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005034:	d10c      	bne.n	8005050 <HAL_RCC_OscConfig+0x98>
 8005036:	4b7f      	ldr	r3, [pc, #508]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a7e      	ldr	r2, [pc, #504]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 800503c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	4b7c      	ldr	r3, [pc, #496]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a7b      	ldr	r2, [pc, #492]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 8005048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	e00b      	b.n	8005068 <HAL_RCC_OscConfig+0xb0>
 8005050:	4b78      	ldr	r3, [pc, #480]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a77      	ldr	r2, [pc, #476]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 8005056:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	4b75      	ldr	r3, [pc, #468]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a74      	ldr	r2, [pc, #464]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 8005062:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d013      	beq.n	8005098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fd f9e6 	bl	8002440 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005078:	f7fd f9e2 	bl	8002440 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b64      	cmp	r3, #100	@ 0x64
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e29e      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800508a:	4b6a      	ldr	r3, [pc, #424]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0f0      	beq.n	8005078 <HAL_RCC_OscConfig+0xc0>
 8005096:	e014      	b.n	80050c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005098:	f7fd f9d2 	bl	8002440 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a0:	f7fd f9ce 	bl	8002440 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b64      	cmp	r3, #100	@ 0x64
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e28a      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050b2:	4b60      	ldr	r3, [pc, #384]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0xe8>
 80050be:	e000      	b.n	80050c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d075      	beq.n	80051ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ce:	4b59      	ldr	r3, [pc, #356]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 030c 	and.w	r3, r3, #12
 80050d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050d8:	4b56      	ldr	r3, [pc, #344]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0303 	and.w	r3, r3, #3
 80050e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2b0c      	cmp	r3, #12
 80050e6:	d102      	bne.n	80050ee <HAL_RCC_OscConfig+0x136>
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d002      	beq.n	80050f4 <HAL_RCC_OscConfig+0x13c>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d11f      	bne.n	8005134 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f4:	4b4f      	ldr	r3, [pc, #316]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <HAL_RCC_OscConfig+0x154>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e25d      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800510c:	4b49      	ldr	r3, [pc, #292]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	061b      	lsls	r3, r3, #24
 800511a:	4946      	ldr	r1, [pc, #280]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 800511c:	4313      	orrs	r3, r2
 800511e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005120:	4b45      	ldr	r3, [pc, #276]	@ (8005238 <HAL_RCC_OscConfig+0x280>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4618      	mov	r0, r3
 8005126:	f7fb fe8f 	bl	8000e48 <HAL_InitTick>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d043      	beq.n	80051b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e249      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d023      	beq.n	8005184 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800513c:	4b3d      	ldr	r3, [pc, #244]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a3c      	ldr	r2, [pc, #240]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 8005142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005148:	f7fd f97a 	bl	8002440 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005150:	f7fd f976 	bl	8002440 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e232      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005162:	4b34      	ldr	r3, [pc, #208]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0f0      	beq.n	8005150 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516e:	4b31      	ldr	r3, [pc, #196]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	061b      	lsls	r3, r3, #24
 800517c:	492d      	ldr	r1, [pc, #180]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 800517e:	4313      	orrs	r3, r2
 8005180:	604b      	str	r3, [r1, #4]
 8005182:	e01a      	b.n	80051ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005184:	4b2b      	ldr	r3, [pc, #172]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a2a      	ldr	r2, [pc, #168]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 800518a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800518e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005190:	f7fd f956 	bl	8002440 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005198:	f7fd f952 	bl	8002440 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e20e      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051aa:	4b22      	ldr	r3, [pc, #136]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0x1e0>
 80051b6:	e000      	b.n	80051ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d041      	beq.n	800524a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d01c      	beq.n	8005208 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ce:	4b19      	ldr	r3, [pc, #100]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 80051d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051d4:	4a17      	ldr	r2, [pc, #92]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 80051d6:	f043 0301 	orr.w	r3, r3, #1
 80051da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051de:	f7fd f92f 	bl	8002440 <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051e6:	f7fd f92b 	bl	8002440 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e1e7      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 80051fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0ef      	beq.n	80051e6 <HAL_RCC_OscConfig+0x22e>
 8005206:	e020      	b.n	800524a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005208:	4b0a      	ldr	r3, [pc, #40]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 800520a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800520e:	4a09      	ldr	r2, [pc, #36]	@ (8005234 <HAL_RCC_OscConfig+0x27c>)
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005218:	f7fd f912 	bl	8002440 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800521e:	e00d      	b.n	800523c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005220:	f7fd f90e 	bl	8002440 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d906      	bls.n	800523c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e1ca      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
 8005232:	bf00      	nop
 8005234:	40021000 	.word	0x40021000
 8005238:	200000ac 	.word	0x200000ac
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800523c:	4b8c      	ldr	r3, [pc, #560]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 800523e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1ea      	bne.n	8005220 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 80a6 	beq.w	80053a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005258:	2300      	movs	r3, #0
 800525a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800525c:	4b84      	ldr	r3, [pc, #528]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 800525e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_OscConfig+0x2b4>
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <HAL_RCC_OscConfig+0x2b6>
 800526c:	2300      	movs	r3, #0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00d      	beq.n	800528e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005272:	4b7f      	ldr	r3, [pc, #508]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 8005274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005276:	4a7e      	ldr	r2, [pc, #504]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 8005278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800527c:	6593      	str	r3, [r2, #88]	@ 0x58
 800527e:	4b7c      	ldr	r3, [pc, #496]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 8005280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800528a:	2301      	movs	r3, #1
 800528c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800528e:	4b79      	ldr	r3, [pc, #484]	@ (8005474 <HAL_RCC_OscConfig+0x4bc>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005296:	2b00      	cmp	r3, #0
 8005298:	d118      	bne.n	80052cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800529a:	4b76      	ldr	r3, [pc, #472]	@ (8005474 <HAL_RCC_OscConfig+0x4bc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a75      	ldr	r2, [pc, #468]	@ (8005474 <HAL_RCC_OscConfig+0x4bc>)
 80052a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a6:	f7fd f8cb 	bl	8002440 <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ae:	f7fd f8c7 	bl	8002440 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e183      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052c0:	4b6c      	ldr	r3, [pc, #432]	@ (8005474 <HAL_RCC_OscConfig+0x4bc>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f0      	beq.n	80052ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d108      	bne.n	80052e6 <HAL_RCC_OscConfig+0x32e>
 80052d4:	4b66      	ldr	r3, [pc, #408]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052da:	4a65      	ldr	r2, [pc, #404]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 80052dc:	f043 0301 	orr.w	r3, r3, #1
 80052e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052e4:	e024      	b.n	8005330 <HAL_RCC_OscConfig+0x378>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b05      	cmp	r3, #5
 80052ec:	d110      	bne.n	8005310 <HAL_RCC_OscConfig+0x358>
 80052ee:	4b60      	ldr	r3, [pc, #384]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 80052f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f4:	4a5e      	ldr	r2, [pc, #376]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 80052f6:	f043 0304 	orr.w	r3, r3, #4
 80052fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052fe:	4b5c      	ldr	r3, [pc, #368]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 8005300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005304:	4a5a      	ldr	r2, [pc, #360]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800530e:	e00f      	b.n	8005330 <HAL_RCC_OscConfig+0x378>
 8005310:	4b57      	ldr	r3, [pc, #348]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005316:	4a56      	ldr	r2, [pc, #344]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 8005318:	f023 0301 	bic.w	r3, r3, #1
 800531c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005320:	4b53      	ldr	r3, [pc, #332]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005326:	4a52      	ldr	r2, [pc, #328]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 8005328:	f023 0304 	bic.w	r3, r3, #4
 800532c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d016      	beq.n	8005366 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005338:	f7fd f882 	bl	8002440 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800533e:	e00a      	b.n	8005356 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005340:	f7fd f87e 	bl	8002440 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e138      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005356:	4b46      	ldr	r3, [pc, #280]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 8005358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0ed      	beq.n	8005340 <HAL_RCC_OscConfig+0x388>
 8005364:	e015      	b.n	8005392 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005366:	f7fd f86b 	bl	8002440 <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800536c:	e00a      	b.n	8005384 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536e:	f7fd f867 	bl	8002440 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800537c:	4293      	cmp	r3, r2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e121      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005384:	4b3a      	ldr	r3, [pc, #232]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1ed      	bne.n	800536e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005392:	7ffb      	ldrb	r3, [r7, #31]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d105      	bne.n	80053a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005398:	4b35      	ldr	r3, [pc, #212]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 800539a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539c:	4a34      	ldr	r2, [pc, #208]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 800539e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d03c      	beq.n	800542a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01c      	beq.n	80053f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053b8:	4b2d      	ldr	r3, [pc, #180]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 80053ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053be:	4a2c      	ldr	r2, [pc, #176]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 80053c0:	f043 0301 	orr.w	r3, r3, #1
 80053c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c8:	f7fd f83a 	bl	8002440 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053d0:	f7fd f836 	bl	8002440 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e0f2      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053e2:	4b23      	ldr	r3, [pc, #140]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 80053e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0ef      	beq.n	80053d0 <HAL_RCC_OscConfig+0x418>
 80053f0:	e01b      	b.n	800542a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 80053f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 80053fa:	f023 0301 	bic.w	r3, r3, #1
 80053fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005402:	f7fd f81d 	bl	8002440 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800540a:	f7fd f819 	bl	8002440 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e0d5      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800541c:	4b14      	ldr	r3, [pc, #80]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 800541e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1ef      	bne.n	800540a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 80c9 	beq.w	80055c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005434:	4b0e      	ldr	r3, [pc, #56]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 030c 	and.w	r3, r3, #12
 800543c:	2b0c      	cmp	r3, #12
 800543e:	f000 8083 	beq.w	8005548 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d15e      	bne.n	8005508 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544a:	4b09      	ldr	r3, [pc, #36]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a08      	ldr	r2, [pc, #32]	@ (8005470 <HAL_RCC_OscConfig+0x4b8>)
 8005450:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005456:	f7fc fff3 	bl	8002440 <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800545c:	e00c      	b.n	8005478 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545e:	f7fc ffef 	bl	8002440 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d905      	bls.n	8005478 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e0ab      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
 8005470:	40021000 	.word	0x40021000
 8005474:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005478:	4b55      	ldr	r3, [pc, #340]	@ (80055d0 <HAL_RCC_OscConfig+0x618>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1ec      	bne.n	800545e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005484:	4b52      	ldr	r3, [pc, #328]	@ (80055d0 <HAL_RCC_OscConfig+0x618>)
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	4b52      	ldr	r3, [pc, #328]	@ (80055d4 <HAL_RCC_OscConfig+0x61c>)
 800548a:	4013      	ands	r3, r2
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6a11      	ldr	r1, [r2, #32]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005494:	3a01      	subs	r2, #1
 8005496:	0112      	lsls	r2, r2, #4
 8005498:	4311      	orrs	r1, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800549e:	0212      	lsls	r2, r2, #8
 80054a0:	4311      	orrs	r1, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80054a6:	0852      	lsrs	r2, r2, #1
 80054a8:	3a01      	subs	r2, #1
 80054aa:	0552      	lsls	r2, r2, #21
 80054ac:	4311      	orrs	r1, r2
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80054b2:	0852      	lsrs	r2, r2, #1
 80054b4:	3a01      	subs	r2, #1
 80054b6:	0652      	lsls	r2, r2, #25
 80054b8:	4311      	orrs	r1, r2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054be:	06d2      	lsls	r2, r2, #27
 80054c0:	430a      	orrs	r2, r1
 80054c2:	4943      	ldr	r1, [pc, #268]	@ (80055d0 <HAL_RCC_OscConfig+0x618>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054c8:	4b41      	ldr	r3, [pc, #260]	@ (80055d0 <HAL_RCC_OscConfig+0x618>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a40      	ldr	r2, [pc, #256]	@ (80055d0 <HAL_RCC_OscConfig+0x618>)
 80054ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054d4:	4b3e      	ldr	r3, [pc, #248]	@ (80055d0 <HAL_RCC_OscConfig+0x618>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	4a3d      	ldr	r2, [pc, #244]	@ (80055d0 <HAL_RCC_OscConfig+0x618>)
 80054da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e0:	f7fc ffae 	bl	8002440 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e8:	f7fc ffaa 	bl	8002440 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e066      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054fa:	4b35      	ldr	r3, [pc, #212]	@ (80055d0 <HAL_RCC_OscConfig+0x618>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0f0      	beq.n	80054e8 <HAL_RCC_OscConfig+0x530>
 8005506:	e05e      	b.n	80055c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005508:	4b31      	ldr	r3, [pc, #196]	@ (80055d0 <HAL_RCC_OscConfig+0x618>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a30      	ldr	r2, [pc, #192]	@ (80055d0 <HAL_RCC_OscConfig+0x618>)
 800550e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005514:	f7fc ff94 	bl	8002440 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800551c:	f7fc ff90 	bl	8002440 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e04c      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800552e:	4b28      	ldr	r3, [pc, #160]	@ (80055d0 <HAL_RCC_OscConfig+0x618>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800553a:	4b25      	ldr	r3, [pc, #148]	@ (80055d0 <HAL_RCC_OscConfig+0x618>)
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	4924      	ldr	r1, [pc, #144]	@ (80055d0 <HAL_RCC_OscConfig+0x618>)
 8005540:	4b25      	ldr	r3, [pc, #148]	@ (80055d8 <HAL_RCC_OscConfig+0x620>)
 8005542:	4013      	ands	r3, r2
 8005544:	60cb      	str	r3, [r1, #12]
 8005546:	e03e      	b.n	80055c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e039      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005554:	4b1e      	ldr	r3, [pc, #120]	@ (80055d0 <HAL_RCC_OscConfig+0x618>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f003 0203 	and.w	r2, r3, #3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	429a      	cmp	r2, r3
 8005566:	d12c      	bne.n	80055c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005572:	3b01      	subs	r3, #1
 8005574:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005576:	429a      	cmp	r2, r3
 8005578:	d123      	bne.n	80055c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005584:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005586:	429a      	cmp	r2, r3
 8005588:	d11b      	bne.n	80055c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005594:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005596:	429a      	cmp	r2, r3
 8005598:	d113      	bne.n	80055c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a4:	085b      	lsrs	r3, r3, #1
 80055a6:	3b01      	subs	r3, #1
 80055a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d109      	bne.n	80055c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055b8:	085b      	lsrs	r3, r3, #1
 80055ba:	3b01      	subs	r3, #1
 80055bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055be:	429a      	cmp	r2, r3
 80055c0:	d001      	beq.n	80055c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3720      	adds	r7, #32
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40021000 	.word	0x40021000
 80055d4:	019f800c 	.word	0x019f800c
 80055d8:	feeefffc 	.word	0xfeeefffc

080055dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e11e      	b.n	8005832 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055f4:	4b91      	ldr	r3, [pc, #580]	@ (800583c <HAL_RCC_ClockConfig+0x260>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d910      	bls.n	8005624 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005602:	4b8e      	ldr	r3, [pc, #568]	@ (800583c <HAL_RCC_ClockConfig+0x260>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 020f 	bic.w	r2, r3, #15
 800560a:	498c      	ldr	r1, [pc, #560]	@ (800583c <HAL_RCC_ClockConfig+0x260>)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005612:	4b8a      	ldr	r3, [pc, #552]	@ (800583c <HAL_RCC_ClockConfig+0x260>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d001      	beq.n	8005624 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e106      	b.n	8005832 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d073      	beq.n	8005718 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b03      	cmp	r3, #3
 8005636:	d129      	bne.n	800568c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005638:	4b81      	ldr	r3, [pc, #516]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e0f4      	b.n	8005832 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005648:	f000 f9d0 	bl	80059ec <RCC_GetSysClockFreqFromPLLSource>
 800564c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4a7c      	ldr	r2, [pc, #496]	@ (8005844 <HAL_RCC_ClockConfig+0x268>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d93f      	bls.n	80056d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005656:	4b7a      	ldr	r3, [pc, #488]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800566a:	2b00      	cmp	r3, #0
 800566c:	d033      	beq.n	80056d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005672:	2b00      	cmp	r3, #0
 8005674:	d12f      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005676:	4b72      	ldr	r3, [pc, #456]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800567e:	4a70      	ldr	r2, [pc, #448]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 8005680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005684:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005686:	2380      	movs	r3, #128	@ 0x80
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	e024      	b.n	80056d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d107      	bne.n	80056a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005694:	4b6a      	ldr	r3, [pc, #424]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0c6      	b.n	8005832 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056a4:	4b66      	ldr	r3, [pc, #408]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e0be      	b.n	8005832 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80056b4:	f000 f8ce 	bl	8005854 <HAL_RCC_GetSysClockFreq>
 80056b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4a61      	ldr	r2, [pc, #388]	@ (8005844 <HAL_RCC_ClockConfig+0x268>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d909      	bls.n	80056d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056c2:	4b5f      	ldr	r3, [pc, #380]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056ca:	4a5d      	ldr	r2, [pc, #372]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 80056cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80056d2:	2380      	movs	r3, #128	@ 0x80
 80056d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056d6:	4b5a      	ldr	r3, [pc, #360]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f023 0203 	bic.w	r2, r3, #3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4957      	ldr	r1, [pc, #348]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e8:	f7fc feaa 	bl	8002440 <HAL_GetTick>
 80056ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ee:	e00a      	b.n	8005706 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056f0:	f7fc fea6 	bl	8002440 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e095      	b.n	8005832 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005706:	4b4e      	ldr	r3, [pc, #312]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 020c 	and.w	r2, r3, #12
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	429a      	cmp	r2, r3
 8005716:	d1eb      	bne.n	80056f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d023      	beq.n	800576c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005730:	4b43      	ldr	r3, [pc, #268]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	4a42      	ldr	r2, [pc, #264]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 8005736:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800573a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005748:	4b3d      	ldr	r3, [pc, #244]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005750:	4a3b      	ldr	r2, [pc, #236]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 8005752:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005756:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005758:	4b39      	ldr	r3, [pc, #228]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	4936      	ldr	r1, [pc, #216]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 8005766:	4313      	orrs	r3, r2
 8005768:	608b      	str	r3, [r1, #8]
 800576a:	e008      	b.n	800577e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2b80      	cmp	r3, #128	@ 0x80
 8005770:	d105      	bne.n	800577e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005772:	4b33      	ldr	r3, [pc, #204]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	4a32      	ldr	r2, [pc, #200]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 8005778:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800577c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800577e:	4b2f      	ldr	r3, [pc, #188]	@ (800583c <HAL_RCC_ClockConfig+0x260>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d21d      	bcs.n	80057c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800578c:	4b2b      	ldr	r3, [pc, #172]	@ (800583c <HAL_RCC_ClockConfig+0x260>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f023 020f 	bic.w	r2, r3, #15
 8005794:	4929      	ldr	r1, [pc, #164]	@ (800583c <HAL_RCC_ClockConfig+0x260>)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	4313      	orrs	r3, r2
 800579a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800579c:	f7fc fe50 	bl	8002440 <HAL_GetTick>
 80057a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a2:	e00a      	b.n	80057ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a4:	f7fc fe4c 	bl	8002440 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e03b      	b.n	8005832 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ba:	4b20      	ldr	r3, [pc, #128]	@ (800583c <HAL_RCC_ClockConfig+0x260>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d1ed      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d008      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	4917      	ldr	r1, [pc, #92]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d009      	beq.n	8005806 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057f2:	4b13      	ldr	r3, [pc, #76]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	490f      	ldr	r1, [pc, #60]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 8005802:	4313      	orrs	r3, r2
 8005804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005806:	f000 f825 	bl	8005854 <HAL_RCC_GetSysClockFreq>
 800580a:	4602      	mov	r2, r0
 800580c:	4b0c      	ldr	r3, [pc, #48]	@ (8005840 <HAL_RCC_ClockConfig+0x264>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	091b      	lsrs	r3, r3, #4
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	490c      	ldr	r1, [pc, #48]	@ (8005848 <HAL_RCC_ClockConfig+0x26c>)
 8005818:	5ccb      	ldrb	r3, [r1, r3]
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	fa22 f303 	lsr.w	r3, r2, r3
 8005822:	4a0a      	ldr	r2, [pc, #40]	@ (800584c <HAL_RCC_ClockConfig+0x270>)
 8005824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005826:	4b0a      	ldr	r3, [pc, #40]	@ (8005850 <HAL_RCC_ClockConfig+0x274>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f7fb fb0c 	bl	8000e48 <HAL_InitTick>
 8005830:	4603      	mov	r3, r0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40022000 	.word	0x40022000
 8005840:	40021000 	.word	0x40021000
 8005844:	04c4b400 	.word	0x04c4b400
 8005848:	0800b974 	.word	0x0800b974
 800584c:	20000000 	.word	0x20000000
 8005850:	200000ac 	.word	0x200000ac

08005854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800585a:	4b2c      	ldr	r3, [pc, #176]	@ (800590c <HAL_RCC_GetSysClockFreq+0xb8>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 030c 	and.w	r3, r3, #12
 8005862:	2b04      	cmp	r3, #4
 8005864:	d102      	bne.n	800586c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005866:	4b2a      	ldr	r3, [pc, #168]	@ (8005910 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005868:	613b      	str	r3, [r7, #16]
 800586a:	e047      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800586c:	4b27      	ldr	r3, [pc, #156]	@ (800590c <HAL_RCC_GetSysClockFreq+0xb8>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 030c 	and.w	r3, r3, #12
 8005874:	2b08      	cmp	r3, #8
 8005876:	d102      	bne.n	800587e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005878:	4b26      	ldr	r3, [pc, #152]	@ (8005914 <HAL_RCC_GetSysClockFreq+0xc0>)
 800587a:	613b      	str	r3, [r7, #16]
 800587c:	e03e      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800587e:	4b23      	ldr	r3, [pc, #140]	@ (800590c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f003 030c 	and.w	r3, r3, #12
 8005886:	2b0c      	cmp	r3, #12
 8005888:	d136      	bne.n	80058f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800588a:	4b20      	ldr	r3, [pc, #128]	@ (800590c <HAL_RCC_GetSysClockFreq+0xb8>)
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005894:	4b1d      	ldr	r3, [pc, #116]	@ (800590c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	091b      	lsrs	r3, r3, #4
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	3301      	adds	r3, #1
 80058a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	d10c      	bne.n	80058c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005914 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	4a16      	ldr	r2, [pc, #88]	@ (800590c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058b2:	68d2      	ldr	r2, [r2, #12]
 80058b4:	0a12      	lsrs	r2, r2, #8
 80058b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058ba:	fb02 f303 	mul.w	r3, r2, r3
 80058be:	617b      	str	r3, [r7, #20]
      break;
 80058c0:	e00c      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058c2:	4a13      	ldr	r2, [pc, #76]	@ (8005910 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ca:	4a10      	ldr	r2, [pc, #64]	@ (800590c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058cc:	68d2      	ldr	r2, [r2, #12]
 80058ce:	0a12      	lsrs	r2, r2, #8
 80058d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058d4:	fb02 f303 	mul.w	r3, r2, r3
 80058d8:	617b      	str	r3, [r7, #20]
      break;
 80058da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058dc:	4b0b      	ldr	r3, [pc, #44]	@ (800590c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	0e5b      	lsrs	r3, r3, #25
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	3301      	adds	r3, #1
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	e001      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80058fc:	693b      	ldr	r3, [r7, #16]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40021000 	.word	0x40021000
 8005910:	00f42400 	.word	0x00f42400
 8005914:	016e3600 	.word	0x016e3600

08005918 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800591c:	4b03      	ldr	r3, [pc, #12]	@ (800592c <HAL_RCC_GetHCLKFreq+0x14>)
 800591e:	681b      	ldr	r3, [r3, #0]
}
 8005920:	4618      	mov	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000000 	.word	0x20000000

08005930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005934:	f7ff fff0 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8005938:	4602      	mov	r2, r0
 800593a:	4b06      	ldr	r3, [pc, #24]	@ (8005954 <HAL_RCC_GetPCLK1Freq+0x24>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	0a1b      	lsrs	r3, r3, #8
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4904      	ldr	r1, [pc, #16]	@ (8005958 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005946:	5ccb      	ldrb	r3, [r1, r3]
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005950:	4618      	mov	r0, r3
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40021000 	.word	0x40021000
 8005958:	0800b984 	.word	0x0800b984

0800595c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005960:	f7ff ffda 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8005964:	4602      	mov	r2, r0
 8005966:	4b06      	ldr	r3, [pc, #24]	@ (8005980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	0adb      	lsrs	r3, r3, #11
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	4904      	ldr	r1, [pc, #16]	@ (8005984 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005972:	5ccb      	ldrb	r3, [r1, r3]
 8005974:	f003 031f 	and.w	r3, r3, #31
 8005978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800597c:	4618      	mov	r0, r3
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40021000 	.word	0x40021000
 8005984:	0800b984 	.word	0x0800b984

08005988 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	220f      	movs	r2, #15
 8005996:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005998:	4b12      	ldr	r3, [pc, #72]	@ (80059e4 <HAL_RCC_GetClockConfig+0x5c>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 0203 	and.w	r2, r3, #3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80059a4:	4b0f      	ldr	r3, [pc, #60]	@ (80059e4 <HAL_RCC_GetClockConfig+0x5c>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80059b0:	4b0c      	ldr	r3, [pc, #48]	@ (80059e4 <HAL_RCC_GetClockConfig+0x5c>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80059bc:	4b09      	ldr	r3, [pc, #36]	@ (80059e4 <HAL_RCC_GetClockConfig+0x5c>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	08db      	lsrs	r3, r3, #3
 80059c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80059ca:	4b07      	ldr	r3, [pc, #28]	@ (80059e8 <HAL_RCC_GetClockConfig+0x60>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 020f 	and.w	r2, r3, #15
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	601a      	str	r2, [r3, #0]
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40021000 	.word	0x40021000
 80059e8:	40022000 	.word	0x40022000

080059ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059f2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059fc:	4b1b      	ldr	r3, [pc, #108]	@ (8005a6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	091b      	lsrs	r3, r3, #4
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	3301      	adds	r3, #1
 8005a08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d10c      	bne.n	8005a2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a10:	4a17      	ldr	r2, [pc, #92]	@ (8005a70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a18:	4a14      	ldr	r2, [pc, #80]	@ (8005a6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a1a:	68d2      	ldr	r2, [r2, #12]
 8005a1c:	0a12      	lsrs	r2, r2, #8
 8005a1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a22:	fb02 f303 	mul.w	r3, r2, r3
 8005a26:	617b      	str	r3, [r7, #20]
    break;
 8005a28:	e00c      	b.n	8005a44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a2a:	4a12      	ldr	r2, [pc, #72]	@ (8005a74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a32:	4a0e      	ldr	r2, [pc, #56]	@ (8005a6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a34:	68d2      	ldr	r2, [r2, #12]
 8005a36:	0a12      	lsrs	r2, r2, #8
 8005a38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a3c:	fb02 f303 	mul.w	r3, r2, r3
 8005a40:	617b      	str	r3, [r7, #20]
    break;
 8005a42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a44:	4b09      	ldr	r3, [pc, #36]	@ (8005a6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	0e5b      	lsrs	r3, r3, #25
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	3301      	adds	r3, #1
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a5e:	687b      	ldr	r3, [r7, #4]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	016e3600 	.word	0x016e3600
 8005a74:	00f42400 	.word	0x00f42400

08005a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a80:	2300      	movs	r3, #0
 8005a82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a84:	2300      	movs	r3, #0
 8005a86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 8098 	beq.w	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a96:	2300      	movs	r3, #0
 8005a98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a9a:	4b43      	ldr	r3, [pc, #268]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10d      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aa6:	4b40      	ldr	r3, [pc, #256]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aaa:	4a3f      	ldr	r2, [pc, #252]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ab0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aba:	60bb      	str	r3, [r7, #8]
 8005abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a39      	ldr	r2, [pc, #228]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005acc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ace:	f7fc fcb7 	bl	8002440 <HAL_GetTick>
 8005ad2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ad4:	e009      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad6:	f7fc fcb3 	bl	8002440 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d902      	bls.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	74fb      	strb	r3, [r7, #19]
        break;
 8005ae8:	e005      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005aea:	4b30      	ldr	r3, [pc, #192]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0ef      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005af6:	7cfb      	ldrb	r3, [r7, #19]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d159      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005afc:	4b2a      	ldr	r3, [pc, #168]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d01e      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d019      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b18:	4b23      	ldr	r3, [pc, #140]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b24:	4b20      	ldr	r3, [pc, #128]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b34:	4b1c      	ldr	r3, [pc, #112]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b44:	4a18      	ldr	r2, [pc, #96]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d016      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b56:	f7fc fc73 	bl	8002440 <HAL_GetTick>
 8005b5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b5c:	e00b      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b5e:	f7fc fc6f 	bl	8002440 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d902      	bls.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	74fb      	strb	r3, [r7, #19]
            break;
 8005b74:	e006      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b76:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0ec      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b84:	7cfb      	ldrb	r3, [r7, #19]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b8a:	4b07      	ldr	r3, [pc, #28]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b98:	4903      	ldr	r1, [pc, #12]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ba2:	7cfb      	ldrb	r3, [r7, #19]
 8005ba4:	74bb      	strb	r3, [r7, #18]
 8005ba6:	e005      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb0:	7cfb      	ldrb	r3, [r7, #19]
 8005bb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bb4:	7c7b      	ldrb	r3, [r7, #17]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d105      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bba:	4ba7      	ldr	r3, [pc, #668]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bbe:	4aa6      	ldr	r2, [pc, #664]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bd2:	4ba1      	ldr	r3, [pc, #644]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd8:	f023 0203 	bic.w	r2, r3, #3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	499d      	ldr	r1, [pc, #628]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bf4:	4b98      	ldr	r3, [pc, #608]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfa:	f023 020c 	bic.w	r2, r3, #12
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	4995      	ldr	r1, [pc, #596]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c16:	4b90      	ldr	r3, [pc, #576]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	498c      	ldr	r1, [pc, #560]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c38:	4b87      	ldr	r3, [pc, #540]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	4984      	ldr	r1, [pc, #528]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	497b      	ldr	r1, [pc, #492]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c7c:	4b76      	ldr	r3, [pc, #472]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	4973      	ldr	r1, [pc, #460]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c9e:	4b6e      	ldr	r3, [pc, #440]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	496a      	ldr	r1, [pc, #424]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cc0:	4b65      	ldr	r3, [pc, #404]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	4962      	ldr	r1, [pc, #392]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf0:	4959      	ldr	r1, [pc, #356]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d04:	4b54      	ldr	r3, [pc, #336]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d0a:	f023 0203 	bic.w	r2, r3, #3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d12:	4951      	ldr	r1, [pc, #324]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d26:	4b4c      	ldr	r3, [pc, #304]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	4948      	ldr	r1, [pc, #288]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d015      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d48:	4b43      	ldr	r3, [pc, #268]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d56:	4940      	ldr	r1, [pc, #256]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d66:	d105      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d68:	4b3b      	ldr	r3, [pc, #236]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	4a3a      	ldr	r2, [pc, #232]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d72:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d015      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d80:	4b35      	ldr	r3, [pc, #212]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d8e:	4932      	ldr	r1, [pc, #200]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d9e:	d105      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005da0:	4b2d      	ldr	r3, [pc, #180]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	4a2c      	ldr	r2, [pc, #176]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005daa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d015      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005db8:	4b27      	ldr	r3, [pc, #156]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dbe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc6:	4924      	ldr	r1, [pc, #144]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dd6:	d105      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	4a1e      	ldr	r2, [pc, #120]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005de2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d015      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005df0:	4b19      	ldr	r3, [pc, #100]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dfe:	4916      	ldr	r1, [pc, #88]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e0e:	d105      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e10:	4b11      	ldr	r3, [pc, #68]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	4a10      	ldr	r2, [pc, #64]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d019      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e28:	4b0b      	ldr	r3, [pc, #44]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e36:	4908      	ldr	r1, [pc, #32]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e46:	d109      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e48:	4b03      	ldr	r3, [pc, #12]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	4a02      	ldr	r2, [pc, #8]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e52:	60d3      	str	r3, [r2, #12]
 8005e54:	e002      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e56:	bf00      	nop
 8005e58:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d015      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e68:	4b29      	ldr	r3, [pc, #164]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e76:	4926      	ldr	r1, [pc, #152]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e86:	d105      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e88:	4b21      	ldr	r3, [pc, #132]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	4a20      	ldr	r2, [pc, #128]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e92:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d015      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eae:	4918      	ldr	r1, [pc, #96]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ebe:	d105      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ec0:	4b13      	ldr	r3, [pc, #76]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4a12      	ldr	r2, [pc, #72]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d015      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ede:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ee6:	490a      	ldr	r1, [pc, #40]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ef2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ef6:	d105      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ef8:	4b05      	ldr	r3, [pc, #20]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	4a04      	ldr	r2, [pc, #16]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005efe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f04:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	40021000 	.word	0x40021000

08005f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e049      	b.n	8005fba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d106      	bne.n	8005f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fb fae2 	bl	8001504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4619      	mov	r1, r3
 8005f52:	4610      	mov	r0, r2
 8005f54:	f001 f82c 	bl	8006fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d001      	beq.n	8005fdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e04c      	b.n	8006076 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a26      	ldr	r2, [pc, #152]	@ (8006084 <HAL_TIM_Base_Start+0xc0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d022      	beq.n	8006034 <HAL_TIM_Base_Start+0x70>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff6:	d01d      	beq.n	8006034 <HAL_TIM_Base_Start+0x70>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a22      	ldr	r2, [pc, #136]	@ (8006088 <HAL_TIM_Base_Start+0xc4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d018      	beq.n	8006034 <HAL_TIM_Base_Start+0x70>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a21      	ldr	r2, [pc, #132]	@ (800608c <HAL_TIM_Base_Start+0xc8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <HAL_TIM_Base_Start+0x70>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a1f      	ldr	r2, [pc, #124]	@ (8006090 <HAL_TIM_Base_Start+0xcc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00e      	beq.n	8006034 <HAL_TIM_Base_Start+0x70>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1e      	ldr	r2, [pc, #120]	@ (8006094 <HAL_TIM_Base_Start+0xd0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_TIM_Base_Start+0x70>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1c      	ldr	r2, [pc, #112]	@ (8006098 <HAL_TIM_Base_Start+0xd4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <HAL_TIM_Base_Start+0x70>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1b      	ldr	r2, [pc, #108]	@ (800609c <HAL_TIM_Base_Start+0xd8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d115      	bne.n	8006060 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	4b19      	ldr	r3, [pc, #100]	@ (80060a0 <HAL_TIM_Base_Start+0xdc>)
 800603c:	4013      	ands	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b06      	cmp	r3, #6
 8006044:	d015      	beq.n	8006072 <HAL_TIM_Base_Start+0xae>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800604c:	d011      	beq.n	8006072 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0201 	orr.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605e:	e008      	b.n	8006072 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	e000      	b.n	8006074 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006072:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40012c00 	.word	0x40012c00
 8006088:	40000400 	.word	0x40000400
 800608c:	40000800 	.word	0x40000800
 8006090:	40000c00 	.word	0x40000c00
 8006094:	40013400 	.word	0x40013400
 8006098:	40014000 	.word	0x40014000
 800609c:	40015000 	.word	0x40015000
 80060a0:	00010007 	.word	0x00010007

080060a4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6a1a      	ldr	r2, [r3, #32]
 80060b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80060b6:	4013      	ands	r3, r2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10f      	bne.n	80060dc <HAL_TIM_Base_Stop+0x38>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6a1a      	ldr	r2, [r3, #32]
 80060c2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80060c6:	4013      	ands	r3, r2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d107      	bne.n	80060dc <HAL_TIM_Base_Stop+0x38>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0201 	bic.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b01      	cmp	r3, #1
 8006106:	d001      	beq.n	800610c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e054      	b.n	80061b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0201 	orr.w	r2, r2, #1
 8006122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a26      	ldr	r2, [pc, #152]	@ (80061c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d022      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x80>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006136:	d01d      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x80>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a22      	ldr	r2, [pc, #136]	@ (80061c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d018      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x80>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a21      	ldr	r2, [pc, #132]	@ (80061cc <HAL_TIM_Base_Start_IT+0xd8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d013      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x80>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a1f      	ldr	r2, [pc, #124]	@ (80061d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00e      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x80>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a1e      	ldr	r2, [pc, #120]	@ (80061d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d009      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x80>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a1c      	ldr	r2, [pc, #112]	@ (80061d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d004      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x80>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1b      	ldr	r2, [pc, #108]	@ (80061dc <HAL_TIM_Base_Start_IT+0xe8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d115      	bne.n	80061a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	4b19      	ldr	r3, [pc, #100]	@ (80061e0 <HAL_TIM_Base_Start_IT+0xec>)
 800617c:	4013      	ands	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b06      	cmp	r3, #6
 8006184:	d015      	beq.n	80061b2 <HAL_TIM_Base_Start_IT+0xbe>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800618c:	d011      	beq.n	80061b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0201 	orr.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800619e:	e008      	b.n	80061b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0201 	orr.w	r2, r2, #1
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	e000      	b.n	80061b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	40012c00 	.word	0x40012c00
 80061c8:	40000400 	.word	0x40000400
 80061cc:	40000800 	.word	0x40000800
 80061d0:	40000c00 	.word	0x40000c00
 80061d4:	40013400 	.word	0x40013400
 80061d8:	40014000 	.word	0x40014000
 80061dc:	40015000 	.word	0x40015000
 80061e0:	00010007 	.word	0x00010007

080061e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e049      	b.n	800628a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f841 	bl	8006292 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3304      	adds	r3, #4
 8006220:	4619      	mov	r1, r3
 8006222:	4610      	mov	r0, r2
 8006224:	f000 fec4 	bl	8006fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
	...

080062a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d109      	bne.n	80062cc <HAL_TIM_PWM_Start+0x24>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	bf14      	ite	ne
 80062c4:	2301      	movne	r3, #1
 80062c6:	2300      	moveq	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	e03c      	b.n	8006346 <HAL_TIM_PWM_Start+0x9e>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	d109      	bne.n	80062e6 <HAL_TIM_PWM_Start+0x3e>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b01      	cmp	r3, #1
 80062dc:	bf14      	ite	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	2300      	moveq	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	e02f      	b.n	8006346 <HAL_TIM_PWM_Start+0x9e>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d109      	bne.n	8006300 <HAL_TIM_PWM_Start+0x58>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	bf14      	ite	ne
 80062f8:	2301      	movne	r3, #1
 80062fa:	2300      	moveq	r3, #0
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	e022      	b.n	8006346 <HAL_TIM_PWM_Start+0x9e>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b0c      	cmp	r3, #12
 8006304:	d109      	bne.n	800631a <HAL_TIM_PWM_Start+0x72>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b01      	cmp	r3, #1
 8006310:	bf14      	ite	ne
 8006312:	2301      	movne	r3, #1
 8006314:	2300      	moveq	r3, #0
 8006316:	b2db      	uxtb	r3, r3
 8006318:	e015      	b.n	8006346 <HAL_TIM_PWM_Start+0x9e>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b10      	cmp	r3, #16
 800631e:	d109      	bne.n	8006334 <HAL_TIM_PWM_Start+0x8c>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b01      	cmp	r3, #1
 800632a:	bf14      	ite	ne
 800632c:	2301      	movne	r3, #1
 800632e:	2300      	moveq	r3, #0
 8006330:	b2db      	uxtb	r3, r3
 8006332:	e008      	b.n	8006346 <HAL_TIM_PWM_Start+0x9e>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b01      	cmp	r3, #1
 800633e:	bf14      	ite	ne
 8006340:	2301      	movne	r3, #1
 8006342:	2300      	moveq	r3, #0
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e0a6      	b.n	800649c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <HAL_TIM_PWM_Start+0xb6>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800635c:	e023      	b.n	80063a6 <HAL_TIM_PWM_Start+0xfe>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b04      	cmp	r3, #4
 8006362:	d104      	bne.n	800636e <HAL_TIM_PWM_Start+0xc6>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800636c:	e01b      	b.n	80063a6 <HAL_TIM_PWM_Start+0xfe>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b08      	cmp	r3, #8
 8006372:	d104      	bne.n	800637e <HAL_TIM_PWM_Start+0xd6>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800637c:	e013      	b.n	80063a6 <HAL_TIM_PWM_Start+0xfe>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b0c      	cmp	r3, #12
 8006382:	d104      	bne.n	800638e <HAL_TIM_PWM_Start+0xe6>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800638c:	e00b      	b.n	80063a6 <HAL_TIM_PWM_Start+0xfe>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b10      	cmp	r3, #16
 8006392:	d104      	bne.n	800639e <HAL_TIM_PWM_Start+0xf6>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800639c:	e003      	b.n	80063a6 <HAL_TIM_PWM_Start+0xfe>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2202      	movs	r2, #2
 80063a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2201      	movs	r2, #1
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f001 fa78 	bl	80078a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a3a      	ldr	r2, [pc, #232]	@ (80064a4 <HAL_TIM_PWM_Start+0x1fc>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d018      	beq.n	80063f0 <HAL_TIM_PWM_Start+0x148>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a39      	ldr	r2, [pc, #228]	@ (80064a8 <HAL_TIM_PWM_Start+0x200>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d013      	beq.n	80063f0 <HAL_TIM_PWM_Start+0x148>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a37      	ldr	r2, [pc, #220]	@ (80064ac <HAL_TIM_PWM_Start+0x204>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00e      	beq.n	80063f0 <HAL_TIM_PWM_Start+0x148>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a36      	ldr	r2, [pc, #216]	@ (80064b0 <HAL_TIM_PWM_Start+0x208>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d009      	beq.n	80063f0 <HAL_TIM_PWM_Start+0x148>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a34      	ldr	r2, [pc, #208]	@ (80064b4 <HAL_TIM_PWM_Start+0x20c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_TIM_PWM_Start+0x148>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a33      	ldr	r2, [pc, #204]	@ (80064b8 <HAL_TIM_PWM_Start+0x210>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d101      	bne.n	80063f4 <HAL_TIM_PWM_Start+0x14c>
 80063f0:	2301      	movs	r3, #1
 80063f2:	e000      	b.n	80063f6 <HAL_TIM_PWM_Start+0x14e>
 80063f4:	2300      	movs	r3, #0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d007      	beq.n	800640a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006408:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a25      	ldr	r2, [pc, #148]	@ (80064a4 <HAL_TIM_PWM_Start+0x1fc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d022      	beq.n	800645a <HAL_TIM_PWM_Start+0x1b2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800641c:	d01d      	beq.n	800645a <HAL_TIM_PWM_Start+0x1b2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a26      	ldr	r2, [pc, #152]	@ (80064bc <HAL_TIM_PWM_Start+0x214>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d018      	beq.n	800645a <HAL_TIM_PWM_Start+0x1b2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a24      	ldr	r2, [pc, #144]	@ (80064c0 <HAL_TIM_PWM_Start+0x218>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d013      	beq.n	800645a <HAL_TIM_PWM_Start+0x1b2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a23      	ldr	r2, [pc, #140]	@ (80064c4 <HAL_TIM_PWM_Start+0x21c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00e      	beq.n	800645a <HAL_TIM_PWM_Start+0x1b2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a19      	ldr	r2, [pc, #100]	@ (80064a8 <HAL_TIM_PWM_Start+0x200>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d009      	beq.n	800645a <HAL_TIM_PWM_Start+0x1b2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a18      	ldr	r2, [pc, #96]	@ (80064ac <HAL_TIM_PWM_Start+0x204>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d004      	beq.n	800645a <HAL_TIM_PWM_Start+0x1b2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a18      	ldr	r2, [pc, #96]	@ (80064b8 <HAL_TIM_PWM_Start+0x210>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d115      	bne.n	8006486 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	4b19      	ldr	r3, [pc, #100]	@ (80064c8 <HAL_TIM_PWM_Start+0x220>)
 8006462:	4013      	ands	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b06      	cmp	r3, #6
 800646a:	d015      	beq.n	8006498 <HAL_TIM_PWM_Start+0x1f0>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006472:	d011      	beq.n	8006498 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006484:	e008      	b.n	8006498 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0201 	orr.w	r2, r2, #1
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	e000      	b.n	800649a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006498:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	40012c00 	.word	0x40012c00
 80064a8:	40013400 	.word	0x40013400
 80064ac:	40014000 	.word	0x40014000
 80064b0:	40014400 	.word	0x40014400
 80064b4:	40014800 	.word	0x40014800
 80064b8:	40015000 	.word	0x40015000
 80064bc:	40000400 	.word	0x40000400
 80064c0:	40000800 	.word	0x40000800
 80064c4:	40000c00 	.word	0x40000c00
 80064c8:	00010007 	.word	0x00010007

080064cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2200      	movs	r2, #0
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f001 f9e0 	bl	80078a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a40      	ldr	r2, [pc, #256]	@ (80065ec <HAL_TIM_PWM_Stop+0x120>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d018      	beq.n	8006520 <HAL_TIM_PWM_Stop+0x54>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a3f      	ldr	r2, [pc, #252]	@ (80065f0 <HAL_TIM_PWM_Stop+0x124>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d013      	beq.n	8006520 <HAL_TIM_PWM_Stop+0x54>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a3d      	ldr	r2, [pc, #244]	@ (80065f4 <HAL_TIM_PWM_Stop+0x128>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00e      	beq.n	8006520 <HAL_TIM_PWM_Stop+0x54>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a3c      	ldr	r2, [pc, #240]	@ (80065f8 <HAL_TIM_PWM_Stop+0x12c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d009      	beq.n	8006520 <HAL_TIM_PWM_Stop+0x54>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a3a      	ldr	r2, [pc, #232]	@ (80065fc <HAL_TIM_PWM_Stop+0x130>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d004      	beq.n	8006520 <HAL_TIM_PWM_Stop+0x54>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a39      	ldr	r2, [pc, #228]	@ (8006600 <HAL_TIM_PWM_Stop+0x134>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d101      	bne.n	8006524 <HAL_TIM_PWM_Stop+0x58>
 8006520:	2301      	movs	r3, #1
 8006522:	e000      	b.n	8006526 <HAL_TIM_PWM_Stop+0x5a>
 8006524:	2300      	movs	r3, #0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d017      	beq.n	800655a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6a1a      	ldr	r2, [r3, #32]
 8006530:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006534:	4013      	ands	r3, r2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10f      	bne.n	800655a <HAL_TIM_PWM_Stop+0x8e>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6a1a      	ldr	r2, [r3, #32]
 8006540:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006544:	4013      	ands	r3, r2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d107      	bne.n	800655a <HAL_TIM_PWM_Stop+0x8e>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006558:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6a1a      	ldr	r2, [r3, #32]
 8006560:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006564:	4013      	ands	r3, r2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10f      	bne.n	800658a <HAL_TIM_PWM_Stop+0xbe>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6a1a      	ldr	r2, [r3, #32]
 8006570:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006574:	4013      	ands	r3, r2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d107      	bne.n	800658a <HAL_TIM_PWM_Stop+0xbe>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0201 	bic.w	r2, r2, #1
 8006588:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d104      	bne.n	800659a <HAL_TIM_PWM_Stop+0xce>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006598:	e023      	b.n	80065e2 <HAL_TIM_PWM_Stop+0x116>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b04      	cmp	r3, #4
 800659e:	d104      	bne.n	80065aa <HAL_TIM_PWM_Stop+0xde>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065a8:	e01b      	b.n	80065e2 <HAL_TIM_PWM_Stop+0x116>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d104      	bne.n	80065ba <HAL_TIM_PWM_Stop+0xee>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065b8:	e013      	b.n	80065e2 <HAL_TIM_PWM_Stop+0x116>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b0c      	cmp	r3, #12
 80065be:	d104      	bne.n	80065ca <HAL_TIM_PWM_Stop+0xfe>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065c8:	e00b      	b.n	80065e2 <HAL_TIM_PWM_Stop+0x116>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b10      	cmp	r3, #16
 80065ce:	d104      	bne.n	80065da <HAL_TIM_PWM_Stop+0x10e>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065d8:	e003      	b.n	80065e2 <HAL_TIM_PWM_Stop+0x116>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40012c00 	.word	0x40012c00
 80065f0:	40013400 	.word	0x40013400
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800
 8006600:	40015000 	.word	0x40015000

08006604 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e097      	b.n	8006748 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d106      	bne.n	8006632 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7fa ffcf 	bl	80015d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2202      	movs	r2, #2
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6812      	ldr	r2, [r2, #0]
 8006644:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006648:	f023 0307 	bic.w	r3, r3, #7
 800664c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3304      	adds	r3, #4
 8006656:	4619      	mov	r1, r3
 8006658:	4610      	mov	r0, r2
 800665a:	f000 fca9 	bl	8006fb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006686:	f023 0303 	bic.w	r3, r3, #3
 800668a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	689a      	ldr	r2, [r3, #8]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	4313      	orrs	r3, r2
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	4313      	orrs	r3, r2
 800669c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80066a4:	f023 030c 	bic.w	r3, r3, #12
 80066a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	021b      	lsls	r3, r3, #8
 80066c0:	4313      	orrs	r3, r2
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	011a      	lsls	r2, r3, #4
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	031b      	lsls	r3, r3, #12
 80066d4:	4313      	orrs	r3, r2
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80066e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80066ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	4313      	orrs	r3, r2
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006760:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006768:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006770:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006778:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d110      	bne.n	80067a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d102      	bne.n	800678c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006786:	7b7b      	ldrb	r3, [r7, #13]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d001      	beq.n	8006790 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e069      	b.n	8006864 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067a0:	e031      	b.n	8006806 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d110      	bne.n	80067ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d102      	bne.n	80067b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067ae:	7b3b      	ldrb	r3, [r7, #12]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d001      	beq.n	80067b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e055      	b.n	8006864 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067c8:	e01d      	b.n	8006806 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d108      	bne.n	80067e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d105      	bne.n	80067e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067d6:	7b7b      	ldrb	r3, [r7, #13]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d102      	bne.n	80067e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067dc:	7b3b      	ldrb	r3, [r7, #12]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d001      	beq.n	80067e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e03e      	b.n	8006864 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2202      	movs	r2, #2
 80067ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2202      	movs	r2, #2
 80067f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2202      	movs	r2, #2
 80067fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2202      	movs	r2, #2
 8006802:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <HAL_TIM_Encoder_Start+0xc4>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b04      	cmp	r3, #4
 8006810:	d008      	beq.n	8006824 <HAL_TIM_Encoder_Start+0xd4>
 8006812:	e00f      	b.n	8006834 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2201      	movs	r2, #1
 800681a:	2100      	movs	r1, #0
 800681c:	4618      	mov	r0, r3
 800681e:	f001 f841 	bl	80078a4 <TIM_CCxChannelCmd>
      break;
 8006822:	e016      	b.n	8006852 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2201      	movs	r2, #1
 800682a:	2104      	movs	r1, #4
 800682c:	4618      	mov	r0, r3
 800682e:	f001 f839 	bl	80078a4 <TIM_CCxChannelCmd>
      break;
 8006832:	e00e      	b.n	8006852 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2201      	movs	r2, #1
 800683a:	2100      	movs	r1, #0
 800683c:	4618      	mov	r0, r3
 800683e:	f001 f831 	bl	80078a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2201      	movs	r2, #1
 8006848:	2104      	movs	r1, #4
 800684a:	4618      	mov	r0, r3
 800684c:	f001 f82a 	bl	80078a4 <TIM_CCxChannelCmd>
      break;
 8006850:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f042 0201 	orr.w	r2, r2, #1
 8006860:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d020      	beq.n	80068d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01b      	beq.n	80068d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0202 	mvn.w	r2, #2
 80068a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	f003 0303 	and.w	r3, r3, #3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fb5c 	bl	8006f74 <HAL_TIM_IC_CaptureCallback>
 80068bc:	e005      	b.n	80068ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fb4e 	bl	8006f60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fb5f 	bl	8006f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d020      	beq.n	800691c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01b      	beq.n	800691c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f06f 0204 	mvn.w	r2, #4
 80068ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2202      	movs	r2, #2
 80068f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fb36 	bl	8006f74 <HAL_TIM_IC_CaptureCallback>
 8006908:	e005      	b.n	8006916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fb28 	bl	8006f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fb39 	bl	8006f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f003 0308 	and.w	r3, r3, #8
 8006922:	2b00      	cmp	r3, #0
 8006924:	d020      	beq.n	8006968 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01b      	beq.n	8006968 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0208 	mvn.w	r2, #8
 8006938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2204      	movs	r2, #4
 800693e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fb10 	bl	8006f74 <HAL_TIM_IC_CaptureCallback>
 8006954:	e005      	b.n	8006962 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fb02 	bl	8006f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fb13 	bl	8006f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f003 0310 	and.w	r3, r3, #16
 800696e:	2b00      	cmp	r3, #0
 8006970:	d020      	beq.n	80069b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f003 0310 	and.w	r3, r3, #16
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01b      	beq.n	80069b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f06f 0210 	mvn.w	r2, #16
 8006984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2208      	movs	r2, #8
 800698a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 faea 	bl	8006f74 <HAL_TIM_IC_CaptureCallback>
 80069a0:	e005      	b.n	80069ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fadc 	bl	8006f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 faed 	bl	8006f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00c      	beq.n	80069d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d007      	beq.n	80069d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f06f 0201 	mvn.w	r2, #1
 80069d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7fa f9a2 	bl	8000d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d104      	bne.n	80069ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00c      	beq.n	8006a06 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d007      	beq.n	8006a06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80069fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 f9c9 	bl	8007d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00c      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d007      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 f9c1 	bl	8007dac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00c      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d007      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 faa7 	bl	8006f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f003 0320 	and.w	r3, r3, #32
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00c      	beq.n	8006a72 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d007      	beq.n	8006a72 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f06f 0220 	mvn.w	r2, #32
 8006a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 f989 	bl	8007d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00c      	beq.n	8006a96 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d007      	beq.n	8006a96 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f001 f995 	bl	8007dc0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00c      	beq.n	8006aba <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d007      	beq.n	8006aba <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 f98d 	bl	8007dd4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00c      	beq.n	8006ade <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d007      	beq.n	8006ade <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 f985 	bl	8007de8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00c      	beq.n	8006b02 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d007      	beq.n	8006b02 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 f97d 	bl	8007dfc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b02:	bf00      	nop
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d101      	bne.n	8006b2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b26:	2302      	movs	r3, #2
 8006b28:	e0ff      	b.n	8006d2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b14      	cmp	r3, #20
 8006b36:	f200 80f0 	bhi.w	8006d1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006b95 	.word	0x08006b95
 8006b44:	08006d1b 	.word	0x08006d1b
 8006b48:	08006d1b 	.word	0x08006d1b
 8006b4c:	08006d1b 	.word	0x08006d1b
 8006b50:	08006bd5 	.word	0x08006bd5
 8006b54:	08006d1b 	.word	0x08006d1b
 8006b58:	08006d1b 	.word	0x08006d1b
 8006b5c:	08006d1b 	.word	0x08006d1b
 8006b60:	08006c17 	.word	0x08006c17
 8006b64:	08006d1b 	.word	0x08006d1b
 8006b68:	08006d1b 	.word	0x08006d1b
 8006b6c:	08006d1b 	.word	0x08006d1b
 8006b70:	08006c57 	.word	0x08006c57
 8006b74:	08006d1b 	.word	0x08006d1b
 8006b78:	08006d1b 	.word	0x08006d1b
 8006b7c:	08006d1b 	.word	0x08006d1b
 8006b80:	08006c99 	.word	0x08006c99
 8006b84:	08006d1b 	.word	0x08006d1b
 8006b88:	08006d1b 	.word	0x08006d1b
 8006b8c:	08006d1b 	.word	0x08006d1b
 8006b90:	08006cd9 	.word	0x08006cd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fabc 	bl	8007118 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699a      	ldr	r2, [r3, #24]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f042 0208 	orr.w	r2, r2, #8
 8006bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699a      	ldr	r2, [r3, #24]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0204 	bic.w	r2, r2, #4
 8006bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6999      	ldr	r1, [r3, #24]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	691a      	ldr	r2, [r3, #16]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	619a      	str	r2, [r3, #24]
      break;
 8006bd2:	e0a5      	b.n	8006d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fb36 	bl	800724c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6999      	ldr	r1, [r3, #24]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	021a      	lsls	r2, r3, #8
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	619a      	str	r2, [r3, #24]
      break;
 8006c14:	e084      	b.n	8006d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68b9      	ldr	r1, [r7, #8]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fba9 	bl	8007374 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69da      	ldr	r2, [r3, #28]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f042 0208 	orr.w	r2, r2, #8
 8006c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0204 	bic.w	r2, r2, #4
 8006c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69d9      	ldr	r1, [r3, #28]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	691a      	ldr	r2, [r3, #16]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	61da      	str	r2, [r3, #28]
      break;
 8006c54:	e064      	b.n	8006d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fc1b 	bl	8007498 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69da      	ldr	r2, [r3, #28]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69d9      	ldr	r1, [r3, #28]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	021a      	lsls	r2, r3, #8
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	61da      	str	r2, [r3, #28]
      break;
 8006c96:	e043      	b.n	8006d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68b9      	ldr	r1, [r7, #8]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fc8e 	bl	80075c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0208 	orr.w	r2, r2, #8
 8006cb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0204 	bic.w	r2, r2, #4
 8006cc2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006cd6:	e023      	b.n	8006d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fcd8 	bl	8007694 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cf2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d02:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	021a      	lsls	r2, r3, #8
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006d18:	e002      	b.n	8006d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3718      	adds	r7, #24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop

08006d34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d101      	bne.n	8006d50 <HAL_TIM_ConfigClockSource+0x1c>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e0f6      	b.n	8006f3e <HAL_TIM_ConfigClockSource+0x20a>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006d6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a6f      	ldr	r2, [pc, #444]	@ (8006f48 <HAL_TIM_ConfigClockSource+0x214>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	f000 80c1 	beq.w	8006f12 <HAL_TIM_ConfigClockSource+0x1de>
 8006d90:	4a6d      	ldr	r2, [pc, #436]	@ (8006f48 <HAL_TIM_ConfigClockSource+0x214>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	f200 80c6 	bhi.w	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d98:	4a6c      	ldr	r2, [pc, #432]	@ (8006f4c <HAL_TIM_ConfigClockSource+0x218>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	f000 80b9 	beq.w	8006f12 <HAL_TIM_ConfigClockSource+0x1de>
 8006da0:	4a6a      	ldr	r2, [pc, #424]	@ (8006f4c <HAL_TIM_ConfigClockSource+0x218>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	f200 80be 	bhi.w	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
 8006da8:	4a69      	ldr	r2, [pc, #420]	@ (8006f50 <HAL_TIM_ConfigClockSource+0x21c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	f000 80b1 	beq.w	8006f12 <HAL_TIM_ConfigClockSource+0x1de>
 8006db0:	4a67      	ldr	r2, [pc, #412]	@ (8006f50 <HAL_TIM_ConfigClockSource+0x21c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	f200 80b6 	bhi.w	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
 8006db8:	4a66      	ldr	r2, [pc, #408]	@ (8006f54 <HAL_TIM_ConfigClockSource+0x220>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	f000 80a9 	beq.w	8006f12 <HAL_TIM_ConfigClockSource+0x1de>
 8006dc0:	4a64      	ldr	r2, [pc, #400]	@ (8006f54 <HAL_TIM_ConfigClockSource+0x220>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	f200 80ae 	bhi.w	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dc8:	4a63      	ldr	r2, [pc, #396]	@ (8006f58 <HAL_TIM_ConfigClockSource+0x224>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	f000 80a1 	beq.w	8006f12 <HAL_TIM_ConfigClockSource+0x1de>
 8006dd0:	4a61      	ldr	r2, [pc, #388]	@ (8006f58 <HAL_TIM_ConfigClockSource+0x224>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	f200 80a6 	bhi.w	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dd8:	4a60      	ldr	r2, [pc, #384]	@ (8006f5c <HAL_TIM_ConfigClockSource+0x228>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	f000 8099 	beq.w	8006f12 <HAL_TIM_ConfigClockSource+0x1de>
 8006de0:	4a5e      	ldr	r2, [pc, #376]	@ (8006f5c <HAL_TIM_ConfigClockSource+0x228>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	f200 809e 	bhi.w	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
 8006de8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006dec:	f000 8091 	beq.w	8006f12 <HAL_TIM_ConfigClockSource+0x1de>
 8006df0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006df4:	f200 8096 	bhi.w	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
 8006df8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dfc:	f000 8089 	beq.w	8006f12 <HAL_TIM_ConfigClockSource+0x1de>
 8006e00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e04:	f200 808e 	bhi.w	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e0c:	d03e      	beq.n	8006e8c <HAL_TIM_ConfigClockSource+0x158>
 8006e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e12:	f200 8087 	bhi.w	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e1a:	f000 8086 	beq.w	8006f2a <HAL_TIM_ConfigClockSource+0x1f6>
 8006e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e22:	d87f      	bhi.n	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e24:	2b70      	cmp	r3, #112	@ 0x70
 8006e26:	d01a      	beq.n	8006e5e <HAL_TIM_ConfigClockSource+0x12a>
 8006e28:	2b70      	cmp	r3, #112	@ 0x70
 8006e2a:	d87b      	bhi.n	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e2c:	2b60      	cmp	r3, #96	@ 0x60
 8006e2e:	d050      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x19e>
 8006e30:	2b60      	cmp	r3, #96	@ 0x60
 8006e32:	d877      	bhi.n	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e34:	2b50      	cmp	r3, #80	@ 0x50
 8006e36:	d03c      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x17e>
 8006e38:	2b50      	cmp	r3, #80	@ 0x50
 8006e3a:	d873      	bhi.n	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e3c:	2b40      	cmp	r3, #64	@ 0x40
 8006e3e:	d058      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x1be>
 8006e40:	2b40      	cmp	r3, #64	@ 0x40
 8006e42:	d86f      	bhi.n	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e44:	2b30      	cmp	r3, #48	@ 0x30
 8006e46:	d064      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x1de>
 8006e48:	2b30      	cmp	r3, #48	@ 0x30
 8006e4a:	d86b      	bhi.n	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e4c:	2b20      	cmp	r3, #32
 8006e4e:	d060      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x1de>
 8006e50:	2b20      	cmp	r3, #32
 8006e52:	d867      	bhi.n	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d05c      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x1de>
 8006e58:	2b10      	cmp	r3, #16
 8006e5a:	d05a      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x1de>
 8006e5c:	e062      	b.n	8006f24 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e6e:	f000 fcf9 	bl	8007864 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	609a      	str	r2, [r3, #8]
      break;
 8006e8a:	e04f      	b.n	8006f2c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e9c:	f000 fce2 	bl	8007864 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689a      	ldr	r2, [r3, #8]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006eae:	609a      	str	r2, [r3, #8]
      break;
 8006eb0:	e03c      	b.n	8006f2c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f000 fc54 	bl	800776c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2150      	movs	r1, #80	@ 0x50
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fcad 	bl	800782a <TIM_ITRx_SetConfig>
      break;
 8006ed0:	e02c      	b.n	8006f2c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f000 fc73 	bl	80077ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2160      	movs	r1, #96	@ 0x60
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fc9d 	bl	800782a <TIM_ITRx_SetConfig>
      break;
 8006ef0:	e01c      	b.n	8006f2c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efe:	461a      	mov	r2, r3
 8006f00:	f000 fc34 	bl	800776c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2140      	movs	r1, #64	@ 0x40
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fc8d 	bl	800782a <TIM_ITRx_SetConfig>
      break;
 8006f10:	e00c      	b.n	8006f2c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	f000 fc84 	bl	800782a <TIM_ITRx_SetConfig>
      break;
 8006f22:	e003      	b.n	8006f2c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
      break;
 8006f28:	e000      	b.n	8006f2c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006f2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	00100070 	.word	0x00100070
 8006f4c:	00100060 	.word	0x00100060
 8006f50:	00100050 	.word	0x00100050
 8006f54:	00100040 	.word	0x00100040
 8006f58:	00100030 	.word	0x00100030
 8006f5c:	00100020 	.word	0x00100020

08006f60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a4c      	ldr	r2, [pc, #304]	@ (80070f4 <TIM_Base_SetConfig+0x144>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d017      	beq.n	8006ff8 <TIM_Base_SetConfig+0x48>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fce:	d013      	beq.n	8006ff8 <TIM_Base_SetConfig+0x48>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a49      	ldr	r2, [pc, #292]	@ (80070f8 <TIM_Base_SetConfig+0x148>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d00f      	beq.n	8006ff8 <TIM_Base_SetConfig+0x48>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a48      	ldr	r2, [pc, #288]	@ (80070fc <TIM_Base_SetConfig+0x14c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00b      	beq.n	8006ff8 <TIM_Base_SetConfig+0x48>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a47      	ldr	r2, [pc, #284]	@ (8007100 <TIM_Base_SetConfig+0x150>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d007      	beq.n	8006ff8 <TIM_Base_SetConfig+0x48>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a46      	ldr	r2, [pc, #280]	@ (8007104 <TIM_Base_SetConfig+0x154>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d003      	beq.n	8006ff8 <TIM_Base_SetConfig+0x48>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a45      	ldr	r2, [pc, #276]	@ (8007108 <TIM_Base_SetConfig+0x158>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d108      	bne.n	800700a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a39      	ldr	r2, [pc, #228]	@ (80070f4 <TIM_Base_SetConfig+0x144>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d023      	beq.n	800705a <TIM_Base_SetConfig+0xaa>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007018:	d01f      	beq.n	800705a <TIM_Base_SetConfig+0xaa>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a36      	ldr	r2, [pc, #216]	@ (80070f8 <TIM_Base_SetConfig+0x148>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d01b      	beq.n	800705a <TIM_Base_SetConfig+0xaa>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a35      	ldr	r2, [pc, #212]	@ (80070fc <TIM_Base_SetConfig+0x14c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d017      	beq.n	800705a <TIM_Base_SetConfig+0xaa>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a34      	ldr	r2, [pc, #208]	@ (8007100 <TIM_Base_SetConfig+0x150>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d013      	beq.n	800705a <TIM_Base_SetConfig+0xaa>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a33      	ldr	r2, [pc, #204]	@ (8007104 <TIM_Base_SetConfig+0x154>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d00f      	beq.n	800705a <TIM_Base_SetConfig+0xaa>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a33      	ldr	r2, [pc, #204]	@ (800710c <TIM_Base_SetConfig+0x15c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00b      	beq.n	800705a <TIM_Base_SetConfig+0xaa>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a32      	ldr	r2, [pc, #200]	@ (8007110 <TIM_Base_SetConfig+0x160>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d007      	beq.n	800705a <TIM_Base_SetConfig+0xaa>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a31      	ldr	r2, [pc, #196]	@ (8007114 <TIM_Base_SetConfig+0x164>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d003      	beq.n	800705a <TIM_Base_SetConfig+0xaa>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a2c      	ldr	r2, [pc, #176]	@ (8007108 <TIM_Base_SetConfig+0x158>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d108      	bne.n	800706c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	4313      	orrs	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a18      	ldr	r2, [pc, #96]	@ (80070f4 <TIM_Base_SetConfig+0x144>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d013      	beq.n	80070c0 <TIM_Base_SetConfig+0x110>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a1a      	ldr	r2, [pc, #104]	@ (8007104 <TIM_Base_SetConfig+0x154>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d00f      	beq.n	80070c0 <TIM_Base_SetConfig+0x110>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a1a      	ldr	r2, [pc, #104]	@ (800710c <TIM_Base_SetConfig+0x15c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d00b      	beq.n	80070c0 <TIM_Base_SetConfig+0x110>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a19      	ldr	r2, [pc, #100]	@ (8007110 <TIM_Base_SetConfig+0x160>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d007      	beq.n	80070c0 <TIM_Base_SetConfig+0x110>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a18      	ldr	r2, [pc, #96]	@ (8007114 <TIM_Base_SetConfig+0x164>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d003      	beq.n	80070c0 <TIM_Base_SetConfig+0x110>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a13      	ldr	r2, [pc, #76]	@ (8007108 <TIM_Base_SetConfig+0x158>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d103      	bne.n	80070c8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	691a      	ldr	r2, [r3, #16]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d105      	bne.n	80070e6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	f023 0201 	bic.w	r2, r3, #1
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	611a      	str	r2, [r3, #16]
  }
}
 80070e6:	bf00      	nop
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	40012c00 	.word	0x40012c00
 80070f8:	40000400 	.word	0x40000400
 80070fc:	40000800 	.word	0x40000800
 8007100:	40000c00 	.word	0x40000c00
 8007104:	40013400 	.word	0x40013400
 8007108:	40015000 	.word	0x40015000
 800710c:	40014000 	.word	0x40014000
 8007110:	40014400 	.word	0x40014400
 8007114:	40014800 	.word	0x40014800

08007118 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	f023 0201 	bic.w	r2, r3, #1
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800714a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 0303 	bic.w	r3, r3, #3
 8007152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f023 0302 	bic.w	r3, r3, #2
 8007164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a30      	ldr	r2, [pc, #192]	@ (8007234 <TIM_OC1_SetConfig+0x11c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d013      	beq.n	80071a0 <TIM_OC1_SetConfig+0x88>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a2f      	ldr	r2, [pc, #188]	@ (8007238 <TIM_OC1_SetConfig+0x120>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d00f      	beq.n	80071a0 <TIM_OC1_SetConfig+0x88>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a2e      	ldr	r2, [pc, #184]	@ (800723c <TIM_OC1_SetConfig+0x124>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00b      	beq.n	80071a0 <TIM_OC1_SetConfig+0x88>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a2d      	ldr	r2, [pc, #180]	@ (8007240 <TIM_OC1_SetConfig+0x128>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d007      	beq.n	80071a0 <TIM_OC1_SetConfig+0x88>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a2c      	ldr	r2, [pc, #176]	@ (8007244 <TIM_OC1_SetConfig+0x12c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d003      	beq.n	80071a0 <TIM_OC1_SetConfig+0x88>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a2b      	ldr	r2, [pc, #172]	@ (8007248 <TIM_OC1_SetConfig+0x130>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d10c      	bne.n	80071ba <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f023 0308 	bic.w	r3, r3, #8
 80071a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f023 0304 	bic.w	r3, r3, #4
 80071b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007234 <TIM_OC1_SetConfig+0x11c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d013      	beq.n	80071ea <TIM_OC1_SetConfig+0xd2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007238 <TIM_OC1_SetConfig+0x120>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00f      	beq.n	80071ea <TIM_OC1_SetConfig+0xd2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a1b      	ldr	r2, [pc, #108]	@ (800723c <TIM_OC1_SetConfig+0x124>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d00b      	beq.n	80071ea <TIM_OC1_SetConfig+0xd2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007240 <TIM_OC1_SetConfig+0x128>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d007      	beq.n	80071ea <TIM_OC1_SetConfig+0xd2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a19      	ldr	r2, [pc, #100]	@ (8007244 <TIM_OC1_SetConfig+0x12c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d003      	beq.n	80071ea <TIM_OC1_SetConfig+0xd2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a18      	ldr	r2, [pc, #96]	@ (8007248 <TIM_OC1_SetConfig+0x130>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d111      	bne.n	800720e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	4313      	orrs	r3, r2
 8007202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	4313      	orrs	r3, r2
 800720c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	621a      	str	r2, [r3, #32]
}
 8007228:	bf00      	nop
 800722a:	371c      	adds	r7, #28
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	40012c00 	.word	0x40012c00
 8007238:	40013400 	.word	0x40013400
 800723c:	40014000 	.word	0x40014000
 8007240:	40014400 	.word	0x40014400
 8007244:	40014800 	.word	0x40014800
 8007248:	40015000 	.word	0x40015000

0800724c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	f023 0210 	bic.w	r2, r3, #16
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800727a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800727e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	021b      	lsls	r3, r3, #8
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4313      	orrs	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f023 0320 	bic.w	r3, r3, #32
 800729a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	011b      	lsls	r3, r3, #4
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a2c      	ldr	r2, [pc, #176]	@ (800735c <TIM_OC2_SetConfig+0x110>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d007      	beq.n	80072c0 <TIM_OC2_SetConfig+0x74>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a2b      	ldr	r2, [pc, #172]	@ (8007360 <TIM_OC2_SetConfig+0x114>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d003      	beq.n	80072c0 <TIM_OC2_SetConfig+0x74>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a2a      	ldr	r2, [pc, #168]	@ (8007364 <TIM_OC2_SetConfig+0x118>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d10d      	bne.n	80072dc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a1f      	ldr	r2, [pc, #124]	@ (800735c <TIM_OC2_SetConfig+0x110>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d013      	beq.n	800730c <TIM_OC2_SetConfig+0xc0>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007360 <TIM_OC2_SetConfig+0x114>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d00f      	beq.n	800730c <TIM_OC2_SetConfig+0xc0>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007368 <TIM_OC2_SetConfig+0x11c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d00b      	beq.n	800730c <TIM_OC2_SetConfig+0xc0>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a1d      	ldr	r2, [pc, #116]	@ (800736c <TIM_OC2_SetConfig+0x120>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d007      	beq.n	800730c <TIM_OC2_SetConfig+0xc0>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a1c      	ldr	r2, [pc, #112]	@ (8007370 <TIM_OC2_SetConfig+0x124>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d003      	beq.n	800730c <TIM_OC2_SetConfig+0xc0>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a17      	ldr	r2, [pc, #92]	@ (8007364 <TIM_OC2_SetConfig+0x118>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d113      	bne.n	8007334 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007312:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800731a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	4313      	orrs	r3, r2
 8007332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	621a      	str	r2, [r3, #32]
}
 800734e:	bf00      	nop
 8007350:	371c      	adds	r7, #28
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40012c00 	.word	0x40012c00
 8007360:	40013400 	.word	0x40013400
 8007364:	40015000 	.word	0x40015000
 8007368:	40014000 	.word	0x40014000
 800736c:	40014400 	.word	0x40014400
 8007370:	40014800 	.word	0x40014800

08007374 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 0303 	bic.w	r3, r3, #3
 80073ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80073c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	021b      	lsls	r3, r3, #8
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a2b      	ldr	r2, [pc, #172]	@ (8007480 <TIM_OC3_SetConfig+0x10c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d007      	beq.n	80073e6 <TIM_OC3_SetConfig+0x72>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a2a      	ldr	r2, [pc, #168]	@ (8007484 <TIM_OC3_SetConfig+0x110>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d003      	beq.n	80073e6 <TIM_OC3_SetConfig+0x72>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a29      	ldr	r2, [pc, #164]	@ (8007488 <TIM_OC3_SetConfig+0x114>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d10d      	bne.n	8007402 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	021b      	lsls	r3, r3, #8
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a1e      	ldr	r2, [pc, #120]	@ (8007480 <TIM_OC3_SetConfig+0x10c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d013      	beq.n	8007432 <TIM_OC3_SetConfig+0xbe>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a1d      	ldr	r2, [pc, #116]	@ (8007484 <TIM_OC3_SetConfig+0x110>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00f      	beq.n	8007432 <TIM_OC3_SetConfig+0xbe>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a1d      	ldr	r2, [pc, #116]	@ (800748c <TIM_OC3_SetConfig+0x118>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00b      	beq.n	8007432 <TIM_OC3_SetConfig+0xbe>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a1c      	ldr	r2, [pc, #112]	@ (8007490 <TIM_OC3_SetConfig+0x11c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d007      	beq.n	8007432 <TIM_OC3_SetConfig+0xbe>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a1b      	ldr	r2, [pc, #108]	@ (8007494 <TIM_OC3_SetConfig+0x120>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d003      	beq.n	8007432 <TIM_OC3_SetConfig+0xbe>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a16      	ldr	r2, [pc, #88]	@ (8007488 <TIM_OC3_SetConfig+0x114>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d113      	bne.n	800745a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4313      	orrs	r3, r2
 800744c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	621a      	str	r2, [r3, #32]
}
 8007474:	bf00      	nop
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	40012c00 	.word	0x40012c00
 8007484:	40013400 	.word	0x40013400
 8007488:	40015000 	.word	0x40015000
 800748c:	40014000 	.word	0x40014000
 8007490:	40014400 	.word	0x40014400
 8007494:	40014800 	.word	0x40014800

08007498 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	021b      	lsls	r3, r3, #8
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	031b      	lsls	r3, r3, #12
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a2c      	ldr	r2, [pc, #176]	@ (80075a8 <TIM_OC4_SetConfig+0x110>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d007      	beq.n	800750c <TIM_OC4_SetConfig+0x74>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a2b      	ldr	r2, [pc, #172]	@ (80075ac <TIM_OC4_SetConfig+0x114>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d003      	beq.n	800750c <TIM_OC4_SetConfig+0x74>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a2a      	ldr	r2, [pc, #168]	@ (80075b0 <TIM_OC4_SetConfig+0x118>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d10d      	bne.n	8007528 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	031b      	lsls	r3, r3, #12
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	4313      	orrs	r3, r2
 800751e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007526:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a1f      	ldr	r2, [pc, #124]	@ (80075a8 <TIM_OC4_SetConfig+0x110>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d013      	beq.n	8007558 <TIM_OC4_SetConfig+0xc0>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a1e      	ldr	r2, [pc, #120]	@ (80075ac <TIM_OC4_SetConfig+0x114>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00f      	beq.n	8007558 <TIM_OC4_SetConfig+0xc0>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a1e      	ldr	r2, [pc, #120]	@ (80075b4 <TIM_OC4_SetConfig+0x11c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00b      	beq.n	8007558 <TIM_OC4_SetConfig+0xc0>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a1d      	ldr	r2, [pc, #116]	@ (80075b8 <TIM_OC4_SetConfig+0x120>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d007      	beq.n	8007558 <TIM_OC4_SetConfig+0xc0>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a1c      	ldr	r2, [pc, #112]	@ (80075bc <TIM_OC4_SetConfig+0x124>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d003      	beq.n	8007558 <TIM_OC4_SetConfig+0xc0>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a17      	ldr	r2, [pc, #92]	@ (80075b0 <TIM_OC4_SetConfig+0x118>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d113      	bne.n	8007580 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800755e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007566:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	019b      	lsls	r3, r3, #6
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	4313      	orrs	r3, r2
 8007572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	019b      	lsls	r3, r3, #6
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	4313      	orrs	r3, r2
 800757e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	621a      	str	r2, [r3, #32]
}
 800759a:	bf00      	nop
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40012c00 	.word	0x40012c00
 80075ac:	40013400 	.word	0x40013400
 80075b0:	40015000 	.word	0x40015000
 80075b4:	40014000 	.word	0x40014000
 80075b8:	40014400 	.word	0x40014400
 80075bc:	40014800 	.word	0x40014800

080075c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b087      	sub	sp, #28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007604:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	041b      	lsls	r3, r3, #16
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	4313      	orrs	r3, r2
 8007610:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a19      	ldr	r2, [pc, #100]	@ (800767c <TIM_OC5_SetConfig+0xbc>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d013      	beq.n	8007642 <TIM_OC5_SetConfig+0x82>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a18      	ldr	r2, [pc, #96]	@ (8007680 <TIM_OC5_SetConfig+0xc0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d00f      	beq.n	8007642 <TIM_OC5_SetConfig+0x82>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a17      	ldr	r2, [pc, #92]	@ (8007684 <TIM_OC5_SetConfig+0xc4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00b      	beq.n	8007642 <TIM_OC5_SetConfig+0x82>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a16      	ldr	r2, [pc, #88]	@ (8007688 <TIM_OC5_SetConfig+0xc8>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d007      	beq.n	8007642 <TIM_OC5_SetConfig+0x82>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a15      	ldr	r2, [pc, #84]	@ (800768c <TIM_OC5_SetConfig+0xcc>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d003      	beq.n	8007642 <TIM_OC5_SetConfig+0x82>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a14      	ldr	r2, [pc, #80]	@ (8007690 <TIM_OC5_SetConfig+0xd0>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d109      	bne.n	8007656 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007648:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	021b      	lsls	r3, r3, #8
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	4313      	orrs	r3, r2
 8007654:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	621a      	str	r2, [r3, #32]
}
 8007670:	bf00      	nop
 8007672:	371c      	adds	r7, #28
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	40012c00 	.word	0x40012c00
 8007680:	40013400 	.word	0x40013400
 8007684:	40014000 	.word	0x40014000
 8007688:	40014400 	.word	0x40014400
 800768c:	40014800 	.word	0x40014800
 8007690:	40015000 	.word	0x40015000

08007694 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	021b      	lsls	r3, r3, #8
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	051b      	lsls	r3, r3, #20
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007754 <TIM_OC6_SetConfig+0xc0>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d013      	beq.n	8007718 <TIM_OC6_SetConfig+0x84>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a19      	ldr	r2, [pc, #100]	@ (8007758 <TIM_OC6_SetConfig+0xc4>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00f      	beq.n	8007718 <TIM_OC6_SetConfig+0x84>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a18      	ldr	r2, [pc, #96]	@ (800775c <TIM_OC6_SetConfig+0xc8>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d00b      	beq.n	8007718 <TIM_OC6_SetConfig+0x84>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a17      	ldr	r2, [pc, #92]	@ (8007760 <TIM_OC6_SetConfig+0xcc>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d007      	beq.n	8007718 <TIM_OC6_SetConfig+0x84>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a16      	ldr	r2, [pc, #88]	@ (8007764 <TIM_OC6_SetConfig+0xd0>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d003      	beq.n	8007718 <TIM_OC6_SetConfig+0x84>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a15      	ldr	r2, [pc, #84]	@ (8007768 <TIM_OC6_SetConfig+0xd4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d109      	bne.n	800772c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800771e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	029b      	lsls	r3, r3, #10
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	4313      	orrs	r3, r2
 800772a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	621a      	str	r2, [r3, #32]
}
 8007746:	bf00      	nop
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	40012c00 	.word	0x40012c00
 8007758:	40013400 	.word	0x40013400
 800775c:	40014000 	.word	0x40014000
 8007760:	40014400 	.word	0x40014400
 8007764:	40014800 	.word	0x40014800
 8007768:	40015000 	.word	0x40015000

0800776c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	f023 0201 	bic.w	r2, r3, #1
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f023 030a 	bic.w	r3, r3, #10
 80077a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	621a      	str	r2, [r3, #32]
}
 80077be:	bf00      	nop
 80077c0:	371c      	adds	r7, #28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b087      	sub	sp, #28
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	f023 0210 	bic.w	r2, r3, #16
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80077f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	031b      	lsls	r3, r3, #12
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007806:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	011b      	lsls	r3, r3, #4
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	4313      	orrs	r3, r2
 8007810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	621a      	str	r2, [r3, #32]
}
 800781e:	bf00      	nop
 8007820:	371c      	adds	r7, #28
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800782a:	b480      	push	{r7}
 800782c:	b085      	sub	sp, #20
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4313      	orrs	r3, r2
 800784c:	f043 0307 	orr.w	r3, r3, #7
 8007850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	609a      	str	r2, [r3, #8]
}
 8007858:	bf00      	nop
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
 8007870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800787e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	021a      	lsls	r2, r3, #8
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	431a      	orrs	r2, r3
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	4313      	orrs	r3, r2
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	4313      	orrs	r3, r2
 8007890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	609a      	str	r2, [r3, #8]
}
 8007898:	bf00      	nop
 800789a:	371c      	adds	r7, #28
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f003 031f 	and.w	r3, r3, #31
 80078b6:	2201      	movs	r2, #1
 80078b8:	fa02 f303 	lsl.w	r3, r2, r3
 80078bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6a1a      	ldr	r2, [r3, #32]
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	43db      	mvns	r3, r3
 80078c6:	401a      	ands	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6a1a      	ldr	r2, [r3, #32]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f003 031f 	and.w	r3, r3, #31
 80078d6:	6879      	ldr	r1, [r7, #4]
 80078d8:	fa01 f303 	lsl.w	r3, r1, r3
 80078dc:	431a      	orrs	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	621a      	str	r2, [r3, #32]
}
 80078e2:	bf00      	nop
 80078e4:	371c      	adds	r7, #28
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
	...

080078f0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d109      	bne.n	8007914 <HAL_TIMEx_PWMN_Start+0x24>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b01      	cmp	r3, #1
 800790a:	bf14      	ite	ne
 800790c:	2301      	movne	r3, #1
 800790e:	2300      	moveq	r3, #0
 8007910:	b2db      	uxtb	r3, r3
 8007912:	e022      	b.n	800795a <HAL_TIMEx_PWMN_Start+0x6a>
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b04      	cmp	r3, #4
 8007918:	d109      	bne.n	800792e <HAL_TIMEx_PWMN_Start+0x3e>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b01      	cmp	r3, #1
 8007924:	bf14      	ite	ne
 8007926:	2301      	movne	r3, #1
 8007928:	2300      	moveq	r3, #0
 800792a:	b2db      	uxtb	r3, r3
 800792c:	e015      	b.n	800795a <HAL_TIMEx_PWMN_Start+0x6a>
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b08      	cmp	r3, #8
 8007932:	d109      	bne.n	8007948 <HAL_TIMEx_PWMN_Start+0x58>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b01      	cmp	r3, #1
 800793e:	bf14      	ite	ne
 8007940:	2301      	movne	r3, #1
 8007942:	2300      	moveq	r3, #0
 8007944:	b2db      	uxtb	r3, r3
 8007946:	e008      	b.n	800795a <HAL_TIMEx_PWMN_Start+0x6a>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b01      	cmp	r3, #1
 8007952:	bf14      	ite	ne
 8007954:	2301      	movne	r3, #1
 8007956:	2300      	moveq	r3, #0
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e073      	b.n	8007a4a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d104      	bne.n	8007972 <HAL_TIMEx_PWMN_Start+0x82>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007970:	e013      	b.n	800799a <HAL_TIMEx_PWMN_Start+0xaa>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b04      	cmp	r3, #4
 8007976:	d104      	bne.n	8007982 <HAL_TIMEx_PWMN_Start+0x92>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007980:	e00b      	b.n	800799a <HAL_TIMEx_PWMN_Start+0xaa>
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b08      	cmp	r3, #8
 8007986:	d104      	bne.n	8007992 <HAL_TIMEx_PWMN_Start+0xa2>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007990:	e003      	b.n	800799a <HAL_TIMEx_PWMN_Start+0xaa>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2202      	movs	r2, #2
 8007996:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2204      	movs	r2, #4
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fa34 	bl	8007e10 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079b6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a25      	ldr	r2, [pc, #148]	@ (8007a54 <HAL_TIMEx_PWMN_Start+0x164>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d022      	beq.n	8007a08 <HAL_TIMEx_PWMN_Start+0x118>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ca:	d01d      	beq.n	8007a08 <HAL_TIMEx_PWMN_Start+0x118>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a21      	ldr	r2, [pc, #132]	@ (8007a58 <HAL_TIMEx_PWMN_Start+0x168>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d018      	beq.n	8007a08 <HAL_TIMEx_PWMN_Start+0x118>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a20      	ldr	r2, [pc, #128]	@ (8007a5c <HAL_TIMEx_PWMN_Start+0x16c>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d013      	beq.n	8007a08 <HAL_TIMEx_PWMN_Start+0x118>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a1e      	ldr	r2, [pc, #120]	@ (8007a60 <HAL_TIMEx_PWMN_Start+0x170>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d00e      	beq.n	8007a08 <HAL_TIMEx_PWMN_Start+0x118>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a1d      	ldr	r2, [pc, #116]	@ (8007a64 <HAL_TIMEx_PWMN_Start+0x174>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d009      	beq.n	8007a08 <HAL_TIMEx_PWMN_Start+0x118>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a1b      	ldr	r2, [pc, #108]	@ (8007a68 <HAL_TIMEx_PWMN_Start+0x178>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d004      	beq.n	8007a08 <HAL_TIMEx_PWMN_Start+0x118>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a1a      	ldr	r2, [pc, #104]	@ (8007a6c <HAL_TIMEx_PWMN_Start+0x17c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d115      	bne.n	8007a34 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	689a      	ldr	r2, [r3, #8]
 8007a0e:	4b18      	ldr	r3, [pc, #96]	@ (8007a70 <HAL_TIMEx_PWMN_Start+0x180>)
 8007a10:	4013      	ands	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b06      	cmp	r3, #6
 8007a18:	d015      	beq.n	8007a46 <HAL_TIMEx_PWMN_Start+0x156>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a20:	d011      	beq.n	8007a46 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f042 0201 	orr.w	r2, r2, #1
 8007a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a32:	e008      	b.n	8007a46 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0201 	orr.w	r2, r2, #1
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	e000      	b.n	8007a48 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	40012c00 	.word	0x40012c00
 8007a58:	40000400 	.word	0x40000400
 8007a5c:	40000800 	.word	0x40000800
 8007a60:	40000c00 	.word	0x40000c00
 8007a64:	40013400 	.word	0x40013400
 8007a68:	40014000 	.word	0x40014000
 8007a6c:	40015000 	.word	0x40015000
 8007a70:	00010007 	.word	0x00010007

08007a74 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2200      	movs	r2, #0
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 f9c2 	bl	8007e10 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6a1a      	ldr	r2, [r3, #32]
 8007a92:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a96:	4013      	ands	r3, r2
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10f      	bne.n	8007abc <HAL_TIMEx_PWMN_Stop+0x48>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6a1a      	ldr	r2, [r3, #32]
 8007aa2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d107      	bne.n	8007abc <HAL_TIMEx_PWMN_Stop+0x48>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007aba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6a1a      	ldr	r2, [r3, #32]
 8007ac2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10f      	bne.n	8007aec <HAL_TIMEx_PWMN_Stop+0x78>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6a1a      	ldr	r2, [r3, #32]
 8007ad2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d107      	bne.n	8007aec <HAL_TIMEx_PWMN_Stop+0x78>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0201 	bic.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d104      	bne.n	8007afc <HAL_TIMEx_PWMN_Stop+0x88>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007afa:	e013      	b.n	8007b24 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	d104      	bne.n	8007b0c <HAL_TIMEx_PWMN_Stop+0x98>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b0a:	e00b      	b.n	8007b24 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b08      	cmp	r3, #8
 8007b10:	d104      	bne.n	8007b1c <HAL_TIMEx_PWMN_Stop+0xa8>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b1a:	e003      	b.n	8007b24 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
	...

08007b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d101      	bne.n	8007b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b44:	2302      	movs	r3, #2
 8007b46:	e074      	b.n	8007c32 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a34      	ldr	r2, [pc, #208]	@ (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d009      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a33      	ldr	r2, [pc, #204]	@ (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d004      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a31      	ldr	r2, [pc, #196]	@ (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d108      	bne.n	8007b98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007b8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a21      	ldr	r2, [pc, #132]	@ (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d022      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bc8:	d01d      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a1f      	ldr	r2, [pc, #124]	@ (8007c4c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d018      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d013      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a1c      	ldr	r2, [pc, #112]	@ (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00e      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a15      	ldr	r2, [pc, #84]	@ (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d009      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a18      	ldr	r2, [pc, #96]	@ (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d004      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a11      	ldr	r2, [pc, #68]	@ (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d10c      	bne.n	8007c20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	40012c00 	.word	0x40012c00
 8007c44:	40013400 	.word	0x40013400
 8007c48:	40015000 	.word	0x40015000
 8007c4c:	40000400 	.word	0x40000400
 8007c50:	40000800 	.word	0x40000800
 8007c54:	40000c00 	.word	0x40000c00
 8007c58:	40014000 	.word	0x40014000

08007c5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d101      	bne.n	8007c78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c74:	2302      	movs	r3, #2
 8007c76:	e078      	b.n	8007d6a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	041b      	lsls	r3, r3, #16
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a1c      	ldr	r2, [pc, #112]	@ (8007d78 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d009      	beq.n	8007d1e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8007d7c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d004      	beq.n	8007d1e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a19      	ldr	r2, [pc, #100]	@ (8007d80 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d11c      	bne.n	8007d58 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d28:	051b      	lsls	r3, r3, #20
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d54:	4313      	orrs	r3, r2
 8007d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	40012c00 	.word	0x40012c00
 8007d7c:	40013400 	.word	0x40013400
 8007d80:	40015000 	.word	0x40015000

08007d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f003 030f 	and.w	r3, r3, #15
 8007e22:	2204      	movs	r2, #4
 8007e24:	fa02 f303 	lsl.w	r3, r2, r3
 8007e28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6a1a      	ldr	r2, [r3, #32]
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	43db      	mvns	r3, r3
 8007e32:	401a      	ands	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6a1a      	ldr	r2, [r3, #32]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f003 030f 	and.w	r3, r3, #15
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	fa01 f303 	lsl.w	r3, r1, r3
 8007e48:	431a      	orrs	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	621a      	str	r2, [r3, #32]
}
 8007e4e:	bf00      	nop
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b082      	sub	sp, #8
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e042      	b.n	8007ef2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d106      	bne.n	8007e84 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7f9 fd08 	bl	8001894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2224      	movs	r2, #36	@ 0x24
 8007e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0201 	bic.w	r2, r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 ff61 	bl	8008d6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fc62 	bl	8008774 <UART_SetConfig>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d101      	bne.n	8007eba <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e01b      	b.n	8007ef2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ec8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ed8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0201 	orr.w	r2, r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 ffe0 	bl	8008eb0 <UART_CheckIdleState>
 8007ef0:	4603      	mov	r3, r0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b08a      	sub	sp, #40	@ 0x28
 8007efe:	af02      	add	r7, sp, #8
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	603b      	str	r3, [r7, #0]
 8007f06:	4613      	mov	r3, r2
 8007f08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	d17b      	bne.n	800800c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <HAL_UART_Transmit+0x26>
 8007f1a:	88fb      	ldrh	r3, [r7, #6]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e074      	b.n	800800e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2221      	movs	r2, #33	@ 0x21
 8007f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f34:	f7fa fa84 	bl	8002440 <HAL_GetTick>
 8007f38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	88fa      	ldrh	r2, [r7, #6]
 8007f3e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	88fa      	ldrh	r2, [r7, #6]
 8007f46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f52:	d108      	bne.n	8007f66 <HAL_UART_Transmit+0x6c>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d104      	bne.n	8007f66 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	61bb      	str	r3, [r7, #24]
 8007f64:	e003      	b.n	8007f6e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f6e:	e030      	b.n	8007fd2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2200      	movs	r2, #0
 8007f78:	2180      	movs	r1, #128	@ 0x80
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f001 f842 	bl	8009004 <UART_WaitOnFlagUntilTimeout>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d005      	beq.n	8007f92 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e03d      	b.n	800800e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10b      	bne.n	8007fb0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fa6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	3302      	adds	r3, #2
 8007fac:	61bb      	str	r3, [r7, #24]
 8007fae:	e007      	b.n	8007fc0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	781a      	ldrb	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1c8      	bne.n	8007f70 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2140      	movs	r1, #64	@ 0x40
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f001 f80b 	bl	8009004 <UART_WaitOnFlagUntilTimeout>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d005      	beq.n	8008000 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e006      	b.n	800800e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2220      	movs	r2, #32
 8008004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	e000      	b.n	800800e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800800c:	2302      	movs	r3, #2
  }
}
 800800e:	4618      	mov	r0, r3
 8008010:	3720      	adds	r7, #32
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
	...

08008018 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b08a      	sub	sp, #40	@ 0x28
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4613      	mov	r3, r2
 8008024:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800802c:	2b20      	cmp	r3, #32
 800802e:	d137      	bne.n	80080a0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <HAL_UART_Receive_IT+0x24>
 8008036:	88fb      	ldrh	r3, [r7, #6]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e030      	b.n	80080a2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a18      	ldr	r2, [pc, #96]	@ (80080ac <HAL_UART_Receive_IT+0x94>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d01f      	beq.n	8008090 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d018      	beq.n	8008090 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	e853 3f00 	ldrex	r3, [r3]
 800806a:	613b      	str	r3, [r7, #16]
   return(result);
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008072:	627b      	str	r3, [r7, #36]	@ 0x24
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	461a      	mov	r2, r3
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	623b      	str	r3, [r7, #32]
 800807e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008080:	69f9      	ldr	r1, [r7, #28]
 8008082:	6a3a      	ldr	r2, [r7, #32]
 8008084:	e841 2300 	strex	r3, r2, [r1]
 8008088:	61bb      	str	r3, [r7, #24]
   return(result);
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1e6      	bne.n	800805e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008090:	88fb      	ldrh	r3, [r7, #6]
 8008092:	461a      	mov	r2, r3
 8008094:	68b9      	ldr	r1, [r7, #8]
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f001 f822 	bl	80090e0 <UART_Start_Receive_IT>
 800809c:	4603      	mov	r3, r0
 800809e:	e000      	b.n	80080a2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80080a0:	2302      	movs	r3, #2
  }
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3728      	adds	r7, #40	@ 0x28
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	40008000 	.word	0x40008000

080080b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b0ba      	sub	sp, #232	@ 0xe8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80080da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80080de:	4013      	ands	r3, r2
 80080e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80080e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d11b      	bne.n	8008124 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080f0:	f003 0320 	and.w	r3, r3, #32
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d015      	beq.n	8008124 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080fc:	f003 0320 	and.w	r3, r3, #32
 8008100:	2b00      	cmp	r3, #0
 8008102:	d105      	bne.n	8008110 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d009      	beq.n	8008124 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 8300 	beq.w	800871a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	4798      	blx	r3
      }
      return;
 8008122:	e2fa      	b.n	800871a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 8123 	beq.w	8008374 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800812e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008132:	4b8d      	ldr	r3, [pc, #564]	@ (8008368 <HAL_UART_IRQHandler+0x2b8>)
 8008134:	4013      	ands	r3, r2
 8008136:	2b00      	cmp	r3, #0
 8008138:	d106      	bne.n	8008148 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800813a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800813e:	4b8b      	ldr	r3, [pc, #556]	@ (800836c <HAL_UART_IRQHandler+0x2bc>)
 8008140:	4013      	ands	r3, r2
 8008142:	2b00      	cmp	r3, #0
 8008144:	f000 8116 	beq.w	8008374 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800814c:	f003 0301 	and.w	r3, r3, #1
 8008150:	2b00      	cmp	r3, #0
 8008152:	d011      	beq.n	8008178 <HAL_UART_IRQHandler+0xc8>
 8008154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2201      	movs	r2, #1
 8008166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800816e:	f043 0201 	orr.w	r2, r3, #1
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800817c:	f003 0302 	and.w	r3, r3, #2
 8008180:	2b00      	cmp	r3, #0
 8008182:	d011      	beq.n	80081a8 <HAL_UART_IRQHandler+0xf8>
 8008184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2202      	movs	r2, #2
 8008196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800819e:	f043 0204 	orr.w	r2, r3, #4
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ac:	f003 0304 	and.w	r3, r3, #4
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d011      	beq.n	80081d8 <HAL_UART_IRQHandler+0x128>
 80081b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081b8:	f003 0301 	and.w	r3, r3, #1
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00b      	beq.n	80081d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2204      	movs	r2, #4
 80081c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ce:	f043 0202 	orr.w	r2, r3, #2
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081dc:	f003 0308 	and.w	r3, r3, #8
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d017      	beq.n	8008214 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081e8:	f003 0320 	and.w	r3, r3, #32
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d105      	bne.n	80081fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80081f4:	4b5c      	ldr	r3, [pc, #368]	@ (8008368 <HAL_UART_IRQHandler+0x2b8>)
 80081f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00b      	beq.n	8008214 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2208      	movs	r2, #8
 8008202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800820a:	f043 0208 	orr.w	r2, r3, #8
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800821c:	2b00      	cmp	r3, #0
 800821e:	d012      	beq.n	8008246 <HAL_UART_IRQHandler+0x196>
 8008220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008224:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00c      	beq.n	8008246 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008234:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800823c:	f043 0220 	orr.w	r2, r3, #32
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 8266 	beq.w	800871e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008256:	f003 0320 	and.w	r3, r3, #32
 800825a:	2b00      	cmp	r3, #0
 800825c:	d013      	beq.n	8008286 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800825e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b00      	cmp	r3, #0
 8008268:	d105      	bne.n	8008276 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800826a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800826e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d007      	beq.n	8008286 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800828c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800829a:	2b40      	cmp	r3, #64	@ 0x40
 800829c:	d005      	beq.n	80082aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800829e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d054      	beq.n	8008354 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f001 f83a 	bl	8009324 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ba:	2b40      	cmp	r3, #64	@ 0x40
 80082bc:	d146      	bne.n	800834c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3308      	adds	r3, #8
 80082c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082cc:	e853 3f00 	ldrex	r3, [r3]
 80082d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80082d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3308      	adds	r3, #8
 80082e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80082ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80082ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80082f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80082fa:	e841 2300 	strex	r3, r2, [r1]
 80082fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1d9      	bne.n	80082be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008310:	2b00      	cmp	r3, #0
 8008312:	d017      	beq.n	8008344 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800831a:	4a15      	ldr	r2, [pc, #84]	@ (8008370 <HAL_UART_IRQHandler+0x2c0>)
 800831c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008324:	4618      	mov	r0, r3
 8008326:	f7fc fa1f 	bl	8004768 <HAL_DMA_Abort_IT>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d019      	beq.n	8008364 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800833e:	4610      	mov	r0, r2
 8008340:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008342:	e00f      	b.n	8008364 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f9ff 	bl	8008748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800834a:	e00b      	b.n	8008364 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f9fb 	bl	8008748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008352:	e007      	b.n	8008364 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f9f7 	bl	8008748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008362:	e1dc      	b.n	800871e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008364:	bf00      	nop
    return;
 8008366:	e1da      	b.n	800871e <HAL_UART_IRQHandler+0x66e>
 8008368:	10000001 	.word	0x10000001
 800836c:	04000120 	.word	0x04000120
 8008370:	080093f1 	.word	0x080093f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008378:	2b01      	cmp	r3, #1
 800837a:	f040 8170 	bne.w	800865e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800837e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008382:	f003 0310 	and.w	r3, r3, #16
 8008386:	2b00      	cmp	r3, #0
 8008388:	f000 8169 	beq.w	800865e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800838c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008390:	f003 0310 	and.w	r3, r3, #16
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 8162 	beq.w	800865e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2210      	movs	r2, #16
 80083a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ac:	2b40      	cmp	r3, #64	@ 0x40
 80083ae:	f040 80d8 	bne.w	8008562 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 80af 	beq.w	8008528 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083d4:	429a      	cmp	r2, r3
 80083d6:	f080 80a7 	bcs.w	8008528 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0320 	and.w	r3, r3, #32
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f040 8087 	bne.w	8008506 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008400:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800840c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008414:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008422:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008426:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800842e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800843a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1da      	bne.n	80083f8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3308      	adds	r3, #8
 8008448:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800844c:	e853 3f00 	ldrex	r3, [r3]
 8008450:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008452:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008454:	f023 0301 	bic.w	r3, r3, #1
 8008458:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3308      	adds	r3, #8
 8008462:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008466:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800846a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800846e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008478:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e1      	bne.n	8008442 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3308      	adds	r3, #8
 8008484:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008486:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008488:	e853 3f00 	ldrex	r3, [r3]
 800848c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800848e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008490:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008494:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3308      	adds	r3, #8
 800849e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80084a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80084a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80084a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084aa:	e841 2300 	strex	r3, r2, [r1]
 80084ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80084b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e3      	bne.n	800847e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80084d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084d4:	f023 0310 	bic.w	r3, r3, #16
 80084d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	461a      	mov	r2, r3
 80084e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80084f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e4      	bne.n	80084c4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008500:	4618      	mov	r0, r3
 8008502:	f7fc f8d8 	bl	80046b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2202      	movs	r2, #2
 800850a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008518:	b29b      	uxth	r3, r3
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	b29b      	uxth	r3, r3
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f91b 	bl	800875c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008526:	e0fc      	b.n	8008722 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800852e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008532:	429a      	cmp	r2, r3
 8008534:	f040 80f5 	bne.w	8008722 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0320 	and.w	r3, r3, #32
 8008546:	2b20      	cmp	r3, #32
 8008548:	f040 80eb 	bne.w	8008722 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2202      	movs	r2, #2
 8008550:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f8fe 	bl	800875c <HAL_UARTEx_RxEventCallback>
      return;
 8008560:	e0df      	b.n	8008722 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800856e:	b29b      	uxth	r3, r3
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800857c:	b29b      	uxth	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 80d1 	beq.w	8008726 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008584:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 80cc 	beq.w	8008726 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008596:	e853 3f00 	ldrex	r3, [r3]
 800859a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800859c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800859e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80085b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085b8:	e841 2300 	strex	r3, r2, [r1]
 80085bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e4      	bne.n	800858e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3308      	adds	r3, #8
 80085ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ce:	e853 3f00 	ldrex	r3, [r3]
 80085d2:	623b      	str	r3, [r7, #32]
   return(result);
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085da:	f023 0301 	bic.w	r3, r3, #1
 80085de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3308      	adds	r3, #8
 80085e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80085ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80085ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085f4:	e841 2300 	strex	r3, r2, [r1]
 80085f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e1      	bne.n	80085c4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2220      	movs	r2, #32
 8008604:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	60fb      	str	r3, [r7, #12]
   return(result);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f023 0310 	bic.w	r3, r3, #16
 8008628:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008636:	61fb      	str	r3, [r7, #28]
 8008638:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863a:	69b9      	ldr	r1, [r7, #24]
 800863c:	69fa      	ldr	r2, [r7, #28]
 800863e:	e841 2300 	strex	r3, r2, [r1]
 8008642:	617b      	str	r3, [r7, #20]
   return(result);
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1e4      	bne.n	8008614 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2202      	movs	r2, #2
 800864e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f880 	bl	800875c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800865c:	e063      	b.n	8008726 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800865e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00e      	beq.n	8008688 <HAL_UART_IRQHandler+0x5d8>
 800866a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800866e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d008      	beq.n	8008688 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800867e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 fc13 	bl	8009eac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008686:	e051      	b.n	800872c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800868c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008690:	2b00      	cmp	r3, #0
 8008692:	d014      	beq.n	80086be <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800869c:	2b00      	cmp	r3, #0
 800869e:	d105      	bne.n	80086ac <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d008      	beq.n	80086be <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d03a      	beq.n	800872a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	4798      	blx	r3
    }
    return;
 80086bc:	e035      	b.n	800872a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <HAL_UART_IRQHandler+0x62e>
 80086ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fe9c 	bl	8009414 <UART_EndTransmit_IT>
    return;
 80086dc:	e026      	b.n	800872c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d009      	beq.n	80086fe <HAL_UART_IRQHandler+0x64e>
 80086ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f001 fbec 	bl	8009ed4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086fc:	e016      	b.n	800872c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008702:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d010      	beq.n	800872c <HAL_UART_IRQHandler+0x67c>
 800870a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800870e:	2b00      	cmp	r3, #0
 8008710:	da0c      	bge.n	800872c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f001 fbd4 	bl	8009ec0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008718:	e008      	b.n	800872c <HAL_UART_IRQHandler+0x67c>
      return;
 800871a:	bf00      	nop
 800871c:	e006      	b.n	800872c <HAL_UART_IRQHandler+0x67c>
    return;
 800871e:	bf00      	nop
 8008720:	e004      	b.n	800872c <HAL_UART_IRQHandler+0x67c>
      return;
 8008722:	bf00      	nop
 8008724:	e002      	b.n	800872c <HAL_UART_IRQHandler+0x67c>
      return;
 8008726:	bf00      	nop
 8008728:	e000      	b.n	800872c <HAL_UART_IRQHandler+0x67c>
    return;
 800872a:	bf00      	nop
  }
}
 800872c:	37e8      	adds	r7, #232	@ 0xe8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop

08008734 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	460b      	mov	r3, r1
 8008766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008778:	b08c      	sub	sp, #48	@ 0x30
 800877a:	af00      	add	r7, sp, #0
 800877c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	689a      	ldr	r2, [r3, #8]
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	431a      	orrs	r2, r3
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	431a      	orrs	r2, r3
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	4313      	orrs	r3, r2
 800879a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	4baa      	ldr	r3, [pc, #680]	@ (8008a4c <UART_SetConfig+0x2d8>)
 80087a4:	4013      	ands	r3, r2
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	6812      	ldr	r2, [r2, #0]
 80087aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087ac:	430b      	orrs	r3, r1
 80087ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	68da      	ldr	r2, [r3, #12]
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a9f      	ldr	r2, [pc, #636]	@ (8008a50 <UART_SetConfig+0x2dc>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d004      	beq.n	80087e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087dc:	4313      	orrs	r3, r2
 80087de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80087ea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	6812      	ldr	r2, [r2, #0]
 80087f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087f4:	430b      	orrs	r3, r1
 80087f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fe:	f023 010f 	bic.w	r1, r3, #15
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	430a      	orrs	r2, r1
 800880c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a90      	ldr	r2, [pc, #576]	@ (8008a54 <UART_SetConfig+0x2e0>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d125      	bne.n	8008864 <UART_SetConfig+0xf0>
 8008818:	4b8f      	ldr	r3, [pc, #572]	@ (8008a58 <UART_SetConfig+0x2e4>)
 800881a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800881e:	f003 0303 	and.w	r3, r3, #3
 8008822:	2b03      	cmp	r3, #3
 8008824:	d81a      	bhi.n	800885c <UART_SetConfig+0xe8>
 8008826:	a201      	add	r2, pc, #4	@ (adr r2, 800882c <UART_SetConfig+0xb8>)
 8008828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882c:	0800883d 	.word	0x0800883d
 8008830:	0800884d 	.word	0x0800884d
 8008834:	08008845 	.word	0x08008845
 8008838:	08008855 	.word	0x08008855
 800883c:	2301      	movs	r3, #1
 800883e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008842:	e116      	b.n	8008a72 <UART_SetConfig+0x2fe>
 8008844:	2302      	movs	r3, #2
 8008846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800884a:	e112      	b.n	8008a72 <UART_SetConfig+0x2fe>
 800884c:	2304      	movs	r3, #4
 800884e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008852:	e10e      	b.n	8008a72 <UART_SetConfig+0x2fe>
 8008854:	2308      	movs	r3, #8
 8008856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800885a:	e10a      	b.n	8008a72 <UART_SetConfig+0x2fe>
 800885c:	2310      	movs	r3, #16
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008862:	e106      	b.n	8008a72 <UART_SetConfig+0x2fe>
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a7c      	ldr	r2, [pc, #496]	@ (8008a5c <UART_SetConfig+0x2e8>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d138      	bne.n	80088e0 <UART_SetConfig+0x16c>
 800886e:	4b7a      	ldr	r3, [pc, #488]	@ (8008a58 <UART_SetConfig+0x2e4>)
 8008870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008874:	f003 030c 	and.w	r3, r3, #12
 8008878:	2b0c      	cmp	r3, #12
 800887a:	d82d      	bhi.n	80088d8 <UART_SetConfig+0x164>
 800887c:	a201      	add	r2, pc, #4	@ (adr r2, 8008884 <UART_SetConfig+0x110>)
 800887e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008882:	bf00      	nop
 8008884:	080088b9 	.word	0x080088b9
 8008888:	080088d9 	.word	0x080088d9
 800888c:	080088d9 	.word	0x080088d9
 8008890:	080088d9 	.word	0x080088d9
 8008894:	080088c9 	.word	0x080088c9
 8008898:	080088d9 	.word	0x080088d9
 800889c:	080088d9 	.word	0x080088d9
 80088a0:	080088d9 	.word	0x080088d9
 80088a4:	080088c1 	.word	0x080088c1
 80088a8:	080088d9 	.word	0x080088d9
 80088ac:	080088d9 	.word	0x080088d9
 80088b0:	080088d9 	.word	0x080088d9
 80088b4:	080088d1 	.word	0x080088d1
 80088b8:	2300      	movs	r3, #0
 80088ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088be:	e0d8      	b.n	8008a72 <UART_SetConfig+0x2fe>
 80088c0:	2302      	movs	r3, #2
 80088c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088c6:	e0d4      	b.n	8008a72 <UART_SetConfig+0x2fe>
 80088c8:	2304      	movs	r3, #4
 80088ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ce:	e0d0      	b.n	8008a72 <UART_SetConfig+0x2fe>
 80088d0:	2308      	movs	r3, #8
 80088d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088d6:	e0cc      	b.n	8008a72 <UART_SetConfig+0x2fe>
 80088d8:	2310      	movs	r3, #16
 80088da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088de:	e0c8      	b.n	8008a72 <UART_SetConfig+0x2fe>
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a5e      	ldr	r2, [pc, #376]	@ (8008a60 <UART_SetConfig+0x2ec>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d125      	bne.n	8008936 <UART_SetConfig+0x1c2>
 80088ea:	4b5b      	ldr	r3, [pc, #364]	@ (8008a58 <UART_SetConfig+0x2e4>)
 80088ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80088f4:	2b30      	cmp	r3, #48	@ 0x30
 80088f6:	d016      	beq.n	8008926 <UART_SetConfig+0x1b2>
 80088f8:	2b30      	cmp	r3, #48	@ 0x30
 80088fa:	d818      	bhi.n	800892e <UART_SetConfig+0x1ba>
 80088fc:	2b20      	cmp	r3, #32
 80088fe:	d00a      	beq.n	8008916 <UART_SetConfig+0x1a2>
 8008900:	2b20      	cmp	r3, #32
 8008902:	d814      	bhi.n	800892e <UART_SetConfig+0x1ba>
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <UART_SetConfig+0x19a>
 8008908:	2b10      	cmp	r3, #16
 800890a:	d008      	beq.n	800891e <UART_SetConfig+0x1aa>
 800890c:	e00f      	b.n	800892e <UART_SetConfig+0x1ba>
 800890e:	2300      	movs	r3, #0
 8008910:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008914:	e0ad      	b.n	8008a72 <UART_SetConfig+0x2fe>
 8008916:	2302      	movs	r3, #2
 8008918:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800891c:	e0a9      	b.n	8008a72 <UART_SetConfig+0x2fe>
 800891e:	2304      	movs	r3, #4
 8008920:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008924:	e0a5      	b.n	8008a72 <UART_SetConfig+0x2fe>
 8008926:	2308      	movs	r3, #8
 8008928:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800892c:	e0a1      	b.n	8008a72 <UART_SetConfig+0x2fe>
 800892e:	2310      	movs	r3, #16
 8008930:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008934:	e09d      	b.n	8008a72 <UART_SetConfig+0x2fe>
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a4a      	ldr	r2, [pc, #296]	@ (8008a64 <UART_SetConfig+0x2f0>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d125      	bne.n	800898c <UART_SetConfig+0x218>
 8008940:	4b45      	ldr	r3, [pc, #276]	@ (8008a58 <UART_SetConfig+0x2e4>)
 8008942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008946:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800894a:	2bc0      	cmp	r3, #192	@ 0xc0
 800894c:	d016      	beq.n	800897c <UART_SetConfig+0x208>
 800894e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008950:	d818      	bhi.n	8008984 <UART_SetConfig+0x210>
 8008952:	2b80      	cmp	r3, #128	@ 0x80
 8008954:	d00a      	beq.n	800896c <UART_SetConfig+0x1f8>
 8008956:	2b80      	cmp	r3, #128	@ 0x80
 8008958:	d814      	bhi.n	8008984 <UART_SetConfig+0x210>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <UART_SetConfig+0x1f0>
 800895e:	2b40      	cmp	r3, #64	@ 0x40
 8008960:	d008      	beq.n	8008974 <UART_SetConfig+0x200>
 8008962:	e00f      	b.n	8008984 <UART_SetConfig+0x210>
 8008964:	2300      	movs	r3, #0
 8008966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800896a:	e082      	b.n	8008a72 <UART_SetConfig+0x2fe>
 800896c:	2302      	movs	r3, #2
 800896e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008972:	e07e      	b.n	8008a72 <UART_SetConfig+0x2fe>
 8008974:	2304      	movs	r3, #4
 8008976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800897a:	e07a      	b.n	8008a72 <UART_SetConfig+0x2fe>
 800897c:	2308      	movs	r3, #8
 800897e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008982:	e076      	b.n	8008a72 <UART_SetConfig+0x2fe>
 8008984:	2310      	movs	r3, #16
 8008986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800898a:	e072      	b.n	8008a72 <UART_SetConfig+0x2fe>
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a35      	ldr	r2, [pc, #212]	@ (8008a68 <UART_SetConfig+0x2f4>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d12a      	bne.n	80089ec <UART_SetConfig+0x278>
 8008996:	4b30      	ldr	r3, [pc, #192]	@ (8008a58 <UART_SetConfig+0x2e4>)
 8008998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800899c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089a4:	d01a      	beq.n	80089dc <UART_SetConfig+0x268>
 80089a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089aa:	d81b      	bhi.n	80089e4 <UART_SetConfig+0x270>
 80089ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089b0:	d00c      	beq.n	80089cc <UART_SetConfig+0x258>
 80089b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089b6:	d815      	bhi.n	80089e4 <UART_SetConfig+0x270>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <UART_SetConfig+0x250>
 80089bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089c0:	d008      	beq.n	80089d4 <UART_SetConfig+0x260>
 80089c2:	e00f      	b.n	80089e4 <UART_SetConfig+0x270>
 80089c4:	2300      	movs	r3, #0
 80089c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ca:	e052      	b.n	8008a72 <UART_SetConfig+0x2fe>
 80089cc:	2302      	movs	r3, #2
 80089ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089d2:	e04e      	b.n	8008a72 <UART_SetConfig+0x2fe>
 80089d4:	2304      	movs	r3, #4
 80089d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089da:	e04a      	b.n	8008a72 <UART_SetConfig+0x2fe>
 80089dc:	2308      	movs	r3, #8
 80089de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089e2:	e046      	b.n	8008a72 <UART_SetConfig+0x2fe>
 80089e4:	2310      	movs	r3, #16
 80089e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ea:	e042      	b.n	8008a72 <UART_SetConfig+0x2fe>
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a17      	ldr	r2, [pc, #92]	@ (8008a50 <UART_SetConfig+0x2dc>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d13a      	bne.n	8008a6c <UART_SetConfig+0x2f8>
 80089f6:	4b18      	ldr	r3, [pc, #96]	@ (8008a58 <UART_SetConfig+0x2e4>)
 80089f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008a00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a04:	d01a      	beq.n	8008a3c <UART_SetConfig+0x2c8>
 8008a06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a0a:	d81b      	bhi.n	8008a44 <UART_SetConfig+0x2d0>
 8008a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a10:	d00c      	beq.n	8008a2c <UART_SetConfig+0x2b8>
 8008a12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a16:	d815      	bhi.n	8008a44 <UART_SetConfig+0x2d0>
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d003      	beq.n	8008a24 <UART_SetConfig+0x2b0>
 8008a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a20:	d008      	beq.n	8008a34 <UART_SetConfig+0x2c0>
 8008a22:	e00f      	b.n	8008a44 <UART_SetConfig+0x2d0>
 8008a24:	2300      	movs	r3, #0
 8008a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a2a:	e022      	b.n	8008a72 <UART_SetConfig+0x2fe>
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a32:	e01e      	b.n	8008a72 <UART_SetConfig+0x2fe>
 8008a34:	2304      	movs	r3, #4
 8008a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a3a:	e01a      	b.n	8008a72 <UART_SetConfig+0x2fe>
 8008a3c:	2308      	movs	r3, #8
 8008a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a42:	e016      	b.n	8008a72 <UART_SetConfig+0x2fe>
 8008a44:	2310      	movs	r3, #16
 8008a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a4a:	e012      	b.n	8008a72 <UART_SetConfig+0x2fe>
 8008a4c:	cfff69f3 	.word	0xcfff69f3
 8008a50:	40008000 	.word	0x40008000
 8008a54:	40013800 	.word	0x40013800
 8008a58:	40021000 	.word	0x40021000
 8008a5c:	40004400 	.word	0x40004400
 8008a60:	40004800 	.word	0x40004800
 8008a64:	40004c00 	.word	0x40004c00
 8008a68:	40005000 	.word	0x40005000
 8008a6c:	2310      	movs	r3, #16
 8008a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4aae      	ldr	r2, [pc, #696]	@ (8008d30 <UART_SetConfig+0x5bc>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	f040 8097 	bne.w	8008bac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a82:	2b08      	cmp	r3, #8
 8008a84:	d823      	bhi.n	8008ace <UART_SetConfig+0x35a>
 8008a86:	a201      	add	r2, pc, #4	@ (adr r2, 8008a8c <UART_SetConfig+0x318>)
 8008a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8c:	08008ab1 	.word	0x08008ab1
 8008a90:	08008acf 	.word	0x08008acf
 8008a94:	08008ab9 	.word	0x08008ab9
 8008a98:	08008acf 	.word	0x08008acf
 8008a9c:	08008abf 	.word	0x08008abf
 8008aa0:	08008acf 	.word	0x08008acf
 8008aa4:	08008acf 	.word	0x08008acf
 8008aa8:	08008acf 	.word	0x08008acf
 8008aac:	08008ac7 	.word	0x08008ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ab0:	f7fc ff3e 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 8008ab4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ab6:	e010      	b.n	8008ada <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ab8:	4b9e      	ldr	r3, [pc, #632]	@ (8008d34 <UART_SetConfig+0x5c0>)
 8008aba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008abc:	e00d      	b.n	8008ada <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008abe:	f7fc fec9 	bl	8005854 <HAL_RCC_GetSysClockFreq>
 8008ac2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ac4:	e009      	b.n	8008ada <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008aca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008acc:	e005      	b.n	8008ada <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ad8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f000 8130 	beq.w	8008d42 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae6:	4a94      	ldr	r2, [pc, #592]	@ (8008d38 <UART_SetConfig+0x5c4>)
 8008ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aec:	461a      	mov	r2, r3
 8008aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008af4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	685a      	ldr	r2, [r3, #4]
 8008afa:	4613      	mov	r3, r2
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	4413      	add	r3, r2
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d305      	bcc.n	8008b12 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b0c:	69ba      	ldr	r2, [r7, #24]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d903      	bls.n	8008b1a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b18:	e113      	b.n	8008d42 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	60bb      	str	r3, [r7, #8]
 8008b20:	60fa      	str	r2, [r7, #12]
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b26:	4a84      	ldr	r2, [pc, #528]	@ (8008d38 <UART_SetConfig+0x5c4>)
 8008b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	2200      	movs	r2, #0
 8008b30:	603b      	str	r3, [r7, #0]
 8008b32:	607a      	str	r2, [r7, #4]
 8008b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b3c:	f7f7 fbd8 	bl	80002f0 <__aeabi_uldivmod>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4610      	mov	r0, r2
 8008b46:	4619      	mov	r1, r3
 8008b48:	f04f 0200 	mov.w	r2, #0
 8008b4c:	f04f 0300 	mov.w	r3, #0
 8008b50:	020b      	lsls	r3, r1, #8
 8008b52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b56:	0202      	lsls	r2, r0, #8
 8008b58:	6979      	ldr	r1, [r7, #20]
 8008b5a:	6849      	ldr	r1, [r1, #4]
 8008b5c:	0849      	lsrs	r1, r1, #1
 8008b5e:	2000      	movs	r0, #0
 8008b60:	460c      	mov	r4, r1
 8008b62:	4605      	mov	r5, r0
 8008b64:	eb12 0804 	adds.w	r8, r2, r4
 8008b68:	eb43 0905 	adc.w	r9, r3, r5
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	469a      	mov	sl, r3
 8008b74:	4693      	mov	fp, r2
 8008b76:	4652      	mov	r2, sl
 8008b78:	465b      	mov	r3, fp
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	f7f7 fbb7 	bl	80002f0 <__aeabi_uldivmod>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4613      	mov	r3, r2
 8008b88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b90:	d308      	bcc.n	8008ba4 <UART_SetConfig+0x430>
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b98:	d204      	bcs.n	8008ba4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	6a3a      	ldr	r2, [r7, #32]
 8008ba0:	60da      	str	r2, [r3, #12]
 8008ba2:	e0ce      	b.n	8008d42 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008baa:	e0ca      	b.n	8008d42 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	69db      	ldr	r3, [r3, #28]
 8008bb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bb4:	d166      	bne.n	8008c84 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008bb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008bba:	2b08      	cmp	r3, #8
 8008bbc:	d827      	bhi.n	8008c0e <UART_SetConfig+0x49a>
 8008bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc4 <UART_SetConfig+0x450>)
 8008bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc4:	08008be9 	.word	0x08008be9
 8008bc8:	08008bf1 	.word	0x08008bf1
 8008bcc:	08008bf9 	.word	0x08008bf9
 8008bd0:	08008c0f 	.word	0x08008c0f
 8008bd4:	08008bff 	.word	0x08008bff
 8008bd8:	08008c0f 	.word	0x08008c0f
 8008bdc:	08008c0f 	.word	0x08008c0f
 8008be0:	08008c0f 	.word	0x08008c0f
 8008be4:	08008c07 	.word	0x08008c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008be8:	f7fc fea2 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 8008bec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bee:	e014      	b.n	8008c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bf0:	f7fc feb4 	bl	800595c <HAL_RCC_GetPCLK2Freq>
 8008bf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bf6:	e010      	b.n	8008c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bf8:	4b4e      	ldr	r3, [pc, #312]	@ (8008d34 <UART_SetConfig+0x5c0>)
 8008bfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008bfc:	e00d      	b.n	8008c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bfe:	f7fc fe29 	bl	8005854 <HAL_RCC_GetSysClockFreq>
 8008c02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c04:	e009      	b.n	8008c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c0c:	e005      	b.n	8008c1a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008c18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 8090 	beq.w	8008d42 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c26:	4a44      	ldr	r2, [pc, #272]	@ (8008d38 <UART_SetConfig+0x5c4>)
 8008c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c34:	005a      	lsls	r2, r3, #1
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	085b      	lsrs	r3, r3, #1
 8008c3c:	441a      	add	r2, r3
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c48:	6a3b      	ldr	r3, [r7, #32]
 8008c4a:	2b0f      	cmp	r3, #15
 8008c4c:	d916      	bls.n	8008c7c <UART_SetConfig+0x508>
 8008c4e:	6a3b      	ldr	r3, [r7, #32]
 8008c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c54:	d212      	bcs.n	8008c7c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	f023 030f 	bic.w	r3, r3, #15
 8008c5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	085b      	lsrs	r3, r3, #1
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	8bfb      	ldrh	r3, [r7, #30]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	8bfa      	ldrh	r2, [r7, #30]
 8008c78:	60da      	str	r2, [r3, #12]
 8008c7a:	e062      	b.n	8008d42 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008c82:	e05e      	b.n	8008d42 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c88:	2b08      	cmp	r3, #8
 8008c8a:	d828      	bhi.n	8008cde <UART_SetConfig+0x56a>
 8008c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c94 <UART_SetConfig+0x520>)
 8008c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c92:	bf00      	nop
 8008c94:	08008cb9 	.word	0x08008cb9
 8008c98:	08008cc1 	.word	0x08008cc1
 8008c9c:	08008cc9 	.word	0x08008cc9
 8008ca0:	08008cdf 	.word	0x08008cdf
 8008ca4:	08008ccf 	.word	0x08008ccf
 8008ca8:	08008cdf 	.word	0x08008cdf
 8008cac:	08008cdf 	.word	0x08008cdf
 8008cb0:	08008cdf 	.word	0x08008cdf
 8008cb4:	08008cd7 	.word	0x08008cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cb8:	f7fc fe3a 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 8008cbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008cbe:	e014      	b.n	8008cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cc0:	f7fc fe4c 	bl	800595c <HAL_RCC_GetPCLK2Freq>
 8008cc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008cc6:	e010      	b.n	8008cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8008d34 <UART_SetConfig+0x5c0>)
 8008cca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ccc:	e00d      	b.n	8008cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cce:	f7fc fdc1 	bl	8005854 <HAL_RCC_GetSysClockFreq>
 8008cd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008cd4:	e009      	b.n	8008cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008cdc:	e005      	b.n	8008cea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ce8:	bf00      	nop
    }

    if (pclk != 0U)
 8008cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d028      	beq.n	8008d42 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf4:	4a10      	ldr	r2, [pc, #64]	@ (8008d38 <UART_SetConfig+0x5c4>)
 8008cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	085b      	lsrs	r3, r3, #1
 8008d08:	441a      	add	r2, r3
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	2b0f      	cmp	r3, #15
 8008d18:	d910      	bls.n	8008d3c <UART_SetConfig+0x5c8>
 8008d1a:	6a3b      	ldr	r3, [r7, #32]
 8008d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d20:	d20c      	bcs.n	8008d3c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d22:	6a3b      	ldr	r3, [r7, #32]
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	60da      	str	r2, [r3, #12]
 8008d2c:	e009      	b.n	8008d42 <UART_SetConfig+0x5ce>
 8008d2e:	bf00      	nop
 8008d30:	40008000 	.word	0x40008000
 8008d34:	00f42400 	.word	0x00f42400
 8008d38:	0800b98c 	.word	0x0800b98c
      }
      else
      {
        ret = HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2200      	movs	r2, #0
 8008d56:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008d5e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3730      	adds	r7, #48	@ 0x30
 8008d66:	46bd      	mov	sp, r7
 8008d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d78:	f003 0308 	and.w	r3, r3, #8
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00a      	beq.n	8008d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00a      	beq.n	8008db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	430a      	orrs	r2, r1
 8008db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dbc:	f003 0302 	and.w	r3, r3, #2
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00a      	beq.n	8008dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	430a      	orrs	r2, r1
 8008dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dde:	f003 0304 	and.w	r3, r3, #4
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00a      	beq.n	8008dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e00:	f003 0310 	and.w	r3, r3, #16
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00a      	beq.n	8008e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e22:	f003 0320 	and.w	r3, r3, #32
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00a      	beq.n	8008e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d01a      	beq.n	8008e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	430a      	orrs	r2, r1
 8008e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e6a:	d10a      	bne.n	8008e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00a      	beq.n	8008ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	430a      	orrs	r2, r1
 8008ea2:	605a      	str	r2, [r3, #4]
  }
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b098      	sub	sp, #96	@ 0x60
 8008eb4:	af02      	add	r7, sp, #8
 8008eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ec0:	f7f9 fabe 	bl	8002440 <HAL_GetTick>
 8008ec4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 0308 	and.w	r3, r3, #8
 8008ed0:	2b08      	cmp	r3, #8
 8008ed2:	d12f      	bne.n	8008f34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ed4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008edc:	2200      	movs	r2, #0
 8008ede:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f88e 	bl	8009004 <UART_WaitOnFlagUntilTimeout>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d022      	beq.n	8008f34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef6:	e853 3f00 	ldrex	r3, [r3]
 8008efa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f02:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f14:	e841 2300 	strex	r3, r2, [r1]
 8008f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1e6      	bne.n	8008eee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2220      	movs	r2, #32
 8008f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e063      	b.n	8008ffc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 0304 	and.w	r3, r3, #4
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d149      	bne.n	8008fd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f857 	bl	8009004 <UART_WaitOnFlagUntilTimeout>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d03c      	beq.n	8008fd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f64:	e853 3f00 	ldrex	r3, [r3]
 8008f68:	623b      	str	r3, [r7, #32]
   return(result);
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f82:	e841 2300 	strex	r3, r2, [r1]
 8008f86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1e6      	bne.n	8008f5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	3308      	adds	r3, #8
 8008f94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	e853 3f00 	ldrex	r3, [r3]
 8008f9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f023 0301 	bic.w	r3, r3, #1
 8008fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3308      	adds	r3, #8
 8008fac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fae:	61fa      	str	r2, [r7, #28]
 8008fb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb2:	69b9      	ldr	r1, [r7, #24]
 8008fb4:	69fa      	ldr	r2, [r7, #28]
 8008fb6:	e841 2300 	strex	r3, r2, [r1]
 8008fba:	617b      	str	r3, [r7, #20]
   return(result);
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1e5      	bne.n	8008f8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2220      	movs	r2, #32
 8008fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	e012      	b.n	8008ffc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2220      	movs	r2, #32
 8008fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2220      	movs	r2, #32
 8008fe2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3758      	adds	r7, #88	@ 0x58
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	4613      	mov	r3, r2
 8009012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009014:	e04f      	b.n	80090b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800901c:	d04b      	beq.n	80090b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800901e:	f7f9 fa0f 	bl	8002440 <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	429a      	cmp	r2, r3
 800902c:	d302      	bcc.n	8009034 <UART_WaitOnFlagUntilTimeout+0x30>
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d101      	bne.n	8009038 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e04e      	b.n	80090d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 0304 	and.w	r3, r3, #4
 8009042:	2b00      	cmp	r3, #0
 8009044:	d037      	beq.n	80090b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	2b80      	cmp	r3, #128	@ 0x80
 800904a:	d034      	beq.n	80090b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2b40      	cmp	r3, #64	@ 0x40
 8009050:	d031      	beq.n	80090b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	f003 0308 	and.w	r3, r3, #8
 800905c:	2b08      	cmp	r3, #8
 800905e:	d110      	bne.n	8009082 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2208      	movs	r2, #8
 8009066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 f95b 	bl	8009324 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2208      	movs	r2, #8
 8009072:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e029      	b.n	80090d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	69db      	ldr	r3, [r3, #28]
 8009088:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800908c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009090:	d111      	bne.n	80090b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800909a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 f941 	bl	8009324 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2220      	movs	r2, #32
 80090a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e00f      	b.n	80090d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	69da      	ldr	r2, [r3, #28]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	4013      	ands	r3, r2
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	bf0c      	ite	eq
 80090c6:	2301      	moveq	r3, #1
 80090c8:	2300      	movne	r3, #0
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	461a      	mov	r2, r3
 80090ce:	79fb      	ldrb	r3, [r7, #7]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d0a0      	beq.n	8009016 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b0a3      	sub	sp, #140	@ 0x8c
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	4613      	mov	r3, r2
 80090ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	88fa      	ldrh	r2, [r7, #6]
 80090f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	88fa      	ldrh	r2, [r7, #6]
 8009100:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009112:	d10e      	bne.n	8009132 <UART_Start_Receive_IT+0x52>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d105      	bne.n	8009128 <UART_Start_Receive_IT+0x48>
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009122:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009126:	e02d      	b.n	8009184 <UART_Start_Receive_IT+0xa4>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	22ff      	movs	r2, #255	@ 0xff
 800912c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009130:	e028      	b.n	8009184 <UART_Start_Receive_IT+0xa4>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10d      	bne.n	8009156 <UART_Start_Receive_IT+0x76>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d104      	bne.n	800914c <UART_Start_Receive_IT+0x6c>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	22ff      	movs	r2, #255	@ 0xff
 8009146:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800914a:	e01b      	b.n	8009184 <UART_Start_Receive_IT+0xa4>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	227f      	movs	r2, #127	@ 0x7f
 8009150:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009154:	e016      	b.n	8009184 <UART_Start_Receive_IT+0xa4>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800915e:	d10d      	bne.n	800917c <UART_Start_Receive_IT+0x9c>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d104      	bne.n	8009172 <UART_Start_Receive_IT+0x92>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	227f      	movs	r2, #127	@ 0x7f
 800916c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009170:	e008      	b.n	8009184 <UART_Start_Receive_IT+0xa4>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	223f      	movs	r2, #63	@ 0x3f
 8009176:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800917a:	e003      	b.n	8009184 <UART_Start_Receive_IT+0xa4>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2222      	movs	r2, #34	@ 0x22
 8009190:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	3308      	adds	r3, #8
 800919a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80091a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091a6:	f043 0301 	orr.w	r3, r3, #1
 80091aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	3308      	adds	r3, #8
 80091b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80091b8:	673a      	str	r2, [r7, #112]	@ 0x70
 80091ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091bc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80091be:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80091c0:	e841 2300 	strex	r3, r2, [r1]
 80091c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80091c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1e3      	bne.n	8009194 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091d4:	d14f      	bne.n	8009276 <UART_Start_Receive_IT+0x196>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091dc:	88fa      	ldrh	r2, [r7, #6]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d349      	bcc.n	8009276 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091ea:	d107      	bne.n	80091fc <UART_Start_Receive_IT+0x11c>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d103      	bne.n	80091fc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4a47      	ldr	r2, [pc, #284]	@ (8009314 <UART_Start_Receive_IT+0x234>)
 80091f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80091fa:	e002      	b.n	8009202 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4a46      	ldr	r2, [pc, #280]	@ (8009318 <UART_Start_Receive_IT+0x238>)
 8009200:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d01a      	beq.n	8009240 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009212:	e853 3f00 	ldrex	r3, [r3]
 8009216:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800921a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800921e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800922c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800922e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009230:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009232:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009234:	e841 2300 	strex	r3, r2, [r1]
 8009238:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800923a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1e4      	bne.n	800920a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3308      	adds	r3, #8
 8009246:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800924a:	e853 3f00 	ldrex	r3, [r3]
 800924e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009256:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3308      	adds	r3, #8
 800925e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009260:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009262:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009266:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800926e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e5      	bne.n	8009240 <UART_Start_Receive_IT+0x160>
 8009274:	e046      	b.n	8009304 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800927e:	d107      	bne.n	8009290 <UART_Start_Receive_IT+0x1b0>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d103      	bne.n	8009290 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4a24      	ldr	r2, [pc, #144]	@ (800931c <UART_Start_Receive_IT+0x23c>)
 800928c:	675a      	str	r2, [r3, #116]	@ 0x74
 800928e:	e002      	b.n	8009296 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	4a23      	ldr	r2, [pc, #140]	@ (8009320 <UART_Start_Receive_IT+0x240>)
 8009294:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d019      	beq.n	80092d2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a6:	e853 3f00 	ldrex	r3, [r3]
 80092aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ae:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80092b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	461a      	mov	r2, r3
 80092ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80092be:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80092c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092c4:	e841 2300 	strex	r3, r2, [r1]
 80092c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80092ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1e6      	bne.n	800929e <UART_Start_Receive_IT+0x1be>
 80092d0:	e018      	b.n	8009304 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	e853 3f00 	ldrex	r3, [r3]
 80092de:	613b      	str	r3, [r7, #16]
   return(result);
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f043 0320 	orr.w	r3, r3, #32
 80092e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	461a      	mov	r2, r3
 80092ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092f0:	623b      	str	r3, [r7, #32]
 80092f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f4:	69f9      	ldr	r1, [r7, #28]
 80092f6:	6a3a      	ldr	r2, [r7, #32]
 80092f8:	e841 2300 	strex	r3, r2, [r1]
 80092fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1e6      	bne.n	80092d2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	378c      	adds	r7, #140	@ 0x8c
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	08009b41 	.word	0x08009b41
 8009318:	080097dd 	.word	0x080097dd
 800931c:	08009625 	.word	0x08009625
 8009320:	0800946d 	.word	0x0800946d

08009324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009324:	b480      	push	{r7}
 8009326:	b095      	sub	sp, #84	@ 0x54
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009340:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800934a:	643b      	str	r3, [r7, #64]	@ 0x40
 800934c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009350:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e6      	bne.n	800932c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3308      	adds	r3, #8
 8009364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	e853 3f00 	ldrex	r3, [r3]
 800936c:	61fb      	str	r3, [r7, #28]
   return(result);
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009374:	f023 0301 	bic.w	r3, r3, #1
 8009378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3308      	adds	r3, #8
 8009380:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009382:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009384:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009386:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800938a:	e841 2300 	strex	r3, r2, [r1]
 800938e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1e3      	bne.n	800935e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800939a:	2b01      	cmp	r3, #1
 800939c:	d118      	bne.n	80093d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	e853 3f00 	ldrex	r3, [r3]
 80093aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	f023 0310 	bic.w	r3, r3, #16
 80093b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	461a      	mov	r2, r3
 80093ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093bc:	61bb      	str	r3, [r7, #24]
 80093be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c0:	6979      	ldr	r1, [r7, #20]
 80093c2:	69ba      	ldr	r2, [r7, #24]
 80093c4:	e841 2300 	strex	r3, r2, [r1]
 80093c8:	613b      	str	r3, [r7, #16]
   return(result);
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1e6      	bne.n	800939e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2220      	movs	r2, #32
 80093d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80093e4:	bf00      	nop
 80093e6:	3754      	adds	r7, #84	@ 0x54
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f7ff f99e 	bl	8008748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800940c:	bf00      	nop
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b088      	sub	sp, #32
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	e853 3f00 	ldrex	r3, [r3]
 8009428:	60bb      	str	r3, [r7, #8]
   return(result);
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009430:	61fb      	str	r3, [r7, #28]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	61bb      	str	r3, [r7, #24]
 800943c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943e:	6979      	ldr	r1, [r7, #20]
 8009440:	69ba      	ldr	r2, [r7, #24]
 8009442:	e841 2300 	strex	r3, r2, [r1]
 8009446:	613b      	str	r3, [r7, #16]
   return(result);
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1e6      	bne.n	800941c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2220      	movs	r2, #32
 8009452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff f969 	bl	8008734 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009462:	bf00      	nop
 8009464:	3720      	adds	r7, #32
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
	...

0800946c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b09c      	sub	sp, #112	@ 0x70
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800947a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009484:	2b22      	cmp	r3, #34	@ 0x22
 8009486:	f040 80be 	bne.w	8009606 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009490:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009494:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009498:	b2d9      	uxtb	r1, r3
 800949a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094a4:	400a      	ands	r2, r1
 80094a6:	b2d2      	uxtb	r2, r2
 80094a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ae:	1c5a      	adds	r2, r3, #1
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	3b01      	subs	r3, #1
 80094be:	b29a      	uxth	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	f040 80a1 	bne.w	8009616 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094dc:	e853 3f00 	ldrex	r3, [r3]
 80094e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	461a      	mov	r2, r3
 80094f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094fa:	e841 2300 	strex	r3, r2, [r1]
 80094fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009500:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1e6      	bne.n	80094d4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3308      	adds	r3, #8
 800950c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009510:	e853 3f00 	ldrex	r3, [r3]
 8009514:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009518:	f023 0301 	bic.w	r3, r3, #1
 800951c:	667b      	str	r3, [r7, #100]	@ 0x64
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3308      	adds	r3, #8
 8009524:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009526:	647a      	str	r2, [r7, #68]	@ 0x44
 8009528:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800952c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800952e:	e841 2300 	strex	r3, r2, [r1]
 8009532:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1e5      	bne.n	8009506 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2220      	movs	r2, #32
 800953e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a33      	ldr	r2, [pc, #204]	@ (8009620 <UART_RxISR_8BIT+0x1b4>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d01f      	beq.n	8009598 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009562:	2b00      	cmp	r3, #0
 8009564:	d018      	beq.n	8009598 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956e:	e853 3f00 	ldrex	r3, [r3]
 8009572:	623b      	str	r3, [r7, #32]
   return(result);
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800957a:	663b      	str	r3, [r7, #96]	@ 0x60
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	461a      	mov	r2, r3
 8009582:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009584:	633b      	str	r3, [r7, #48]	@ 0x30
 8009586:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800958a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e6      	bne.n	8009566 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800959c:	2b01      	cmp	r3, #1
 800959e:	d12e      	bne.n	80095fe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	e853 3f00 	ldrex	r3, [r3]
 80095b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f023 0310 	bic.w	r3, r3, #16
 80095ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	461a      	mov	r2, r3
 80095c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095c4:	61fb      	str	r3, [r7, #28]
 80095c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c8:	69b9      	ldr	r1, [r7, #24]
 80095ca:	69fa      	ldr	r2, [r7, #28]
 80095cc:	e841 2300 	strex	r3, r2, [r1]
 80095d0:	617b      	str	r3, [r7, #20]
   return(result);
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1e6      	bne.n	80095a6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	f003 0310 	and.w	r3, r3, #16
 80095e2:	2b10      	cmp	r3, #16
 80095e4:	d103      	bne.n	80095ee <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2210      	movs	r2, #16
 80095ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095f4:	4619      	mov	r1, r3
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f7ff f8b0 	bl	800875c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095fc:	e00b      	b.n	8009616 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7f8 feb2 	bl	8002368 <HAL_UART_RxCpltCallback>
}
 8009604:	e007      	b.n	8009616 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	699a      	ldr	r2, [r3, #24]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f042 0208 	orr.w	r2, r2, #8
 8009614:	619a      	str	r2, [r3, #24]
}
 8009616:	bf00      	nop
 8009618:	3770      	adds	r7, #112	@ 0x70
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	40008000 	.word	0x40008000

08009624 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b09c      	sub	sp, #112	@ 0x70
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009632:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800963c:	2b22      	cmp	r3, #34	@ 0x22
 800963e:	f040 80be 	bne.w	80097be <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009648:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009650:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009652:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009656:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800965a:	4013      	ands	r3, r2
 800965c:	b29a      	uxth	r2, r3
 800965e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009660:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009666:	1c9a      	adds	r2, r3, #2
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009672:	b29b      	uxth	r3, r3
 8009674:	3b01      	subs	r3, #1
 8009676:	b29a      	uxth	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009684:	b29b      	uxth	r3, r3
 8009686:	2b00      	cmp	r3, #0
 8009688:	f040 80a1 	bne.w	80097ce <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009694:	e853 3f00 	ldrex	r3, [r3]
 8009698:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800969a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800969c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80096ac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80096b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096b2:	e841 2300 	strex	r3, r2, [r1]
 80096b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80096b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1e6      	bne.n	800968c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	3308      	adds	r3, #8
 80096c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096c8:	e853 3f00 	ldrex	r3, [r3]
 80096cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d0:	f023 0301 	bic.w	r3, r3, #1
 80096d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3308      	adds	r3, #8
 80096dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80096de:	643a      	str	r2, [r7, #64]	@ 0x40
 80096e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096e6:	e841 2300 	strex	r3, r2, [r1]
 80096ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1e5      	bne.n	80096be <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2220      	movs	r2, #32
 80096f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a33      	ldr	r2, [pc, #204]	@ (80097d8 <UART_RxISR_16BIT+0x1b4>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d01f      	beq.n	8009750 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d018      	beq.n	8009750 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	e853 3f00 	ldrex	r3, [r3]
 800972a:	61fb      	str	r3, [r7, #28]
   return(result);
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009732:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	461a      	mov	r2, r3
 800973a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800973c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800973e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009740:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009744:	e841 2300 	strex	r3, r2, [r1]
 8009748:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800974a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e6      	bne.n	800971e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009754:	2b01      	cmp	r3, #1
 8009756:	d12e      	bne.n	80097b6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	e853 3f00 	ldrex	r3, [r3]
 800976a:	60bb      	str	r3, [r7, #8]
   return(result);
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	f023 0310 	bic.w	r3, r3, #16
 8009772:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	461a      	mov	r2, r3
 800977a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800977c:	61bb      	str	r3, [r7, #24]
 800977e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	6979      	ldr	r1, [r7, #20]
 8009782:	69ba      	ldr	r2, [r7, #24]
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	613b      	str	r3, [r7, #16]
   return(result);
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e6      	bne.n	800975e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	f003 0310 	and.w	r3, r3, #16
 800979a:	2b10      	cmp	r3, #16
 800979c:	d103      	bne.n	80097a6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2210      	movs	r2, #16
 80097a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fe ffd4 	bl	800875c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097b4:	e00b      	b.n	80097ce <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7f8 fdd6 	bl	8002368 <HAL_UART_RxCpltCallback>
}
 80097bc:	e007      	b.n	80097ce <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	699a      	ldr	r2, [r3, #24]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f042 0208 	orr.w	r2, r2, #8
 80097cc:	619a      	str	r2, [r3, #24]
}
 80097ce:	bf00      	nop
 80097d0:	3770      	adds	r7, #112	@ 0x70
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	40008000 	.word	0x40008000

080097dc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b0ac      	sub	sp, #176	@ 0xb0
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097ea:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	69db      	ldr	r3, [r3, #28]
 80097f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009812:	2b22      	cmp	r3, #34	@ 0x22
 8009814:	f040 8183 	bne.w	8009b1e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800981e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009822:	e126      	b.n	8009a72 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800982a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800982e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009832:	b2d9      	uxtb	r1, r3
 8009834:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009838:	b2da      	uxtb	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800983e:	400a      	ands	r2, r1
 8009840:	b2d2      	uxtb	r2, r2
 8009842:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009848:	1c5a      	adds	r2, r3, #1
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009854:	b29b      	uxth	r3, r3
 8009856:	3b01      	subs	r3, #1
 8009858:	b29a      	uxth	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	69db      	ldr	r3, [r3, #28]
 8009866:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800986a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	2b00      	cmp	r3, #0
 8009874:	d053      	beq.n	800991e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	2b00      	cmp	r3, #0
 8009880:	d011      	beq.n	80098a6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009882:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00b      	beq.n	80098a6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2201      	movs	r2, #1
 8009894:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800989c:	f043 0201 	orr.w	r2, r3, #1
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098aa:	f003 0302 	and.w	r3, r3, #2
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d011      	beq.n	80098d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80098b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098b6:	f003 0301 	and.w	r3, r3, #1
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00b      	beq.n	80098d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2202      	movs	r2, #2
 80098c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098cc:	f043 0204 	orr.w	r2, r3, #4
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098da:	f003 0304 	and.w	r3, r3, #4
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d011      	beq.n	8009906 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80098e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00b      	beq.n	8009906 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2204      	movs	r2, #4
 80098f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098fc:	f043 0202 	orr.w	r2, r3, #2
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800990c:	2b00      	cmp	r3, #0
 800990e:	d006      	beq.n	800991e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f7fe ff19 	bl	8008748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009924:	b29b      	uxth	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	f040 80a3 	bne.w	8009a72 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009932:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009934:	e853 3f00 	ldrex	r3, [r3]
 8009938:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800993a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800993c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	461a      	mov	r2, r3
 800994a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800994e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009950:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009952:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009954:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009956:	e841 2300 	strex	r3, r2, [r1]
 800995a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800995c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1e4      	bne.n	800992c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	3308      	adds	r3, #8
 8009968:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009972:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009974:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009978:	f023 0301 	bic.w	r3, r3, #1
 800997c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3308      	adds	r3, #8
 8009986:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800998a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800998c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009990:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009992:	e841 2300 	strex	r3, r2, [r1]
 8009996:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009998:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1e1      	bne.n	8009962 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2220      	movs	r2, #32
 80099a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a60      	ldr	r2, [pc, #384]	@ (8009b38 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d021      	beq.n	8009a00 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d01a      	beq.n	8009a00 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099d2:	e853 3f00 	ldrex	r3, [r3]
 80099d6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80099d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80099de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	461a      	mov	r2, r3
 80099e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80099ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80099ee:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80099f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80099f4:	e841 2300 	strex	r3, r2, [r1]
 80099f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80099fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1e4      	bne.n	80099ca <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d130      	bne.n	8009a6a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a16:	e853 3f00 	ldrex	r3, [r3]
 8009a1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1e:	f023 0310 	bic.w	r3, r3, #16
 8009a22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a30:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a38:	e841 2300 	strex	r3, r2, [r1]
 8009a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1e4      	bne.n	8009a0e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	f003 0310 	and.w	r3, r3, #16
 8009a4e:	2b10      	cmp	r3, #16
 8009a50:	d103      	bne.n	8009a5a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2210      	movs	r2, #16
 8009a58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a60:	4619      	mov	r1, r3
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7fe fe7a 	bl	800875c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009a68:	e00e      	b.n	8009a88 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7f8 fc7c 	bl	8002368 <HAL_UART_RxCpltCallback>
        break;
 8009a70:	e00a      	b.n	8009a88 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a72:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d006      	beq.n	8009a88 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8009a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a7e:	f003 0320 	and.w	r3, r3, #32
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f47f aece 	bne.w	8009824 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a8e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a92:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d049      	beq.n	8009b2e <UART_RxISR_8BIT_FIFOEN+0x352>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009aa0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d242      	bcs.n	8009b2e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3308      	adds	r3, #8
 8009aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab0:	6a3b      	ldr	r3, [r7, #32]
 8009ab2:	e853 3f00 	ldrex	r3, [r3]
 8009ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009abe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3308      	adds	r3, #8
 8009ac8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009acc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ace:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ad4:	e841 2300 	strex	r3, r2, [r1]
 8009ad8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1e3      	bne.n	8009aa8 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a16      	ldr	r2, [pc, #88]	@ (8009b3c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009ae4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	e853 3f00 	ldrex	r3, [r3]
 8009af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	f043 0320 	orr.w	r3, r3, #32
 8009afa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b08:	61bb      	str	r3, [r7, #24]
 8009b0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	6979      	ldr	r1, [r7, #20]
 8009b0e:	69ba      	ldr	r2, [r7, #24]
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	613b      	str	r3, [r7, #16]
   return(result);
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e4      	bne.n	8009ae6 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b1c:	e007      	b.n	8009b2e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	699a      	ldr	r2, [r3, #24]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f042 0208 	orr.w	r2, r2, #8
 8009b2c:	619a      	str	r2, [r3, #24]
}
 8009b2e:	bf00      	nop
 8009b30:	37b0      	adds	r7, #176	@ 0xb0
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	40008000 	.word	0x40008000
 8009b3c:	0800946d 	.word	0x0800946d

08009b40 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b0ae      	sub	sp, #184	@ 0xb8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b4e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	69db      	ldr	r3, [r3, #28]
 8009b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b76:	2b22      	cmp	r3, #34	@ 0x22
 8009b78:	f040 8187 	bne.w	8009e8a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b82:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b86:	e12a      	b.n	8009dde <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009b9a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009b9e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009ba2:	4013      	ands	r3, r2
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009baa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bb0:	1c9a      	adds	r2, r3, #2
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009bd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009bd6:	f003 0307 	and.w	r3, r3, #7
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d053      	beq.n	8009c86 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d011      	beq.n	8009c0e <UART_RxISR_16BIT_FIFOEN+0xce>
 8009bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00b      	beq.n	8009c0e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c04:	f043 0201 	orr.w	r2, r3, #1
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c12:	f003 0302 	and.w	r3, r3, #2
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d011      	beq.n	8009c3e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009c1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00b      	beq.n	8009c3e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2202      	movs	r2, #2
 8009c2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c34:	f043 0204 	orr.w	r2, r3, #4
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c42:	f003 0304 	and.w	r3, r3, #4
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d011      	beq.n	8009c6e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009c4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00b      	beq.n	8009c6e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2204      	movs	r2, #4
 8009c5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c64:	f043 0202 	orr.w	r2, r3, #2
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d006      	beq.n	8009c86 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f7fe fd65 	bl	8008748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f040 80a5 	bne.w	8009dde <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c9c:	e853 3f00 	ldrex	r3, [r3]
 8009ca0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ca2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ca8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009cb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009cba:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009cbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009cc2:	e841 2300 	strex	r3, r2, [r1]
 8009cc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009cc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1e2      	bne.n	8009c94 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cd8:	e853 3f00 	ldrex	r3, [r3]
 8009cdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009cde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ce0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ce4:	f023 0301 	bic.w	r3, r3, #1
 8009ce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3308      	adds	r3, #8
 8009cf2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009cf6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009cf8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009cfc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009cfe:	e841 2300 	strex	r3, r2, [r1]
 8009d02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009d04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1e1      	bne.n	8009cce <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a60      	ldr	r2, [pc, #384]	@ (8009ea4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d021      	beq.n	8009d6c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d01a      	beq.n	8009d6c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d3e:	e853 3f00 	ldrex	r3, [r3]
 8009d42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	461a      	mov	r2, r3
 8009d54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009d58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d5a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d60:	e841 2300 	strex	r3, r2, [r1]
 8009d64:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1e4      	bne.n	8009d36 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d130      	bne.n	8009dd6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d82:	e853 3f00 	ldrex	r3, [r3]
 8009d86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d8a:	f023 0310 	bic.w	r3, r3, #16
 8009d8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	461a      	mov	r2, r3
 8009d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009da2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009da4:	e841 2300 	strex	r3, r2, [r1]
 8009da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1e4      	bne.n	8009d7a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	f003 0310 	and.w	r3, r3, #16
 8009dba:	2b10      	cmp	r3, #16
 8009dbc:	d103      	bne.n	8009dc6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2210      	movs	r2, #16
 8009dc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f7fe fcc4 	bl	800875c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009dd4:	e00e      	b.n	8009df4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f7f8 fac6 	bl	8002368 <HAL_UART_RxCpltCallback>
        break;
 8009ddc:	e00a      	b.n	8009df4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dde:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d006      	beq.n	8009df4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8009de6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009dea:	f003 0320 	and.w	r3, r3, #32
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f47f aeca 	bne.w	8009b88 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009dfa:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009dfe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d049      	beq.n	8009e9a <UART_RxISR_16BIT_FIFOEN+0x35a>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009e0c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d242      	bcs.n	8009e9a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	3308      	adds	r3, #8
 8009e1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1e:	e853 3f00 	ldrex	r3, [r3]
 8009e22:	623b      	str	r3, [r7, #32]
   return(result);
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	3308      	adds	r3, #8
 8009e34:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009e38:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e40:	e841 2300 	strex	r3, r2, [r1]
 8009e44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1e3      	bne.n	8009e14 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a16      	ldr	r2, [pc, #88]	@ (8009ea8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009e50:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	e853 3f00 	ldrex	r3, [r3]
 8009e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f043 0320 	orr.w	r3, r3, #32
 8009e66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e74:	61fb      	str	r3, [r7, #28]
 8009e76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e78:	69b9      	ldr	r1, [r7, #24]
 8009e7a:	69fa      	ldr	r2, [r7, #28]
 8009e7c:	e841 2300 	strex	r3, r2, [r1]
 8009e80:	617b      	str	r3, [r7, #20]
   return(result);
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1e4      	bne.n	8009e52 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e88:	e007      	b.n	8009e9a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	699a      	ldr	r2, [r3, #24]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f042 0208 	orr.w	r2, r2, #8
 8009e98:	619a      	str	r2, [r3, #24]
}
 8009e9a:	bf00      	nop
 8009e9c:	37b8      	adds	r7, #184	@ 0xb8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	40008000 	.word	0x40008000
 8009ea8:	08009625 	.word	0x08009625

08009eac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d101      	bne.n	8009efe <HAL_UARTEx_DisableFifoMode+0x16>
 8009efa:	2302      	movs	r3, #2
 8009efc:	e027      	b.n	8009f4e <HAL_UARTEx_DisableFifoMode+0x66>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2224      	movs	r2, #36	@ 0x24
 8009f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f022 0201 	bic.w	r2, r2, #1
 8009f24:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b084      	sub	sp, #16
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
 8009f62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d101      	bne.n	8009f72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f6e:	2302      	movs	r3, #2
 8009f70:	e02d      	b.n	8009fce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2224      	movs	r2, #36	@ 0x24
 8009f7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f022 0201 	bic.w	r2, r2, #1
 8009f98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	430a      	orrs	r2, r1
 8009fac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f850 	bl	800a054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2220      	movs	r2, #32
 8009fc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b084      	sub	sp, #16
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d101      	bne.n	8009fee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009fea:	2302      	movs	r3, #2
 8009fec:	e02d      	b.n	800a04a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2224      	movs	r2, #36	@ 0x24
 8009ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f022 0201 	bic.w	r2, r2, #1
 800a014:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	430a      	orrs	r2, r1
 800a028:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f812 	bl	800a054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2220      	movs	r2, #32
 800a03c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
	...

0800a054 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a060:	2b00      	cmp	r3, #0
 800a062:	d108      	bne.n	800a076 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a074:	e031      	b.n	800a0da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a076:	2308      	movs	r3, #8
 800a078:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a07a:	2308      	movs	r3, #8
 800a07c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	0e5b      	lsrs	r3, r3, #25
 800a086:	b2db      	uxtb	r3, r3
 800a088:	f003 0307 	and.w	r3, r3, #7
 800a08c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	0f5b      	lsrs	r3, r3, #29
 800a096:	b2db      	uxtb	r3, r3
 800a098:	f003 0307 	and.w	r3, r3, #7
 800a09c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a09e:	7bbb      	ldrb	r3, [r7, #14]
 800a0a0:	7b3a      	ldrb	r2, [r7, #12]
 800a0a2:	4911      	ldr	r1, [pc, #68]	@ (800a0e8 <UARTEx_SetNbDataToProcess+0x94>)
 800a0a4:	5c8a      	ldrb	r2, [r1, r2]
 800a0a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0aa:	7b3a      	ldrb	r2, [r7, #12]
 800a0ac:	490f      	ldr	r1, [pc, #60]	@ (800a0ec <UARTEx_SetNbDataToProcess+0x98>)
 800a0ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
 800a0be:	7b7a      	ldrb	r2, [r7, #13]
 800a0c0:	4909      	ldr	r1, [pc, #36]	@ (800a0e8 <UARTEx_SetNbDataToProcess+0x94>)
 800a0c2:	5c8a      	ldrb	r2, [r1, r2]
 800a0c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a0c8:	7b7a      	ldrb	r2, [r7, #13]
 800a0ca:	4908      	ldr	r1, [pc, #32]	@ (800a0ec <UARTEx_SetNbDataToProcess+0x98>)
 800a0cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a0da:	bf00      	nop
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	0800b9a4 	.word	0x0800b9a4
 800a0ec:	0800b9ac 	.word	0x0800b9ac

0800a0f0 <atoi>:
 800a0f0:	220a      	movs	r2, #10
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	f000 b938 	b.w	800a368 <strtol>

0800a0f8 <malloc>:
 800a0f8:	4b02      	ldr	r3, [pc, #8]	@ (800a104 <malloc+0xc>)
 800a0fa:	4601      	mov	r1, r0
 800a0fc:	6818      	ldr	r0, [r3, #0]
 800a0fe:	f000 b82d 	b.w	800a15c <_malloc_r>
 800a102:	bf00      	nop
 800a104:	200000c0 	.word	0x200000c0

0800a108 <free>:
 800a108:	4b02      	ldr	r3, [pc, #8]	@ (800a114 <free+0xc>)
 800a10a:	4601      	mov	r1, r0
 800a10c:	6818      	ldr	r0, [r3, #0]
 800a10e:	f000 bb83 	b.w	800a818 <_free_r>
 800a112:	bf00      	nop
 800a114:	200000c0 	.word	0x200000c0

0800a118 <sbrk_aligned>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	4e0f      	ldr	r6, [pc, #60]	@ (800a158 <sbrk_aligned+0x40>)
 800a11c:	460c      	mov	r4, r1
 800a11e:	6831      	ldr	r1, [r6, #0]
 800a120:	4605      	mov	r5, r0
 800a122:	b911      	cbnz	r1, 800a12a <sbrk_aligned+0x12>
 800a124:	f000 fafc 	bl	800a720 <_sbrk_r>
 800a128:	6030      	str	r0, [r6, #0]
 800a12a:	4621      	mov	r1, r4
 800a12c:	4628      	mov	r0, r5
 800a12e:	f000 faf7 	bl	800a720 <_sbrk_r>
 800a132:	1c43      	adds	r3, r0, #1
 800a134:	d103      	bne.n	800a13e <sbrk_aligned+0x26>
 800a136:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a13a:	4620      	mov	r0, r4
 800a13c:	bd70      	pop	{r4, r5, r6, pc}
 800a13e:	1cc4      	adds	r4, r0, #3
 800a140:	f024 0403 	bic.w	r4, r4, #3
 800a144:	42a0      	cmp	r0, r4
 800a146:	d0f8      	beq.n	800a13a <sbrk_aligned+0x22>
 800a148:	1a21      	subs	r1, r4, r0
 800a14a:	4628      	mov	r0, r5
 800a14c:	f000 fae8 	bl	800a720 <_sbrk_r>
 800a150:	3001      	adds	r0, #1
 800a152:	d1f2      	bne.n	800a13a <sbrk_aligned+0x22>
 800a154:	e7ef      	b.n	800a136 <sbrk_aligned+0x1e>
 800a156:	bf00      	nop
 800a158:	20000820 	.word	0x20000820

0800a15c <_malloc_r>:
 800a15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a160:	1ccd      	adds	r5, r1, #3
 800a162:	f025 0503 	bic.w	r5, r5, #3
 800a166:	3508      	adds	r5, #8
 800a168:	2d0c      	cmp	r5, #12
 800a16a:	bf38      	it	cc
 800a16c:	250c      	movcc	r5, #12
 800a16e:	2d00      	cmp	r5, #0
 800a170:	4606      	mov	r6, r0
 800a172:	db01      	blt.n	800a178 <_malloc_r+0x1c>
 800a174:	42a9      	cmp	r1, r5
 800a176:	d904      	bls.n	800a182 <_malloc_r+0x26>
 800a178:	230c      	movs	r3, #12
 800a17a:	6033      	str	r3, [r6, #0]
 800a17c:	2000      	movs	r0, #0
 800a17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a182:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a258 <_malloc_r+0xfc>
 800a186:	f000 f869 	bl	800a25c <__malloc_lock>
 800a18a:	f8d8 3000 	ldr.w	r3, [r8]
 800a18e:	461c      	mov	r4, r3
 800a190:	bb44      	cbnz	r4, 800a1e4 <_malloc_r+0x88>
 800a192:	4629      	mov	r1, r5
 800a194:	4630      	mov	r0, r6
 800a196:	f7ff ffbf 	bl	800a118 <sbrk_aligned>
 800a19a:	1c43      	adds	r3, r0, #1
 800a19c:	4604      	mov	r4, r0
 800a19e:	d158      	bne.n	800a252 <_malloc_r+0xf6>
 800a1a0:	f8d8 4000 	ldr.w	r4, [r8]
 800a1a4:	4627      	mov	r7, r4
 800a1a6:	2f00      	cmp	r7, #0
 800a1a8:	d143      	bne.n	800a232 <_malloc_r+0xd6>
 800a1aa:	2c00      	cmp	r4, #0
 800a1ac:	d04b      	beq.n	800a246 <_malloc_r+0xea>
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	4639      	mov	r1, r7
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	eb04 0903 	add.w	r9, r4, r3
 800a1b8:	f000 fab2 	bl	800a720 <_sbrk_r>
 800a1bc:	4581      	cmp	r9, r0
 800a1be:	d142      	bne.n	800a246 <_malloc_r+0xea>
 800a1c0:	6821      	ldr	r1, [r4, #0]
 800a1c2:	1a6d      	subs	r5, r5, r1
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	f7ff ffa6 	bl	800a118 <sbrk_aligned>
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	d03a      	beq.n	800a246 <_malloc_r+0xea>
 800a1d0:	6823      	ldr	r3, [r4, #0]
 800a1d2:	442b      	add	r3, r5
 800a1d4:	6023      	str	r3, [r4, #0]
 800a1d6:	f8d8 3000 	ldr.w	r3, [r8]
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	bb62      	cbnz	r2, 800a238 <_malloc_r+0xdc>
 800a1de:	f8c8 7000 	str.w	r7, [r8]
 800a1e2:	e00f      	b.n	800a204 <_malloc_r+0xa8>
 800a1e4:	6822      	ldr	r2, [r4, #0]
 800a1e6:	1b52      	subs	r2, r2, r5
 800a1e8:	d420      	bmi.n	800a22c <_malloc_r+0xd0>
 800a1ea:	2a0b      	cmp	r2, #11
 800a1ec:	d917      	bls.n	800a21e <_malloc_r+0xc2>
 800a1ee:	1961      	adds	r1, r4, r5
 800a1f0:	42a3      	cmp	r3, r4
 800a1f2:	6025      	str	r5, [r4, #0]
 800a1f4:	bf18      	it	ne
 800a1f6:	6059      	strne	r1, [r3, #4]
 800a1f8:	6863      	ldr	r3, [r4, #4]
 800a1fa:	bf08      	it	eq
 800a1fc:	f8c8 1000 	streq.w	r1, [r8]
 800a200:	5162      	str	r2, [r4, r5]
 800a202:	604b      	str	r3, [r1, #4]
 800a204:	4630      	mov	r0, r6
 800a206:	f000 f82f 	bl	800a268 <__malloc_unlock>
 800a20a:	f104 000b 	add.w	r0, r4, #11
 800a20e:	1d23      	adds	r3, r4, #4
 800a210:	f020 0007 	bic.w	r0, r0, #7
 800a214:	1ac2      	subs	r2, r0, r3
 800a216:	bf1c      	itt	ne
 800a218:	1a1b      	subne	r3, r3, r0
 800a21a:	50a3      	strne	r3, [r4, r2]
 800a21c:	e7af      	b.n	800a17e <_malloc_r+0x22>
 800a21e:	6862      	ldr	r2, [r4, #4]
 800a220:	42a3      	cmp	r3, r4
 800a222:	bf0c      	ite	eq
 800a224:	f8c8 2000 	streq.w	r2, [r8]
 800a228:	605a      	strne	r2, [r3, #4]
 800a22a:	e7eb      	b.n	800a204 <_malloc_r+0xa8>
 800a22c:	4623      	mov	r3, r4
 800a22e:	6864      	ldr	r4, [r4, #4]
 800a230:	e7ae      	b.n	800a190 <_malloc_r+0x34>
 800a232:	463c      	mov	r4, r7
 800a234:	687f      	ldr	r7, [r7, #4]
 800a236:	e7b6      	b.n	800a1a6 <_malloc_r+0x4a>
 800a238:	461a      	mov	r2, r3
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	42a3      	cmp	r3, r4
 800a23e:	d1fb      	bne.n	800a238 <_malloc_r+0xdc>
 800a240:	2300      	movs	r3, #0
 800a242:	6053      	str	r3, [r2, #4]
 800a244:	e7de      	b.n	800a204 <_malloc_r+0xa8>
 800a246:	230c      	movs	r3, #12
 800a248:	6033      	str	r3, [r6, #0]
 800a24a:	4630      	mov	r0, r6
 800a24c:	f000 f80c 	bl	800a268 <__malloc_unlock>
 800a250:	e794      	b.n	800a17c <_malloc_r+0x20>
 800a252:	6005      	str	r5, [r0, #0]
 800a254:	e7d6      	b.n	800a204 <_malloc_r+0xa8>
 800a256:	bf00      	nop
 800a258:	20000824 	.word	0x20000824

0800a25c <__malloc_lock>:
 800a25c:	4801      	ldr	r0, [pc, #4]	@ (800a264 <__malloc_lock+0x8>)
 800a25e:	f000 baac 	b.w	800a7ba <__retarget_lock_acquire_recursive>
 800a262:	bf00      	nop
 800a264:	20000968 	.word	0x20000968

0800a268 <__malloc_unlock>:
 800a268:	4801      	ldr	r0, [pc, #4]	@ (800a270 <__malloc_unlock+0x8>)
 800a26a:	f000 baa7 	b.w	800a7bc <__retarget_lock_release_recursive>
 800a26e:	bf00      	nop
 800a270:	20000968 	.word	0x20000968

0800a274 <_strtol_l.constprop.0>:
 800a274:	2b24      	cmp	r3, #36	@ 0x24
 800a276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a27a:	4686      	mov	lr, r0
 800a27c:	4690      	mov	r8, r2
 800a27e:	d801      	bhi.n	800a284 <_strtol_l.constprop.0+0x10>
 800a280:	2b01      	cmp	r3, #1
 800a282:	d106      	bne.n	800a292 <_strtol_l.constprop.0+0x1e>
 800a284:	f000 fa6e 	bl	800a764 <__errno>
 800a288:	2316      	movs	r3, #22
 800a28a:	6003      	str	r3, [r0, #0]
 800a28c:	2000      	movs	r0, #0
 800a28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a292:	4834      	ldr	r0, [pc, #208]	@ (800a364 <_strtol_l.constprop.0+0xf0>)
 800a294:	460d      	mov	r5, r1
 800a296:	462a      	mov	r2, r5
 800a298:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a29c:	5d06      	ldrb	r6, [r0, r4]
 800a29e:	f016 0608 	ands.w	r6, r6, #8
 800a2a2:	d1f8      	bne.n	800a296 <_strtol_l.constprop.0+0x22>
 800a2a4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a2a6:	d12d      	bne.n	800a304 <_strtol_l.constprop.0+0x90>
 800a2a8:	782c      	ldrb	r4, [r5, #0]
 800a2aa:	2601      	movs	r6, #1
 800a2ac:	1c95      	adds	r5, r2, #2
 800a2ae:	f033 0210 	bics.w	r2, r3, #16
 800a2b2:	d109      	bne.n	800a2c8 <_strtol_l.constprop.0+0x54>
 800a2b4:	2c30      	cmp	r4, #48	@ 0x30
 800a2b6:	d12a      	bne.n	800a30e <_strtol_l.constprop.0+0x9a>
 800a2b8:	782a      	ldrb	r2, [r5, #0]
 800a2ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a2be:	2a58      	cmp	r2, #88	@ 0x58
 800a2c0:	d125      	bne.n	800a30e <_strtol_l.constprop.0+0x9a>
 800a2c2:	786c      	ldrb	r4, [r5, #1]
 800a2c4:	2310      	movs	r3, #16
 800a2c6:	3502      	adds	r5, #2
 800a2c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a2cc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	fbbc f9f3 	udiv	r9, ip, r3
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	fb03 ca19 	mls	sl, r3, r9, ip
 800a2dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a2e0:	2f09      	cmp	r7, #9
 800a2e2:	d81b      	bhi.n	800a31c <_strtol_l.constprop.0+0xa8>
 800a2e4:	463c      	mov	r4, r7
 800a2e6:	42a3      	cmp	r3, r4
 800a2e8:	dd27      	ble.n	800a33a <_strtol_l.constprop.0+0xc6>
 800a2ea:	1c57      	adds	r7, r2, #1
 800a2ec:	d007      	beq.n	800a2fe <_strtol_l.constprop.0+0x8a>
 800a2ee:	4581      	cmp	r9, r0
 800a2f0:	d320      	bcc.n	800a334 <_strtol_l.constprop.0+0xc0>
 800a2f2:	d101      	bne.n	800a2f8 <_strtol_l.constprop.0+0x84>
 800a2f4:	45a2      	cmp	sl, r4
 800a2f6:	db1d      	blt.n	800a334 <_strtol_l.constprop.0+0xc0>
 800a2f8:	fb00 4003 	mla	r0, r0, r3, r4
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a302:	e7eb      	b.n	800a2dc <_strtol_l.constprop.0+0x68>
 800a304:	2c2b      	cmp	r4, #43	@ 0x2b
 800a306:	bf04      	itt	eq
 800a308:	782c      	ldrbeq	r4, [r5, #0]
 800a30a:	1c95      	addeq	r5, r2, #2
 800a30c:	e7cf      	b.n	800a2ae <_strtol_l.constprop.0+0x3a>
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1da      	bne.n	800a2c8 <_strtol_l.constprop.0+0x54>
 800a312:	2c30      	cmp	r4, #48	@ 0x30
 800a314:	bf0c      	ite	eq
 800a316:	2308      	moveq	r3, #8
 800a318:	230a      	movne	r3, #10
 800a31a:	e7d5      	b.n	800a2c8 <_strtol_l.constprop.0+0x54>
 800a31c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a320:	2f19      	cmp	r7, #25
 800a322:	d801      	bhi.n	800a328 <_strtol_l.constprop.0+0xb4>
 800a324:	3c37      	subs	r4, #55	@ 0x37
 800a326:	e7de      	b.n	800a2e6 <_strtol_l.constprop.0+0x72>
 800a328:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a32c:	2f19      	cmp	r7, #25
 800a32e:	d804      	bhi.n	800a33a <_strtol_l.constprop.0+0xc6>
 800a330:	3c57      	subs	r4, #87	@ 0x57
 800a332:	e7d8      	b.n	800a2e6 <_strtol_l.constprop.0+0x72>
 800a334:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a338:	e7e1      	b.n	800a2fe <_strtol_l.constprop.0+0x8a>
 800a33a:	1c53      	adds	r3, r2, #1
 800a33c:	d108      	bne.n	800a350 <_strtol_l.constprop.0+0xdc>
 800a33e:	2322      	movs	r3, #34	@ 0x22
 800a340:	f8ce 3000 	str.w	r3, [lr]
 800a344:	4660      	mov	r0, ip
 800a346:	f1b8 0f00 	cmp.w	r8, #0
 800a34a:	d0a0      	beq.n	800a28e <_strtol_l.constprop.0+0x1a>
 800a34c:	1e69      	subs	r1, r5, #1
 800a34e:	e006      	b.n	800a35e <_strtol_l.constprop.0+0xea>
 800a350:	b106      	cbz	r6, 800a354 <_strtol_l.constprop.0+0xe0>
 800a352:	4240      	negs	r0, r0
 800a354:	f1b8 0f00 	cmp.w	r8, #0
 800a358:	d099      	beq.n	800a28e <_strtol_l.constprop.0+0x1a>
 800a35a:	2a00      	cmp	r2, #0
 800a35c:	d1f6      	bne.n	800a34c <_strtol_l.constprop.0+0xd8>
 800a35e:	f8c8 1000 	str.w	r1, [r8]
 800a362:	e794      	b.n	800a28e <_strtol_l.constprop.0+0x1a>
 800a364:	0800b9b5 	.word	0x0800b9b5

0800a368 <strtol>:
 800a368:	4613      	mov	r3, r2
 800a36a:	460a      	mov	r2, r1
 800a36c:	4601      	mov	r1, r0
 800a36e:	4802      	ldr	r0, [pc, #8]	@ (800a378 <strtol+0x10>)
 800a370:	6800      	ldr	r0, [r0, #0]
 800a372:	f7ff bf7f 	b.w	800a274 <_strtol_l.constprop.0>
 800a376:	bf00      	nop
 800a378:	200000c0 	.word	0x200000c0

0800a37c <std>:
 800a37c:	2300      	movs	r3, #0
 800a37e:	b510      	push	{r4, lr}
 800a380:	4604      	mov	r4, r0
 800a382:	e9c0 3300 	strd	r3, r3, [r0]
 800a386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a38a:	6083      	str	r3, [r0, #8]
 800a38c:	8181      	strh	r1, [r0, #12]
 800a38e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a390:	81c2      	strh	r2, [r0, #14]
 800a392:	6183      	str	r3, [r0, #24]
 800a394:	4619      	mov	r1, r3
 800a396:	2208      	movs	r2, #8
 800a398:	305c      	adds	r0, #92	@ 0x5c
 800a39a:	f000 f928 	bl	800a5ee <memset>
 800a39e:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d4 <std+0x58>)
 800a3a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d8 <std+0x5c>)
 800a3a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a3dc <std+0x60>)
 800a3a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a3e0 <std+0x64>)
 800a3ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800a3ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a3e4 <std+0x68>)
 800a3b0:	6224      	str	r4, [r4, #32]
 800a3b2:	429c      	cmp	r4, r3
 800a3b4:	d006      	beq.n	800a3c4 <std+0x48>
 800a3b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a3ba:	4294      	cmp	r4, r2
 800a3bc:	d002      	beq.n	800a3c4 <std+0x48>
 800a3be:	33d0      	adds	r3, #208	@ 0xd0
 800a3c0:	429c      	cmp	r4, r3
 800a3c2:	d105      	bne.n	800a3d0 <std+0x54>
 800a3c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3cc:	f000 b9f4 	b.w	800a7b8 <__retarget_lock_init_recursive>
 800a3d0:	bd10      	pop	{r4, pc}
 800a3d2:	bf00      	nop
 800a3d4:	0800a569 	.word	0x0800a569
 800a3d8:	0800a58b 	.word	0x0800a58b
 800a3dc:	0800a5c3 	.word	0x0800a5c3
 800a3e0:	0800a5e7 	.word	0x0800a5e7
 800a3e4:	20000828 	.word	0x20000828

0800a3e8 <stdio_exit_handler>:
 800a3e8:	4a02      	ldr	r2, [pc, #8]	@ (800a3f4 <stdio_exit_handler+0xc>)
 800a3ea:	4903      	ldr	r1, [pc, #12]	@ (800a3f8 <stdio_exit_handler+0x10>)
 800a3ec:	4803      	ldr	r0, [pc, #12]	@ (800a3fc <stdio_exit_handler+0x14>)
 800a3ee:	f000 b869 	b.w	800a4c4 <_fwalk_sglue>
 800a3f2:	bf00      	nop
 800a3f4:	200000b4 	.word	0x200000b4
 800a3f8:	0800af81 	.word	0x0800af81
 800a3fc:	200000c4 	.word	0x200000c4

0800a400 <cleanup_stdio>:
 800a400:	6841      	ldr	r1, [r0, #4]
 800a402:	4b0c      	ldr	r3, [pc, #48]	@ (800a434 <cleanup_stdio+0x34>)
 800a404:	4299      	cmp	r1, r3
 800a406:	b510      	push	{r4, lr}
 800a408:	4604      	mov	r4, r0
 800a40a:	d001      	beq.n	800a410 <cleanup_stdio+0x10>
 800a40c:	f000 fdb8 	bl	800af80 <_fflush_r>
 800a410:	68a1      	ldr	r1, [r4, #8]
 800a412:	4b09      	ldr	r3, [pc, #36]	@ (800a438 <cleanup_stdio+0x38>)
 800a414:	4299      	cmp	r1, r3
 800a416:	d002      	beq.n	800a41e <cleanup_stdio+0x1e>
 800a418:	4620      	mov	r0, r4
 800a41a:	f000 fdb1 	bl	800af80 <_fflush_r>
 800a41e:	68e1      	ldr	r1, [r4, #12]
 800a420:	4b06      	ldr	r3, [pc, #24]	@ (800a43c <cleanup_stdio+0x3c>)
 800a422:	4299      	cmp	r1, r3
 800a424:	d004      	beq.n	800a430 <cleanup_stdio+0x30>
 800a426:	4620      	mov	r0, r4
 800a428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a42c:	f000 bda8 	b.w	800af80 <_fflush_r>
 800a430:	bd10      	pop	{r4, pc}
 800a432:	bf00      	nop
 800a434:	20000828 	.word	0x20000828
 800a438:	20000890 	.word	0x20000890
 800a43c:	200008f8 	.word	0x200008f8

0800a440 <global_stdio_init.part.0>:
 800a440:	b510      	push	{r4, lr}
 800a442:	4b0b      	ldr	r3, [pc, #44]	@ (800a470 <global_stdio_init.part.0+0x30>)
 800a444:	4c0b      	ldr	r4, [pc, #44]	@ (800a474 <global_stdio_init.part.0+0x34>)
 800a446:	4a0c      	ldr	r2, [pc, #48]	@ (800a478 <global_stdio_init.part.0+0x38>)
 800a448:	601a      	str	r2, [r3, #0]
 800a44a:	4620      	mov	r0, r4
 800a44c:	2200      	movs	r2, #0
 800a44e:	2104      	movs	r1, #4
 800a450:	f7ff ff94 	bl	800a37c <std>
 800a454:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a458:	2201      	movs	r2, #1
 800a45a:	2109      	movs	r1, #9
 800a45c:	f7ff ff8e 	bl	800a37c <std>
 800a460:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a464:	2202      	movs	r2, #2
 800a466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a46a:	2112      	movs	r1, #18
 800a46c:	f7ff bf86 	b.w	800a37c <std>
 800a470:	20000960 	.word	0x20000960
 800a474:	20000828 	.word	0x20000828
 800a478:	0800a3e9 	.word	0x0800a3e9

0800a47c <__sfp_lock_acquire>:
 800a47c:	4801      	ldr	r0, [pc, #4]	@ (800a484 <__sfp_lock_acquire+0x8>)
 800a47e:	f000 b99c 	b.w	800a7ba <__retarget_lock_acquire_recursive>
 800a482:	bf00      	nop
 800a484:	20000969 	.word	0x20000969

0800a488 <__sfp_lock_release>:
 800a488:	4801      	ldr	r0, [pc, #4]	@ (800a490 <__sfp_lock_release+0x8>)
 800a48a:	f000 b997 	b.w	800a7bc <__retarget_lock_release_recursive>
 800a48e:	bf00      	nop
 800a490:	20000969 	.word	0x20000969

0800a494 <__sinit>:
 800a494:	b510      	push	{r4, lr}
 800a496:	4604      	mov	r4, r0
 800a498:	f7ff fff0 	bl	800a47c <__sfp_lock_acquire>
 800a49c:	6a23      	ldr	r3, [r4, #32]
 800a49e:	b11b      	cbz	r3, 800a4a8 <__sinit+0x14>
 800a4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4a4:	f7ff bff0 	b.w	800a488 <__sfp_lock_release>
 800a4a8:	4b04      	ldr	r3, [pc, #16]	@ (800a4bc <__sinit+0x28>)
 800a4aa:	6223      	str	r3, [r4, #32]
 800a4ac:	4b04      	ldr	r3, [pc, #16]	@ (800a4c0 <__sinit+0x2c>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1f5      	bne.n	800a4a0 <__sinit+0xc>
 800a4b4:	f7ff ffc4 	bl	800a440 <global_stdio_init.part.0>
 800a4b8:	e7f2      	b.n	800a4a0 <__sinit+0xc>
 800a4ba:	bf00      	nop
 800a4bc:	0800a401 	.word	0x0800a401
 800a4c0:	20000960 	.word	0x20000960

0800a4c4 <_fwalk_sglue>:
 800a4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4c8:	4607      	mov	r7, r0
 800a4ca:	4688      	mov	r8, r1
 800a4cc:	4614      	mov	r4, r2
 800a4ce:	2600      	movs	r6, #0
 800a4d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4d4:	f1b9 0901 	subs.w	r9, r9, #1
 800a4d8:	d505      	bpl.n	800a4e6 <_fwalk_sglue+0x22>
 800a4da:	6824      	ldr	r4, [r4, #0]
 800a4dc:	2c00      	cmp	r4, #0
 800a4de:	d1f7      	bne.n	800a4d0 <_fwalk_sglue+0xc>
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4e6:	89ab      	ldrh	r3, [r5, #12]
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d907      	bls.n	800a4fc <_fwalk_sglue+0x38>
 800a4ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	d003      	beq.n	800a4fc <_fwalk_sglue+0x38>
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	47c0      	blx	r8
 800a4fa:	4306      	orrs	r6, r0
 800a4fc:	3568      	adds	r5, #104	@ 0x68
 800a4fe:	e7e9      	b.n	800a4d4 <_fwalk_sglue+0x10>

0800a500 <sniprintf>:
 800a500:	b40c      	push	{r2, r3}
 800a502:	b530      	push	{r4, r5, lr}
 800a504:	4b17      	ldr	r3, [pc, #92]	@ (800a564 <sniprintf+0x64>)
 800a506:	1e0c      	subs	r4, r1, #0
 800a508:	681d      	ldr	r5, [r3, #0]
 800a50a:	b09d      	sub	sp, #116	@ 0x74
 800a50c:	da08      	bge.n	800a520 <sniprintf+0x20>
 800a50e:	238b      	movs	r3, #139	@ 0x8b
 800a510:	602b      	str	r3, [r5, #0]
 800a512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a516:	b01d      	add	sp, #116	@ 0x74
 800a518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a51c:	b002      	add	sp, #8
 800a51e:	4770      	bx	lr
 800a520:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a524:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a528:	bf14      	ite	ne
 800a52a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a52e:	4623      	moveq	r3, r4
 800a530:	9304      	str	r3, [sp, #16]
 800a532:	9307      	str	r3, [sp, #28]
 800a534:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a538:	9002      	str	r0, [sp, #8]
 800a53a:	9006      	str	r0, [sp, #24]
 800a53c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a540:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a542:	ab21      	add	r3, sp, #132	@ 0x84
 800a544:	a902      	add	r1, sp, #8
 800a546:	4628      	mov	r0, r5
 800a548:	9301      	str	r3, [sp, #4]
 800a54a:	f000 fa0b 	bl	800a964 <_svfiprintf_r>
 800a54e:	1c43      	adds	r3, r0, #1
 800a550:	bfbc      	itt	lt
 800a552:	238b      	movlt	r3, #139	@ 0x8b
 800a554:	602b      	strlt	r3, [r5, #0]
 800a556:	2c00      	cmp	r4, #0
 800a558:	d0dd      	beq.n	800a516 <sniprintf+0x16>
 800a55a:	9b02      	ldr	r3, [sp, #8]
 800a55c:	2200      	movs	r2, #0
 800a55e:	701a      	strb	r2, [r3, #0]
 800a560:	e7d9      	b.n	800a516 <sniprintf+0x16>
 800a562:	bf00      	nop
 800a564:	200000c0 	.word	0x200000c0

0800a568 <__sread>:
 800a568:	b510      	push	{r4, lr}
 800a56a:	460c      	mov	r4, r1
 800a56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a570:	f000 f8c4 	bl	800a6fc <_read_r>
 800a574:	2800      	cmp	r0, #0
 800a576:	bfab      	itete	ge
 800a578:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a57a:	89a3      	ldrhlt	r3, [r4, #12]
 800a57c:	181b      	addge	r3, r3, r0
 800a57e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a582:	bfac      	ite	ge
 800a584:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a586:	81a3      	strhlt	r3, [r4, #12]
 800a588:	bd10      	pop	{r4, pc}

0800a58a <__swrite>:
 800a58a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a58e:	461f      	mov	r7, r3
 800a590:	898b      	ldrh	r3, [r1, #12]
 800a592:	05db      	lsls	r3, r3, #23
 800a594:	4605      	mov	r5, r0
 800a596:	460c      	mov	r4, r1
 800a598:	4616      	mov	r6, r2
 800a59a:	d505      	bpl.n	800a5a8 <__swrite+0x1e>
 800a59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f000 f898 	bl	800a6d8 <_lseek_r>
 800a5a8:	89a3      	ldrh	r3, [r4, #12]
 800a5aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a5b2:	81a3      	strh	r3, [r4, #12]
 800a5b4:	4632      	mov	r2, r6
 800a5b6:	463b      	mov	r3, r7
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5be:	f000 b8bf 	b.w	800a740 <_write_r>

0800a5c2 <__sseek>:
 800a5c2:	b510      	push	{r4, lr}
 800a5c4:	460c      	mov	r4, r1
 800a5c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ca:	f000 f885 	bl	800a6d8 <_lseek_r>
 800a5ce:	1c43      	adds	r3, r0, #1
 800a5d0:	89a3      	ldrh	r3, [r4, #12]
 800a5d2:	bf15      	itete	ne
 800a5d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a5d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a5da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a5de:	81a3      	strheq	r3, [r4, #12]
 800a5e0:	bf18      	it	ne
 800a5e2:	81a3      	strhne	r3, [r4, #12]
 800a5e4:	bd10      	pop	{r4, pc}

0800a5e6 <__sclose>:
 800a5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ea:	f000 b865 	b.w	800a6b8 <_close_r>

0800a5ee <memset>:
 800a5ee:	4402      	add	r2, r0
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d100      	bne.n	800a5f8 <memset+0xa>
 800a5f6:	4770      	bx	lr
 800a5f8:	f803 1b01 	strb.w	r1, [r3], #1
 800a5fc:	e7f9      	b.n	800a5f2 <memset+0x4>
	...

0800a600 <strtok>:
 800a600:	4b16      	ldr	r3, [pc, #88]	@ (800a65c <strtok+0x5c>)
 800a602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a606:	681f      	ldr	r7, [r3, #0]
 800a608:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a60a:	4605      	mov	r5, r0
 800a60c:	460e      	mov	r6, r1
 800a60e:	b9ec      	cbnz	r4, 800a64c <strtok+0x4c>
 800a610:	2050      	movs	r0, #80	@ 0x50
 800a612:	f7ff fd71 	bl	800a0f8 <malloc>
 800a616:	4602      	mov	r2, r0
 800a618:	6478      	str	r0, [r7, #68]	@ 0x44
 800a61a:	b920      	cbnz	r0, 800a626 <strtok+0x26>
 800a61c:	4b10      	ldr	r3, [pc, #64]	@ (800a660 <strtok+0x60>)
 800a61e:	4811      	ldr	r0, [pc, #68]	@ (800a664 <strtok+0x64>)
 800a620:	215b      	movs	r1, #91	@ 0x5b
 800a622:	f000 f8db 	bl	800a7dc <__assert_func>
 800a626:	e9c0 4400 	strd	r4, r4, [r0]
 800a62a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a62e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a632:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a636:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a63a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a63e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a642:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a646:	6184      	str	r4, [r0, #24]
 800a648:	7704      	strb	r4, [r0, #28]
 800a64a:	6244      	str	r4, [r0, #36]	@ 0x24
 800a64c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a64e:	4631      	mov	r1, r6
 800a650:	4628      	mov	r0, r5
 800a652:	2301      	movs	r3, #1
 800a654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a658:	f000 b806 	b.w	800a668 <__strtok_r>
 800a65c:	200000c0 	.word	0x200000c0
 800a660:	0800bab5 	.word	0x0800bab5
 800a664:	0800bacc 	.word	0x0800bacc

0800a668 <__strtok_r>:
 800a668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a66a:	4604      	mov	r4, r0
 800a66c:	b908      	cbnz	r0, 800a672 <__strtok_r+0xa>
 800a66e:	6814      	ldr	r4, [r2, #0]
 800a670:	b144      	cbz	r4, 800a684 <__strtok_r+0x1c>
 800a672:	4620      	mov	r0, r4
 800a674:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a678:	460f      	mov	r7, r1
 800a67a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a67e:	b91e      	cbnz	r6, 800a688 <__strtok_r+0x20>
 800a680:	b965      	cbnz	r5, 800a69c <__strtok_r+0x34>
 800a682:	6015      	str	r5, [r2, #0]
 800a684:	2000      	movs	r0, #0
 800a686:	e005      	b.n	800a694 <__strtok_r+0x2c>
 800a688:	42b5      	cmp	r5, r6
 800a68a:	d1f6      	bne.n	800a67a <__strtok_r+0x12>
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d1f0      	bne.n	800a672 <__strtok_r+0xa>
 800a690:	6014      	str	r4, [r2, #0]
 800a692:	7003      	strb	r3, [r0, #0]
 800a694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a696:	461c      	mov	r4, r3
 800a698:	e00c      	b.n	800a6b4 <__strtok_r+0x4c>
 800a69a:	b915      	cbnz	r5, 800a6a2 <__strtok_r+0x3a>
 800a69c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6a0:	460e      	mov	r6, r1
 800a6a2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a6a6:	42ab      	cmp	r3, r5
 800a6a8:	d1f7      	bne.n	800a69a <__strtok_r+0x32>
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d0f3      	beq.n	800a696 <__strtok_r+0x2e>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a6b4:	6014      	str	r4, [r2, #0]
 800a6b6:	e7ed      	b.n	800a694 <__strtok_r+0x2c>

0800a6b8 <_close_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4d06      	ldr	r5, [pc, #24]	@ (800a6d4 <_close_r+0x1c>)
 800a6bc:	2300      	movs	r3, #0
 800a6be:	4604      	mov	r4, r0
 800a6c0:	4608      	mov	r0, r1
 800a6c2:	602b      	str	r3, [r5, #0]
 800a6c4:	f7f6 fd22 	bl	800110c <_close>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d102      	bne.n	800a6d2 <_close_r+0x1a>
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	b103      	cbz	r3, 800a6d2 <_close_r+0x1a>
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
 800a6d4:	20000964 	.word	0x20000964

0800a6d8 <_lseek_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4d07      	ldr	r5, [pc, #28]	@ (800a6f8 <_lseek_r+0x20>)
 800a6dc:	4604      	mov	r4, r0
 800a6de:	4608      	mov	r0, r1
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	602a      	str	r2, [r5, #0]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	f7f6 fd37 	bl	800115a <_lseek>
 800a6ec:	1c43      	adds	r3, r0, #1
 800a6ee:	d102      	bne.n	800a6f6 <_lseek_r+0x1e>
 800a6f0:	682b      	ldr	r3, [r5, #0]
 800a6f2:	b103      	cbz	r3, 800a6f6 <_lseek_r+0x1e>
 800a6f4:	6023      	str	r3, [r4, #0]
 800a6f6:	bd38      	pop	{r3, r4, r5, pc}
 800a6f8:	20000964 	.word	0x20000964

0800a6fc <_read_r>:
 800a6fc:	b538      	push	{r3, r4, r5, lr}
 800a6fe:	4d07      	ldr	r5, [pc, #28]	@ (800a71c <_read_r+0x20>)
 800a700:	4604      	mov	r4, r0
 800a702:	4608      	mov	r0, r1
 800a704:	4611      	mov	r1, r2
 800a706:	2200      	movs	r2, #0
 800a708:	602a      	str	r2, [r5, #0]
 800a70a:	461a      	mov	r2, r3
 800a70c:	f7f6 fcc5 	bl	800109a <_read>
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	d102      	bne.n	800a71a <_read_r+0x1e>
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	b103      	cbz	r3, 800a71a <_read_r+0x1e>
 800a718:	6023      	str	r3, [r4, #0]
 800a71a:	bd38      	pop	{r3, r4, r5, pc}
 800a71c:	20000964 	.word	0x20000964

0800a720 <_sbrk_r>:
 800a720:	b538      	push	{r3, r4, r5, lr}
 800a722:	4d06      	ldr	r5, [pc, #24]	@ (800a73c <_sbrk_r+0x1c>)
 800a724:	2300      	movs	r3, #0
 800a726:	4604      	mov	r4, r0
 800a728:	4608      	mov	r0, r1
 800a72a:	602b      	str	r3, [r5, #0]
 800a72c:	f7f6 fd22 	bl	8001174 <_sbrk>
 800a730:	1c43      	adds	r3, r0, #1
 800a732:	d102      	bne.n	800a73a <_sbrk_r+0x1a>
 800a734:	682b      	ldr	r3, [r5, #0]
 800a736:	b103      	cbz	r3, 800a73a <_sbrk_r+0x1a>
 800a738:	6023      	str	r3, [r4, #0]
 800a73a:	bd38      	pop	{r3, r4, r5, pc}
 800a73c:	20000964 	.word	0x20000964

0800a740 <_write_r>:
 800a740:	b538      	push	{r3, r4, r5, lr}
 800a742:	4d07      	ldr	r5, [pc, #28]	@ (800a760 <_write_r+0x20>)
 800a744:	4604      	mov	r4, r0
 800a746:	4608      	mov	r0, r1
 800a748:	4611      	mov	r1, r2
 800a74a:	2200      	movs	r2, #0
 800a74c:	602a      	str	r2, [r5, #0]
 800a74e:	461a      	mov	r2, r3
 800a750:	f7f6 fcc0 	bl	80010d4 <_write>
 800a754:	1c43      	adds	r3, r0, #1
 800a756:	d102      	bne.n	800a75e <_write_r+0x1e>
 800a758:	682b      	ldr	r3, [r5, #0]
 800a75a:	b103      	cbz	r3, 800a75e <_write_r+0x1e>
 800a75c:	6023      	str	r3, [r4, #0]
 800a75e:	bd38      	pop	{r3, r4, r5, pc}
 800a760:	20000964 	.word	0x20000964

0800a764 <__errno>:
 800a764:	4b01      	ldr	r3, [pc, #4]	@ (800a76c <__errno+0x8>)
 800a766:	6818      	ldr	r0, [r3, #0]
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	200000c0 	.word	0x200000c0

0800a770 <__libc_init_array>:
 800a770:	b570      	push	{r4, r5, r6, lr}
 800a772:	4d0d      	ldr	r5, [pc, #52]	@ (800a7a8 <__libc_init_array+0x38>)
 800a774:	4c0d      	ldr	r4, [pc, #52]	@ (800a7ac <__libc_init_array+0x3c>)
 800a776:	1b64      	subs	r4, r4, r5
 800a778:	10a4      	asrs	r4, r4, #2
 800a77a:	2600      	movs	r6, #0
 800a77c:	42a6      	cmp	r6, r4
 800a77e:	d109      	bne.n	800a794 <__libc_init_array+0x24>
 800a780:	4d0b      	ldr	r5, [pc, #44]	@ (800a7b0 <__libc_init_array+0x40>)
 800a782:	4c0c      	ldr	r4, [pc, #48]	@ (800a7b4 <__libc_init_array+0x44>)
 800a784:	f000 ff2a 	bl	800b5dc <_init>
 800a788:	1b64      	subs	r4, r4, r5
 800a78a:	10a4      	asrs	r4, r4, #2
 800a78c:	2600      	movs	r6, #0
 800a78e:	42a6      	cmp	r6, r4
 800a790:	d105      	bne.n	800a79e <__libc_init_array+0x2e>
 800a792:	bd70      	pop	{r4, r5, r6, pc}
 800a794:	f855 3b04 	ldr.w	r3, [r5], #4
 800a798:	4798      	blx	r3
 800a79a:	3601      	adds	r6, #1
 800a79c:	e7ee      	b.n	800a77c <__libc_init_array+0xc>
 800a79e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7a2:	4798      	blx	r3
 800a7a4:	3601      	adds	r6, #1
 800a7a6:	e7f2      	b.n	800a78e <__libc_init_array+0x1e>
 800a7a8:	0800bba0 	.word	0x0800bba0
 800a7ac:	0800bba0 	.word	0x0800bba0
 800a7b0:	0800bba0 	.word	0x0800bba0
 800a7b4:	0800bba4 	.word	0x0800bba4

0800a7b8 <__retarget_lock_init_recursive>:
 800a7b8:	4770      	bx	lr

0800a7ba <__retarget_lock_acquire_recursive>:
 800a7ba:	4770      	bx	lr

0800a7bc <__retarget_lock_release_recursive>:
 800a7bc:	4770      	bx	lr

0800a7be <memcpy>:
 800a7be:	440a      	add	r2, r1
 800a7c0:	4291      	cmp	r1, r2
 800a7c2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a7c6:	d100      	bne.n	800a7ca <memcpy+0xc>
 800a7c8:	4770      	bx	lr
 800a7ca:	b510      	push	{r4, lr}
 800a7cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7d4:	4291      	cmp	r1, r2
 800a7d6:	d1f9      	bne.n	800a7cc <memcpy+0xe>
 800a7d8:	bd10      	pop	{r4, pc}
	...

0800a7dc <__assert_func>:
 800a7dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7de:	4614      	mov	r4, r2
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	4b09      	ldr	r3, [pc, #36]	@ (800a808 <__assert_func+0x2c>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	68d8      	ldr	r0, [r3, #12]
 800a7ea:	b954      	cbnz	r4, 800a802 <__assert_func+0x26>
 800a7ec:	4b07      	ldr	r3, [pc, #28]	@ (800a80c <__assert_func+0x30>)
 800a7ee:	461c      	mov	r4, r3
 800a7f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7f4:	9100      	str	r1, [sp, #0]
 800a7f6:	462b      	mov	r3, r5
 800a7f8:	4905      	ldr	r1, [pc, #20]	@ (800a810 <__assert_func+0x34>)
 800a7fa:	f000 fbe9 	bl	800afd0 <fiprintf>
 800a7fe:	f000 fc13 	bl	800b028 <abort>
 800a802:	4b04      	ldr	r3, [pc, #16]	@ (800a814 <__assert_func+0x38>)
 800a804:	e7f4      	b.n	800a7f0 <__assert_func+0x14>
 800a806:	bf00      	nop
 800a808:	200000c0 	.word	0x200000c0
 800a80c:	0800bb61 	.word	0x0800bb61
 800a810:	0800bb33 	.word	0x0800bb33
 800a814:	0800bb26 	.word	0x0800bb26

0800a818 <_free_r>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	4605      	mov	r5, r0
 800a81c:	2900      	cmp	r1, #0
 800a81e:	d041      	beq.n	800a8a4 <_free_r+0x8c>
 800a820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a824:	1f0c      	subs	r4, r1, #4
 800a826:	2b00      	cmp	r3, #0
 800a828:	bfb8      	it	lt
 800a82a:	18e4      	addlt	r4, r4, r3
 800a82c:	f7ff fd16 	bl	800a25c <__malloc_lock>
 800a830:	4a1d      	ldr	r2, [pc, #116]	@ (800a8a8 <_free_r+0x90>)
 800a832:	6813      	ldr	r3, [r2, #0]
 800a834:	b933      	cbnz	r3, 800a844 <_free_r+0x2c>
 800a836:	6063      	str	r3, [r4, #4]
 800a838:	6014      	str	r4, [r2, #0]
 800a83a:	4628      	mov	r0, r5
 800a83c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a840:	f7ff bd12 	b.w	800a268 <__malloc_unlock>
 800a844:	42a3      	cmp	r3, r4
 800a846:	d908      	bls.n	800a85a <_free_r+0x42>
 800a848:	6820      	ldr	r0, [r4, #0]
 800a84a:	1821      	adds	r1, r4, r0
 800a84c:	428b      	cmp	r3, r1
 800a84e:	bf01      	itttt	eq
 800a850:	6819      	ldreq	r1, [r3, #0]
 800a852:	685b      	ldreq	r3, [r3, #4]
 800a854:	1809      	addeq	r1, r1, r0
 800a856:	6021      	streq	r1, [r4, #0]
 800a858:	e7ed      	b.n	800a836 <_free_r+0x1e>
 800a85a:	461a      	mov	r2, r3
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	b10b      	cbz	r3, 800a864 <_free_r+0x4c>
 800a860:	42a3      	cmp	r3, r4
 800a862:	d9fa      	bls.n	800a85a <_free_r+0x42>
 800a864:	6811      	ldr	r1, [r2, #0]
 800a866:	1850      	adds	r0, r2, r1
 800a868:	42a0      	cmp	r0, r4
 800a86a:	d10b      	bne.n	800a884 <_free_r+0x6c>
 800a86c:	6820      	ldr	r0, [r4, #0]
 800a86e:	4401      	add	r1, r0
 800a870:	1850      	adds	r0, r2, r1
 800a872:	4283      	cmp	r3, r0
 800a874:	6011      	str	r1, [r2, #0]
 800a876:	d1e0      	bne.n	800a83a <_free_r+0x22>
 800a878:	6818      	ldr	r0, [r3, #0]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	6053      	str	r3, [r2, #4]
 800a87e:	4408      	add	r0, r1
 800a880:	6010      	str	r0, [r2, #0]
 800a882:	e7da      	b.n	800a83a <_free_r+0x22>
 800a884:	d902      	bls.n	800a88c <_free_r+0x74>
 800a886:	230c      	movs	r3, #12
 800a888:	602b      	str	r3, [r5, #0]
 800a88a:	e7d6      	b.n	800a83a <_free_r+0x22>
 800a88c:	6820      	ldr	r0, [r4, #0]
 800a88e:	1821      	adds	r1, r4, r0
 800a890:	428b      	cmp	r3, r1
 800a892:	bf04      	itt	eq
 800a894:	6819      	ldreq	r1, [r3, #0]
 800a896:	685b      	ldreq	r3, [r3, #4]
 800a898:	6063      	str	r3, [r4, #4]
 800a89a:	bf04      	itt	eq
 800a89c:	1809      	addeq	r1, r1, r0
 800a89e:	6021      	streq	r1, [r4, #0]
 800a8a0:	6054      	str	r4, [r2, #4]
 800a8a2:	e7ca      	b.n	800a83a <_free_r+0x22>
 800a8a4:	bd38      	pop	{r3, r4, r5, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20000824 	.word	0x20000824

0800a8ac <__ssputs_r>:
 800a8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b0:	688e      	ldr	r6, [r1, #8]
 800a8b2:	461f      	mov	r7, r3
 800a8b4:	42be      	cmp	r6, r7
 800a8b6:	680b      	ldr	r3, [r1, #0]
 800a8b8:	4682      	mov	sl, r0
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	4690      	mov	r8, r2
 800a8be:	d82d      	bhi.n	800a91c <__ssputs_r+0x70>
 800a8c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a8c8:	d026      	beq.n	800a918 <__ssputs_r+0x6c>
 800a8ca:	6965      	ldr	r5, [r4, #20]
 800a8cc:	6909      	ldr	r1, [r1, #16]
 800a8ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8d2:	eba3 0901 	sub.w	r9, r3, r1
 800a8d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8da:	1c7b      	adds	r3, r7, #1
 800a8dc:	444b      	add	r3, r9
 800a8de:	106d      	asrs	r5, r5, #1
 800a8e0:	429d      	cmp	r5, r3
 800a8e2:	bf38      	it	cc
 800a8e4:	461d      	movcc	r5, r3
 800a8e6:	0553      	lsls	r3, r2, #21
 800a8e8:	d527      	bpl.n	800a93a <__ssputs_r+0x8e>
 800a8ea:	4629      	mov	r1, r5
 800a8ec:	f7ff fc36 	bl	800a15c <_malloc_r>
 800a8f0:	4606      	mov	r6, r0
 800a8f2:	b360      	cbz	r0, 800a94e <__ssputs_r+0xa2>
 800a8f4:	6921      	ldr	r1, [r4, #16]
 800a8f6:	464a      	mov	r2, r9
 800a8f8:	f7ff ff61 	bl	800a7be <memcpy>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a906:	81a3      	strh	r3, [r4, #12]
 800a908:	6126      	str	r6, [r4, #16]
 800a90a:	6165      	str	r5, [r4, #20]
 800a90c:	444e      	add	r6, r9
 800a90e:	eba5 0509 	sub.w	r5, r5, r9
 800a912:	6026      	str	r6, [r4, #0]
 800a914:	60a5      	str	r5, [r4, #8]
 800a916:	463e      	mov	r6, r7
 800a918:	42be      	cmp	r6, r7
 800a91a:	d900      	bls.n	800a91e <__ssputs_r+0x72>
 800a91c:	463e      	mov	r6, r7
 800a91e:	6820      	ldr	r0, [r4, #0]
 800a920:	4632      	mov	r2, r6
 800a922:	4641      	mov	r1, r8
 800a924:	f000 fb66 	bl	800aff4 <memmove>
 800a928:	68a3      	ldr	r3, [r4, #8]
 800a92a:	1b9b      	subs	r3, r3, r6
 800a92c:	60a3      	str	r3, [r4, #8]
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	4433      	add	r3, r6
 800a932:	6023      	str	r3, [r4, #0]
 800a934:	2000      	movs	r0, #0
 800a936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a93a:	462a      	mov	r2, r5
 800a93c:	f000 fb7b 	bl	800b036 <_realloc_r>
 800a940:	4606      	mov	r6, r0
 800a942:	2800      	cmp	r0, #0
 800a944:	d1e0      	bne.n	800a908 <__ssputs_r+0x5c>
 800a946:	6921      	ldr	r1, [r4, #16]
 800a948:	4650      	mov	r0, sl
 800a94a:	f7ff ff65 	bl	800a818 <_free_r>
 800a94e:	230c      	movs	r3, #12
 800a950:	f8ca 3000 	str.w	r3, [sl]
 800a954:	89a3      	ldrh	r3, [r4, #12]
 800a956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a95a:	81a3      	strh	r3, [r4, #12]
 800a95c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a960:	e7e9      	b.n	800a936 <__ssputs_r+0x8a>
	...

0800a964 <_svfiprintf_r>:
 800a964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a968:	4698      	mov	r8, r3
 800a96a:	898b      	ldrh	r3, [r1, #12]
 800a96c:	061b      	lsls	r3, r3, #24
 800a96e:	b09d      	sub	sp, #116	@ 0x74
 800a970:	4607      	mov	r7, r0
 800a972:	460d      	mov	r5, r1
 800a974:	4614      	mov	r4, r2
 800a976:	d510      	bpl.n	800a99a <_svfiprintf_r+0x36>
 800a978:	690b      	ldr	r3, [r1, #16]
 800a97a:	b973      	cbnz	r3, 800a99a <_svfiprintf_r+0x36>
 800a97c:	2140      	movs	r1, #64	@ 0x40
 800a97e:	f7ff fbed 	bl	800a15c <_malloc_r>
 800a982:	6028      	str	r0, [r5, #0]
 800a984:	6128      	str	r0, [r5, #16]
 800a986:	b930      	cbnz	r0, 800a996 <_svfiprintf_r+0x32>
 800a988:	230c      	movs	r3, #12
 800a98a:	603b      	str	r3, [r7, #0]
 800a98c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a990:	b01d      	add	sp, #116	@ 0x74
 800a992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a996:	2340      	movs	r3, #64	@ 0x40
 800a998:	616b      	str	r3, [r5, #20]
 800a99a:	2300      	movs	r3, #0
 800a99c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a99e:	2320      	movs	r3, #32
 800a9a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9a8:	2330      	movs	r3, #48	@ 0x30
 800a9aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ab48 <_svfiprintf_r+0x1e4>
 800a9ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9b2:	f04f 0901 	mov.w	r9, #1
 800a9b6:	4623      	mov	r3, r4
 800a9b8:	469a      	mov	sl, r3
 800a9ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9be:	b10a      	cbz	r2, 800a9c4 <_svfiprintf_r+0x60>
 800a9c0:	2a25      	cmp	r2, #37	@ 0x25
 800a9c2:	d1f9      	bne.n	800a9b8 <_svfiprintf_r+0x54>
 800a9c4:	ebba 0b04 	subs.w	fp, sl, r4
 800a9c8:	d00b      	beq.n	800a9e2 <_svfiprintf_r+0x7e>
 800a9ca:	465b      	mov	r3, fp
 800a9cc:	4622      	mov	r2, r4
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	4638      	mov	r0, r7
 800a9d2:	f7ff ff6b 	bl	800a8ac <__ssputs_r>
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	f000 80a7 	beq.w	800ab2a <_svfiprintf_r+0x1c6>
 800a9dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9de:	445a      	add	r2, fp
 800a9e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f000 809f 	beq.w	800ab2a <_svfiprintf_r+0x1c6>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a9f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9f6:	f10a 0a01 	add.w	sl, sl, #1
 800a9fa:	9304      	str	r3, [sp, #16]
 800a9fc:	9307      	str	r3, [sp, #28]
 800a9fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa02:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa04:	4654      	mov	r4, sl
 800aa06:	2205      	movs	r2, #5
 800aa08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa0c:	484e      	ldr	r0, [pc, #312]	@ (800ab48 <_svfiprintf_r+0x1e4>)
 800aa0e:	f7f5 fc1f 	bl	8000250 <memchr>
 800aa12:	9a04      	ldr	r2, [sp, #16]
 800aa14:	b9d8      	cbnz	r0, 800aa4e <_svfiprintf_r+0xea>
 800aa16:	06d0      	lsls	r0, r2, #27
 800aa18:	bf44      	itt	mi
 800aa1a:	2320      	movmi	r3, #32
 800aa1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa20:	0711      	lsls	r1, r2, #28
 800aa22:	bf44      	itt	mi
 800aa24:	232b      	movmi	r3, #43	@ 0x2b
 800aa26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa2a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa30:	d015      	beq.n	800aa5e <_svfiprintf_r+0xfa>
 800aa32:	9a07      	ldr	r2, [sp, #28]
 800aa34:	4654      	mov	r4, sl
 800aa36:	2000      	movs	r0, #0
 800aa38:	f04f 0c0a 	mov.w	ip, #10
 800aa3c:	4621      	mov	r1, r4
 800aa3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa42:	3b30      	subs	r3, #48	@ 0x30
 800aa44:	2b09      	cmp	r3, #9
 800aa46:	d94b      	bls.n	800aae0 <_svfiprintf_r+0x17c>
 800aa48:	b1b0      	cbz	r0, 800aa78 <_svfiprintf_r+0x114>
 800aa4a:	9207      	str	r2, [sp, #28]
 800aa4c:	e014      	b.n	800aa78 <_svfiprintf_r+0x114>
 800aa4e:	eba0 0308 	sub.w	r3, r0, r8
 800aa52:	fa09 f303 	lsl.w	r3, r9, r3
 800aa56:	4313      	orrs	r3, r2
 800aa58:	9304      	str	r3, [sp, #16]
 800aa5a:	46a2      	mov	sl, r4
 800aa5c:	e7d2      	b.n	800aa04 <_svfiprintf_r+0xa0>
 800aa5e:	9b03      	ldr	r3, [sp, #12]
 800aa60:	1d19      	adds	r1, r3, #4
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	9103      	str	r1, [sp, #12]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	bfbb      	ittet	lt
 800aa6a:	425b      	neglt	r3, r3
 800aa6c:	f042 0202 	orrlt.w	r2, r2, #2
 800aa70:	9307      	strge	r3, [sp, #28]
 800aa72:	9307      	strlt	r3, [sp, #28]
 800aa74:	bfb8      	it	lt
 800aa76:	9204      	strlt	r2, [sp, #16]
 800aa78:	7823      	ldrb	r3, [r4, #0]
 800aa7a:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa7c:	d10a      	bne.n	800aa94 <_svfiprintf_r+0x130>
 800aa7e:	7863      	ldrb	r3, [r4, #1]
 800aa80:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa82:	d132      	bne.n	800aaea <_svfiprintf_r+0x186>
 800aa84:	9b03      	ldr	r3, [sp, #12]
 800aa86:	1d1a      	adds	r2, r3, #4
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	9203      	str	r2, [sp, #12]
 800aa8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa90:	3402      	adds	r4, #2
 800aa92:	9305      	str	r3, [sp, #20]
 800aa94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ab58 <_svfiprintf_r+0x1f4>
 800aa98:	7821      	ldrb	r1, [r4, #0]
 800aa9a:	2203      	movs	r2, #3
 800aa9c:	4650      	mov	r0, sl
 800aa9e:	f7f5 fbd7 	bl	8000250 <memchr>
 800aaa2:	b138      	cbz	r0, 800aab4 <_svfiprintf_r+0x150>
 800aaa4:	9b04      	ldr	r3, [sp, #16]
 800aaa6:	eba0 000a 	sub.w	r0, r0, sl
 800aaaa:	2240      	movs	r2, #64	@ 0x40
 800aaac:	4082      	lsls	r2, r0
 800aaae:	4313      	orrs	r3, r2
 800aab0:	3401      	adds	r4, #1
 800aab2:	9304      	str	r3, [sp, #16]
 800aab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab8:	4824      	ldr	r0, [pc, #144]	@ (800ab4c <_svfiprintf_r+0x1e8>)
 800aaba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aabe:	2206      	movs	r2, #6
 800aac0:	f7f5 fbc6 	bl	8000250 <memchr>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	d036      	beq.n	800ab36 <_svfiprintf_r+0x1d2>
 800aac8:	4b21      	ldr	r3, [pc, #132]	@ (800ab50 <_svfiprintf_r+0x1ec>)
 800aaca:	bb1b      	cbnz	r3, 800ab14 <_svfiprintf_r+0x1b0>
 800aacc:	9b03      	ldr	r3, [sp, #12]
 800aace:	3307      	adds	r3, #7
 800aad0:	f023 0307 	bic.w	r3, r3, #7
 800aad4:	3308      	adds	r3, #8
 800aad6:	9303      	str	r3, [sp, #12]
 800aad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aada:	4433      	add	r3, r6
 800aadc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aade:	e76a      	b.n	800a9b6 <_svfiprintf_r+0x52>
 800aae0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aae4:	460c      	mov	r4, r1
 800aae6:	2001      	movs	r0, #1
 800aae8:	e7a8      	b.n	800aa3c <_svfiprintf_r+0xd8>
 800aaea:	2300      	movs	r3, #0
 800aaec:	3401      	adds	r4, #1
 800aaee:	9305      	str	r3, [sp, #20]
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	f04f 0c0a 	mov.w	ip, #10
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aafc:	3a30      	subs	r2, #48	@ 0x30
 800aafe:	2a09      	cmp	r2, #9
 800ab00:	d903      	bls.n	800ab0a <_svfiprintf_r+0x1a6>
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d0c6      	beq.n	800aa94 <_svfiprintf_r+0x130>
 800ab06:	9105      	str	r1, [sp, #20]
 800ab08:	e7c4      	b.n	800aa94 <_svfiprintf_r+0x130>
 800ab0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab0e:	4604      	mov	r4, r0
 800ab10:	2301      	movs	r3, #1
 800ab12:	e7f0      	b.n	800aaf6 <_svfiprintf_r+0x192>
 800ab14:	ab03      	add	r3, sp, #12
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	462a      	mov	r2, r5
 800ab1a:	4b0e      	ldr	r3, [pc, #56]	@ (800ab54 <_svfiprintf_r+0x1f0>)
 800ab1c:	a904      	add	r1, sp, #16
 800ab1e:	4638      	mov	r0, r7
 800ab20:	f3af 8000 	nop.w
 800ab24:	1c42      	adds	r2, r0, #1
 800ab26:	4606      	mov	r6, r0
 800ab28:	d1d6      	bne.n	800aad8 <_svfiprintf_r+0x174>
 800ab2a:	89ab      	ldrh	r3, [r5, #12]
 800ab2c:	065b      	lsls	r3, r3, #25
 800ab2e:	f53f af2d 	bmi.w	800a98c <_svfiprintf_r+0x28>
 800ab32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab34:	e72c      	b.n	800a990 <_svfiprintf_r+0x2c>
 800ab36:	ab03      	add	r3, sp, #12
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	462a      	mov	r2, r5
 800ab3c:	4b05      	ldr	r3, [pc, #20]	@ (800ab54 <_svfiprintf_r+0x1f0>)
 800ab3e:	a904      	add	r1, sp, #16
 800ab40:	4638      	mov	r0, r7
 800ab42:	f000 f879 	bl	800ac38 <_printf_i>
 800ab46:	e7ed      	b.n	800ab24 <_svfiprintf_r+0x1c0>
 800ab48:	0800bb62 	.word	0x0800bb62
 800ab4c:	0800bb6c 	.word	0x0800bb6c
 800ab50:	00000000 	.word	0x00000000
 800ab54:	0800a8ad 	.word	0x0800a8ad
 800ab58:	0800bb68 	.word	0x0800bb68

0800ab5c <_printf_common>:
 800ab5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab60:	4616      	mov	r6, r2
 800ab62:	4698      	mov	r8, r3
 800ab64:	688a      	ldr	r2, [r1, #8]
 800ab66:	690b      	ldr	r3, [r1, #16]
 800ab68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	bfb8      	it	lt
 800ab70:	4613      	movlt	r3, r2
 800ab72:	6033      	str	r3, [r6, #0]
 800ab74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab78:	4607      	mov	r7, r0
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	b10a      	cbz	r2, 800ab82 <_printf_common+0x26>
 800ab7e:	3301      	adds	r3, #1
 800ab80:	6033      	str	r3, [r6, #0]
 800ab82:	6823      	ldr	r3, [r4, #0]
 800ab84:	0699      	lsls	r1, r3, #26
 800ab86:	bf42      	ittt	mi
 800ab88:	6833      	ldrmi	r3, [r6, #0]
 800ab8a:	3302      	addmi	r3, #2
 800ab8c:	6033      	strmi	r3, [r6, #0]
 800ab8e:	6825      	ldr	r5, [r4, #0]
 800ab90:	f015 0506 	ands.w	r5, r5, #6
 800ab94:	d106      	bne.n	800aba4 <_printf_common+0x48>
 800ab96:	f104 0a19 	add.w	sl, r4, #25
 800ab9a:	68e3      	ldr	r3, [r4, #12]
 800ab9c:	6832      	ldr	r2, [r6, #0]
 800ab9e:	1a9b      	subs	r3, r3, r2
 800aba0:	42ab      	cmp	r3, r5
 800aba2:	dc26      	bgt.n	800abf2 <_printf_common+0x96>
 800aba4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aba8:	6822      	ldr	r2, [r4, #0]
 800abaa:	3b00      	subs	r3, #0
 800abac:	bf18      	it	ne
 800abae:	2301      	movne	r3, #1
 800abb0:	0692      	lsls	r2, r2, #26
 800abb2:	d42b      	bmi.n	800ac0c <_printf_common+0xb0>
 800abb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abb8:	4641      	mov	r1, r8
 800abba:	4638      	mov	r0, r7
 800abbc:	47c8      	blx	r9
 800abbe:	3001      	adds	r0, #1
 800abc0:	d01e      	beq.n	800ac00 <_printf_common+0xa4>
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	6922      	ldr	r2, [r4, #16]
 800abc6:	f003 0306 	and.w	r3, r3, #6
 800abca:	2b04      	cmp	r3, #4
 800abcc:	bf02      	ittt	eq
 800abce:	68e5      	ldreq	r5, [r4, #12]
 800abd0:	6833      	ldreq	r3, [r6, #0]
 800abd2:	1aed      	subeq	r5, r5, r3
 800abd4:	68a3      	ldr	r3, [r4, #8]
 800abd6:	bf0c      	ite	eq
 800abd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abdc:	2500      	movne	r5, #0
 800abde:	4293      	cmp	r3, r2
 800abe0:	bfc4      	itt	gt
 800abe2:	1a9b      	subgt	r3, r3, r2
 800abe4:	18ed      	addgt	r5, r5, r3
 800abe6:	2600      	movs	r6, #0
 800abe8:	341a      	adds	r4, #26
 800abea:	42b5      	cmp	r5, r6
 800abec:	d11a      	bne.n	800ac24 <_printf_common+0xc8>
 800abee:	2000      	movs	r0, #0
 800abf0:	e008      	b.n	800ac04 <_printf_common+0xa8>
 800abf2:	2301      	movs	r3, #1
 800abf4:	4652      	mov	r2, sl
 800abf6:	4641      	mov	r1, r8
 800abf8:	4638      	mov	r0, r7
 800abfa:	47c8      	blx	r9
 800abfc:	3001      	adds	r0, #1
 800abfe:	d103      	bne.n	800ac08 <_printf_common+0xac>
 800ac00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac08:	3501      	adds	r5, #1
 800ac0a:	e7c6      	b.n	800ab9a <_printf_common+0x3e>
 800ac0c:	18e1      	adds	r1, r4, r3
 800ac0e:	1c5a      	adds	r2, r3, #1
 800ac10:	2030      	movs	r0, #48	@ 0x30
 800ac12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac16:	4422      	add	r2, r4
 800ac18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac20:	3302      	adds	r3, #2
 800ac22:	e7c7      	b.n	800abb4 <_printf_common+0x58>
 800ac24:	2301      	movs	r3, #1
 800ac26:	4622      	mov	r2, r4
 800ac28:	4641      	mov	r1, r8
 800ac2a:	4638      	mov	r0, r7
 800ac2c:	47c8      	blx	r9
 800ac2e:	3001      	adds	r0, #1
 800ac30:	d0e6      	beq.n	800ac00 <_printf_common+0xa4>
 800ac32:	3601      	adds	r6, #1
 800ac34:	e7d9      	b.n	800abea <_printf_common+0x8e>
	...

0800ac38 <_printf_i>:
 800ac38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac3c:	7e0f      	ldrb	r7, [r1, #24]
 800ac3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac40:	2f78      	cmp	r7, #120	@ 0x78
 800ac42:	4691      	mov	r9, r2
 800ac44:	4680      	mov	r8, r0
 800ac46:	460c      	mov	r4, r1
 800ac48:	469a      	mov	sl, r3
 800ac4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac4e:	d807      	bhi.n	800ac60 <_printf_i+0x28>
 800ac50:	2f62      	cmp	r7, #98	@ 0x62
 800ac52:	d80a      	bhi.n	800ac6a <_printf_i+0x32>
 800ac54:	2f00      	cmp	r7, #0
 800ac56:	f000 80d2 	beq.w	800adfe <_printf_i+0x1c6>
 800ac5a:	2f58      	cmp	r7, #88	@ 0x58
 800ac5c:	f000 80b9 	beq.w	800add2 <_printf_i+0x19a>
 800ac60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac68:	e03a      	b.n	800ace0 <_printf_i+0xa8>
 800ac6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac6e:	2b15      	cmp	r3, #21
 800ac70:	d8f6      	bhi.n	800ac60 <_printf_i+0x28>
 800ac72:	a101      	add	r1, pc, #4	@ (adr r1, 800ac78 <_printf_i+0x40>)
 800ac74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac78:	0800acd1 	.word	0x0800acd1
 800ac7c:	0800ace5 	.word	0x0800ace5
 800ac80:	0800ac61 	.word	0x0800ac61
 800ac84:	0800ac61 	.word	0x0800ac61
 800ac88:	0800ac61 	.word	0x0800ac61
 800ac8c:	0800ac61 	.word	0x0800ac61
 800ac90:	0800ace5 	.word	0x0800ace5
 800ac94:	0800ac61 	.word	0x0800ac61
 800ac98:	0800ac61 	.word	0x0800ac61
 800ac9c:	0800ac61 	.word	0x0800ac61
 800aca0:	0800ac61 	.word	0x0800ac61
 800aca4:	0800ade5 	.word	0x0800ade5
 800aca8:	0800ad0f 	.word	0x0800ad0f
 800acac:	0800ad9f 	.word	0x0800ad9f
 800acb0:	0800ac61 	.word	0x0800ac61
 800acb4:	0800ac61 	.word	0x0800ac61
 800acb8:	0800ae07 	.word	0x0800ae07
 800acbc:	0800ac61 	.word	0x0800ac61
 800acc0:	0800ad0f 	.word	0x0800ad0f
 800acc4:	0800ac61 	.word	0x0800ac61
 800acc8:	0800ac61 	.word	0x0800ac61
 800accc:	0800ada7 	.word	0x0800ada7
 800acd0:	6833      	ldr	r3, [r6, #0]
 800acd2:	1d1a      	adds	r2, r3, #4
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	6032      	str	r2, [r6, #0]
 800acd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ace0:	2301      	movs	r3, #1
 800ace2:	e09d      	b.n	800ae20 <_printf_i+0x1e8>
 800ace4:	6833      	ldr	r3, [r6, #0]
 800ace6:	6820      	ldr	r0, [r4, #0]
 800ace8:	1d19      	adds	r1, r3, #4
 800acea:	6031      	str	r1, [r6, #0]
 800acec:	0606      	lsls	r6, r0, #24
 800acee:	d501      	bpl.n	800acf4 <_printf_i+0xbc>
 800acf0:	681d      	ldr	r5, [r3, #0]
 800acf2:	e003      	b.n	800acfc <_printf_i+0xc4>
 800acf4:	0645      	lsls	r5, r0, #25
 800acf6:	d5fb      	bpl.n	800acf0 <_printf_i+0xb8>
 800acf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800acfc:	2d00      	cmp	r5, #0
 800acfe:	da03      	bge.n	800ad08 <_printf_i+0xd0>
 800ad00:	232d      	movs	r3, #45	@ 0x2d
 800ad02:	426d      	negs	r5, r5
 800ad04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad08:	4859      	ldr	r0, [pc, #356]	@ (800ae70 <_printf_i+0x238>)
 800ad0a:	230a      	movs	r3, #10
 800ad0c:	e011      	b.n	800ad32 <_printf_i+0xfa>
 800ad0e:	6821      	ldr	r1, [r4, #0]
 800ad10:	6833      	ldr	r3, [r6, #0]
 800ad12:	0608      	lsls	r0, r1, #24
 800ad14:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad18:	d402      	bmi.n	800ad20 <_printf_i+0xe8>
 800ad1a:	0649      	lsls	r1, r1, #25
 800ad1c:	bf48      	it	mi
 800ad1e:	b2ad      	uxthmi	r5, r5
 800ad20:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad22:	4853      	ldr	r0, [pc, #332]	@ (800ae70 <_printf_i+0x238>)
 800ad24:	6033      	str	r3, [r6, #0]
 800ad26:	bf14      	ite	ne
 800ad28:	230a      	movne	r3, #10
 800ad2a:	2308      	moveq	r3, #8
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad32:	6866      	ldr	r6, [r4, #4]
 800ad34:	60a6      	str	r6, [r4, #8]
 800ad36:	2e00      	cmp	r6, #0
 800ad38:	bfa2      	ittt	ge
 800ad3a:	6821      	ldrge	r1, [r4, #0]
 800ad3c:	f021 0104 	bicge.w	r1, r1, #4
 800ad40:	6021      	strge	r1, [r4, #0]
 800ad42:	b90d      	cbnz	r5, 800ad48 <_printf_i+0x110>
 800ad44:	2e00      	cmp	r6, #0
 800ad46:	d04b      	beq.n	800ade0 <_printf_i+0x1a8>
 800ad48:	4616      	mov	r6, r2
 800ad4a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad4e:	fb03 5711 	mls	r7, r3, r1, r5
 800ad52:	5dc7      	ldrb	r7, [r0, r7]
 800ad54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad58:	462f      	mov	r7, r5
 800ad5a:	42bb      	cmp	r3, r7
 800ad5c:	460d      	mov	r5, r1
 800ad5e:	d9f4      	bls.n	800ad4a <_printf_i+0x112>
 800ad60:	2b08      	cmp	r3, #8
 800ad62:	d10b      	bne.n	800ad7c <_printf_i+0x144>
 800ad64:	6823      	ldr	r3, [r4, #0]
 800ad66:	07df      	lsls	r7, r3, #31
 800ad68:	d508      	bpl.n	800ad7c <_printf_i+0x144>
 800ad6a:	6923      	ldr	r3, [r4, #16]
 800ad6c:	6861      	ldr	r1, [r4, #4]
 800ad6e:	4299      	cmp	r1, r3
 800ad70:	bfde      	ittt	le
 800ad72:	2330      	movle	r3, #48	@ 0x30
 800ad74:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad78:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ad7c:	1b92      	subs	r2, r2, r6
 800ad7e:	6122      	str	r2, [r4, #16]
 800ad80:	f8cd a000 	str.w	sl, [sp]
 800ad84:	464b      	mov	r3, r9
 800ad86:	aa03      	add	r2, sp, #12
 800ad88:	4621      	mov	r1, r4
 800ad8a:	4640      	mov	r0, r8
 800ad8c:	f7ff fee6 	bl	800ab5c <_printf_common>
 800ad90:	3001      	adds	r0, #1
 800ad92:	d14a      	bne.n	800ae2a <_printf_i+0x1f2>
 800ad94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad98:	b004      	add	sp, #16
 800ad9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	f043 0320 	orr.w	r3, r3, #32
 800ada4:	6023      	str	r3, [r4, #0]
 800ada6:	4833      	ldr	r0, [pc, #204]	@ (800ae74 <_printf_i+0x23c>)
 800ada8:	2778      	movs	r7, #120	@ 0x78
 800adaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	6831      	ldr	r1, [r6, #0]
 800adb2:	061f      	lsls	r7, r3, #24
 800adb4:	f851 5b04 	ldr.w	r5, [r1], #4
 800adb8:	d402      	bmi.n	800adc0 <_printf_i+0x188>
 800adba:	065f      	lsls	r7, r3, #25
 800adbc:	bf48      	it	mi
 800adbe:	b2ad      	uxthmi	r5, r5
 800adc0:	6031      	str	r1, [r6, #0]
 800adc2:	07d9      	lsls	r1, r3, #31
 800adc4:	bf44      	itt	mi
 800adc6:	f043 0320 	orrmi.w	r3, r3, #32
 800adca:	6023      	strmi	r3, [r4, #0]
 800adcc:	b11d      	cbz	r5, 800add6 <_printf_i+0x19e>
 800adce:	2310      	movs	r3, #16
 800add0:	e7ac      	b.n	800ad2c <_printf_i+0xf4>
 800add2:	4827      	ldr	r0, [pc, #156]	@ (800ae70 <_printf_i+0x238>)
 800add4:	e7e9      	b.n	800adaa <_printf_i+0x172>
 800add6:	6823      	ldr	r3, [r4, #0]
 800add8:	f023 0320 	bic.w	r3, r3, #32
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	e7f6      	b.n	800adce <_printf_i+0x196>
 800ade0:	4616      	mov	r6, r2
 800ade2:	e7bd      	b.n	800ad60 <_printf_i+0x128>
 800ade4:	6833      	ldr	r3, [r6, #0]
 800ade6:	6825      	ldr	r5, [r4, #0]
 800ade8:	6961      	ldr	r1, [r4, #20]
 800adea:	1d18      	adds	r0, r3, #4
 800adec:	6030      	str	r0, [r6, #0]
 800adee:	062e      	lsls	r6, r5, #24
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	d501      	bpl.n	800adf8 <_printf_i+0x1c0>
 800adf4:	6019      	str	r1, [r3, #0]
 800adf6:	e002      	b.n	800adfe <_printf_i+0x1c6>
 800adf8:	0668      	lsls	r0, r5, #25
 800adfa:	d5fb      	bpl.n	800adf4 <_printf_i+0x1bc>
 800adfc:	8019      	strh	r1, [r3, #0]
 800adfe:	2300      	movs	r3, #0
 800ae00:	6123      	str	r3, [r4, #16]
 800ae02:	4616      	mov	r6, r2
 800ae04:	e7bc      	b.n	800ad80 <_printf_i+0x148>
 800ae06:	6833      	ldr	r3, [r6, #0]
 800ae08:	1d1a      	adds	r2, r3, #4
 800ae0a:	6032      	str	r2, [r6, #0]
 800ae0c:	681e      	ldr	r6, [r3, #0]
 800ae0e:	6862      	ldr	r2, [r4, #4]
 800ae10:	2100      	movs	r1, #0
 800ae12:	4630      	mov	r0, r6
 800ae14:	f7f5 fa1c 	bl	8000250 <memchr>
 800ae18:	b108      	cbz	r0, 800ae1e <_printf_i+0x1e6>
 800ae1a:	1b80      	subs	r0, r0, r6
 800ae1c:	6060      	str	r0, [r4, #4]
 800ae1e:	6863      	ldr	r3, [r4, #4]
 800ae20:	6123      	str	r3, [r4, #16]
 800ae22:	2300      	movs	r3, #0
 800ae24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae28:	e7aa      	b.n	800ad80 <_printf_i+0x148>
 800ae2a:	6923      	ldr	r3, [r4, #16]
 800ae2c:	4632      	mov	r2, r6
 800ae2e:	4649      	mov	r1, r9
 800ae30:	4640      	mov	r0, r8
 800ae32:	47d0      	blx	sl
 800ae34:	3001      	adds	r0, #1
 800ae36:	d0ad      	beq.n	800ad94 <_printf_i+0x15c>
 800ae38:	6823      	ldr	r3, [r4, #0]
 800ae3a:	079b      	lsls	r3, r3, #30
 800ae3c:	d413      	bmi.n	800ae66 <_printf_i+0x22e>
 800ae3e:	68e0      	ldr	r0, [r4, #12]
 800ae40:	9b03      	ldr	r3, [sp, #12]
 800ae42:	4298      	cmp	r0, r3
 800ae44:	bfb8      	it	lt
 800ae46:	4618      	movlt	r0, r3
 800ae48:	e7a6      	b.n	800ad98 <_printf_i+0x160>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	4632      	mov	r2, r6
 800ae4e:	4649      	mov	r1, r9
 800ae50:	4640      	mov	r0, r8
 800ae52:	47d0      	blx	sl
 800ae54:	3001      	adds	r0, #1
 800ae56:	d09d      	beq.n	800ad94 <_printf_i+0x15c>
 800ae58:	3501      	adds	r5, #1
 800ae5a:	68e3      	ldr	r3, [r4, #12]
 800ae5c:	9903      	ldr	r1, [sp, #12]
 800ae5e:	1a5b      	subs	r3, r3, r1
 800ae60:	42ab      	cmp	r3, r5
 800ae62:	dcf2      	bgt.n	800ae4a <_printf_i+0x212>
 800ae64:	e7eb      	b.n	800ae3e <_printf_i+0x206>
 800ae66:	2500      	movs	r5, #0
 800ae68:	f104 0619 	add.w	r6, r4, #25
 800ae6c:	e7f5      	b.n	800ae5a <_printf_i+0x222>
 800ae6e:	bf00      	nop
 800ae70:	0800bb73 	.word	0x0800bb73
 800ae74:	0800bb84 	.word	0x0800bb84

0800ae78 <__sflush_r>:
 800ae78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae80:	0716      	lsls	r6, r2, #28
 800ae82:	4605      	mov	r5, r0
 800ae84:	460c      	mov	r4, r1
 800ae86:	d454      	bmi.n	800af32 <__sflush_r+0xba>
 800ae88:	684b      	ldr	r3, [r1, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	dc02      	bgt.n	800ae94 <__sflush_r+0x1c>
 800ae8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	dd48      	ble.n	800af26 <__sflush_r+0xae>
 800ae94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae96:	2e00      	cmp	r6, #0
 800ae98:	d045      	beq.n	800af26 <__sflush_r+0xae>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aea0:	682f      	ldr	r7, [r5, #0]
 800aea2:	6a21      	ldr	r1, [r4, #32]
 800aea4:	602b      	str	r3, [r5, #0]
 800aea6:	d030      	beq.n	800af0a <__sflush_r+0x92>
 800aea8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aeaa:	89a3      	ldrh	r3, [r4, #12]
 800aeac:	0759      	lsls	r1, r3, #29
 800aeae:	d505      	bpl.n	800aebc <__sflush_r+0x44>
 800aeb0:	6863      	ldr	r3, [r4, #4]
 800aeb2:	1ad2      	subs	r2, r2, r3
 800aeb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aeb6:	b10b      	cbz	r3, 800aebc <__sflush_r+0x44>
 800aeb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aeba:	1ad2      	subs	r2, r2, r3
 800aebc:	2300      	movs	r3, #0
 800aebe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aec0:	6a21      	ldr	r1, [r4, #32]
 800aec2:	4628      	mov	r0, r5
 800aec4:	47b0      	blx	r6
 800aec6:	1c43      	adds	r3, r0, #1
 800aec8:	89a3      	ldrh	r3, [r4, #12]
 800aeca:	d106      	bne.n	800aeda <__sflush_r+0x62>
 800aecc:	6829      	ldr	r1, [r5, #0]
 800aece:	291d      	cmp	r1, #29
 800aed0:	d82b      	bhi.n	800af2a <__sflush_r+0xb2>
 800aed2:	4a2a      	ldr	r2, [pc, #168]	@ (800af7c <__sflush_r+0x104>)
 800aed4:	410a      	asrs	r2, r1
 800aed6:	07d6      	lsls	r6, r2, #31
 800aed8:	d427      	bmi.n	800af2a <__sflush_r+0xb2>
 800aeda:	2200      	movs	r2, #0
 800aedc:	6062      	str	r2, [r4, #4]
 800aede:	04d9      	lsls	r1, r3, #19
 800aee0:	6922      	ldr	r2, [r4, #16]
 800aee2:	6022      	str	r2, [r4, #0]
 800aee4:	d504      	bpl.n	800aef0 <__sflush_r+0x78>
 800aee6:	1c42      	adds	r2, r0, #1
 800aee8:	d101      	bne.n	800aeee <__sflush_r+0x76>
 800aeea:	682b      	ldr	r3, [r5, #0]
 800aeec:	b903      	cbnz	r3, 800aef0 <__sflush_r+0x78>
 800aeee:	6560      	str	r0, [r4, #84]	@ 0x54
 800aef0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aef2:	602f      	str	r7, [r5, #0]
 800aef4:	b1b9      	cbz	r1, 800af26 <__sflush_r+0xae>
 800aef6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aefa:	4299      	cmp	r1, r3
 800aefc:	d002      	beq.n	800af04 <__sflush_r+0x8c>
 800aefe:	4628      	mov	r0, r5
 800af00:	f7ff fc8a 	bl	800a818 <_free_r>
 800af04:	2300      	movs	r3, #0
 800af06:	6363      	str	r3, [r4, #52]	@ 0x34
 800af08:	e00d      	b.n	800af26 <__sflush_r+0xae>
 800af0a:	2301      	movs	r3, #1
 800af0c:	4628      	mov	r0, r5
 800af0e:	47b0      	blx	r6
 800af10:	4602      	mov	r2, r0
 800af12:	1c50      	adds	r0, r2, #1
 800af14:	d1c9      	bne.n	800aeaa <__sflush_r+0x32>
 800af16:	682b      	ldr	r3, [r5, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d0c6      	beq.n	800aeaa <__sflush_r+0x32>
 800af1c:	2b1d      	cmp	r3, #29
 800af1e:	d001      	beq.n	800af24 <__sflush_r+0xac>
 800af20:	2b16      	cmp	r3, #22
 800af22:	d11e      	bne.n	800af62 <__sflush_r+0xea>
 800af24:	602f      	str	r7, [r5, #0]
 800af26:	2000      	movs	r0, #0
 800af28:	e022      	b.n	800af70 <__sflush_r+0xf8>
 800af2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af2e:	b21b      	sxth	r3, r3
 800af30:	e01b      	b.n	800af6a <__sflush_r+0xf2>
 800af32:	690f      	ldr	r7, [r1, #16]
 800af34:	2f00      	cmp	r7, #0
 800af36:	d0f6      	beq.n	800af26 <__sflush_r+0xae>
 800af38:	0793      	lsls	r3, r2, #30
 800af3a:	680e      	ldr	r6, [r1, #0]
 800af3c:	bf08      	it	eq
 800af3e:	694b      	ldreq	r3, [r1, #20]
 800af40:	600f      	str	r7, [r1, #0]
 800af42:	bf18      	it	ne
 800af44:	2300      	movne	r3, #0
 800af46:	eba6 0807 	sub.w	r8, r6, r7
 800af4a:	608b      	str	r3, [r1, #8]
 800af4c:	f1b8 0f00 	cmp.w	r8, #0
 800af50:	dde9      	ble.n	800af26 <__sflush_r+0xae>
 800af52:	6a21      	ldr	r1, [r4, #32]
 800af54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af56:	4643      	mov	r3, r8
 800af58:	463a      	mov	r2, r7
 800af5a:	4628      	mov	r0, r5
 800af5c:	47b0      	blx	r6
 800af5e:	2800      	cmp	r0, #0
 800af60:	dc08      	bgt.n	800af74 <__sflush_r+0xfc>
 800af62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af6a:	81a3      	strh	r3, [r4, #12]
 800af6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af74:	4407      	add	r7, r0
 800af76:	eba8 0800 	sub.w	r8, r8, r0
 800af7a:	e7e7      	b.n	800af4c <__sflush_r+0xd4>
 800af7c:	dfbffffe 	.word	0xdfbffffe

0800af80 <_fflush_r>:
 800af80:	b538      	push	{r3, r4, r5, lr}
 800af82:	690b      	ldr	r3, [r1, #16]
 800af84:	4605      	mov	r5, r0
 800af86:	460c      	mov	r4, r1
 800af88:	b913      	cbnz	r3, 800af90 <_fflush_r+0x10>
 800af8a:	2500      	movs	r5, #0
 800af8c:	4628      	mov	r0, r5
 800af8e:	bd38      	pop	{r3, r4, r5, pc}
 800af90:	b118      	cbz	r0, 800af9a <_fflush_r+0x1a>
 800af92:	6a03      	ldr	r3, [r0, #32]
 800af94:	b90b      	cbnz	r3, 800af9a <_fflush_r+0x1a>
 800af96:	f7ff fa7d 	bl	800a494 <__sinit>
 800af9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d0f3      	beq.n	800af8a <_fflush_r+0xa>
 800afa2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800afa4:	07d0      	lsls	r0, r2, #31
 800afa6:	d404      	bmi.n	800afb2 <_fflush_r+0x32>
 800afa8:	0599      	lsls	r1, r3, #22
 800afaa:	d402      	bmi.n	800afb2 <_fflush_r+0x32>
 800afac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afae:	f7ff fc04 	bl	800a7ba <__retarget_lock_acquire_recursive>
 800afb2:	4628      	mov	r0, r5
 800afb4:	4621      	mov	r1, r4
 800afb6:	f7ff ff5f 	bl	800ae78 <__sflush_r>
 800afba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800afbc:	07da      	lsls	r2, r3, #31
 800afbe:	4605      	mov	r5, r0
 800afc0:	d4e4      	bmi.n	800af8c <_fflush_r+0xc>
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	059b      	lsls	r3, r3, #22
 800afc6:	d4e1      	bmi.n	800af8c <_fflush_r+0xc>
 800afc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afca:	f7ff fbf7 	bl	800a7bc <__retarget_lock_release_recursive>
 800afce:	e7dd      	b.n	800af8c <_fflush_r+0xc>

0800afd0 <fiprintf>:
 800afd0:	b40e      	push	{r1, r2, r3}
 800afd2:	b503      	push	{r0, r1, lr}
 800afd4:	4601      	mov	r1, r0
 800afd6:	ab03      	add	r3, sp, #12
 800afd8:	4805      	ldr	r0, [pc, #20]	@ (800aff0 <fiprintf+0x20>)
 800afda:	f853 2b04 	ldr.w	r2, [r3], #4
 800afde:	6800      	ldr	r0, [r0, #0]
 800afe0:	9301      	str	r3, [sp, #4]
 800afe2:	f000 f87f 	bl	800b0e4 <_vfiprintf_r>
 800afe6:	b002      	add	sp, #8
 800afe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800afec:	b003      	add	sp, #12
 800afee:	4770      	bx	lr
 800aff0:	200000c0 	.word	0x200000c0

0800aff4 <memmove>:
 800aff4:	4288      	cmp	r0, r1
 800aff6:	b510      	push	{r4, lr}
 800aff8:	eb01 0402 	add.w	r4, r1, r2
 800affc:	d902      	bls.n	800b004 <memmove+0x10>
 800affe:	4284      	cmp	r4, r0
 800b000:	4623      	mov	r3, r4
 800b002:	d807      	bhi.n	800b014 <memmove+0x20>
 800b004:	1e43      	subs	r3, r0, #1
 800b006:	42a1      	cmp	r1, r4
 800b008:	d008      	beq.n	800b01c <memmove+0x28>
 800b00a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b00e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b012:	e7f8      	b.n	800b006 <memmove+0x12>
 800b014:	4402      	add	r2, r0
 800b016:	4601      	mov	r1, r0
 800b018:	428a      	cmp	r2, r1
 800b01a:	d100      	bne.n	800b01e <memmove+0x2a>
 800b01c:	bd10      	pop	{r4, pc}
 800b01e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b026:	e7f7      	b.n	800b018 <memmove+0x24>

0800b028 <abort>:
 800b028:	b508      	push	{r3, lr}
 800b02a:	2006      	movs	r0, #6
 800b02c:	f000 fa2e 	bl	800b48c <raise>
 800b030:	2001      	movs	r0, #1
 800b032:	f7f6 f827 	bl	8001084 <_exit>

0800b036 <_realloc_r>:
 800b036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03a:	4680      	mov	r8, r0
 800b03c:	4615      	mov	r5, r2
 800b03e:	460c      	mov	r4, r1
 800b040:	b921      	cbnz	r1, 800b04c <_realloc_r+0x16>
 800b042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b046:	4611      	mov	r1, r2
 800b048:	f7ff b888 	b.w	800a15c <_malloc_r>
 800b04c:	b92a      	cbnz	r2, 800b05a <_realloc_r+0x24>
 800b04e:	f7ff fbe3 	bl	800a818 <_free_r>
 800b052:	2400      	movs	r4, #0
 800b054:	4620      	mov	r0, r4
 800b056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b05a:	f000 fa33 	bl	800b4c4 <_malloc_usable_size_r>
 800b05e:	4285      	cmp	r5, r0
 800b060:	4606      	mov	r6, r0
 800b062:	d802      	bhi.n	800b06a <_realloc_r+0x34>
 800b064:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b068:	d8f4      	bhi.n	800b054 <_realloc_r+0x1e>
 800b06a:	4629      	mov	r1, r5
 800b06c:	4640      	mov	r0, r8
 800b06e:	f7ff f875 	bl	800a15c <_malloc_r>
 800b072:	4607      	mov	r7, r0
 800b074:	2800      	cmp	r0, #0
 800b076:	d0ec      	beq.n	800b052 <_realloc_r+0x1c>
 800b078:	42b5      	cmp	r5, r6
 800b07a:	462a      	mov	r2, r5
 800b07c:	4621      	mov	r1, r4
 800b07e:	bf28      	it	cs
 800b080:	4632      	movcs	r2, r6
 800b082:	f7ff fb9c 	bl	800a7be <memcpy>
 800b086:	4621      	mov	r1, r4
 800b088:	4640      	mov	r0, r8
 800b08a:	f7ff fbc5 	bl	800a818 <_free_r>
 800b08e:	463c      	mov	r4, r7
 800b090:	e7e0      	b.n	800b054 <_realloc_r+0x1e>

0800b092 <__sfputc_r>:
 800b092:	6893      	ldr	r3, [r2, #8]
 800b094:	3b01      	subs	r3, #1
 800b096:	2b00      	cmp	r3, #0
 800b098:	b410      	push	{r4}
 800b09a:	6093      	str	r3, [r2, #8]
 800b09c:	da08      	bge.n	800b0b0 <__sfputc_r+0x1e>
 800b09e:	6994      	ldr	r4, [r2, #24]
 800b0a0:	42a3      	cmp	r3, r4
 800b0a2:	db01      	blt.n	800b0a8 <__sfputc_r+0x16>
 800b0a4:	290a      	cmp	r1, #10
 800b0a6:	d103      	bne.n	800b0b0 <__sfputc_r+0x1e>
 800b0a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ac:	f000 b932 	b.w	800b314 <__swbuf_r>
 800b0b0:	6813      	ldr	r3, [r2, #0]
 800b0b2:	1c58      	adds	r0, r3, #1
 800b0b4:	6010      	str	r0, [r2, #0]
 800b0b6:	7019      	strb	r1, [r3, #0]
 800b0b8:	4608      	mov	r0, r1
 800b0ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <__sfputs_r>:
 800b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	460f      	mov	r7, r1
 800b0c6:	4614      	mov	r4, r2
 800b0c8:	18d5      	adds	r5, r2, r3
 800b0ca:	42ac      	cmp	r4, r5
 800b0cc:	d101      	bne.n	800b0d2 <__sfputs_r+0x12>
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	e007      	b.n	800b0e2 <__sfputs_r+0x22>
 800b0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0d6:	463a      	mov	r2, r7
 800b0d8:	4630      	mov	r0, r6
 800b0da:	f7ff ffda 	bl	800b092 <__sfputc_r>
 800b0de:	1c43      	adds	r3, r0, #1
 800b0e0:	d1f3      	bne.n	800b0ca <__sfputs_r+0xa>
 800b0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b0e4 <_vfiprintf_r>:
 800b0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e8:	460d      	mov	r5, r1
 800b0ea:	b09d      	sub	sp, #116	@ 0x74
 800b0ec:	4614      	mov	r4, r2
 800b0ee:	4698      	mov	r8, r3
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	b118      	cbz	r0, 800b0fc <_vfiprintf_r+0x18>
 800b0f4:	6a03      	ldr	r3, [r0, #32]
 800b0f6:	b90b      	cbnz	r3, 800b0fc <_vfiprintf_r+0x18>
 800b0f8:	f7ff f9cc 	bl	800a494 <__sinit>
 800b0fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0fe:	07d9      	lsls	r1, r3, #31
 800b100:	d405      	bmi.n	800b10e <_vfiprintf_r+0x2a>
 800b102:	89ab      	ldrh	r3, [r5, #12]
 800b104:	059a      	lsls	r2, r3, #22
 800b106:	d402      	bmi.n	800b10e <_vfiprintf_r+0x2a>
 800b108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b10a:	f7ff fb56 	bl	800a7ba <__retarget_lock_acquire_recursive>
 800b10e:	89ab      	ldrh	r3, [r5, #12]
 800b110:	071b      	lsls	r3, r3, #28
 800b112:	d501      	bpl.n	800b118 <_vfiprintf_r+0x34>
 800b114:	692b      	ldr	r3, [r5, #16]
 800b116:	b99b      	cbnz	r3, 800b140 <_vfiprintf_r+0x5c>
 800b118:	4629      	mov	r1, r5
 800b11a:	4630      	mov	r0, r6
 800b11c:	f000 f938 	bl	800b390 <__swsetup_r>
 800b120:	b170      	cbz	r0, 800b140 <_vfiprintf_r+0x5c>
 800b122:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b124:	07dc      	lsls	r4, r3, #31
 800b126:	d504      	bpl.n	800b132 <_vfiprintf_r+0x4e>
 800b128:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b12c:	b01d      	add	sp, #116	@ 0x74
 800b12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b132:	89ab      	ldrh	r3, [r5, #12]
 800b134:	0598      	lsls	r0, r3, #22
 800b136:	d4f7      	bmi.n	800b128 <_vfiprintf_r+0x44>
 800b138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b13a:	f7ff fb3f 	bl	800a7bc <__retarget_lock_release_recursive>
 800b13e:	e7f3      	b.n	800b128 <_vfiprintf_r+0x44>
 800b140:	2300      	movs	r3, #0
 800b142:	9309      	str	r3, [sp, #36]	@ 0x24
 800b144:	2320      	movs	r3, #32
 800b146:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b14a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b14e:	2330      	movs	r3, #48	@ 0x30
 800b150:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b300 <_vfiprintf_r+0x21c>
 800b154:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b158:	f04f 0901 	mov.w	r9, #1
 800b15c:	4623      	mov	r3, r4
 800b15e:	469a      	mov	sl, r3
 800b160:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b164:	b10a      	cbz	r2, 800b16a <_vfiprintf_r+0x86>
 800b166:	2a25      	cmp	r2, #37	@ 0x25
 800b168:	d1f9      	bne.n	800b15e <_vfiprintf_r+0x7a>
 800b16a:	ebba 0b04 	subs.w	fp, sl, r4
 800b16e:	d00b      	beq.n	800b188 <_vfiprintf_r+0xa4>
 800b170:	465b      	mov	r3, fp
 800b172:	4622      	mov	r2, r4
 800b174:	4629      	mov	r1, r5
 800b176:	4630      	mov	r0, r6
 800b178:	f7ff ffa2 	bl	800b0c0 <__sfputs_r>
 800b17c:	3001      	adds	r0, #1
 800b17e:	f000 80a7 	beq.w	800b2d0 <_vfiprintf_r+0x1ec>
 800b182:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b184:	445a      	add	r2, fp
 800b186:	9209      	str	r2, [sp, #36]	@ 0x24
 800b188:	f89a 3000 	ldrb.w	r3, [sl]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f000 809f 	beq.w	800b2d0 <_vfiprintf_r+0x1ec>
 800b192:	2300      	movs	r3, #0
 800b194:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b19c:	f10a 0a01 	add.w	sl, sl, #1
 800b1a0:	9304      	str	r3, [sp, #16]
 800b1a2:	9307      	str	r3, [sp, #28]
 800b1a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b1a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1aa:	4654      	mov	r4, sl
 800b1ac:	2205      	movs	r2, #5
 800b1ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1b2:	4853      	ldr	r0, [pc, #332]	@ (800b300 <_vfiprintf_r+0x21c>)
 800b1b4:	f7f5 f84c 	bl	8000250 <memchr>
 800b1b8:	9a04      	ldr	r2, [sp, #16]
 800b1ba:	b9d8      	cbnz	r0, 800b1f4 <_vfiprintf_r+0x110>
 800b1bc:	06d1      	lsls	r1, r2, #27
 800b1be:	bf44      	itt	mi
 800b1c0:	2320      	movmi	r3, #32
 800b1c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1c6:	0713      	lsls	r3, r2, #28
 800b1c8:	bf44      	itt	mi
 800b1ca:	232b      	movmi	r3, #43	@ 0x2b
 800b1cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b1d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1d6:	d015      	beq.n	800b204 <_vfiprintf_r+0x120>
 800b1d8:	9a07      	ldr	r2, [sp, #28]
 800b1da:	4654      	mov	r4, sl
 800b1dc:	2000      	movs	r0, #0
 800b1de:	f04f 0c0a 	mov.w	ip, #10
 800b1e2:	4621      	mov	r1, r4
 800b1e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1e8:	3b30      	subs	r3, #48	@ 0x30
 800b1ea:	2b09      	cmp	r3, #9
 800b1ec:	d94b      	bls.n	800b286 <_vfiprintf_r+0x1a2>
 800b1ee:	b1b0      	cbz	r0, 800b21e <_vfiprintf_r+0x13a>
 800b1f0:	9207      	str	r2, [sp, #28]
 800b1f2:	e014      	b.n	800b21e <_vfiprintf_r+0x13a>
 800b1f4:	eba0 0308 	sub.w	r3, r0, r8
 800b1f8:	fa09 f303 	lsl.w	r3, r9, r3
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	9304      	str	r3, [sp, #16]
 800b200:	46a2      	mov	sl, r4
 800b202:	e7d2      	b.n	800b1aa <_vfiprintf_r+0xc6>
 800b204:	9b03      	ldr	r3, [sp, #12]
 800b206:	1d19      	adds	r1, r3, #4
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	9103      	str	r1, [sp, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	bfbb      	ittet	lt
 800b210:	425b      	neglt	r3, r3
 800b212:	f042 0202 	orrlt.w	r2, r2, #2
 800b216:	9307      	strge	r3, [sp, #28]
 800b218:	9307      	strlt	r3, [sp, #28]
 800b21a:	bfb8      	it	lt
 800b21c:	9204      	strlt	r2, [sp, #16]
 800b21e:	7823      	ldrb	r3, [r4, #0]
 800b220:	2b2e      	cmp	r3, #46	@ 0x2e
 800b222:	d10a      	bne.n	800b23a <_vfiprintf_r+0x156>
 800b224:	7863      	ldrb	r3, [r4, #1]
 800b226:	2b2a      	cmp	r3, #42	@ 0x2a
 800b228:	d132      	bne.n	800b290 <_vfiprintf_r+0x1ac>
 800b22a:	9b03      	ldr	r3, [sp, #12]
 800b22c:	1d1a      	adds	r2, r3, #4
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	9203      	str	r2, [sp, #12]
 800b232:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b236:	3402      	adds	r4, #2
 800b238:	9305      	str	r3, [sp, #20]
 800b23a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b310 <_vfiprintf_r+0x22c>
 800b23e:	7821      	ldrb	r1, [r4, #0]
 800b240:	2203      	movs	r2, #3
 800b242:	4650      	mov	r0, sl
 800b244:	f7f5 f804 	bl	8000250 <memchr>
 800b248:	b138      	cbz	r0, 800b25a <_vfiprintf_r+0x176>
 800b24a:	9b04      	ldr	r3, [sp, #16]
 800b24c:	eba0 000a 	sub.w	r0, r0, sl
 800b250:	2240      	movs	r2, #64	@ 0x40
 800b252:	4082      	lsls	r2, r0
 800b254:	4313      	orrs	r3, r2
 800b256:	3401      	adds	r4, #1
 800b258:	9304      	str	r3, [sp, #16]
 800b25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b25e:	4829      	ldr	r0, [pc, #164]	@ (800b304 <_vfiprintf_r+0x220>)
 800b260:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b264:	2206      	movs	r2, #6
 800b266:	f7f4 fff3 	bl	8000250 <memchr>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	d03f      	beq.n	800b2ee <_vfiprintf_r+0x20a>
 800b26e:	4b26      	ldr	r3, [pc, #152]	@ (800b308 <_vfiprintf_r+0x224>)
 800b270:	bb1b      	cbnz	r3, 800b2ba <_vfiprintf_r+0x1d6>
 800b272:	9b03      	ldr	r3, [sp, #12]
 800b274:	3307      	adds	r3, #7
 800b276:	f023 0307 	bic.w	r3, r3, #7
 800b27a:	3308      	adds	r3, #8
 800b27c:	9303      	str	r3, [sp, #12]
 800b27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b280:	443b      	add	r3, r7
 800b282:	9309      	str	r3, [sp, #36]	@ 0x24
 800b284:	e76a      	b.n	800b15c <_vfiprintf_r+0x78>
 800b286:	fb0c 3202 	mla	r2, ip, r2, r3
 800b28a:	460c      	mov	r4, r1
 800b28c:	2001      	movs	r0, #1
 800b28e:	e7a8      	b.n	800b1e2 <_vfiprintf_r+0xfe>
 800b290:	2300      	movs	r3, #0
 800b292:	3401      	adds	r4, #1
 800b294:	9305      	str	r3, [sp, #20]
 800b296:	4619      	mov	r1, r3
 800b298:	f04f 0c0a 	mov.w	ip, #10
 800b29c:	4620      	mov	r0, r4
 800b29e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2a2:	3a30      	subs	r2, #48	@ 0x30
 800b2a4:	2a09      	cmp	r2, #9
 800b2a6:	d903      	bls.n	800b2b0 <_vfiprintf_r+0x1cc>
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d0c6      	beq.n	800b23a <_vfiprintf_r+0x156>
 800b2ac:	9105      	str	r1, [sp, #20]
 800b2ae:	e7c4      	b.n	800b23a <_vfiprintf_r+0x156>
 800b2b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e7f0      	b.n	800b29c <_vfiprintf_r+0x1b8>
 800b2ba:	ab03      	add	r3, sp, #12
 800b2bc:	9300      	str	r3, [sp, #0]
 800b2be:	462a      	mov	r2, r5
 800b2c0:	4b12      	ldr	r3, [pc, #72]	@ (800b30c <_vfiprintf_r+0x228>)
 800b2c2:	a904      	add	r1, sp, #16
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	f3af 8000 	nop.w
 800b2ca:	4607      	mov	r7, r0
 800b2cc:	1c78      	adds	r0, r7, #1
 800b2ce:	d1d6      	bne.n	800b27e <_vfiprintf_r+0x19a>
 800b2d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2d2:	07d9      	lsls	r1, r3, #31
 800b2d4:	d405      	bmi.n	800b2e2 <_vfiprintf_r+0x1fe>
 800b2d6:	89ab      	ldrh	r3, [r5, #12]
 800b2d8:	059a      	lsls	r2, r3, #22
 800b2da:	d402      	bmi.n	800b2e2 <_vfiprintf_r+0x1fe>
 800b2dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2de:	f7ff fa6d 	bl	800a7bc <__retarget_lock_release_recursive>
 800b2e2:	89ab      	ldrh	r3, [r5, #12]
 800b2e4:	065b      	lsls	r3, r3, #25
 800b2e6:	f53f af1f 	bmi.w	800b128 <_vfiprintf_r+0x44>
 800b2ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2ec:	e71e      	b.n	800b12c <_vfiprintf_r+0x48>
 800b2ee:	ab03      	add	r3, sp, #12
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	462a      	mov	r2, r5
 800b2f4:	4b05      	ldr	r3, [pc, #20]	@ (800b30c <_vfiprintf_r+0x228>)
 800b2f6:	a904      	add	r1, sp, #16
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	f7ff fc9d 	bl	800ac38 <_printf_i>
 800b2fe:	e7e4      	b.n	800b2ca <_vfiprintf_r+0x1e6>
 800b300:	0800bb62 	.word	0x0800bb62
 800b304:	0800bb6c 	.word	0x0800bb6c
 800b308:	00000000 	.word	0x00000000
 800b30c:	0800b0c1 	.word	0x0800b0c1
 800b310:	0800bb68 	.word	0x0800bb68

0800b314 <__swbuf_r>:
 800b314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b316:	460e      	mov	r6, r1
 800b318:	4614      	mov	r4, r2
 800b31a:	4605      	mov	r5, r0
 800b31c:	b118      	cbz	r0, 800b326 <__swbuf_r+0x12>
 800b31e:	6a03      	ldr	r3, [r0, #32]
 800b320:	b90b      	cbnz	r3, 800b326 <__swbuf_r+0x12>
 800b322:	f7ff f8b7 	bl	800a494 <__sinit>
 800b326:	69a3      	ldr	r3, [r4, #24]
 800b328:	60a3      	str	r3, [r4, #8]
 800b32a:	89a3      	ldrh	r3, [r4, #12]
 800b32c:	071a      	lsls	r2, r3, #28
 800b32e:	d501      	bpl.n	800b334 <__swbuf_r+0x20>
 800b330:	6923      	ldr	r3, [r4, #16]
 800b332:	b943      	cbnz	r3, 800b346 <__swbuf_r+0x32>
 800b334:	4621      	mov	r1, r4
 800b336:	4628      	mov	r0, r5
 800b338:	f000 f82a 	bl	800b390 <__swsetup_r>
 800b33c:	b118      	cbz	r0, 800b346 <__swbuf_r+0x32>
 800b33e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b342:	4638      	mov	r0, r7
 800b344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b346:	6823      	ldr	r3, [r4, #0]
 800b348:	6922      	ldr	r2, [r4, #16]
 800b34a:	1a98      	subs	r0, r3, r2
 800b34c:	6963      	ldr	r3, [r4, #20]
 800b34e:	b2f6      	uxtb	r6, r6
 800b350:	4283      	cmp	r3, r0
 800b352:	4637      	mov	r7, r6
 800b354:	dc05      	bgt.n	800b362 <__swbuf_r+0x4e>
 800b356:	4621      	mov	r1, r4
 800b358:	4628      	mov	r0, r5
 800b35a:	f7ff fe11 	bl	800af80 <_fflush_r>
 800b35e:	2800      	cmp	r0, #0
 800b360:	d1ed      	bne.n	800b33e <__swbuf_r+0x2a>
 800b362:	68a3      	ldr	r3, [r4, #8]
 800b364:	3b01      	subs	r3, #1
 800b366:	60a3      	str	r3, [r4, #8]
 800b368:	6823      	ldr	r3, [r4, #0]
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	6022      	str	r2, [r4, #0]
 800b36e:	701e      	strb	r6, [r3, #0]
 800b370:	6962      	ldr	r2, [r4, #20]
 800b372:	1c43      	adds	r3, r0, #1
 800b374:	429a      	cmp	r2, r3
 800b376:	d004      	beq.n	800b382 <__swbuf_r+0x6e>
 800b378:	89a3      	ldrh	r3, [r4, #12]
 800b37a:	07db      	lsls	r3, r3, #31
 800b37c:	d5e1      	bpl.n	800b342 <__swbuf_r+0x2e>
 800b37e:	2e0a      	cmp	r6, #10
 800b380:	d1df      	bne.n	800b342 <__swbuf_r+0x2e>
 800b382:	4621      	mov	r1, r4
 800b384:	4628      	mov	r0, r5
 800b386:	f7ff fdfb 	bl	800af80 <_fflush_r>
 800b38a:	2800      	cmp	r0, #0
 800b38c:	d0d9      	beq.n	800b342 <__swbuf_r+0x2e>
 800b38e:	e7d6      	b.n	800b33e <__swbuf_r+0x2a>

0800b390 <__swsetup_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4b29      	ldr	r3, [pc, #164]	@ (800b438 <__swsetup_r+0xa8>)
 800b394:	4605      	mov	r5, r0
 800b396:	6818      	ldr	r0, [r3, #0]
 800b398:	460c      	mov	r4, r1
 800b39a:	b118      	cbz	r0, 800b3a4 <__swsetup_r+0x14>
 800b39c:	6a03      	ldr	r3, [r0, #32]
 800b39e:	b90b      	cbnz	r3, 800b3a4 <__swsetup_r+0x14>
 800b3a0:	f7ff f878 	bl	800a494 <__sinit>
 800b3a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3a8:	0719      	lsls	r1, r3, #28
 800b3aa:	d422      	bmi.n	800b3f2 <__swsetup_r+0x62>
 800b3ac:	06da      	lsls	r2, r3, #27
 800b3ae:	d407      	bmi.n	800b3c0 <__swsetup_r+0x30>
 800b3b0:	2209      	movs	r2, #9
 800b3b2:	602a      	str	r2, [r5, #0]
 800b3b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3b8:	81a3      	strh	r3, [r4, #12]
 800b3ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3be:	e033      	b.n	800b428 <__swsetup_r+0x98>
 800b3c0:	0758      	lsls	r0, r3, #29
 800b3c2:	d512      	bpl.n	800b3ea <__swsetup_r+0x5a>
 800b3c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3c6:	b141      	cbz	r1, 800b3da <__swsetup_r+0x4a>
 800b3c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b3cc:	4299      	cmp	r1, r3
 800b3ce:	d002      	beq.n	800b3d6 <__swsetup_r+0x46>
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	f7ff fa21 	bl	800a818 <_free_r>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3da:	89a3      	ldrh	r3, [r4, #12]
 800b3dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b3e0:	81a3      	strh	r3, [r4, #12]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	6063      	str	r3, [r4, #4]
 800b3e6:	6923      	ldr	r3, [r4, #16]
 800b3e8:	6023      	str	r3, [r4, #0]
 800b3ea:	89a3      	ldrh	r3, [r4, #12]
 800b3ec:	f043 0308 	orr.w	r3, r3, #8
 800b3f0:	81a3      	strh	r3, [r4, #12]
 800b3f2:	6923      	ldr	r3, [r4, #16]
 800b3f4:	b94b      	cbnz	r3, 800b40a <__swsetup_r+0x7a>
 800b3f6:	89a3      	ldrh	r3, [r4, #12]
 800b3f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b3fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b400:	d003      	beq.n	800b40a <__swsetup_r+0x7a>
 800b402:	4621      	mov	r1, r4
 800b404:	4628      	mov	r0, r5
 800b406:	f000 f88b 	bl	800b520 <__smakebuf_r>
 800b40a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b40e:	f013 0201 	ands.w	r2, r3, #1
 800b412:	d00a      	beq.n	800b42a <__swsetup_r+0x9a>
 800b414:	2200      	movs	r2, #0
 800b416:	60a2      	str	r2, [r4, #8]
 800b418:	6962      	ldr	r2, [r4, #20]
 800b41a:	4252      	negs	r2, r2
 800b41c:	61a2      	str	r2, [r4, #24]
 800b41e:	6922      	ldr	r2, [r4, #16]
 800b420:	b942      	cbnz	r2, 800b434 <__swsetup_r+0xa4>
 800b422:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b426:	d1c5      	bne.n	800b3b4 <__swsetup_r+0x24>
 800b428:	bd38      	pop	{r3, r4, r5, pc}
 800b42a:	0799      	lsls	r1, r3, #30
 800b42c:	bf58      	it	pl
 800b42e:	6962      	ldrpl	r2, [r4, #20]
 800b430:	60a2      	str	r2, [r4, #8]
 800b432:	e7f4      	b.n	800b41e <__swsetup_r+0x8e>
 800b434:	2000      	movs	r0, #0
 800b436:	e7f7      	b.n	800b428 <__swsetup_r+0x98>
 800b438:	200000c0 	.word	0x200000c0

0800b43c <_raise_r>:
 800b43c:	291f      	cmp	r1, #31
 800b43e:	b538      	push	{r3, r4, r5, lr}
 800b440:	4605      	mov	r5, r0
 800b442:	460c      	mov	r4, r1
 800b444:	d904      	bls.n	800b450 <_raise_r+0x14>
 800b446:	2316      	movs	r3, #22
 800b448:	6003      	str	r3, [r0, #0]
 800b44a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b44e:	bd38      	pop	{r3, r4, r5, pc}
 800b450:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b452:	b112      	cbz	r2, 800b45a <_raise_r+0x1e>
 800b454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b458:	b94b      	cbnz	r3, 800b46e <_raise_r+0x32>
 800b45a:	4628      	mov	r0, r5
 800b45c:	f000 f830 	bl	800b4c0 <_getpid_r>
 800b460:	4622      	mov	r2, r4
 800b462:	4601      	mov	r1, r0
 800b464:	4628      	mov	r0, r5
 800b466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b46a:	f000 b817 	b.w	800b49c <_kill_r>
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d00a      	beq.n	800b488 <_raise_r+0x4c>
 800b472:	1c59      	adds	r1, r3, #1
 800b474:	d103      	bne.n	800b47e <_raise_r+0x42>
 800b476:	2316      	movs	r3, #22
 800b478:	6003      	str	r3, [r0, #0]
 800b47a:	2001      	movs	r0, #1
 800b47c:	e7e7      	b.n	800b44e <_raise_r+0x12>
 800b47e:	2100      	movs	r1, #0
 800b480:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b484:	4620      	mov	r0, r4
 800b486:	4798      	blx	r3
 800b488:	2000      	movs	r0, #0
 800b48a:	e7e0      	b.n	800b44e <_raise_r+0x12>

0800b48c <raise>:
 800b48c:	4b02      	ldr	r3, [pc, #8]	@ (800b498 <raise+0xc>)
 800b48e:	4601      	mov	r1, r0
 800b490:	6818      	ldr	r0, [r3, #0]
 800b492:	f7ff bfd3 	b.w	800b43c <_raise_r>
 800b496:	bf00      	nop
 800b498:	200000c0 	.word	0x200000c0

0800b49c <_kill_r>:
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4d07      	ldr	r5, [pc, #28]	@ (800b4bc <_kill_r+0x20>)
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	4608      	mov	r0, r1
 800b4a6:	4611      	mov	r1, r2
 800b4a8:	602b      	str	r3, [r5, #0]
 800b4aa:	f7f5 fddb 	bl	8001064 <_kill>
 800b4ae:	1c43      	adds	r3, r0, #1
 800b4b0:	d102      	bne.n	800b4b8 <_kill_r+0x1c>
 800b4b2:	682b      	ldr	r3, [r5, #0]
 800b4b4:	b103      	cbz	r3, 800b4b8 <_kill_r+0x1c>
 800b4b6:	6023      	str	r3, [r4, #0]
 800b4b8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20000964 	.word	0x20000964

0800b4c0 <_getpid_r>:
 800b4c0:	f7f5 bdc8 	b.w	8001054 <_getpid>

0800b4c4 <_malloc_usable_size_r>:
 800b4c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4c8:	1f18      	subs	r0, r3, #4
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	bfbc      	itt	lt
 800b4ce:	580b      	ldrlt	r3, [r1, r0]
 800b4d0:	18c0      	addlt	r0, r0, r3
 800b4d2:	4770      	bx	lr

0800b4d4 <__swhatbuf_r>:
 800b4d4:	b570      	push	{r4, r5, r6, lr}
 800b4d6:	460c      	mov	r4, r1
 800b4d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4dc:	2900      	cmp	r1, #0
 800b4de:	b096      	sub	sp, #88	@ 0x58
 800b4e0:	4615      	mov	r5, r2
 800b4e2:	461e      	mov	r6, r3
 800b4e4:	da0d      	bge.n	800b502 <__swhatbuf_r+0x2e>
 800b4e6:	89a3      	ldrh	r3, [r4, #12]
 800b4e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b4ec:	f04f 0100 	mov.w	r1, #0
 800b4f0:	bf14      	ite	ne
 800b4f2:	2340      	movne	r3, #64	@ 0x40
 800b4f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	6031      	str	r1, [r6, #0]
 800b4fc:	602b      	str	r3, [r5, #0]
 800b4fe:	b016      	add	sp, #88	@ 0x58
 800b500:	bd70      	pop	{r4, r5, r6, pc}
 800b502:	466a      	mov	r2, sp
 800b504:	f000 f848 	bl	800b598 <_fstat_r>
 800b508:	2800      	cmp	r0, #0
 800b50a:	dbec      	blt.n	800b4e6 <__swhatbuf_r+0x12>
 800b50c:	9901      	ldr	r1, [sp, #4]
 800b50e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b512:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b516:	4259      	negs	r1, r3
 800b518:	4159      	adcs	r1, r3
 800b51a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b51e:	e7eb      	b.n	800b4f8 <__swhatbuf_r+0x24>

0800b520 <__smakebuf_r>:
 800b520:	898b      	ldrh	r3, [r1, #12]
 800b522:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b524:	079d      	lsls	r5, r3, #30
 800b526:	4606      	mov	r6, r0
 800b528:	460c      	mov	r4, r1
 800b52a:	d507      	bpl.n	800b53c <__smakebuf_r+0x1c>
 800b52c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	6123      	str	r3, [r4, #16]
 800b534:	2301      	movs	r3, #1
 800b536:	6163      	str	r3, [r4, #20]
 800b538:	b003      	add	sp, #12
 800b53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b53c:	ab01      	add	r3, sp, #4
 800b53e:	466a      	mov	r2, sp
 800b540:	f7ff ffc8 	bl	800b4d4 <__swhatbuf_r>
 800b544:	9f00      	ldr	r7, [sp, #0]
 800b546:	4605      	mov	r5, r0
 800b548:	4639      	mov	r1, r7
 800b54a:	4630      	mov	r0, r6
 800b54c:	f7fe fe06 	bl	800a15c <_malloc_r>
 800b550:	b948      	cbnz	r0, 800b566 <__smakebuf_r+0x46>
 800b552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b556:	059a      	lsls	r2, r3, #22
 800b558:	d4ee      	bmi.n	800b538 <__smakebuf_r+0x18>
 800b55a:	f023 0303 	bic.w	r3, r3, #3
 800b55e:	f043 0302 	orr.w	r3, r3, #2
 800b562:	81a3      	strh	r3, [r4, #12]
 800b564:	e7e2      	b.n	800b52c <__smakebuf_r+0xc>
 800b566:	89a3      	ldrh	r3, [r4, #12]
 800b568:	6020      	str	r0, [r4, #0]
 800b56a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b56e:	81a3      	strh	r3, [r4, #12]
 800b570:	9b01      	ldr	r3, [sp, #4]
 800b572:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b576:	b15b      	cbz	r3, 800b590 <__smakebuf_r+0x70>
 800b578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b57c:	4630      	mov	r0, r6
 800b57e:	f000 f81d 	bl	800b5bc <_isatty_r>
 800b582:	b128      	cbz	r0, 800b590 <__smakebuf_r+0x70>
 800b584:	89a3      	ldrh	r3, [r4, #12]
 800b586:	f023 0303 	bic.w	r3, r3, #3
 800b58a:	f043 0301 	orr.w	r3, r3, #1
 800b58e:	81a3      	strh	r3, [r4, #12]
 800b590:	89a3      	ldrh	r3, [r4, #12]
 800b592:	431d      	orrs	r5, r3
 800b594:	81a5      	strh	r5, [r4, #12]
 800b596:	e7cf      	b.n	800b538 <__smakebuf_r+0x18>

0800b598 <_fstat_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	4d07      	ldr	r5, [pc, #28]	@ (800b5b8 <_fstat_r+0x20>)
 800b59c:	2300      	movs	r3, #0
 800b59e:	4604      	mov	r4, r0
 800b5a0:	4608      	mov	r0, r1
 800b5a2:	4611      	mov	r1, r2
 800b5a4:	602b      	str	r3, [r5, #0]
 800b5a6:	f7f5 fdbd 	bl	8001124 <_fstat>
 800b5aa:	1c43      	adds	r3, r0, #1
 800b5ac:	d102      	bne.n	800b5b4 <_fstat_r+0x1c>
 800b5ae:	682b      	ldr	r3, [r5, #0]
 800b5b0:	b103      	cbz	r3, 800b5b4 <_fstat_r+0x1c>
 800b5b2:	6023      	str	r3, [r4, #0]
 800b5b4:	bd38      	pop	{r3, r4, r5, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20000964 	.word	0x20000964

0800b5bc <_isatty_r>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	4d06      	ldr	r5, [pc, #24]	@ (800b5d8 <_isatty_r+0x1c>)
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	4608      	mov	r0, r1
 800b5c6:	602b      	str	r3, [r5, #0]
 800b5c8:	f7f5 fdbc 	bl	8001144 <_isatty>
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	d102      	bne.n	800b5d6 <_isatty_r+0x1a>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	b103      	cbz	r3, 800b5d6 <_isatty_r+0x1a>
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	20000964 	.word	0x20000964

0800b5dc <_init>:
 800b5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5de:	bf00      	nop
 800b5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5e2:	bc08      	pop	{r3}
 800b5e4:	469e      	mov	lr, r3
 800b5e6:	4770      	bx	lr

0800b5e8 <_fini>:
 800b5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ea:	bf00      	nop
 800b5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ee:	bc08      	pop	{r3}
 800b5f0:	469e      	mov	lr, r3
 800b5f2:	4770      	bx	lr
