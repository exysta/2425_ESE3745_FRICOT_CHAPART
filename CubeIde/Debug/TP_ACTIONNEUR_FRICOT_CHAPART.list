
TP_ACTIONNEUR_FRICOT_CHAPART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093cc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080095ac  080095ac  0000a5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800963c  0800963c  0000b0e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800963c  0800963c  0000a63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009644  08009644  0000b0e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009644  08009644  0000a644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009648  08009648  0000a648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800964c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  200000e8  08009734  0000b0e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  08009734  0000b6b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c468  00000000  00000000  0000b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039fe  00000000  00000000  00027580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  0002af80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001132  00000000  00000000  0002c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029923  00000000  00000000  0002d6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b761  00000000  00000000  0005701d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011396c  00000000  00000000  0007277e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001860ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006284  00000000  00000000  00186130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0018c3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000e8 	.word	0x200000e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009594 	.word	0x08009594

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000ec 	.word	0x200000ec
 800021c:	08009594 	.word	0x08009594

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08c      	sub	sp, #48	@ 0x30
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2220      	movs	r2, #32
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f008 fb5b 	bl	8008c94 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005de:	4b41      	ldr	r3, [pc, #260]	@ (80006e4 <MX_ADC1_Init+0x124>)
 80005e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005e6:	4b3f      	ldr	r3, [pc, #252]	@ (80006e4 <MX_ADC1_Init+0x124>)
 80005e8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ee:	4b3d      	ldr	r3, [pc, #244]	@ (80006e4 <MX_ADC1_Init+0x124>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f4:	4b3b      	ldr	r3, [pc, #236]	@ (80006e4 <MX_ADC1_Init+0x124>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005fa:	4b3a      	ldr	r3, [pc, #232]	@ (80006e4 <MX_ADC1_Init+0x124>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000600:	4b38      	ldr	r3, [pc, #224]	@ (80006e4 <MX_ADC1_Init+0x124>)
 8000602:	2201      	movs	r2, #1
 8000604:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000606:	4b37      	ldr	r3, [pc, #220]	@ (80006e4 <MX_ADC1_Init+0x124>)
 8000608:	2204      	movs	r2, #4
 800060a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800060c:	4b35      	ldr	r3, [pc, #212]	@ (80006e4 <MX_ADC1_Init+0x124>)
 800060e:	2200      	movs	r2, #0
 8000610:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000612:	4b34      	ldr	r3, [pc, #208]	@ (80006e4 <MX_ADC1_Init+0x124>)
 8000614:	2201      	movs	r2, #1
 8000616:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000618:	4b32      	ldr	r3, [pc, #200]	@ (80006e4 <MX_ADC1_Init+0x124>)
 800061a:	2203      	movs	r2, #3
 800061c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b31      	ldr	r3, [pc, #196]	@ (80006e4 <MX_ADC1_Init+0x124>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000626:	4b2f      	ldr	r3, [pc, #188]	@ (80006e4 <MX_ADC1_Init+0x124>)
 8000628:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800062c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800062e:	4b2d      	ldr	r3, [pc, #180]	@ (80006e4 <MX_ADC1_Init+0x124>)
 8000630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000634:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000636:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <MX_ADC1_Init+0x124>)
 8000638:	2201      	movs	r2, #1
 800063a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063e:	4b29      	ldr	r3, [pc, #164]	@ (80006e4 <MX_ADC1_Init+0x124>)
 8000640:	2200      	movs	r2, #0
 8000642:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000644:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <MX_ADC1_Init+0x124>)
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	4825      	ldr	r0, [pc, #148]	@ (80006e4 <MX_ADC1_Init+0x124>)
 800064e:	f001 fc17 	bl	8001e80 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000658:	f000 fb13 	bl	8000c82 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000660:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000664:	4619      	mov	r1, r3
 8000666:	481f      	ldr	r0, [pc, #124]	@ (80006e4 <MX_ADC1_Init+0x124>)
 8000668:	f002 ffc8 	bl	80035fc <HAL_ADCEx_MultiModeConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000672:	f000 fb06 	bl	8000c82 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000676:	4b1c      	ldr	r3, [pc, #112]	@ (80006e8 <MX_ADC1_Init+0x128>)
 8000678:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067a:	2306      	movs	r3, #6
 800067c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800067e:	2304      	movs	r3, #4
 8000680:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000682:	237f      	movs	r3, #127	@ 0x7f
 8000684:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000686:	2304      	movs	r3, #4
 8000688:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4619      	mov	r1, r3
 8000692:	4814      	ldr	r0, [pc, #80]	@ (80006e4 <MX_ADC1_Init+0x124>)
 8000694:	f002 f902 	bl	800289c <HAL_ADC_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800069e:	f000 faf0 	bl	8000c82 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006a2:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <MX_ADC1_Init+0x12c>)
 80006a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006a6:	230c      	movs	r3, #12
 80006a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	480d      	ldr	r0, [pc, #52]	@ (80006e4 <MX_ADC1_Init+0x124>)
 80006b0:	f002 f8f4 	bl	800289c <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80006ba:	f000 fae2 	bl	8000c82 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006be:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_ADC1_Init+0x130>)
 80006c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006c2:	2312      	movs	r3, #18
 80006c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	4806      	ldr	r0, [pc, #24]	@ (80006e4 <MX_ADC1_Init+0x124>)
 80006cc:	f002 f8e6 	bl	800289c <HAL_ADC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80006d6:	f000 fad4 	bl	8000c82 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	3730      	adds	r7, #48	@ 0x30
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000104 	.word	0x20000104
 80006e8:	21800100 	.word	0x21800100
 80006ec:	32601000 	.word	0x32601000
 80006f0:	08600004 	.word	0x08600004

080006f4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2220      	movs	r2, #32
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f008 fac7 	bl	8008c94 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000706:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000708:	4a2b      	ldr	r2, [pc, #172]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800070c:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 800070e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000712:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000714:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071a:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000720:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000726:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072c:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 800072e:	2204      	movs	r2, #4
 8000730:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000732:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000734:	2200      	movs	r2, #0
 8000736:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000738:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 800073a:	2200      	movs	r2, #0
 800073c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800073e:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000740:	2201      	movs	r2, #1
 8000742:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000744:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800074c:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 800074e:	2200      	movs	r2, #0
 8000750:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000752:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000754:	2200      	movs	r2, #0
 8000756:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000758:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000760:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000762:	2200      	movs	r2, #0
 8000764:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800076e:	4811      	ldr	r0, [pc, #68]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000770:	f001 fb86 	bl	8001e80 <HAL_ADC_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800077a:	f000 fa82 	bl	8000c82 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_ADC2_Init+0xc8>)
 8000780:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000782:	2306      	movs	r3, #6
 8000784:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800078a:	237f      	movs	r3, #127	@ 0x7f
 800078c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800078e:	2304      	movs	r3, #4
 8000790:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 800079c:	f002 f87e 	bl	800289c <HAL_ADC_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007a6:	f000 fa6c 	bl	8000c82 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	3720      	adds	r7, #32
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000170 	.word	0x20000170
 80007b8:	50000100 	.word	0x50000100
 80007bc:	19200040 	.word	0x19200040

080007c0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b0a4      	sub	sp, #144	@ 0x90
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007dc:	2254      	movs	r2, #84	@ 0x54
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f008 fa57 	bl	8008c94 <memset>
  if(adcHandle->Instance==ADC1)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ee:	f040 80a8 	bne.w	8000942 <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007f8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000802:	4618      	mov	r0, r3
 8000804:	f004 fbe6 	bl	8004fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800080e:	f000 fa38 	bl	8000c82 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000812:	4b81      	ldr	r3, [pc, #516]	@ (8000a18 <HAL_ADC_MspInit+0x258>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a7f      	ldr	r2, [pc, #508]	@ (8000a18 <HAL_ADC_MspInit+0x258>)
 800081a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800081c:	4b7e      	ldr	r3, [pc, #504]	@ (8000a18 <HAL_ADC_MspInit+0x258>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d10b      	bne.n	800083c <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000824:	4b7d      	ldr	r3, [pc, #500]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 8000826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000828:	4a7c      	ldr	r2, [pc, #496]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 800082a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800082e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000830:	4b7a      	ldr	r3, [pc, #488]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 8000832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
 800083a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800083c:	4b77      	ldr	r3, [pc, #476]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 800083e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000840:	4a76      	ldr	r2, [pc, #472]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000848:	4b74      	ldr	r3, [pc, #464]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084c:	f003 0304 	and.w	r3, r3, #4
 8000850:	623b      	str	r3, [r7, #32]
 8000852:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b71      	ldr	r3, [pc, #452]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 8000856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000858:	4a70      	ldr	r2, [pc, #448]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000860:	4b6e      	ldr	r3, [pc, #440]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 8000862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
 800086a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800086c:	4b6b      	ldr	r3, [pc, #428]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 800086e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000870:	4a6a      	ldr	r2, [pc, #424]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 8000872:	f043 0302 	orr.w	r3, r3, #2
 8000876:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000878:	4b68      	ldr	r3, [pc, #416]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 800087a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
 8000882:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000884:	2304      	movs	r3, #4
 8000886:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000888:	2303      	movs	r3, #3
 800088a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000898:	4619      	mov	r1, r3
 800089a:	4861      	ldr	r0, [pc, #388]	@ (8000a20 <HAL_ADC_MspInit+0x260>)
 800089c:	f003 fbc8 	bl	8004030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80008a0:	2302      	movs	r3, #2
 80008a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a4:	2303      	movs	r3, #3
 80008a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008b4:	4619      	mov	r1, r3
 80008b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ba:	f003 fbb9 	bl	8004030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|V_Imes_Pin;
 80008be:	2303      	movs	r3, #3
 80008c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c2:	2303      	movs	r3, #3
 80008c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008d2:	4619      	mov	r1, r3
 80008d4:	4853      	ldr	r0, [pc, #332]	@ (8000a24 <HAL_ADC_MspInit+0x264>)
 80008d6:	f003 fbab 	bl	8004030 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008da:	4b53      	ldr	r3, [pc, #332]	@ (8000a28 <HAL_ADC_MspInit+0x268>)
 80008dc:	4a53      	ldr	r2, [pc, #332]	@ (8000a2c <HAL_ADC_MspInit+0x26c>)
 80008de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008e0:	4b51      	ldr	r3, [pc, #324]	@ (8000a28 <HAL_ADC_MspInit+0x268>)
 80008e2:	2205      	movs	r2, #5
 80008e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008e6:	4b50      	ldr	r3, [pc, #320]	@ (8000a28 <HAL_ADC_MspInit+0x268>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ec:	4b4e      	ldr	r3, [pc, #312]	@ (8000a28 <HAL_ADC_MspInit+0x268>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008f2:	4b4d      	ldr	r3, [pc, #308]	@ (8000a28 <HAL_ADC_MspInit+0x268>)
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008f8:	4b4b      	ldr	r3, [pc, #300]	@ (8000a28 <HAL_ADC_MspInit+0x268>)
 80008fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008fe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000900:	4b49      	ldr	r3, [pc, #292]	@ (8000a28 <HAL_ADC_MspInit+0x268>)
 8000902:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000906:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000908:	4b47      	ldr	r3, [pc, #284]	@ (8000a28 <HAL_ADC_MspInit+0x268>)
 800090a:	2220      	movs	r2, #32
 800090c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800090e:	4b46      	ldr	r3, [pc, #280]	@ (8000a28 <HAL_ADC_MspInit+0x268>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000914:	4844      	ldr	r0, [pc, #272]	@ (8000a28 <HAL_ADC_MspInit+0x268>)
 8000916:	f003 f859 	bl	80039cc <HAL_DMA_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8000920:	f000 f9af 	bl	8000c82 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a40      	ldr	r2, [pc, #256]	@ (8000a28 <HAL_ADC_MspInit+0x268>)
 8000928:	655a      	str	r2, [r3, #84]	@ 0x54
 800092a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a28 <HAL_ADC_MspInit+0x268>)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	2012      	movs	r0, #18
 8000936:	f003 f821 	bl	800397c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800093a:	2012      	movs	r0, #18
 800093c:	f003 f838 	bl	80039b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000940:	e066      	b.n	8000a10 <HAL_ADC_MspInit+0x250>
  else if(adcHandle->Instance==ADC2)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a3a      	ldr	r2, [pc, #232]	@ (8000a30 <HAL_ADC_MspInit+0x270>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d161      	bne.n	8000a10 <HAL_ADC_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800094c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000952:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000956:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000958:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800095c:	4618      	mov	r0, r3
 800095e:	f004 fb39 	bl	8004fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <HAL_ADC_MspInit+0x1ac>
      Error_Handler();
 8000968:	f000 f98b 	bl	8000c82 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800096c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a18 <HAL_ADC_MspInit+0x258>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	4a29      	ldr	r2, [pc, #164]	@ (8000a18 <HAL_ADC_MspInit+0x258>)
 8000974:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000976:	4b28      	ldr	r3, [pc, #160]	@ (8000a18 <HAL_ADC_MspInit+0x258>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d10b      	bne.n	8000996 <HAL_ADC_MspInit+0x1d6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800097e:	4b27      	ldr	r3, [pc, #156]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	4a26      	ldr	r2, [pc, #152]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 8000984:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098a:	4b24      	ldr	r3, [pc, #144]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b21      	ldr	r3, [pc, #132]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	4a20      	ldr	r2, [pc, #128]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <HAL_ADC_MspInit+0x25c>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80009c6:	230b      	movs	r3, #11
 80009c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ca:	2303      	movs	r3, #3
 80009cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80009da:	4619      	mov	r1, r3
 80009dc:	4810      	ldr	r0, [pc, #64]	@ (8000a20 <HAL_ADC_MspInit+0x260>)
 80009de:	f003 fb27 	bl	8004030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80009e2:	2301      	movs	r3, #1
 80009e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e6:	2303      	movs	r3, #3
 80009e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80009f6:	4619      	mov	r1, r3
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fc:	f003 fb18 	bl	8004030 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	2012      	movs	r0, #18
 8000a06:	f002 ffb9 	bl	800397c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a0a:	2012      	movs	r0, #18
 8000a0c:	f002 ffd0 	bl	80039b0 <HAL_NVIC_EnableIRQ>
}
 8000a10:	bf00      	nop
 8000a12:	3790      	adds	r7, #144	@ 0x90
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	2000023c 	.word	0x2000023c
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48000800 	.word	0x48000800
 8000a24:	48000400 	.word	0x48000400
 8000a28:	200001dc 	.word	0x200001dc
 8000a2c:	40020008 	.word	0x40020008
 8000a30:	50000100 	.word	0x50000100

08000a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a3a:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <MX_DMA_Init+0x50>)
 8000a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a3e:	4a11      	ldr	r2, [pc, #68]	@ (8000a84 <MX_DMA_Init+0x50>)
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a46:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_DMA_Init+0x50>)
 8000a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a4a:	f003 0304 	and.w	r3, r3, #4
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <MX_DMA_Init+0x50>)
 8000a54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a56:	4a0b      	ldr	r2, [pc, #44]	@ (8000a84 <MX_DMA_Init+0x50>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <MX_DMA_Init+0x50>)
 8000a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	200b      	movs	r0, #11
 8000a70:	f002 ff84 	bl	800397c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a74:	200b      	movs	r0, #11
 8000a76:	f002 ff9b 	bl	80039b0 <HAL_NVIC_EnableIRQ>

}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	4a3e      	ldr	r2, [pc, #248]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab6:	4b39      	ldr	r3, [pc, #228]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	4a38      	ldr	r2, [pc, #224]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000abc:	f043 0320 	orr.w	r3, r3, #32
 8000ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac2:	4b36      	ldr	r3, [pc, #216]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	f003 0320 	and.w	r3, r3, #32
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b33      	ldr	r3, [pc, #204]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	4a32      	ldr	r2, [pc, #200]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ada:	4b30      	ldr	r3, [pc, #192]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	4a2c      	ldr	r2, [pc, #176]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afe:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	4a26      	ldr	r2, [pc, #152]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0a:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <MX_GPIO_Init+0x114>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2120      	movs	r1, #32
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1e:	f003 fc09 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2104      	movs	r1, #4
 8000b26:	481e      	ldr	r0, [pc, #120]	@ (8000ba0 <MX_GPIO_Init+0x118>)
 8000b28:	f003 fc04 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000b2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b32:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4818      	ldr	r0, [pc, #96]	@ (8000ba4 <MX_GPIO_Init+0x11c>)
 8000b44:	f003 fa74 	bl	8004030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000b48:	2320      	movs	r3, #32
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b62:	f003 fa65 	bl	8004030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000b66:	2304      	movs	r3, #4
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4808      	ldr	r0, [pc, #32]	@ (8000ba0 <MX_GPIO_Init+0x118>)
 8000b7e:	f003 fa57 	bl	8004030 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	2028      	movs	r0, #40	@ 0x28
 8000b88:	f002 fef8 	bl	800397c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b8c:	2028      	movs	r0, #40	@ 0x28
 8000b8e:	f002 ff0f 	bl	80039b0 <HAL_NVIC_EnableIRQ>

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	@ 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	48000c00 	.word	0x48000c00
 8000ba4:	48000800 	.word	0x48000800

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fea9 	bl	8001902 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f81e 	bl	8000bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f7ff ff68 	bl	8000a88 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bb8:	f7ff ff3c 	bl	8000a34 <MX_DMA_Init>
  MX_ADC2_Init();
 8000bbc:	f7ff fd9a 	bl	80006f4 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000bc0:	f7ff fcfe 	bl	80005c0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000bc4:	f000 f9c8 	bl	8000f58 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000bc8:	f000 fa74 	bl	80010b4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000bcc:	f000 fc12 	bl	80013f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000bd0:	f000 fc5c 	bl	800148c <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000bd4:	f000 faba 	bl	800114c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	Shell_Init();
 8000bd8:	f000 fe14 	bl	8001804 <Shell_Init>
	start_adc();
 8000bdc:	f000 fd4a 	bl	8001674 <start_adc>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//Shell_Loop();
		mesure_courant();
 8000be0:	f000 fd64 	bl	80016ac <mesure_courant>
		HAL_Delay(1000);
 8000be4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000be8:	f000 fec2 	bl	8001970 <HAL_Delay>
		mesure_courant();
 8000bec:	bf00      	nop
 8000bee:	e7f7      	b.n	8000be0 <main+0x38>

08000bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b094      	sub	sp, #80	@ 0x50
 8000bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf6:	f107 0318 	add.w	r3, r7, #24
 8000bfa:	2238      	movs	r2, #56	@ 0x38
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f008 f848 	bl	8008c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f003 fbca 	bl	80043ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c20:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c26:	2303      	movs	r3, #3
 8000c28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000c2a:	2306      	movs	r3, #6
 8000c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c2e:	2355      	movs	r3, #85	@ 0x55
 8000c30:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c36:	2302      	movs	r3, #2
 8000c38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3e:	f107 0318 	add.w	r3, r7, #24
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 fc66 	bl	8004514 <HAL_RCC_OscConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c4e:	f000 f818 	bl	8000c82 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c52:	230f      	movs	r3, #15
 8000c54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c56:	2303      	movs	r3, #3
 8000c58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2104      	movs	r1, #4
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 ff64 	bl	8004b38 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c76:	f000 f804 	bl	8000c82 <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3750      	adds	r7, #80	@ 0x50
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c86:	b672      	cpsid	i
}
 8000c88:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c8a:	bf00      	nop
 8000c8c:	e7fd      	b.n	8000c8a <Error_Handler+0x8>
	...

08000c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb2:	4a08      	ldr	r2, [pc, #32]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cc6:	f003 fc15 	bl	80044f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	@ 0x30
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d9c <HAL_InitTick+0xc4>)
 8000cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cec:	4a2b      	ldr	r2, [pc, #172]	@ (8000d9c <HAL_InitTick+0xc4>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cf4:	4b29      	ldr	r3, [pc, #164]	@ (8000d9c <HAL_InitTick+0xc4>)
 8000cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d00:	f107 020c 	add.w	r2, r7, #12
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f004 f8ea 	bl	8004ee4 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d10:	f004 f8bc 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 8000d14:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d18:	4a21      	ldr	r2, [pc, #132]	@ (8000da0 <HAL_InitTick+0xc8>)
 8000d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1e:	0c9b      	lsrs	r3, r3, #18
 8000d20:	3b01      	subs	r3, #1
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <HAL_InitTick+0xcc>)
 8000d26:	4a20      	ldr	r2, [pc, #128]	@ (8000da8 <HAL_InitTick+0xd0>)
 8000d28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <HAL_InitTick+0xcc>)
 8000d2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d30:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d32:	4a1c      	ldr	r2, [pc, #112]	@ (8000da4 <HAL_InitTick+0xcc>)
 8000d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d36:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <HAL_InitTick+0xcc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <HAL_InitTick+0xcc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000d44:	4817      	ldr	r0, [pc, #92]	@ (8000da4 <HAL_InitTick+0xcc>)
 8000d46:	f004 fb93 	bl	8005470 <HAL_TIM_Base_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000d50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d11b      	bne.n	8000d90 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d58:	4812      	ldr	r0, [pc, #72]	@ (8000da4 <HAL_InitTick+0xcc>)
 8000d5a:	f004 fc51 	bl	8005600 <HAL_TIM_Base_Start_IT>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000d64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d111      	bne.n	8000d90 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d6c:	2036      	movs	r0, #54	@ 0x36
 8000d6e:	f002 fe1f 	bl	80039b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b0f      	cmp	r3, #15
 8000d76:	d808      	bhi.n	8000d8a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	2036      	movs	r0, #54	@ 0x36
 8000d7e:	f002 fdfd 	bl	800397c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <HAL_InitTick+0xd4>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	e002      	b.n	8000d90 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3730      	adds	r7, #48	@ 0x30
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	431bde83 	.word	0x431bde83
 8000da4:	20000240 	.word	0x20000240
 8000da8:	40001000 	.word	0x40001000
 8000dac:	20000090 	.word	0x20000090

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <NMI_Handler+0x4>

08000db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <DMA1_Channel1_IRQHandler+0x10>)
 8000e16:	f002 ffbc 	bl	8003d92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200001dc 	.word	0x200001dc

08000e24 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e28:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <ADC1_2_IRQHandler+0x14>)
 8000e2a:	f001 fab9 	bl	80023a0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000e2e:	4803      	ldr	r0, [pc, #12]	@ (8000e3c <ADC1_2_IRQHandler+0x18>)
 8000e30:	f001 fab6 	bl	80023a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000104 	.word	0x20000104
 8000e3c:	20000170 	.word	0x20000170

08000e40 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e44:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e46:	f004 fcaa 	bl	800579e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000290 	.word	0x20000290

08000e54 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e58:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000e5a:	f004 fca0 	bl	800579e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000290 	.word	0x20000290

08000e68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e6c:	4802      	ldr	r0, [pc, #8]	@ (8000e78 <USART2_IRQHandler+0x10>)
 8000e6e:	f005 febd 	bl	8006bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000374 	.word	0x20000374

08000e7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <USART3_IRQHandler+0x10>)
 8000e82:	f005 feb3 	bl	8006bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000408 	.word	0x20000408

08000e90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000e94:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e98:	f003 fa64 	bl	8004364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <TIM6_DAC_IRQHandler+0x10>)
 8000ea6:	f004 fc7a 	bl	800579e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000240 	.word	0x20000240

08000eb4 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <TIM7_DAC_IRQHandler+0x10>)
 8000eba:	f004 fc70 	bl	800579e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000328 	.word	0x20000328

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	@ (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f007 fed4 	bl	8008ca4 <__errno>
 8000efc:	4603      	mov	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <_sbrk+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20020000 	.word	0x20020000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	2000028c 	.word	0x2000028c
 8000f30:	200006b0 	.word	0x200006b0

08000f34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b098      	sub	sp, #96	@ 0x60
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]
 8000f7a:	615a      	str	r2, [r3, #20]
 8000f7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2234      	movs	r2, #52	@ 0x34
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f007 fe85 	bl	8008c94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f8a:	4b48      	ldr	r3, [pc, #288]	@ (80010ac <MX_TIM1_Init+0x154>)
 8000f8c:	4a48      	ldr	r2, [pc, #288]	@ (80010b0 <MX_TIM1_Init+0x158>)
 8000f8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f90:	4b46      	ldr	r3, [pc, #280]	@ (80010ac <MX_TIM1_Init+0x154>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f96:	4b45      	ldr	r3, [pc, #276]	@ (80010ac <MX_TIM1_Init+0x154>)
 8000f98:	2220      	movs	r2, #32
 8000f9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8000f9c:	4b43      	ldr	r3, [pc, #268]	@ (80010ac <MX_TIM1_Init+0x154>)
 8000f9e:	f242 1233 	movw	r2, #8499	@ 0x2133
 8000fa2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa4:	4b41      	ldr	r3, [pc, #260]	@ (80010ac <MX_TIM1_Init+0x154>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000faa:	4b40      	ldr	r3, [pc, #256]	@ (80010ac <MX_TIM1_Init+0x154>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb0:	4b3e      	ldr	r3, [pc, #248]	@ (80010ac <MX_TIM1_Init+0x154>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fb6:	483d      	ldr	r0, [pc, #244]	@ (80010ac <MX_TIM1_Init+0x154>)
 8000fb8:	f004 fb9a 	bl	80056f0 <HAL_TIM_PWM_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000fc2:	f7ff fe5e 	bl	8000c82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fc6:	2320      	movs	r3, #32
 8000fc8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fd2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4834      	ldr	r0, [pc, #208]	@ (80010ac <MX_TIM1_Init+0x154>)
 8000fda:	f005 fb6d 	bl	80066b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fe4:	f7ff fe4d 	bl	8000c82 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe8:	2360      	movs	r3, #96	@ 0x60
 8000fea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 4249;
 8000fec:	f241 0399 	movw	r3, #4249	@ 0x1099
 8000ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001006:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800100a:	2200      	movs	r2, #0
 800100c:	4619      	mov	r1, r3
 800100e:	4827      	ldr	r0, [pc, #156]	@ (80010ac <MX_TIM1_Init+0x154>)
 8001010:	f004 fd14 	bl	8005a3c <HAL_TIM_PWM_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800101a:	f7ff fe32 	bl	8000c82 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800101e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001022:	2204      	movs	r2, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4821      	ldr	r0, [pc, #132]	@ (80010ac <MX_TIM1_Init+0x154>)
 8001028:	f004 fd08 	bl	8005a3c <HAL_TIM_PWM_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001032:	f7ff fe26 	bl	8000c82 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800103a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800103e:	2208      	movs	r2, #8
 8001040:	4619      	mov	r1, r3
 8001042:	481a      	ldr	r0, [pc, #104]	@ (80010ac <MX_TIM1_Init+0x154>)
 8001044:	f004 fcfa 	bl	8005a3c <HAL_TIM_PWM_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800104e:	f7ff fe18 	bl	8000c82 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 800105e:	2314      	movs	r3, #20
 8001060:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001066:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800106a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001078:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001082:	2300      	movs	r3, #0
 8001084:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4807      	ldr	r0, [pc, #28]	@ (80010ac <MX_TIM1_Init+0x154>)
 8001090:	f005 fba8 	bl	80067e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800109a:	f7ff fdf2 	bl	8000c82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800109e:	4803      	ldr	r0, [pc, #12]	@ (80010ac <MX_TIM1_Init+0x154>)
 80010a0:	f000 f940 	bl	8001324 <HAL_TIM_MspPostInit>

}
 80010a4:	bf00      	nop
 80010a6:	3760      	adds	r7, #96	@ 0x60
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000290 	.word	0x20000290
 80010b0:	40012c00 	.word	0x40012c00

080010b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001144 <MX_TIM3_Init+0x90>)
 80010d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001148 <MX_TIM3_Init+0x94>)
 80010d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <MX_TIM3_Init+0x90>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010de:	4b19      	ldr	r3, [pc, #100]	@ (8001144 <MX_TIM3_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010e4:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <MX_TIM3_Init+0x90>)
 80010e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <MX_TIM3_Init+0x90>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f2:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <MX_TIM3_Init+0x90>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4619      	mov	r1, r3
 800110e:	480d      	ldr	r0, [pc, #52]	@ (8001144 <MX_TIM3_Init+0x90>)
 8001110:	f005 fa22 	bl	8006558 <HAL_TIMEx_HallSensor_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800111a:	f7ff fdb2 	bl	8000c82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800111e:	2350      	movs	r3, #80	@ 0x50
 8001120:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	@ (8001144 <MX_TIM3_Init+0x90>)
 800112c:	f005 fac4 	bl	80066b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001136:	f7ff fda4 	bl	8000c82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	3720      	adds	r7, #32
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200002dc 	.word	0x200002dc
 8001148:	40000400 	.word	0x40000400

0800114c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800115c:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <MX_TIM7_Init+0x64>)
 800115e:	4a15      	ldr	r2, [pc, #84]	@ (80011b4 <MX_TIM7_Init+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 8001162:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <MX_TIM7_Init+0x64>)
 8001164:	22a9      	movs	r2, #169	@ 0xa9
 8001166:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <MX_TIM7_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800116e:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <MX_TIM7_Init+0x64>)
 8001170:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001174:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001176:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <MX_TIM7_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800117c:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <MX_TIM7_Init+0x64>)
 800117e:	f004 f977 	bl	8005470 <HAL_TIM_Base_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001188:	f7ff fd7b 	bl	8000c82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_TIM7_Init+0x64>)
 800119a:	f005 fa8d 	bl	80066b8 <HAL_TIMEx_MasterConfigSynchronization>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80011a4:	f7ff fd6d 	bl	8000c82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000328 	.word	0x20000328
 80011b4:	40001400 	.word	0x40001400

080011b8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a11      	ldr	r2, [pc, #68]	@ (800120c <HAL_TIM_PWM_MspInit+0x54>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d11b      	bne.n	8001202 <HAL_TIM_PWM_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <HAL_TIM_PWM_MspInit+0x58>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ce:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <HAL_TIM_PWM_MspInit+0x58>)
 80011d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <HAL_TIM_PWM_MspInit+0x58>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	2019      	movs	r0, #25
 80011e8:	f002 fbc8 	bl	800397c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80011ec:	2019      	movs	r0, #25
 80011ee:	f002 fbdf 	bl	80039b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	201a      	movs	r0, #26
 80011f8:	f002 fbc0 	bl	800397c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80011fc:	201a      	movs	r0, #26
 80011fe:	f002 fbd7 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40012c00 	.word	0x40012c00
 8001210:	40021000 	.word	0x40021000

08001214 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a26      	ldr	r2, [pc, #152]	@ (80012cc <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d145      	bne.n	80012c2 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001236:	4b26      	ldr	r3, [pc, #152]	@ (80012d0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123a:	4a25      	ldr	r2, [pc, #148]	@ (80012d0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6593      	str	r3, [r2, #88]	@ 0x58
 8001242:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	4a1f      	ldr	r2, [pc, #124]	@ (80012d0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125a:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a19      	ldr	r2, [pc, #100]	@ (80012d0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800127e:	2350      	movs	r3, #80	@ 0x50
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800128e:	2302      	movs	r3, #2
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129c:	f002 fec8 	bl	8004030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012b2:	2302      	movs	r3, #2
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80012be:	f002 feb7 	bl	8004030 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012c2:	bf00      	nop
 80012c4:	3728      	adds	r7, #40	@ 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40000400 	.word	0x40000400
 80012d0:	40021000 	.word	0x40021000
 80012d4:	48000800 	.word	0x48000800

080012d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0d      	ldr	r2, [pc, #52]	@ (800131c <HAL_TIM_Base_MspInit+0x44>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d113      	bne.n	8001312 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80012ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <HAL_TIM_Base_MspInit+0x48>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001320 <HAL_TIM_Base_MspInit+0x48>)
 80012f0:	f043 0320 	orr.w	r3, r3, #32
 80012f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <HAL_TIM_Base_MspInit+0x48>)
 80012f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fa:	f003 0320 	and.w	r3, r3, #32
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2037      	movs	r0, #55	@ 0x37
 8001308:	f002 fb38 	bl	800397c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800130c:	2037      	movs	r0, #55	@ 0x37
 800130e:	f002 fb4f 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40001400 	.word	0x40001400
 8001320:	40021000 	.word	0x40021000

08001324 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	@ 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a29      	ldr	r2, [pc, #164]	@ (80013e8 <HAL_TIM_MspPostInit+0xc4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d14b      	bne.n	80013de <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	4b29      	ldr	r3, [pc, #164]	@ (80013ec <HAL_TIM_MspPostInit+0xc8>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	4a28      	ldr	r2, [pc, #160]	@ (80013ec <HAL_TIM_MspPostInit+0xc8>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001352:	4b26      	ldr	r3, [pc, #152]	@ (80013ec <HAL_TIM_MspPostInit+0xc8>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <HAL_TIM_MspPostInit+0xc8>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	4a22      	ldr	r2, [pc, #136]	@ (80013ec <HAL_TIM_MspPostInit+0xc8>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136a:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <HAL_TIM_MspPostInit+0xc8>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001376:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001388:	2306      	movs	r3, #6
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	4817      	ldr	r0, [pc, #92]	@ (80013f0 <HAL_TIM_MspPostInit+0xcc>)
 8001394:	f002 fe4c 	bl	8004030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001398:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80013aa:	2304      	movs	r3, #4
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	480e      	ldr	r0, [pc, #56]	@ (80013f0 <HAL_TIM_MspPostInit+0xcc>)
 80013b6:	f002 fe3b 	bl	8004030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80013ba:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80013cc:	2306      	movs	r3, #6
 80013ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013da:	f002 fe29 	bl	8004030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	@ 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40012c00 	.word	0x40012c00
 80013ec:	40021000 	.word	0x40021000
 80013f0:	48000400 	.word	0x48000400

080013f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f8:	4b22      	ldr	r3, [pc, #136]	@ (8001484 <MX_USART2_UART_Init+0x90>)
 80013fa:	4a23      	ldr	r2, [pc, #140]	@ (8001488 <MX_USART2_UART_Init+0x94>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fe:	4b21      	ldr	r3, [pc, #132]	@ (8001484 <MX_USART2_UART_Init+0x90>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <MX_USART2_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <MX_USART2_UART_Init+0x90>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001412:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <MX_USART2_UART_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <MX_USART2_UART_Init+0x90>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <MX_USART2_UART_Init+0x90>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <MX_USART2_UART_Init+0x90>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142a:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <MX_USART2_UART_Init+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <MX_USART2_UART_Init+0x90>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <MX_USART2_UART_Init+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800143c:	4811      	ldr	r0, [pc, #68]	@ (8001484 <MX_USART2_UART_Init+0x90>)
 800143e:	f005 faab 	bl	8006998 <HAL_UART_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001448:	f7ff fc1b 	bl	8000c82 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800144c:	2100      	movs	r1, #0
 800144e:	480d      	ldr	r0, [pc, #52]	@ (8001484 <MX_USART2_UART_Init+0x90>)
 8001450:	f007 fb21 	bl	8008a96 <HAL_UARTEx_SetTxFifoThreshold>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800145a:	f7ff fc12 	bl	8000c82 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145e:	2100      	movs	r1, #0
 8001460:	4808      	ldr	r0, [pc, #32]	@ (8001484 <MX_USART2_UART_Init+0x90>)
 8001462:	f007 fb56 	bl	8008b12 <HAL_UARTEx_SetRxFifoThreshold>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800146c:	f7ff fc09 	bl	8000c82 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <MX_USART2_UART_Init+0x90>)
 8001472:	f007 fad7 	bl	8008a24 <HAL_UARTEx_DisableFifoMode>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800147c:	f7ff fc01 	bl	8000c82 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000374 	.word	0x20000374
 8001488:	40004400 	.word	0x40004400

0800148c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001490:	4b22      	ldr	r3, [pc, #136]	@ (800151c <MX_USART3_UART_Init+0x90>)
 8001492:	4a23      	ldr	r2, [pc, #140]	@ (8001520 <MX_USART3_UART_Init+0x94>)
 8001494:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001496:	4b21      	ldr	r3, [pc, #132]	@ (800151c <MX_USART3_UART_Init+0x90>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <MX_USART3_UART_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	@ (800151c <MX_USART3_UART_Init+0x90>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <MX_USART3_UART_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	@ (800151c <MX_USART3_UART_Init+0x90>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b19      	ldr	r3, [pc, #100]	@ (800151c <MX_USART3_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b17      	ldr	r3, [pc, #92]	@ (800151c <MX_USART3_UART_Init+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c2:	4b16      	ldr	r3, [pc, #88]	@ (800151c <MX_USART3_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014c8:	4b14      	ldr	r3, [pc, #80]	@ (800151c <MX_USART3_UART_Init+0x90>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <MX_USART3_UART_Init+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014d4:	4811      	ldr	r0, [pc, #68]	@ (800151c <MX_USART3_UART_Init+0x90>)
 80014d6:	f005 fa5f 	bl	8006998 <HAL_UART_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014e0:	f7ff fbcf 	bl	8000c82 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e4:	2100      	movs	r1, #0
 80014e6:	480d      	ldr	r0, [pc, #52]	@ (800151c <MX_USART3_UART_Init+0x90>)
 80014e8:	f007 fad5 	bl	8008a96 <HAL_UARTEx_SetTxFifoThreshold>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014f2:	f7ff fbc6 	bl	8000c82 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4808      	ldr	r0, [pc, #32]	@ (800151c <MX_USART3_UART_Init+0x90>)
 80014fa:	f007 fb0a 	bl	8008b12 <HAL_UARTEx_SetRxFifoThreshold>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001504:	f7ff fbbd 	bl	8000c82 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001508:	4804      	ldr	r0, [pc, #16]	@ (800151c <MX_USART3_UART_Init+0x90>)
 800150a:	f007 fa8b 	bl	8008a24 <HAL_UARTEx_DisableFifoMode>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001514:	f7ff fbb5 	bl	8000c82 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000408 	.word	0x20000408
 8001520:	40004800 	.word	0x40004800

08001524 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b0a0      	sub	sp, #128	@ 0x80
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800153c:	f107 0318 	add.w	r3, r7, #24
 8001540:	2254      	movs	r2, #84	@ 0x54
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f007 fba5 	bl	8008c94 <memset>
  if(uartHandle->Instance==USART2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a45      	ldr	r2, [pc, #276]	@ (8001664 <HAL_UART_MspInit+0x140>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d13f      	bne.n	80015d4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155c:	f107 0318 	add.w	r3, r7, #24
 8001560:	4618      	mov	r0, r3
 8001562:	f003 fd37 	bl	8004fd4 <HAL_RCCEx_PeriphCLKConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800156c:	f7ff fb89 	bl	8000c82 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001570:	4b3d      	ldr	r3, [pc, #244]	@ (8001668 <HAL_UART_MspInit+0x144>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001574:	4a3c      	ldr	r2, [pc, #240]	@ (8001668 <HAL_UART_MspInit+0x144>)
 8001576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800157a:	6593      	str	r3, [r2, #88]	@ 0x58
 800157c:	4b3a      	ldr	r3, [pc, #232]	@ (8001668 <HAL_UART_MspInit+0x144>)
 800157e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	4b37      	ldr	r3, [pc, #220]	@ (8001668 <HAL_UART_MspInit+0x144>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158c:	4a36      	ldr	r2, [pc, #216]	@ (8001668 <HAL_UART_MspInit+0x144>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001594:	4b34      	ldr	r3, [pc, #208]	@ (8001668 <HAL_UART_MspInit+0x144>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015a0:	230c      	movs	r3, #12
 80015a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b0:	2307      	movs	r3, #7
 80015b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80015b8:	4619      	mov	r1, r3
 80015ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015be:	f002 fd37 	bl	8004030 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2026      	movs	r0, #38	@ 0x26
 80015c8:	f002 f9d8 	bl	800397c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015cc:	2026      	movs	r0, #38	@ 0x26
 80015ce:	f002 f9ef 	bl	80039b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015d2:	e043      	b.n	800165c <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a24      	ldr	r2, [pc, #144]	@ (800166c <HAL_UART_MspInit+0x148>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d13e      	bne.n	800165c <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015de:	2304      	movs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e6:	f107 0318 	add.w	r3, r7, #24
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fcf2 	bl	8004fd4 <HAL_RCCEx_PeriphCLKConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80015f6:	f7ff fb44 	bl	8000c82 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <HAL_UART_MspInit+0x144>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001668 <HAL_UART_MspInit+0x144>)
 8001600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001604:	6593      	str	r3, [r2, #88]	@ 0x58
 8001606:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <HAL_UART_MspInit+0x144>)
 8001608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_UART_MspInit+0x144>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001616:	4a14      	ldr	r2, [pc, #80]	@ (8001668 <HAL_UART_MspInit+0x144>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161e:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_UART_MspInit+0x144>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800162a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800162e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800163c:	2307      	movs	r3, #7
 800163e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001640:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001644:	4619      	mov	r1, r3
 8001646:	480a      	ldr	r0, [pc, #40]	@ (8001670 <HAL_UART_MspInit+0x14c>)
 8001648:	f002 fcf2 	bl	8004030 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	2027      	movs	r0, #39	@ 0x27
 8001652:	f002 f993 	bl	800397c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001656:	2027      	movs	r0, #39	@ 0x27
 8001658:	f002 f9aa 	bl	80039b0 <HAL_NVIC_EnableIRQ>
}
 800165c:	bf00      	nop
 800165e:	3780      	adds	r7, #128	@ 0x80
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40004400 	.word	0x40004400
 8001668:	40021000 	.word	0x40021000
 800166c:	40004800 	.word	0x40004800
 8001670:	48000800 	.word	0x48000800

08001674 <start_adc>:
uint8_t adc_value_available = 0;
uint32_t adc_values[CHANNEL_QUANTITY];


void start_adc()
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	memset(adc_values, 0, sizeof(adc_values)); // Set all values of adc_values to 0
 8001678:	220c      	movs	r2, #12
 800167a:	2100      	movs	r1, #0
 800167c:	4808      	ldr	r0, [pc, #32]	@ (80016a0 <start_adc+0x2c>)
 800167e:	f007 fb09 	bl	8008c94 <memset>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001682:	217f      	movs	r1, #127	@ 0x7f
 8001684:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <start_adc+0x30>)
 8001686:	f001 ff25 	bl	80034d4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_values, CHANNEL_QUANTITY);
 800168a:	2203      	movs	r2, #3
 800168c:	4904      	ldr	r1, [pc, #16]	@ (80016a0 <start_adc+0x2c>)
 800168e:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <start_adc+0x30>)
 8001690:	f000 fdb2 	bl	80021f8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim1);
 8001694:	4804      	ldr	r0, [pc, #16]	@ (80016a8 <start_adc+0x34>)
 8001696:	f003 ff43 	bl	8005520 <HAL_TIM_Base_Start>
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200004a0 	.word	0x200004a0
 80016a4:	20000104 	.word	0x20000104
 80016a8:	20000290 	.word	0x20000290

080016ac <mesure_courant>:
void mesure_courant()
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	@ 0x30
 80016b0:	af02      	add	r7, sp, #8

    ADC_ChannelConfTypeDef sConfig = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2220      	movs	r2, #32
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f007 faeb 	bl	8008c94 <memset>
    // Example: Select ADC Channel 1 (assuming it's configured in CubeMX)
    if(adc_value_available)
 80016be:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <mesure_courant+0x58>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d019      	beq.n	80016fa <mesure_courant+0x4e>
    {
    	uint8_t buffer[1];
    	int len = snprintf((char *)buffer, 1, "adc values :%lu,%lu,%lu \r\n",(unsigned long)adc_values[0],(unsigned long)adc_values[1],(unsigned long)adc_values[2]);
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <mesure_courant+0x5c>)
 80016c8:	6819      	ldr	r1, [r3, #0]
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <mesure_courant+0x5c>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001708 <mesure_courant+0x5c>)
 80016d0:	6892      	ldr	r2, [r2, #8]
 80016d2:	4638      	mov	r0, r7
 80016d4:	9201      	str	r2, [sp, #4]
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	460b      	mov	r3, r1
 80016da:	4a0c      	ldr	r2, [pc, #48]	@ (800170c <mesure_courant+0x60>)
 80016dc:	2101      	movs	r1, #1
 80016de:	f007 faa5 	bl	8008c2c <sniprintf>
 80016e2:	6278      	str	r0, [r7, #36]	@ 0x24
    	HAL_UART_Transmit(&huart2, buffer, len, HAL_MAX_DELAY);
 80016e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	4639      	mov	r1, r7
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ee:	4808      	ldr	r0, [pc, #32]	@ (8001710 <mesure_courant+0x64>)
 80016f0:	f005 f9a2 	bl	8006a38 <HAL_UART_Transmit>
        adc_value_available = 0;
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <mesure_courant+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
    }

}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	@ 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000049c 	.word	0x2000049c
 8001708:	200004a0 	.word	0x200004a0
 800170c:	080095ac 	.word	0x080095ac
 8001710:	20000374 	.word	0x20000374

08001714 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	if(ADC1 == hadc->Instance)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001724:	d102      	bne.n	800172c <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc_value_available = 1;
 8001726:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <HAL_ADC_ConvCpltCallback+0x24>)
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
	}
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	2000049c 	.word	0x2000049c

0800173c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a29      	ldr	r2, [pc, #164]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d101      	bne.n	8001752 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800174e:	f000 f8f1 	bl	8001934 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM7)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a27      	ldr	r2, [pc, #156]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d145      	bne.n	80017e8 <HAL_TIM_PeriodElapsedCallback+0xac>
	{
		if(pwm_handle.interrupt_counter < RAMP_TIME - 1) //on update la valeur de pulse chaque miliseconde
 800175c:	4b26      	ldr	r3, [pc, #152]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800175e:	899b      	ldrh	r3, [r3, #12]
 8001760:	f241 726e 	movw	r2, #5998	@ 0x176e
 8001764:	4293      	cmp	r3, r2
 8001766:	d83f      	bhi.n	80017e8 <HAL_TIM_PeriodElapsedCallback+0xac>
		{
			pwm_handle.intermediate_pulse1 = pwm_handle.previous_pulse1 + (pwm_handle.pulse1 - pwm_handle.previous_pulse1)  * (pwm_handle.interrupt_counter+1)/RAMP_TIME ;
 8001768:	4b23      	ldr	r3, [pc, #140]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800176a:	889a      	ldrh	r2, [r3, #4]
 800176c:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	4619      	mov	r1, r3
 8001772:	4b21      	ldr	r3, [pc, #132]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001774:	889b      	ldrh	r3, [r3, #4]
 8001776:	1acb      	subs	r3, r1, r3
 8001778:	491f      	ldr	r1, [pc, #124]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800177a:	8989      	ldrh	r1, [r1, #12]
 800177c:	3101      	adds	r1, #1
 800177e:	fb01 f303 	mul.w	r3, r1, r3
 8001782:	491e      	ldr	r1, [pc, #120]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001784:	fb81 0103 	smull	r0, r1, r1, r3
 8001788:	11c9      	asrs	r1, r1, #7
 800178a:	17db      	asrs	r3, r3, #31
 800178c:	1acb      	subs	r3, r1, r3
 800178e:	b29b      	uxth	r3, r3
 8001790:	4413      	add	r3, r2
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001796:	811a      	strh	r2, [r3, #8]
			pwm_handle.intermediate_pulse2 = pwm_handle.previous_pulse2 + (pwm_handle.pulse2 - pwm_handle.previous_pulse2)  * (pwm_handle.interrupt_counter+1)/RAMP_TIME ;
 8001798:	4b17      	ldr	r3, [pc, #92]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800179a:	88da      	ldrh	r2, [r3, #6]
 800179c:	4b16      	ldr	r3, [pc, #88]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800179e:	885b      	ldrh	r3, [r3, #2]
 80017a0:	4619      	mov	r1, r3
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017a4:	88db      	ldrh	r3, [r3, #6]
 80017a6:	1acb      	subs	r3, r1, r3
 80017a8:	4913      	ldr	r1, [pc, #76]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017aa:	8989      	ldrh	r1, [r1, #12]
 80017ac:	3101      	adds	r1, #1
 80017ae:	fb01 f303 	mul.w	r3, r1, r3
 80017b2:	4912      	ldr	r1, [pc, #72]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80017b4:	fb81 0103 	smull	r0, r1, r1, r3
 80017b8:	11c9      	asrs	r1, r1, #7
 80017ba:	17db      	asrs	r3, r3, #31
 80017bc:	1acb      	subs	r3, r1, r3
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017c6:	815a      	strh	r2, [r3, #10]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm_handle.intermediate_pulse1);
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017ca:	891a      	ldrh	r2, [r3, #8]
 80017cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,pwm_handle.intermediate_pulse2);
 80017d2:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017d4:	895a      	ldrh	r2, [r3, #10]
 80017d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	639a      	str	r2, [r3, #56]	@ 0x38

			pwm_handle.interrupt_counter++;
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017de:	899b      	ldrh	r3, [r3, #12]
 80017e0:	3301      	adds	r3, #1
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	4b04      	ldr	r3, [pc, #16]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017e6:	819a      	strh	r2, [r3, #12]
		}

	}
	/* USER CODE END Callback 1 */
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40001000 	.word	0x40001000
 80017f4:	40001400 	.word	0x40001400
 80017f8:	200004ac 	.word	0x200004ac
 80017fc:	057619f1 	.word	0x057619f1
 8001800:	20000290 	.word	0x20000290

08001804 <Shell_Init>:
	int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "speed set to %lu of max value \r\n",(unsigned long)speed);
	HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);

}

void Shell_Init(void){
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8001808:	2224      	movs	r2, #36	@ 0x24
 800180a:	2100      	movs	r1, #0
 800180c:	4816      	ldr	r0, [pc, #88]	@ (8001868 <Shell_Init+0x64>)
 800180e:	f007 fa41 	bl	8008c94 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8001812:	2240      	movs	r2, #64	@ 0x40
 8001814:	2100      	movs	r1, #0
 8001816:	4815      	ldr	r0, [pc, #84]	@ (800186c <Shell_Init+0x68>)
 8001818:	f007 fa3c 	bl	8008c94 <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 800181c:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <Shell_Init+0x6c>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8001822:	2240      	movs	r2, #64	@ 0x40
 8001824:	2100      	movs	r1, #0
 8001826:	4813      	ldr	r0, [pc, #76]	@ (8001874 <Shell_Init+0x70>)
 8001828:	f007 fa34 	bl	8008c94 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800182c:	2201      	movs	r2, #1
 800182e:	4910      	ldr	r1, [pc, #64]	@ (8001870 <Shell_Init+0x6c>)
 8001830:	4811      	ldr	r0, [pc, #68]	@ (8001878 <Shell_Init+0x74>)
 8001832:	f005 f98f 	bl	8006b54 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8001836:	4811      	ldr	r0, [pc, #68]	@ (800187c <Shell_Init+0x78>)
 8001838:	f7fe fcf2 	bl	8000220 <strlen>
 800183c:	4603      	mov	r3, r0
 800183e:	b29a      	uxth	r2, r3
 8001840:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001844:	490d      	ldr	r1, [pc, #52]	@ (800187c <Shell_Init+0x78>)
 8001846:	480c      	ldr	r0, [pc, #48]	@ (8001878 <Shell_Init+0x74>)
 8001848:	f005 f8f6 	bl	8006a38 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 800184c:	480c      	ldr	r0, [pc, #48]	@ (8001880 <Shell_Init+0x7c>)
 800184e:	f7fe fce7 	bl	8000220 <strlen>
 8001852:	4603      	mov	r3, r0
 8001854:	b29a      	uxth	r2, r3
 8001856:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800185a:	4909      	ldr	r1, [pc, #36]	@ (8001880 <Shell_Init+0x7c>)
 800185c:	4806      	ldr	r0, [pc, #24]	@ (8001878 <Shell_Init+0x74>)
 800185e:	f005 f8eb 	bl	8006a38 <HAL_UART_Transmit>
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000540 	.word	0x20000540
 800186c:	20000500 	.word	0x20000500
 8001870:	200004bc 	.word	0x200004bc
 8001874:	200004c0 	.word	0x200004c0
 8001878:	20000374 	.word	0x20000374
 800187c:	20000028 	.word	0x20000028
 8001880:	20000004 	.word	0x20000004

08001884 <HAL_UART_RxCpltCallback>:
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
		newCmdReady = 0;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <HAL_UART_RxCpltCallback+0x20>)
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001892:	2201      	movs	r2, #1
 8001894:	4904      	ldr	r1, [pc, #16]	@ (80018a8 <HAL_UART_RxCpltCallback+0x24>)
 8001896:	4805      	ldr	r0, [pc, #20]	@ (80018ac <HAL_UART_RxCpltCallback+0x28>)
 8001898:	f005 f95c 	bl	8006b54 <HAL_UART_Receive_IT>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200004ba 	.word	0x200004ba
 80018a8:	200004bc 	.word	0x200004bc
 80018ac:	20000374 	.word	0x20000374

080018b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018b0:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b4:	480d      	ldr	r0, [pc, #52]	@ (80018ec <LoopForever+0x6>)
  ldr r1, =_edata
 80018b6:	490e      	ldr	r1, [pc, #56]	@ (80018f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018b8:	4a0e      	ldr	r2, [pc, #56]	@ (80018f4 <LoopForever+0xe>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0b      	ldr	r2, [pc, #44]	@ (80018f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018cc:	4c0b      	ldr	r4, [pc, #44]	@ (80018fc <LoopForever+0x16>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018da:	f7ff fb2b 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018de:	f007 f9e7 	bl	8008cb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018e2:	f7ff f961 	bl	8000ba8 <main>

080018e6 <LoopForever>:

LoopForever:
    b LoopForever
 80018e6:	e7fe      	b.n	80018e6 <LoopForever>
  ldr   r0, =_estack
 80018e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f0:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 80018f4:	0800964c 	.word	0x0800964c
  ldr r2, =_sbss
 80018f8:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 80018fc:	200006b0 	.word	0x200006b0

08001900 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC3_IRQHandler>

08001902 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190c:	2003      	movs	r0, #3
 800190e:	f002 f82a 	bl	8003966 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001912:	200f      	movs	r0, #15
 8001914:	f7ff f9e0 	bl	8000cd8 <HAL_InitTick>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	71fb      	strb	r3, [r7, #7]
 8001922:	e001      	b.n	8001928 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001924:	f7ff f9b4 	bl	8000c90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001928:	79fb      	ldrb	r3, [r7, #7]

}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_IncTick+0x1c>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <HAL_IncTick+0x20>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4413      	add	r3, r2
 8001942:	4a03      	ldr	r2, [pc, #12]	@ (8001950 <HAL_IncTick+0x1c>)
 8001944:	6013      	str	r3, [r2, #0]
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	20000564 	.word	0x20000564
 8001954:	20000094 	.word	0x20000094

08001958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return uwTick;
 800195c:	4b03      	ldr	r3, [pc, #12]	@ (800196c <HAL_GetTick+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000564 	.word	0x20000564

08001970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff ffee 	bl	8001958 <HAL_GetTick>
 800197c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001988:	d004      	beq.n	8001994 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800198a:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <HAL_Delay+0x40>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	4413      	add	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001994:	bf00      	nop
 8001996:	f7ff ffdf 	bl	8001958 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d8f7      	bhi.n	8001996 <HAL_Delay+0x26>
  {
  }
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000094 	.word	0x20000094

080019b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	609a      	str	r2, [r3, #8]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	609a      	str	r2, [r3, #8]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3360      	adds	r3, #96	@ 0x60
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <LL_ADC_SetOffset+0x44>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a54:	bf00      	nop
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	03fff000 	.word	0x03fff000

08001a64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3360      	adds	r3, #96	@ 0x60
 8001a72:	461a      	mov	r2, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3360      	adds	r3, #96	@ 0x60
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001aba:	bf00      	nop
 8001abc:	371c      	adds	r7, #28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b087      	sub	sp, #28
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	3360      	adds	r3, #96	@ 0x60
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001af0:	bf00      	nop
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3360      	adds	r3, #96	@ 0x60
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	431a      	orrs	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b26:	bf00      	nop
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	615a      	str	r2, [r3, #20]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b087      	sub	sp, #28
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3330      	adds	r3, #48	@ 0x30
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	4413      	add	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	211f      	movs	r1, #31
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	0e9b      	lsrs	r3, r3, #26
 8001bb6:	f003 011f 	and.w	r1, r3, #31
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bca:	bf00      	nop
 8001bcc:	371c      	adds	r7, #28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3314      	adds	r3, #20
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	0e5b      	lsrs	r3, r3, #25
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	4413      	add	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	0d1b      	lsrs	r3, r3, #20
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	2107      	movs	r1, #7
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	401a      	ands	r2, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	0d1b      	lsrs	r3, r3, #20
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	431a      	orrs	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c46:	bf00      	nop
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	401a      	ands	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0318 	and.w	r3, r3, #24
 8001c76:	4908      	ldr	r1, [pc, #32]	@ (8001c98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c78:	40d9      	lsrs	r1, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	400b      	ands	r3, r1
 8001c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c82:	431a      	orrs	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	0007ffff 	.word	0x0007ffff

08001c9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 031f 	and.w	r3, r3, #31
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ce4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6093      	str	r3, [r2, #8]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d0c:	d101      	bne.n	8001d12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d5c:	d101      	bne.n	8001d62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d84:	f043 0201 	orr.w	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001da8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dac:	f043 0202 	orr.w	r2, r3, #2
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <LL_ADC_IsEnabled+0x18>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <LL_ADC_IsEnabled+0x1a>
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d101      	bne.n	8001dfe <LL_ADC_IsDisableOngoing+0x18>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <LL_ADC_IsDisableOngoing+0x1a>
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e20:	f043 0204 	orr.w	r2, r3, #4
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d101      	bne.n	8001e4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d101      	bne.n	8001e72 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b089      	sub	sp, #36	@ 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e1a9      	b.n	80021ee <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7fe fc89 	bl	80007c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff19 	bl	8001cf8 <LL_ADC_IsDeepPowerDownEnabled>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d004      	beq.n	8001ed6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff feff 	bl	8001cd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff ff34 	bl	8001d48 <LL_ADC_IsInternalRegulatorEnabled>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d115      	bne.n	8001f12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff ff18 	bl	8001d20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ef0:	4b9c      	ldr	r3, [pc, #624]	@ (8002164 <HAL_ADC_Init+0x2e4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	099b      	lsrs	r3, r3, #6
 8001ef6:	4a9c      	ldr	r2, [pc, #624]	@ (8002168 <HAL_ADC_Init+0x2e8>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	099b      	lsrs	r3, r3, #6
 8001efe:	3301      	adds	r3, #1
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f04:	e002      	b.n	8001f0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f9      	bne.n	8001f06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff16 	bl	8001d48 <LL_ADC_IsInternalRegulatorEnabled>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10d      	bne.n	8001f3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f26:	f043 0210 	orr.w	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f32:	f043 0201 	orr.w	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff76 	bl	8001e34 <LL_ADC_REG_IsConversionOngoing>
 8001f48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f040 8142 	bne.w	80021dc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f040 813e 	bne.w	80021dc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f64:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f68:	f043 0202 	orr.w	r2, r3, #2
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff23 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d141      	bne.n	8002004 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f88:	d004      	beq.n	8001f94 <HAL_ADC_Init+0x114>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a77      	ldr	r2, [pc, #476]	@ (800216c <HAL_ADC_Init+0x2ec>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d10f      	bne.n	8001fb4 <HAL_ADC_Init+0x134>
 8001f94:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001f98:	f7ff ff12 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	4873      	ldr	r0, [pc, #460]	@ (800216c <HAL_ADC_Init+0x2ec>)
 8001fa0:	f7ff ff0e 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4323      	orrs	r3, r4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf0c      	ite	eq
 8001fac:	2301      	moveq	r3, #1
 8001fae:	2300      	movne	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	e012      	b.n	8001fda <HAL_ADC_Init+0x15a>
 8001fb4:	486e      	ldr	r0, [pc, #440]	@ (8002170 <HAL_ADC_Init+0x2f0>)
 8001fb6:	f7ff ff03 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001fba:	4604      	mov	r4, r0
 8001fbc:	486d      	ldr	r0, [pc, #436]	@ (8002174 <HAL_ADC_Init+0x2f4>)
 8001fbe:	f7ff feff 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	431c      	orrs	r4, r3
 8001fc6:	486c      	ldr	r0, [pc, #432]	@ (8002178 <HAL_ADC_Init+0x2f8>)
 8001fc8:	f7ff fefa 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4323      	orrs	r3, r4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf0c      	ite	eq
 8001fd4:	2301      	moveq	r3, #1
 8001fd6:	2300      	movne	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d012      	beq.n	8002004 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fe6:	d004      	beq.n	8001ff2 <HAL_ADC_Init+0x172>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a5f      	ldr	r2, [pc, #380]	@ (800216c <HAL_ADC_Init+0x2ec>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_Init+0x176>
 8001ff2:	4a62      	ldr	r2, [pc, #392]	@ (800217c <HAL_ADC_Init+0x2fc>)
 8001ff4:	e000      	b.n	8001ff8 <HAL_ADC_Init+0x178>
 8001ff6:	4a62      	ldr	r2, [pc, #392]	@ (8002180 <HAL_ADC_Init+0x300>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4610      	mov	r0, r2
 8002000:	f7ff fcd8 	bl	80019b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7f5b      	ldrb	r3, [r3, #29]
 8002008:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800200e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002014:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800201a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002022:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800202e:	2b01      	cmp	r3, #1
 8002030:	d106      	bne.n	8002040 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002036:	3b01      	subs	r3, #1
 8002038:	045b      	lsls	r3, r3, #17
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d009      	beq.n	800205c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002054:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	4b48      	ldr	r3, [pc, #288]	@ (8002184 <HAL_ADC_Init+0x304>)
 8002064:	4013      	ands	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	69b9      	ldr	r1, [r7, #24]
 800206c:	430b      	orrs	r3, r1
 800206e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fee5 	bl	8001e5a <LL_ADC_INJ_IsConversionOngoing>
 8002090:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d17f      	bne.n	8002198 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d17c      	bne.n	8002198 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020aa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020ba:	f023 0302 	bic.w	r3, r3, #2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	430b      	orrs	r3, r1
 80020c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d017      	beq.n	8002100 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80020de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80020e8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80020ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6911      	ldr	r1, [r2, #16]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	430b      	orrs	r3, r1
 80020fa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80020fe:	e013      	b.n	8002128 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800210e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002120:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002124:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800212e:	2b01      	cmp	r3, #1
 8002130:	d12a      	bne.n	8002188 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002148:	4311      	orrs	r1, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800214e:	4311      	orrs	r1, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002154:	430a      	orrs	r2, r1
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f042 0201 	orr.w	r2, r2, #1
 8002160:	611a      	str	r2, [r3, #16]
 8002162:	e019      	b.n	8002198 <HAL_ADC_Init+0x318>
 8002164:	20000000 	.word	0x20000000
 8002168:	053e2d63 	.word	0x053e2d63
 800216c:	50000100 	.word	0x50000100
 8002170:	50000400 	.word	0x50000400
 8002174:	50000500 	.word	0x50000500
 8002178:	50000600 	.word	0x50000600
 800217c:	50000300 	.word	0x50000300
 8002180:	50000700 	.word	0x50000700
 8002184:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d10c      	bne.n	80021ba <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	f023 010f 	bic.w	r1, r3, #15
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	1e5a      	subs	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80021b8:	e007      	b.n	80021ca <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 020f 	bic.w	r2, r2, #15
 80021c8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ce:	f023 0303 	bic.w	r3, r3, #3
 80021d2:	f043 0201 	orr.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021da:	e007      	b.n	80021ec <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e0:	f043 0210 	orr.w	r2, r3, #16
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3724      	adds	r7, #36	@ 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd90      	pop	{r4, r7, pc}
 80021f6:	bf00      	nop

080021f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800220c:	d004      	beq.n	8002218 <HAL_ADC_Start_DMA+0x20>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a5a      	ldr	r2, [pc, #360]	@ (800237c <HAL_ADC_Start_DMA+0x184>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d101      	bne.n	800221c <HAL_ADC_Start_DMA+0x24>
 8002218:	4b59      	ldr	r3, [pc, #356]	@ (8002380 <HAL_ADC_Start_DMA+0x188>)
 800221a:	e000      	b.n	800221e <HAL_ADC_Start_DMA+0x26>
 800221c:	4b59      	ldr	r3, [pc, #356]	@ (8002384 <HAL_ADC_Start_DMA+0x18c>)
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fd3c 	bl	8001c9c <LL_ADC_GetMultimode>
 8002224:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fe02 	bl	8001e34 <LL_ADC_REG_IsConversionOngoing>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 809b 	bne.w	800236e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_ADC_Start_DMA+0x4e>
 8002242:	2302      	movs	r3, #2
 8002244:	e096      	b.n	8002374 <HAL_ADC_Start_DMA+0x17c>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a4d      	ldr	r2, [pc, #308]	@ (8002388 <HAL_ADC_Start_DMA+0x190>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d008      	beq.n	800226a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b05      	cmp	r3, #5
 8002262:	d002      	beq.n	800226a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	2b09      	cmp	r3, #9
 8002268:	d17a      	bne.n	8002360 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 ff56 	bl	800311c <ADC_Enable>
 8002270:	4603      	mov	r3, r0
 8002272:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d16d      	bne.n	8002356 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a3a      	ldr	r2, [pc, #232]	@ (800237c <HAL_ADC_Start_DMA+0x184>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d009      	beq.n	80022ac <HAL_ADC_Start_DMA+0xb4>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a3b      	ldr	r2, [pc, #236]	@ (800238c <HAL_ADC_Start_DMA+0x194>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d002      	beq.n	80022a8 <HAL_ADC_Start_DMA+0xb0>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	e003      	b.n	80022b0 <HAL_ADC_Start_DMA+0xb8>
 80022a8:	4b39      	ldr	r3, [pc, #228]	@ (8002390 <HAL_ADC_Start_DMA+0x198>)
 80022aa:	e001      	b.n	80022b0 <HAL_ADC_Start_DMA+0xb8>
 80022ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d002      	beq.n	80022be <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d105      	bne.n	80022ca <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022da:	f023 0206 	bic.w	r2, r3, #6
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	661a      	str	r2, [r3, #96]	@ 0x60
 80022e2:	e002      	b.n	80022ea <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ee:	4a29      	ldr	r2, [pc, #164]	@ (8002394 <HAL_ADC_Start_DMA+0x19c>)
 80022f0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f6:	4a28      	ldr	r2, [pc, #160]	@ (8002398 <HAL_ADC_Start_DMA+0x1a0>)
 80022f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fe:	4a27      	ldr	r2, [pc, #156]	@ (800239c <HAL_ADC_Start_DMA+0x1a4>)
 8002300:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	221c      	movs	r2, #28
 8002308:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0210 	orr.w	r2, r2, #16
 8002320:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0201 	orr.w	r2, r2, #1
 8002330:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	3340      	adds	r3, #64	@ 0x40
 800233c:	4619      	mov	r1, r3
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f001 fbeb 	bl	8003b1c <HAL_DMA_Start_IT>
 8002346:	4603      	mov	r3, r0
 8002348:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fd5c 	bl	8001e0c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002354:	e00d      	b.n	8002372 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800235e:	e008      	b.n	8002372 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800236c:	e001      	b.n	8002372 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800236e:	2302      	movs	r3, #2
 8002370:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002372:	7dfb      	ldrb	r3, [r7, #23]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	50000100 	.word	0x50000100
 8002380:	50000300 	.word	0x50000300
 8002384:	50000700 	.word	0x50000700
 8002388:	50000600 	.word	0x50000600
 800238c:	50000500 	.word	0x50000500
 8002390:	50000400 	.word	0x50000400
 8002394:	08003307 	.word	0x08003307
 8002398:	080033df 	.word	0x080033df
 800239c:	080033fb 	.word	0x080033fb

080023a0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80023a8:	2300      	movs	r3, #0
 80023aa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023c4:	d004      	beq.n	80023d0 <HAL_ADC_IRQHandler+0x30>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a8e      	ldr	r2, [pc, #568]	@ (8002604 <HAL_ADC_IRQHandler+0x264>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_IRQHandler+0x34>
 80023d0:	4b8d      	ldr	r3, [pc, #564]	@ (8002608 <HAL_ADC_IRQHandler+0x268>)
 80023d2:	e000      	b.n	80023d6 <HAL_ADC_IRQHandler+0x36>
 80023d4:	4b8d      	ldr	r3, [pc, #564]	@ (800260c <HAL_ADC_IRQHandler+0x26c>)
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fc60 	bl	8001c9c <LL_ADC_GetMultimode>
 80023dc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d017      	beq.n	8002418 <HAL_ADC_IRQHandler+0x78>
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d012      	beq.n	8002418 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d105      	bne.n	800240a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002402:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f001 f8ec 	bl	80035e8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2202      	movs	r2, #2
 8002416:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	d004      	beq.n	800242c <HAL_ADC_IRQHandler+0x8c>
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10b      	bne.n	8002444 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8094 	beq.w	8002560 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 808e 	beq.w	8002560 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002454:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fb79 	bl	8001b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d072      	beq.n	8002552 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a64      	ldr	r2, [pc, #400]	@ (8002604 <HAL_ADC_IRQHandler+0x264>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d009      	beq.n	800248a <HAL_ADC_IRQHandler+0xea>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a65      	ldr	r2, [pc, #404]	@ (8002610 <HAL_ADC_IRQHandler+0x270>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d002      	beq.n	8002486 <HAL_ADC_IRQHandler+0xe6>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	e003      	b.n	800248e <HAL_ADC_IRQHandler+0xee>
 8002486:	4b63      	ldr	r3, [pc, #396]	@ (8002614 <HAL_ADC_IRQHandler+0x274>)
 8002488:	e001      	b.n	800248e <HAL_ADC_IRQHandler+0xee>
 800248a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	4293      	cmp	r3, r2
 8002494:	d008      	beq.n	80024a8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b05      	cmp	r3, #5
 80024a0:	d002      	beq.n	80024a8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b09      	cmp	r3, #9
 80024a6:	d104      	bne.n	80024b2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	623b      	str	r3, [r7, #32]
 80024b0:	e014      	b.n	80024dc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a53      	ldr	r2, [pc, #332]	@ (8002604 <HAL_ADC_IRQHandler+0x264>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d009      	beq.n	80024d0 <HAL_ADC_IRQHandler+0x130>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a53      	ldr	r2, [pc, #332]	@ (8002610 <HAL_ADC_IRQHandler+0x270>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d002      	beq.n	80024cc <HAL_ADC_IRQHandler+0x12c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	e003      	b.n	80024d4 <HAL_ADC_IRQHandler+0x134>
 80024cc:	4b51      	ldr	r3, [pc, #324]	@ (8002614 <HAL_ADC_IRQHandler+0x274>)
 80024ce:	e001      	b.n	80024d4 <HAL_ADC_IRQHandler+0x134>
 80024d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024d4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d135      	bne.n	8002552 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d12e      	bne.n	8002552 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fc9b 	bl	8001e34 <LL_ADC_REG_IsConversionOngoing>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d11a      	bne.n	800253a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 020c 	bic.w	r2, r2, #12
 8002512:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002518:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002524:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d112      	bne.n	8002552 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002530:	f043 0201 	orr.w	r2, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002538:	e00b      	b.n	8002552 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253e:	f043 0210 	orr.w	r2, r3, #16
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff f8de 	bl	8001714 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	220c      	movs	r2, #12
 800255e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <HAL_ADC_IRQHandler+0x1d4>
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10b      	bne.n	800258c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 80b3 	beq.w	80026e6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 80ad 	beq.w	80026e6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2b00      	cmp	r3, #0
 8002596:	d105      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fb14 	bl	8001bd6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80025ae:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff facf 	bl	8001b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025ba:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a10      	ldr	r2, [pc, #64]	@ (8002604 <HAL_ADC_IRQHandler+0x264>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d009      	beq.n	80025da <HAL_ADC_IRQHandler+0x23a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a11      	ldr	r2, [pc, #68]	@ (8002610 <HAL_ADC_IRQHandler+0x270>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d002      	beq.n	80025d6 <HAL_ADC_IRQHandler+0x236>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	e003      	b.n	80025de <HAL_ADC_IRQHandler+0x23e>
 80025d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002614 <HAL_ADC_IRQHandler+0x274>)
 80025d8:	e001      	b.n	80025de <HAL_ADC_IRQHandler+0x23e>
 80025da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d008      	beq.n	80025f8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d002      	beq.n	80025f8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b07      	cmp	r3, #7
 80025f6:	d10f      	bne.n	8002618 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	623b      	str	r3, [r7, #32]
 8002600:	e01f      	b.n	8002642 <HAL_ADC_IRQHandler+0x2a2>
 8002602:	bf00      	nop
 8002604:	50000100 	.word	0x50000100
 8002608:	50000300 	.word	0x50000300
 800260c:	50000700 	.word	0x50000700
 8002610:	50000500 	.word	0x50000500
 8002614:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a8b      	ldr	r2, [pc, #556]	@ (800284c <HAL_ADC_IRQHandler+0x4ac>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d009      	beq.n	8002636 <HAL_ADC_IRQHandler+0x296>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a8a      	ldr	r2, [pc, #552]	@ (8002850 <HAL_ADC_IRQHandler+0x4b0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d002      	beq.n	8002632 <HAL_ADC_IRQHandler+0x292>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	e003      	b.n	800263a <HAL_ADC_IRQHandler+0x29a>
 8002632:	4b88      	ldr	r3, [pc, #544]	@ (8002854 <HAL_ADC_IRQHandler+0x4b4>)
 8002634:	e001      	b.n	800263a <HAL_ADC_IRQHandler+0x29a>
 8002636:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800263a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d047      	beq.n	80026d8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <HAL_ADC_IRQHandler+0x2c2>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d03f      	beq.n	80026d8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800265e:	2b00      	cmp	r3, #0
 8002660:	d13a      	bne.n	80026d8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800266c:	2b40      	cmp	r3, #64	@ 0x40
 800266e:	d133      	bne.n	80026d8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d12e      	bne.n	80026d8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fbeb 	bl	8001e5a <LL_ADC_INJ_IsConversionOngoing>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d11a      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002698:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d112      	bne.n	80026d8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b6:	f043 0201 	orr.w	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026be:	e00b      	b.n	80026d8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	f043 0210 	orr.w	r2, r3, #16
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 ff5d 	bl	8003598 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2260      	movs	r2, #96	@ 0x60
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d011      	beq.n	8002714 <HAL_ADC_IRQHandler+0x374>
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00c      	beq.n	8002714 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f8b4 	bl	8002874 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2280      	movs	r2, #128	@ 0x80
 8002712:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d012      	beq.n	8002744 <HAL_ADC_IRQHandler+0x3a4>
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 ff43 	bl	80035c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002742:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800274a:	2b00      	cmp	r3, #0
 800274c:	d012      	beq.n	8002774 <HAL_ADC_IRQHandler+0x3d4>
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00d      	beq.n	8002774 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 ff35 	bl	80035d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002772:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	d043      	beq.n	8002806 <HAL_ADC_IRQHandler+0x466>
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	d03e      	beq.n	8002806 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002790:	2301      	movs	r3, #1
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
 8002794:	e021      	b.n	80027da <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d015      	beq.n	80027c8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027a4:	d004      	beq.n	80027b0 <HAL_ADC_IRQHandler+0x410>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a28      	ldr	r2, [pc, #160]	@ (800284c <HAL_ADC_IRQHandler+0x4ac>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d101      	bne.n	80027b4 <HAL_ADC_IRQHandler+0x414>
 80027b0:	4b29      	ldr	r3, [pc, #164]	@ (8002858 <HAL_ADC_IRQHandler+0x4b8>)
 80027b2:	e000      	b.n	80027b6 <HAL_ADC_IRQHandler+0x416>
 80027b4:	4b29      	ldr	r3, [pc, #164]	@ (800285c <HAL_ADC_IRQHandler+0x4bc>)
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fa7e 	bl	8001cb8 <LL_ADC_GetMultiDMATransfer>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80027c2:	2301      	movs	r3, #1
 80027c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027c6:	e008      	b.n	80027da <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80027d6:	2301      	movs	r3, #1
 80027d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d10e      	bne.n	80027fe <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f0:	f043 0202 	orr.w	r2, r3, #2
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f845 	bl	8002888 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2210      	movs	r2, #16
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d018      	beq.n	8002842 <HAL_ADC_IRQHandler+0x4a2>
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002816:	2b00      	cmp	r3, #0
 8002818:	d013      	beq.n	8002842 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800282a:	f043 0208 	orr.w	r2, r3, #8
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800283a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 feb5 	bl	80035ac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002842:	bf00      	nop
 8002844:	3728      	adds	r7, #40	@ 0x28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	50000100 	.word	0x50000100
 8002850:	50000500 	.word	0x50000500
 8002854:	50000400 	.word	0x50000400
 8002858:	50000300 	.word	0x50000300
 800285c:	50000700 	.word	0x50000700

08002860 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b0b6      	sub	sp, #216	@ 0xd8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d102      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x24>
 80028ba:	2302      	movs	r3, #2
 80028bc:	f000 bc13 	b.w	80030e6 <HAL_ADC_ConfigChannel+0x84a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fab1 	bl	8001e34 <LL_ADC_REG_IsConversionOngoing>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f040 83f3 	bne.w	80030c0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	f7ff f949 	bl	8001b7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fa9f 	bl	8001e34 <LL_ADC_REG_IsConversionOngoing>
 80028f6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff faab 	bl	8001e5a <LL_ADC_INJ_IsConversionOngoing>
 8002904:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002908:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800290c:	2b00      	cmp	r3, #0
 800290e:	f040 81d9 	bne.w	8002cc4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002912:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 81d4 	bne.w	8002cc4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002924:	d10f      	bne.n	8002946 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2200      	movs	r2, #0
 8002930:	4619      	mov	r1, r3
 8002932:	f7ff f963 	bl	8001bfc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff f8f7 	bl	8001b32 <LL_ADC_SetSamplingTimeCommonConfig>
 8002944:	e00e      	b.n	8002964 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6819      	ldr	r1, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	461a      	mov	r2, r3
 8002954:	f7ff f952 	bl	8001bfc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff f8e7 	bl	8001b32 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	695a      	ldr	r2, [r3, #20]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	08db      	lsrs	r3, r3, #3
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2b04      	cmp	r3, #4
 8002984:	d022      	beq.n	80029cc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6919      	ldr	r1, [r3, #16]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002996:	f7ff f841 	bl	8001a1c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	6919      	ldr	r1, [r3, #16]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	461a      	mov	r2, r3
 80029a8:	f7ff f88d 	bl	8001ac6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d102      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x126>
 80029bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029c0:	e000      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x128>
 80029c2:	2300      	movs	r3, #0
 80029c4:	461a      	mov	r2, r3
 80029c6:	f7ff f899 	bl	8001afc <LL_ADC_SetOffsetSaturation>
 80029ca:	e17b      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff f846 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 80029d8:	4603      	mov	r3, r0
 80029da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10a      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x15c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff f83b 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 80029ee:	4603      	mov	r3, r0
 80029f0:	0e9b      	lsrs	r3, r3, #26
 80029f2:	f003 021f 	and.w	r2, r3, #31
 80029f6:	e01e      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x19a>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff f830 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002a26:	2320      	movs	r3, #32
 8002a28:	e004      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002a2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x1b2>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	0e9b      	lsrs	r3, r3, #26
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	e018      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x1e4>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002a62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002a6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002a72:	2320      	movs	r3, #32
 8002a74:	e004      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002a76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d106      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe ffff 	bl	8001a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2101      	movs	r1, #1
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe ffe3 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x222>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2101      	movs	r1, #1
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe ffd8 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	0e9b      	lsrs	r3, r3, #26
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	e01e      	b.n	8002afc <HAL_ADC_ConfigChannel+0x260>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe ffcd 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002adc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002ae4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002aec:	2320      	movs	r3, #32
 8002aee:	e004      	b.n	8002afa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002af0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002af4:	fab3 f383 	clz	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x278>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0e9b      	lsrs	r3, r3, #26
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	e018      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x2aa>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002b30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002b38:	2320      	movs	r3, #32
 8002b3a:	e004      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d106      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2101      	movs	r1, #1
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe ff9c 	bl	8001a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe ff80 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x2e8>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2102      	movs	r1, #2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe ff75 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	f003 021f 	and.w	r2, r3, #31
 8002b82:	e01e      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x326>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2102      	movs	r1, #2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe ff6a 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002baa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	e004      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002bb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bba:	fab3 f383 	clz	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d105      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x33e>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0e9b      	lsrs	r3, r3, #26
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	e016      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x36c>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002be6:	fa93 f3a3 	rbit	r3, r3
 8002bea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002bec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002bf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	e004      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d106      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2200      	movs	r2, #0
 8002c12:	2102      	movs	r1, #2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fe ff3b 	bl	8001a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2103      	movs	r1, #3
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe ff1f 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x3aa>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2103      	movs	r1, #3
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe ff14 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	0e9b      	lsrs	r3, r3, #26
 8002c40:	f003 021f 	and.w	r2, r3, #31
 8002c44:	e017      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x3da>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2103      	movs	r1, #3
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe ff09 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002c52:	4603      	mov	r3, r0
 8002c54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002c5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c60:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002c62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002c68:	2320      	movs	r3, #32
 8002c6a:	e003      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002c6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c6e:	fab3 f383 	clz	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d105      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x3f2>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	0e9b      	lsrs	r3, r3, #26
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	e011      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x416>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002c9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	e003      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cac:	fab3 f383 	clz	r3, r3
 8002cb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d106      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2103      	movs	r1, #3
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe fee6 	bl	8001a90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff f879 	bl	8001dc0 <LL_ADC_IsEnabled>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f040 813d 	bne.w	8002f50 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6819      	ldr	r1, [r3, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f7fe ffb6 	bl	8001c54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4aa2      	ldr	r2, [pc, #648]	@ (8002f78 <HAL_ADC_ConfigChannel+0x6dc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	f040 812e 	bne.w	8002f50 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x480>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	0e9b      	lsrs	r3, r3, #26
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	2b09      	cmp	r3, #9
 8002d12:	bf94      	ite	ls
 8002d14:	2301      	movls	r3, #1
 8002d16:	2300      	movhi	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e019      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x4b4>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002d2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d2c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002d2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002d34:	2320      	movs	r3, #32
 8002d36:	e003      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002d38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	f003 031f 	and.w	r3, r3, #31
 8002d46:	2b09      	cmp	r3, #9
 8002d48:	bf94      	ite	ls
 8002d4a:	2301      	movls	r3, #1
 8002d4c:	2300      	movhi	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d079      	beq.n	8002e48 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x4d4>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0e9b      	lsrs	r3, r3, #26
 8002d66:	3301      	adds	r3, #1
 8002d68:	069b      	lsls	r3, r3, #26
 8002d6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d6e:	e015      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x500>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002d7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d80:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002d88:	2320      	movs	r3, #32
 8002d8a:	e003      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	3301      	adds	r3, #1
 8002d96:	069b      	lsls	r3, r3, #26
 8002d98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x520>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0e9b      	lsrs	r3, r3, #26
 8002dae:	3301      	adds	r3, #1
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	2101      	movs	r1, #1
 8002db6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dba:	e017      	b.n	8002dec <HAL_ADC_ConfigChannel+0x550>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	e003      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002dd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	2101      	movs	r1, #1
 8002de8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dec:	ea42 0103 	orr.w	r1, r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x576>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	0e9b      	lsrs	r3, r3, #26
 8002e02:	3301      	adds	r3, #1
 8002e04:	f003 021f 	and.w	r2, r3, #31
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	051b      	lsls	r3, r3, #20
 8002e10:	e018      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x5a8>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002e2a:	2320      	movs	r3, #32
 8002e2c:	e003      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	3301      	adds	r3, #1
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e44:	430b      	orrs	r3, r1
 8002e46:	e07e      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d107      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x5c8>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	0e9b      	lsrs	r3, r3, #26
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	069b      	lsls	r3, r3, #26
 8002e5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e62:	e015      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x5f4>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e74:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	e003      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	069b      	lsls	r3, r3, #26
 8002e8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x614>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	0e9b      	lsrs	r3, r3, #26
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	e017      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x644>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	61fb      	str	r3, [r7, #28]
  return result;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002ec8:	2320      	movs	r3, #32
 8002eca:	e003      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2101      	movs	r1, #1
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	ea42 0103 	orr.w	r1, r2, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10d      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x670>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0e9b      	lsrs	r3, r3, #26
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f003 021f 	and.w	r2, r3, #31
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	3b1e      	subs	r3, #30
 8002f04:	051b      	lsls	r3, r3, #20
 8002f06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f0a:	e01b      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x6a8>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	613b      	str	r3, [r7, #16]
  return result;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e003      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	f003 021f 	and.w	r2, r3, #31
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3b1e      	subs	r3, #30
 8002f3e:	051b      	lsls	r3, r3, #20
 8002f40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f7fe fe56 	bl	8001bfc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <HAL_ADC_ConfigChannel+0x6e0>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80be 	beq.w	80030da <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f66:	d004      	beq.n	8002f72 <HAL_ADC_ConfigChannel+0x6d6>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a04      	ldr	r2, [pc, #16]	@ (8002f80 <HAL_ADC_ConfigChannel+0x6e4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d10a      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x6ec>
 8002f72:	4b04      	ldr	r3, [pc, #16]	@ (8002f84 <HAL_ADC_ConfigChannel+0x6e8>)
 8002f74:	e009      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x6ee>
 8002f76:	bf00      	nop
 8002f78:	407f0000 	.word	0x407f0000
 8002f7c:	80080000 	.word	0x80080000
 8002f80:	50000100 	.word	0x50000100
 8002f84:	50000300 	.word	0x50000300
 8002f88:	4b59      	ldr	r3, [pc, #356]	@ (80030f0 <HAL_ADC_ConfigChannel+0x854>)
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fd38 	bl	8001a00 <LL_ADC_GetCommonPathInternalCh>
 8002f90:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a56      	ldr	r2, [pc, #344]	@ (80030f4 <HAL_ADC_ConfigChannel+0x858>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_ADC_ConfigChannel+0x70c>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a55      	ldr	r2, [pc, #340]	@ (80030f8 <HAL_ADC_ConfigChannel+0x85c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d13a      	bne.n	800301e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d134      	bne.n	800301e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fbc:	d005      	beq.n	8002fca <HAL_ADC_ConfigChannel+0x72e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a4e      	ldr	r2, [pc, #312]	@ (80030fc <HAL_ADC_ConfigChannel+0x860>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	f040 8085 	bne.w	80030d4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fd2:	d004      	beq.n	8002fde <HAL_ADC_ConfigChannel+0x742>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a49      	ldr	r2, [pc, #292]	@ (8003100 <HAL_ADC_ConfigChannel+0x864>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x746>
 8002fde:	4a49      	ldr	r2, [pc, #292]	@ (8003104 <HAL_ADC_ConfigChannel+0x868>)
 8002fe0:	e000      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x748>
 8002fe2:	4a43      	ldr	r2, [pc, #268]	@ (80030f0 <HAL_ADC_ConfigChannel+0x854>)
 8002fe4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fe8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fec:	4619      	mov	r1, r3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	f7fe fcf3 	bl	80019da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ff4:	4b44      	ldr	r3, [pc, #272]	@ (8003108 <HAL_ADC_ConfigChannel+0x86c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	099b      	lsrs	r3, r3, #6
 8002ffa:	4a44      	ldr	r2, [pc, #272]	@ (800310c <HAL_ADC_ConfigChannel+0x870>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	099b      	lsrs	r3, r3, #6
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800300e:	e002      	b.n	8003016 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3b01      	subs	r3, #1
 8003014:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f9      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800301c:	e05a      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a3b      	ldr	r2, [pc, #236]	@ (8003110 <HAL_ADC_ConfigChannel+0x874>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d125      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003028:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800302c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d11f      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a31      	ldr	r2, [pc, #196]	@ (8003100 <HAL_ADC_ConfigChannel+0x864>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d104      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x7ac>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a34      	ldr	r2, [pc, #208]	@ (8003114 <HAL_ADC_ConfigChannel+0x878>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d047      	beq.n	80030d8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003050:	d004      	beq.n	800305c <HAL_ADC_ConfigChannel+0x7c0>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2a      	ldr	r2, [pc, #168]	@ (8003100 <HAL_ADC_ConfigChannel+0x864>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d101      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x7c4>
 800305c:	4a29      	ldr	r2, [pc, #164]	@ (8003104 <HAL_ADC_ConfigChannel+0x868>)
 800305e:	e000      	b.n	8003062 <HAL_ADC_ConfigChannel+0x7c6>
 8003060:	4a23      	ldr	r2, [pc, #140]	@ (80030f0 <HAL_ADC_ConfigChannel+0x854>)
 8003062:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003066:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800306a:	4619      	mov	r1, r3
 800306c:	4610      	mov	r0, r2
 800306e:	f7fe fcb4 	bl	80019da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003072:	e031      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a27      	ldr	r2, [pc, #156]	@ (8003118 <HAL_ADC_ConfigChannel+0x87c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d12d      	bne.n	80030da <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800307e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d127      	bne.n	80030da <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1c      	ldr	r2, [pc, #112]	@ (8003100 <HAL_ADC_ConfigChannel+0x864>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d022      	beq.n	80030da <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800309c:	d004      	beq.n	80030a8 <HAL_ADC_ConfigChannel+0x80c>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a17      	ldr	r2, [pc, #92]	@ (8003100 <HAL_ADC_ConfigChannel+0x864>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d101      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x810>
 80030a8:	4a16      	ldr	r2, [pc, #88]	@ (8003104 <HAL_ADC_ConfigChannel+0x868>)
 80030aa:	e000      	b.n	80030ae <HAL_ADC_ConfigChannel+0x812>
 80030ac:	4a10      	ldr	r2, [pc, #64]	@ (80030f0 <HAL_ADC_ConfigChannel+0x854>)
 80030ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f7fe fc8e 	bl	80019da <LL_ADC_SetCommonPathInternalCh>
 80030be:	e00c      	b.n	80030da <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c4:	f043 0220 	orr.w	r2, r3, #32
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80030d2:	e002      	b.n	80030da <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030d4:	bf00      	nop
 80030d6:	e000      	b.n	80030da <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80030e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	37d8      	adds	r7, #216	@ 0xd8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	50000700 	.word	0x50000700
 80030f4:	c3210000 	.word	0xc3210000
 80030f8:	90c00010 	.word	0x90c00010
 80030fc:	50000600 	.word	0x50000600
 8003100:	50000100 	.word	0x50000100
 8003104:	50000300 	.word	0x50000300
 8003108:	20000000 	.word	0x20000000
 800310c:	053e2d63 	.word	0x053e2d63
 8003110:	c7520000 	.word	0xc7520000
 8003114:	50000500 	.word	0x50000500
 8003118:	cb840000 	.word	0xcb840000

0800311c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003124:	2300      	movs	r3, #0
 8003126:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7fe fe47 	bl	8001dc0 <LL_ADC_IsEnabled>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d176      	bne.n	8003226 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	4b3c      	ldr	r3, [pc, #240]	@ (8003230 <ADC_Enable+0x114>)
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00d      	beq.n	8003162 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314a:	f043 0210 	orr.w	r2, r3, #16
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003156:	f043 0201 	orr.w	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e062      	b.n	8003228 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe fe02 	bl	8001d70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003174:	d004      	beq.n	8003180 <ADC_Enable+0x64>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2e      	ldr	r2, [pc, #184]	@ (8003234 <ADC_Enable+0x118>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d101      	bne.n	8003184 <ADC_Enable+0x68>
 8003180:	4b2d      	ldr	r3, [pc, #180]	@ (8003238 <ADC_Enable+0x11c>)
 8003182:	e000      	b.n	8003186 <ADC_Enable+0x6a>
 8003184:	4b2d      	ldr	r3, [pc, #180]	@ (800323c <ADC_Enable+0x120>)
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe fc3a 	bl	8001a00 <LL_ADC_GetCommonPathInternalCh>
 800318c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800318e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003192:	2b00      	cmp	r3, #0
 8003194:	d013      	beq.n	80031be <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003196:	4b2a      	ldr	r3, [pc, #168]	@ (8003240 <ADC_Enable+0x124>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	099b      	lsrs	r3, r3, #6
 800319c:	4a29      	ldr	r2, [pc, #164]	@ (8003244 <ADC_Enable+0x128>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031b0:	e002      	b.n	80031b8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f9      	bne.n	80031b2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031be:	f7fe fbcb 	bl	8001958 <HAL_GetTick>
 80031c2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031c4:	e028      	b.n	8003218 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe fdf8 	bl	8001dc0 <LL_ADC_IsEnabled>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d104      	bne.n	80031e0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe fdc8 	bl	8001d70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031e0:	f7fe fbba 	bl	8001958 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d914      	bls.n	8003218 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d00d      	beq.n	8003218 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003200:	f043 0210 	orr.w	r2, r3, #16
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320c:	f043 0201 	orr.w	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e007      	b.n	8003228 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d1cf      	bne.n	80031c6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	8000003f 	.word	0x8000003f
 8003234:	50000100 	.word	0x50000100
 8003238:	50000300 	.word	0x50000300
 800323c:	50000700 	.word	0x50000700
 8003240:	20000000 	.word	0x20000000
 8003244:	053e2d63 	.word	0x053e2d63

08003248 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe fdc6 	bl	8001de6 <LL_ADC_IsDisableOngoing>
 800325a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fdad 	bl	8001dc0 <LL_ADC_IsEnabled>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d047      	beq.n	80032fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d144      	bne.n	80032fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 030d 	and.w	r3, r3, #13
 800327c:	2b01      	cmp	r3, #1
 800327e:	d10c      	bne.n	800329a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe fd87 	bl	8001d98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2203      	movs	r2, #3
 8003290:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003292:	f7fe fb61 	bl	8001958 <HAL_GetTick>
 8003296:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003298:	e029      	b.n	80032ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329e:	f043 0210 	orr.w	r2, r3, #16
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032aa:	f043 0201 	orr.w	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e023      	b.n	80032fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032b6:	f7fe fb4f 	bl	8001958 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d914      	bls.n	80032ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00d      	beq.n	80032ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d6:	f043 0210 	orr.w	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e2:	f043 0201 	orr.w	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e007      	b.n	80032fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1dc      	bne.n	80032b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003312:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003318:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800331c:	2b00      	cmp	r3, #0
 800331e:	d14b      	bne.n	80033b8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003324:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d021      	beq.n	800337e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fc0a 	bl	8001b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d032      	beq.n	80033b0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d12b      	bne.n	80033b0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003368:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d11f      	bne.n	80033b0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003374:	f043 0201 	orr.w	r2, r3, #1
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800337c:	e018      	b.n	80033b0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d111      	bne.n	80033b0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003390:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a8:	f043 0201 	orr.w	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f7fe f9af 	bl	8001714 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033b6:	e00e      	b.n	80033d6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f7ff fa5f 	bl	8002888 <HAL_ADC_ErrorCallback>
}
 80033ca:	e004      	b.n	80033d6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	4798      	blx	r3
}
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7ff fa37 	bl	8002860 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033f2:	bf00      	nop
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003406:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003418:	f043 0204 	orr.w	r2, r3, #4
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f7ff fa31 	bl	8002888 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003426:	bf00      	nop
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <LL_ADC_IsEnabled>:
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <LL_ADC_IsEnabled+0x18>
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <LL_ADC_IsEnabled+0x1a>
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <LL_ADC_StartCalibration>:
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003466:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003470:	4313      	orrs	r3, r2
 8003472:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	609a      	str	r2, [r3, #8]
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <LL_ADC_IsCalibrationOnGoing>:
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003496:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800349a:	d101      	bne.n	80034a0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <LL_ADC_REG_IsConversionOngoing>:
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d101      	bne.n	80034c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_ADCEx_Calibration_Start+0x1c>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e04d      	b.n	800358c <HAL_ADCEx_Calibration_Start+0xb8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff fea5 	bl	8003248 <ADC_Disable>
 80034fe:	4603      	mov	r3, r0
 8003500:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d136      	bne.n	8003576 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003510:	f023 0302 	bic.w	r3, r3, #2
 8003514:	f043 0202 	orr.w	r2, r3, #2
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6839      	ldr	r1, [r7, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ff96 	bl	8003454 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003528:	e014      	b.n	8003554 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	3301      	adds	r3, #1
 800352e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4a18      	ldr	r2, [pc, #96]	@ (8003594 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d90d      	bls.n	8003554 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353c:	f023 0312 	bic.w	r3, r3, #18
 8003540:	f043 0210 	orr.w	r2, r3, #16
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e01b      	b.n	800358c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff94 	bl	8003486 <LL_ADC_IsCalibrationOnGoing>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e2      	bne.n	800352a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003568:	f023 0303 	bic.w	r3, r3, #3
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003574:	e005      	b.n	8003582 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357a:	f043 0210 	orr.w	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	0004de01 	.word	0x0004de01

08003598 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b0a1      	sub	sp, #132	@ 0x84
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003616:	2302      	movs	r3, #2
 8003618:	e0e7      	b.n	80037ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003622:	2300      	movs	r3, #0
 8003624:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003626:	2300      	movs	r3, #0
 8003628:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003632:	d102      	bne.n	800363a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003634:	4b6f      	ldr	r3, [pc, #444]	@ (80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	e009      	b.n	800364e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a6e      	ldr	r2, [pc, #440]	@ (80037f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d102      	bne.n	800364a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003644:	4b6d      	ldr	r3, [pc, #436]	@ (80037fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	e001      	b.n	800364e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10b      	bne.n	800366c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0be      	b.n	80037ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff ff1d 	bl	80034ae <LL_ADC_REG_IsConversionOngoing>
 8003674:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff ff17 	bl	80034ae <LL_ADC_REG_IsConversionOngoing>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	f040 80a0 	bne.w	80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003688:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800368a:	2b00      	cmp	r3, #0
 800368c:	f040 809c 	bne.w	80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003698:	d004      	beq.n	80036a4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a55      	ldr	r2, [pc, #340]	@ (80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d101      	bne.n	80036a8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80036a4:	4b56      	ldr	r3, [pc, #344]	@ (8003800 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80036a6:	e000      	b.n	80036aa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80036a8:	4b56      	ldr	r3, [pc, #344]	@ (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80036aa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d04b      	beq.n	800374c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	6859      	ldr	r1, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036c6:	035b      	lsls	r3, r3, #13
 80036c8:	430b      	orrs	r3, r1
 80036ca:	431a      	orrs	r2, r3
 80036cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036d8:	d004      	beq.n	80036e4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a45      	ldr	r2, [pc, #276]	@ (80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d10f      	bne.n	8003704 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80036e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80036e8:	f7ff fea1 	bl	800342e <LL_ADC_IsEnabled>
 80036ec:	4604      	mov	r4, r0
 80036ee:	4841      	ldr	r0, [pc, #260]	@ (80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036f0:	f7ff fe9d 	bl	800342e <LL_ADC_IsEnabled>
 80036f4:	4603      	mov	r3, r0
 80036f6:	4323      	orrs	r3, r4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e012      	b.n	800372a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003704:	483c      	ldr	r0, [pc, #240]	@ (80037f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003706:	f7ff fe92 	bl	800342e <LL_ADC_IsEnabled>
 800370a:	4604      	mov	r4, r0
 800370c:	483b      	ldr	r0, [pc, #236]	@ (80037fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800370e:	f7ff fe8e 	bl	800342e <LL_ADC_IsEnabled>
 8003712:	4603      	mov	r3, r0
 8003714:	431c      	orrs	r4, r3
 8003716:	483c      	ldr	r0, [pc, #240]	@ (8003808 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003718:	f7ff fe89 	bl	800342e <LL_ADC_IsEnabled>
 800371c:	4603      	mov	r3, r0
 800371e:	4323      	orrs	r3, r4
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d056      	beq.n	80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800372e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003736:	f023 030f 	bic.w	r3, r3, #15
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	6811      	ldr	r1, [r2, #0]
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	6892      	ldr	r2, [r2, #8]
 8003742:	430a      	orrs	r2, r1
 8003744:	431a      	orrs	r2, r3
 8003746:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003748:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800374a:	e047      	b.n	80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800374c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003754:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003756:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003760:	d004      	beq.n	800376c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a23      	ldr	r2, [pc, #140]	@ (80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d10f      	bne.n	800378c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800376c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003770:	f7ff fe5d 	bl	800342e <LL_ADC_IsEnabled>
 8003774:	4604      	mov	r4, r0
 8003776:	481f      	ldr	r0, [pc, #124]	@ (80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003778:	f7ff fe59 	bl	800342e <LL_ADC_IsEnabled>
 800377c:	4603      	mov	r3, r0
 800377e:	4323      	orrs	r3, r4
 8003780:	2b00      	cmp	r3, #0
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	e012      	b.n	80037b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800378c:	481a      	ldr	r0, [pc, #104]	@ (80037f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800378e:	f7ff fe4e 	bl	800342e <LL_ADC_IsEnabled>
 8003792:	4604      	mov	r4, r0
 8003794:	4819      	ldr	r0, [pc, #100]	@ (80037fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003796:	f7ff fe4a 	bl	800342e <LL_ADC_IsEnabled>
 800379a:	4603      	mov	r3, r0
 800379c:	431c      	orrs	r4, r3
 800379e:	481a      	ldr	r0, [pc, #104]	@ (8003808 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80037a0:	f7ff fe45 	bl	800342e <LL_ADC_IsEnabled>
 80037a4:	4603      	mov	r3, r0
 80037a6:	4323      	orrs	r3, r4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d012      	beq.n	80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80037be:	f023 030f 	bic.w	r3, r3, #15
 80037c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80037c4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037c6:	e009      	b.n	80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037cc:	f043 0220 	orr.w	r2, r3, #32
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80037da:	e000      	b.n	80037de <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80037e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3784      	adds	r7, #132	@ 0x84
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd90      	pop	{r4, r7, pc}
 80037f2:	bf00      	nop
 80037f4:	50000100 	.word	0x50000100
 80037f8:	50000400 	.word	0x50000400
 80037fc:	50000500 	.word	0x50000500
 8003800:	50000300 	.word	0x50000300
 8003804:	50000700 	.word	0x50000700
 8003808:	50000600 	.word	0x50000600

0800380c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800381c:	4b0c      	ldr	r3, [pc, #48]	@ (8003850 <__NVIC_SetPriorityGrouping+0x44>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003828:	4013      	ands	r3, r2
 800382a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800383c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800383e:	4a04      	ldr	r2, [pc, #16]	@ (8003850 <__NVIC_SetPriorityGrouping+0x44>)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	60d3      	str	r3, [r2, #12]
}
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003858:	4b04      	ldr	r3, [pc, #16]	@ (800386c <__NVIC_GetPriorityGrouping+0x18>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	f003 0307 	and.w	r3, r3, #7
}
 8003862:	4618      	mov	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	e000ed00 	.word	0xe000ed00

08003870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	2b00      	cmp	r3, #0
 8003880:	db0b      	blt.n	800389a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	f003 021f 	and.w	r2, r3, #31
 8003888:	4907      	ldr	r1, [pc, #28]	@ (80038a8 <__NVIC_EnableIRQ+0x38>)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2001      	movs	r0, #1
 8003892:	fa00 f202 	lsl.w	r2, r0, r2
 8003896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	e000e100 	.word	0xe000e100

080038ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	6039      	str	r1, [r7, #0]
 80038b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	db0a      	blt.n	80038d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	490c      	ldr	r1, [pc, #48]	@ (80038f8 <__NVIC_SetPriority+0x4c>)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	0112      	lsls	r2, r2, #4
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	440b      	add	r3, r1
 80038d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038d4:	e00a      	b.n	80038ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	4908      	ldr	r1, [pc, #32]	@ (80038fc <__NVIC_SetPriority+0x50>)
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	3b04      	subs	r3, #4
 80038e4:	0112      	lsls	r2, r2, #4
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	440b      	add	r3, r1
 80038ea:	761a      	strb	r2, [r3, #24]
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000e100 	.word	0xe000e100
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003900:	b480      	push	{r7}
 8003902:	b089      	sub	sp, #36	@ 0x24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f1c3 0307 	rsb	r3, r3, #7
 800391a:	2b04      	cmp	r3, #4
 800391c:	bf28      	it	cs
 800391e:	2304      	movcs	r3, #4
 8003920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3304      	adds	r3, #4
 8003926:	2b06      	cmp	r3, #6
 8003928:	d902      	bls.n	8003930 <NVIC_EncodePriority+0x30>
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3b03      	subs	r3, #3
 800392e:	e000      	b.n	8003932 <NVIC_EncodePriority+0x32>
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003934:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43da      	mvns	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	401a      	ands	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003948:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	fa01 f303 	lsl.w	r3, r1, r3
 8003952:	43d9      	mvns	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003958:	4313      	orrs	r3, r2
         );
}
 800395a:	4618      	mov	r0, r3
 800395c:	3724      	adds	r7, #36	@ 0x24
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ff4c 	bl	800380c <__NVIC_SetPriorityGrouping>
}
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800398a:	f7ff ff63 	bl	8003854 <__NVIC_GetPriorityGrouping>
 800398e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	6978      	ldr	r0, [r7, #20]
 8003996:	f7ff ffb3 	bl	8003900 <NVIC_EncodePriority>
 800399a:	4602      	mov	r2, r0
 800399c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff ff82 	bl	80038ac <__NVIC_SetPriority>
}
 80039a8:	bf00      	nop
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff ff56 	bl	8003870 <__NVIC_EnableIRQ>
}
 80039c4:	bf00      	nop
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e08d      	b.n	8003afa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	4b47      	ldr	r3, [pc, #284]	@ (8003b04 <HAL_DMA_Init+0x138>)
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d80f      	bhi.n	8003a0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	4b45      	ldr	r3, [pc, #276]	@ (8003b08 <HAL_DMA_Init+0x13c>)
 80039f2:	4413      	add	r3, r2
 80039f4:	4a45      	ldr	r2, [pc, #276]	@ (8003b0c <HAL_DMA_Init+0x140>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	091b      	lsrs	r3, r3, #4
 80039fc:	009a      	lsls	r2, r3, #2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a42      	ldr	r2, [pc, #264]	@ (8003b10 <HAL_DMA_Init+0x144>)
 8003a06:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a08:	e00e      	b.n	8003a28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	4b40      	ldr	r3, [pc, #256]	@ (8003b14 <HAL_DMA_Init+0x148>)
 8003a12:	4413      	add	r3, r2
 8003a14:	4a3d      	ldr	r2, [pc, #244]	@ (8003b0c <HAL_DMA_Init+0x140>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	009a      	lsls	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a3c      	ldr	r2, [pc, #240]	@ (8003b18 <HAL_DMA_Init+0x14c>)
 8003a26:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fa76 	bl	8003f6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a88:	d102      	bne.n	8003a90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003aa4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d010      	beq.n	8003ad0 <HAL_DMA_Init+0x104>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d80c      	bhi.n	8003ad0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fa96 	bl	8003fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	e008      	b.n	8003ae2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40020407 	.word	0x40020407
 8003b08:	bffdfff8 	.word	0xbffdfff8
 8003b0c:	cccccccd 	.word	0xcccccccd
 8003b10:	40020000 	.word	0x40020000
 8003b14:	bffdfbf8 	.word	0xbffdfbf8
 8003b18:	40020400 	.word	0x40020400

08003b1c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_DMA_Start_IT+0x20>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e066      	b.n	8003c0a <HAL_DMA_Start_IT+0xee>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d155      	bne.n	8003bfc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f9bb 	bl	8003ef0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 020e 	orr.w	r2, r2, #14
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e00f      	b.n	8003bb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0204 	bic.w	r2, r2, #4
 8003ba2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 020a 	orr.w	r2, r2, #10
 8003bb2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bd0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003be8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e005      	b.n	8003c08 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c04:	2302      	movs	r3, #2
 8003c06:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d005      	beq.n	8003c36 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]
 8003c34:	e037      	b.n	8003ca6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 020e 	bic.w	r2, r2, #14
 8003c44:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c54:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0201 	bic.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	f003 021f 	and.w	r2, r3, #31
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	2101      	movs	r1, #1
 8003c74:	fa01 f202 	lsl.w	r2, r1, r2
 8003c78:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c82:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00c      	beq.n	8003ca6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c9a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ca4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d00d      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2204      	movs	r2, #4
 8003ce0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
 8003cf6:	e047      	b.n	8003d88 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 020e 	bic.w	r2, r2, #14
 8003d06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0201 	bic.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	2101      	movs	r1, #1
 8003d36:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d44:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00c      	beq.n	8003d68 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d66:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4798      	blx	r3
    }
  }
  return status;
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	2204      	movs	r2, #4
 8003db4:	409a      	lsls	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d026      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x7a>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d021      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d107      	bne.n	8003de6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0204 	bic.w	r2, r2, #4
 8003de4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dea:	f003 021f 	and.w	r2, r3, #31
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	2104      	movs	r1, #4
 8003df4:	fa01 f202 	lsl.w	r2, r1, r2
 8003df8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d071      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e0a:	e06c      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	2202      	movs	r2, #2
 8003e16:	409a      	lsls	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d02e      	beq.n	8003e7e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d029      	beq.n	8003e7e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10b      	bne.n	8003e50 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 020a 	bic.w	r2, r2, #10
 8003e46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e54:	f003 021f 	and.w	r2, r3, #31
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e62:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d038      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e7c:	e033      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e82:	f003 031f 	and.w	r3, r3, #31
 8003e86:	2208      	movs	r2, #8
 8003e88:	409a      	lsls	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d02a      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d025      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 020e 	bic.w	r2, r2, #14
 8003eaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb0:	f003 021f 	and.w	r2, r3, #31
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	2101      	movs	r1, #1
 8003eba:	fa01 f202 	lsl.w	r2, r1, r2
 8003ebe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d004      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ee6:	bf00      	nop
 8003ee8:	bf00      	nop
}
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f06:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f18:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	f003 021f 	and.w	r2, r3, #31
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	2101      	movs	r1, #1
 8003f28:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b10      	cmp	r3, #16
 8003f3c:	d108      	bne.n	8003f50 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f4e:	e007      	b.n	8003f60 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	60da      	str	r2, [r3, #12]
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b16      	ldr	r3, [pc, #88]	@ (8003fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d802      	bhi.n	8003f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003f80:	4b15      	ldr	r3, [pc, #84]	@ (8003fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	e001      	b.n	8003f8a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003f86:	4b15      	ldr	r3, [pc, #84]	@ (8003fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f88:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	3b08      	subs	r3, #8
 8003f96:	4a12      	ldr	r2, [pc, #72]	@ (8003fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa4:	089b      	lsrs	r3, r3, #2
 8003fa6:	009a      	lsls	r2, r3, #2
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	4413      	add	r3, r2
 8003fac:	461a      	mov	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8003fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003fb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40020407 	.word	0x40020407
 8003fd8:	40020800 	.word	0x40020800
 8003fdc:	40020820 	.word	0x40020820
 8003fe0:	cccccccd 	.word	0xcccccccd
 8003fe4:	40020880 	.word	0x40020880

08003fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8004028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	461a      	mov	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a08      	ldr	r2, [pc, #32]	@ (800402c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800400a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3b01      	subs	r3, #1
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	2201      	movs	r2, #1
 8004016:	409a      	lsls	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	1000823f 	.word	0x1000823f
 800402c:	40020940 	.word	0x40020940

08004030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800403e:	e15a      	b.n	80042f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	2101      	movs	r1, #1
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	fa01 f303 	lsl.w	r3, r1, r3
 800404c:	4013      	ands	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 814c 	beq.w	80042f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d005      	beq.n	8004070 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800406c:	2b02      	cmp	r3, #2
 800406e:	d130      	bne.n	80040d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	2203      	movs	r2, #3
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4013      	ands	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040a6:	2201      	movs	r2, #1
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4013      	ands	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	091b      	lsrs	r3, r3, #4
 80040bc:	f003 0201 	and.w	r2, r3, #1
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d017      	beq.n	800410e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	2203      	movs	r2, #3
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d123      	bne.n	8004162 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	08da      	lsrs	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3208      	adds	r2, #8
 8004122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004126:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	220f      	movs	r2, #15
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43db      	mvns	r3, r3
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4013      	ands	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	08da      	lsrs	r2, r3, #3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3208      	adds	r2, #8
 800415c:	6939      	ldr	r1, [r7, #16]
 800415e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	2203      	movs	r2, #3
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4013      	ands	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f003 0203 	and.w	r2, r3, #3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80a6 	beq.w	80042f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004314 <HAL_GPIO_Init+0x2e4>)
 80041a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a8:	4a5a      	ldr	r2, [pc, #360]	@ (8004314 <HAL_GPIO_Init+0x2e4>)
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80041b0:	4b58      	ldr	r3, [pc, #352]	@ (8004314 <HAL_GPIO_Init+0x2e4>)
 80041b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041bc:	4a56      	ldr	r2, [pc, #344]	@ (8004318 <HAL_GPIO_Init+0x2e8>)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	089b      	lsrs	r3, r3, #2
 80041c2:	3302      	adds	r3, #2
 80041c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	220f      	movs	r2, #15
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4013      	ands	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80041e6:	d01f      	beq.n	8004228 <HAL_GPIO_Init+0x1f8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a4c      	ldr	r2, [pc, #304]	@ (800431c <HAL_GPIO_Init+0x2ec>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d019      	beq.n	8004224 <HAL_GPIO_Init+0x1f4>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a4b      	ldr	r2, [pc, #300]	@ (8004320 <HAL_GPIO_Init+0x2f0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d013      	beq.n	8004220 <HAL_GPIO_Init+0x1f0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a4a      	ldr	r2, [pc, #296]	@ (8004324 <HAL_GPIO_Init+0x2f4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00d      	beq.n	800421c <HAL_GPIO_Init+0x1ec>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a49      	ldr	r2, [pc, #292]	@ (8004328 <HAL_GPIO_Init+0x2f8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d007      	beq.n	8004218 <HAL_GPIO_Init+0x1e8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a48      	ldr	r2, [pc, #288]	@ (800432c <HAL_GPIO_Init+0x2fc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d101      	bne.n	8004214 <HAL_GPIO_Init+0x1e4>
 8004210:	2305      	movs	r3, #5
 8004212:	e00a      	b.n	800422a <HAL_GPIO_Init+0x1fa>
 8004214:	2306      	movs	r3, #6
 8004216:	e008      	b.n	800422a <HAL_GPIO_Init+0x1fa>
 8004218:	2304      	movs	r3, #4
 800421a:	e006      	b.n	800422a <HAL_GPIO_Init+0x1fa>
 800421c:	2303      	movs	r3, #3
 800421e:	e004      	b.n	800422a <HAL_GPIO_Init+0x1fa>
 8004220:	2302      	movs	r3, #2
 8004222:	e002      	b.n	800422a <HAL_GPIO_Init+0x1fa>
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <HAL_GPIO_Init+0x1fa>
 8004228:	2300      	movs	r3, #0
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	f002 0203 	and.w	r2, r2, #3
 8004230:	0092      	lsls	r2, r2, #2
 8004232:	4093      	lsls	r3, r2
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800423a:	4937      	ldr	r1, [pc, #220]	@ (8004318 <HAL_GPIO_Init+0x2e8>)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	3302      	adds	r3, #2
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004248:	4b39      	ldr	r3, [pc, #228]	@ (8004330 <HAL_GPIO_Init+0x300>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	43db      	mvns	r3, r3
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4013      	ands	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800426c:	4a30      	ldr	r2, [pc, #192]	@ (8004330 <HAL_GPIO_Init+0x300>)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004272:	4b2f      	ldr	r3, [pc, #188]	@ (8004330 <HAL_GPIO_Init+0x300>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	43db      	mvns	r3, r3
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4013      	ands	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004296:	4a26      	ldr	r2, [pc, #152]	@ (8004330 <HAL_GPIO_Init+0x300>)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800429c:	4b24      	ldr	r3, [pc, #144]	@ (8004330 <HAL_GPIO_Init+0x300>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4013      	ands	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004330 <HAL_GPIO_Init+0x300>)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004330 <HAL_GPIO_Init+0x300>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	43db      	mvns	r3, r3
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4013      	ands	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042ea:	4a11      	ldr	r2, [pc, #68]	@ (8004330 <HAL_GPIO_Init+0x300>)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	3301      	adds	r3, #1
 80042f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	f47f ae9d 	bne.w	8004040 <HAL_GPIO_Init+0x10>
  }
}
 8004306:	bf00      	nop
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40021000 	.word	0x40021000
 8004318:	40010000 	.word	0x40010000
 800431c:	48000400 	.word	0x48000400
 8004320:	48000800 	.word	0x48000800
 8004324:	48000c00 	.word	0x48000c00
 8004328:	48001000 	.word	0x48001000
 800432c:	48001400 	.word	0x48001400
 8004330:	40010400 	.word	0x40010400

08004334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	807b      	strh	r3, [r7, #2]
 8004340:	4613      	mov	r3, r2
 8004342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004344:	787b      	ldrb	r3, [r7, #1]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004350:	e002      	b.n	8004358 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004352:	887a      	ldrh	r2, [r7, #2]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800436e:	4b08      	ldr	r3, [pc, #32]	@ (8004390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	4013      	ands	r3, r2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d006      	beq.n	8004388 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800437a:	4a05      	ldr	r2, [pc, #20]	@ (8004390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004380:	88fb      	ldrh	r3, [r7, #6]
 8004382:	4618      	mov	r0, r3
 8004384:	f000 f806 	bl	8004394 <HAL_GPIO_EXTI_Callback>
  }
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40010400 	.word	0x40010400

08004394 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d141      	bne.n	800443e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043ba:	4b4b      	ldr	r3, [pc, #300]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c6:	d131      	bne.n	800442c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043c8:	4b47      	ldr	r3, [pc, #284]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ce:	4a46      	ldr	r2, [pc, #280]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043d8:	4b43      	ldr	r3, [pc, #268]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043e0:	4a41      	ldr	r2, [pc, #260]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043e8:	4b40      	ldr	r3, [pc, #256]	@ (80044ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2232      	movs	r2, #50	@ 0x32
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	4a3f      	ldr	r2, [pc, #252]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	0c9b      	lsrs	r3, r3, #18
 80043fa:	3301      	adds	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043fe:	e002      	b.n	8004406 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3b01      	subs	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004406:	4b38      	ldr	r3, [pc, #224]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004412:	d102      	bne.n	800441a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f2      	bne.n	8004400 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800441a:	4b33      	ldr	r3, [pc, #204]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004426:	d158      	bne.n	80044da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e057      	b.n	80044dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800442c:	4b2e      	ldr	r3, [pc, #184]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004432:	4a2d      	ldr	r2, [pc, #180]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004438:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800443c:	e04d      	b.n	80044da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004444:	d141      	bne.n	80044ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004446:	4b28      	ldr	r3, [pc, #160]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800444e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004452:	d131      	bne.n	80044b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004454:	4b24      	ldr	r3, [pc, #144]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800445a:	4a23      	ldr	r2, [pc, #140]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800445c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004460:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004464:	4b20      	ldr	r3, [pc, #128]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800446c:	4a1e      	ldr	r2, [pc, #120]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800446e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004472:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004474:	4b1d      	ldr	r3, [pc, #116]	@ (80044ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2232      	movs	r2, #50	@ 0x32
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	4a1c      	ldr	r2, [pc, #112]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004480:	fba2 2303 	umull	r2, r3, r2, r3
 8004484:	0c9b      	lsrs	r3, r3, #18
 8004486:	3301      	adds	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800448a:	e002      	b.n	8004492 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3b01      	subs	r3, #1
 8004490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004492:	4b15      	ldr	r3, [pc, #84]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800449e:	d102      	bne.n	80044a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f2      	bne.n	800448c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044a6:	4b10      	ldr	r3, [pc, #64]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044b2:	d112      	bne.n	80044da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e011      	b.n	80044dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044b8:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044be:	4a0a      	ldr	r2, [pc, #40]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80044c8:	e007      	b.n	80044da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044ca:	4b07      	ldr	r3, [pc, #28]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044d2:	4a05      	ldr	r2, [pc, #20]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40007000 	.word	0x40007000
 80044ec:	20000000 	.word	0x20000000
 80044f0:	431bde83 	.word	0x431bde83

080044f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80044f8:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	4a04      	ldr	r2, [pc, #16]	@ (8004510 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004502:	6093      	str	r3, [r2, #8]
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40007000 	.word	0x40007000

08004514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e2fe      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d075      	beq.n	800461e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004532:	4b97      	ldr	r3, [pc, #604]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800453c:	4b94      	ldr	r3, [pc, #592]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b0c      	cmp	r3, #12
 800454a:	d102      	bne.n	8004552 <HAL_RCC_OscConfig+0x3e>
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b03      	cmp	r3, #3
 8004550:	d002      	beq.n	8004558 <HAL_RCC_OscConfig+0x44>
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d10b      	bne.n	8004570 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004558:	4b8d      	ldr	r3, [pc, #564]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05b      	beq.n	800461c <HAL_RCC_OscConfig+0x108>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d157      	bne.n	800461c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e2d9      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004578:	d106      	bne.n	8004588 <HAL_RCC_OscConfig+0x74>
 800457a:	4b85      	ldr	r3, [pc, #532]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a84      	ldr	r2, [pc, #528]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e01d      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0x98>
 8004592:	4b7f      	ldr	r3, [pc, #508]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a7e      	ldr	r2, [pc, #504]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4b7c      	ldr	r3, [pc, #496]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a7b      	ldr	r2, [pc, #492]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 80045ac:	4b78      	ldr	r3, [pc, #480]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a77      	ldr	r2, [pc, #476]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80045b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b75      	ldr	r3, [pc, #468]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a74      	ldr	r2, [pc, #464]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80045be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d013      	beq.n	80045f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fd f9c4 	bl	8001958 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fd f9c0 	bl	8001958 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	@ 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e29e      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0xc0>
 80045f2:	e014      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fd f9b0 	bl	8001958 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fd f9ac 	bl	8001958 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	@ 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e28a      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800460e:	4b60      	ldr	r3, [pc, #384]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0xe8>
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d075      	beq.n	8004716 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800462a:	4b59      	ldr	r3, [pc, #356]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004634:	4b56      	ldr	r3, [pc, #344]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b0c      	cmp	r3, #12
 8004642:	d102      	bne.n	800464a <HAL_RCC_OscConfig+0x136>
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d002      	beq.n	8004650 <HAL_RCC_OscConfig+0x13c>
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2b04      	cmp	r3, #4
 800464e:	d11f      	bne.n	8004690 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004650:	4b4f      	ldr	r3, [pc, #316]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_OscConfig+0x154>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e25d      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004668:	4b49      	ldr	r3, [pc, #292]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	061b      	lsls	r3, r3, #24
 8004676:	4946      	ldr	r1, [pc, #280]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800467c:	4b45      	ldr	r3, [pc, #276]	@ (8004794 <HAL_RCC_OscConfig+0x280>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f7fc fb29 	bl	8000cd8 <HAL_InitTick>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d043      	beq.n	8004714 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e249      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d023      	beq.n	80046e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004698:	4b3d      	ldr	r3, [pc, #244]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a3c      	ldr	r2, [pc, #240]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800469e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd f958 	bl	8001958 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ac:	f7fd f954 	bl	8001958 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e232      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046be:	4b34      	ldr	r3, [pc, #208]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ca:	4b31      	ldr	r3, [pc, #196]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	061b      	lsls	r3, r3, #24
 80046d8:	492d      	ldr	r1, [pc, #180]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	604b      	str	r3, [r1, #4]
 80046de:	e01a      	b.n	8004716 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80046e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fd f934 	bl	8001958 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f4:	f7fd f930 	bl	8001958 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e20e      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004706:	4b22      	ldr	r3, [pc, #136]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x1e0>
 8004712:	e000      	b.n	8004716 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004714:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d041      	beq.n	80047a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d01c      	beq.n	8004764 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800472a:	4b19      	ldr	r3, [pc, #100]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800472c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004730:	4a17      	ldr	r2, [pc, #92]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473a:	f7fd f90d 	bl	8001958 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004742:	f7fd f909 	bl	8001958 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e1e7      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004754:	4b0e      	ldr	r3, [pc, #56]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0ef      	beq.n	8004742 <HAL_RCC_OscConfig+0x22e>
 8004762:	e020      	b.n	80047a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004764:	4b0a      	ldr	r3, [pc, #40]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800476a:	4a09      	ldr	r2, [pc, #36]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004774:	f7fd f8f0 	bl	8001958 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800477a:	e00d      	b.n	8004798 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800477c:	f7fd f8ec 	bl	8001958 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d906      	bls.n	8004798 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e1ca      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000
 8004794:	20000090 	.word	0x20000090
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004798:	4b8c      	ldr	r3, [pc, #560]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 800479a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1ea      	bne.n	800477c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 80a6 	beq.w	8004900 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b4:	2300      	movs	r3, #0
 80047b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047b8:	4b84      	ldr	r3, [pc, #528]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80047ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_OscConfig+0x2b4>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <HAL_RCC_OscConfig+0x2b6>
 80047c8:	2300      	movs	r3, #0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00d      	beq.n	80047ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ce:	4b7f      	ldr	r3, [pc, #508]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80047d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d2:	4a7e      	ldr	r2, [pc, #504]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80047da:	4b7c      	ldr	r3, [pc, #496]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80047dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047e6:	2301      	movs	r3, #1
 80047e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ea:	4b79      	ldr	r3, [pc, #484]	@ (80049d0 <HAL_RCC_OscConfig+0x4bc>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d118      	bne.n	8004828 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047f6:	4b76      	ldr	r3, [pc, #472]	@ (80049d0 <HAL_RCC_OscConfig+0x4bc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a75      	ldr	r2, [pc, #468]	@ (80049d0 <HAL_RCC_OscConfig+0x4bc>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004802:	f7fd f8a9 	bl	8001958 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480a:	f7fd f8a5 	bl	8001958 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e183      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800481c:	4b6c      	ldr	r3, [pc, #432]	@ (80049d0 <HAL_RCC_OscConfig+0x4bc>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d108      	bne.n	8004842 <HAL_RCC_OscConfig+0x32e>
 8004830:	4b66      	ldr	r3, [pc, #408]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004836:	4a65      	ldr	r2, [pc, #404]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004840:	e024      	b.n	800488c <HAL_RCC_OscConfig+0x378>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b05      	cmp	r3, #5
 8004848:	d110      	bne.n	800486c <HAL_RCC_OscConfig+0x358>
 800484a:	4b60      	ldr	r3, [pc, #384]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 800484c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004850:	4a5e      	ldr	r2, [pc, #376]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004852:	f043 0304 	orr.w	r3, r3, #4
 8004856:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800485a:	4b5c      	ldr	r3, [pc, #368]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004860:	4a5a      	ldr	r2, [pc, #360]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800486a:	e00f      	b.n	800488c <HAL_RCC_OscConfig+0x378>
 800486c:	4b57      	ldr	r3, [pc, #348]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004872:	4a56      	ldr	r2, [pc, #344]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800487c:	4b53      	ldr	r3, [pc, #332]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004882:	4a52      	ldr	r2, [pc, #328]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004884:	f023 0304 	bic.w	r3, r3, #4
 8004888:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d016      	beq.n	80048c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7fd f860 	bl	8001958 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489c:	f7fd f85c 	bl	8001958 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e138      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b2:	4b46      	ldr	r3, [pc, #280]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0ed      	beq.n	800489c <HAL_RCC_OscConfig+0x388>
 80048c0:	e015      	b.n	80048ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c2:	f7fd f849 	bl	8001958 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048c8:	e00a      	b.n	80048e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ca:	f7fd f845 	bl	8001958 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d8:	4293      	cmp	r3, r2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e121      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048e0:	4b3a      	ldr	r3, [pc, #232]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1ed      	bne.n	80048ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048ee:	7ffb      	ldrb	r3, [r7, #31]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d105      	bne.n	8004900 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f4:	4b35      	ldr	r3, [pc, #212]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f8:	4a34      	ldr	r2, [pc, #208]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80048fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	d03c      	beq.n	8004986 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01c      	beq.n	800494e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004914:	4b2d      	ldr	r3, [pc, #180]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004916:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800491a:	4a2c      	ldr	r2, [pc, #176]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004924:	f7fd f818 	bl	8001958 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800492c:	f7fd f814 	bl	8001958 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e0f2      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800493e:	4b23      	ldr	r3, [pc, #140]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004940:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0ef      	beq.n	800492c <HAL_RCC_OscConfig+0x418>
 800494c:	e01b      	b.n	8004986 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800494e:	4b1f      	ldr	r3, [pc, #124]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004950:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004954:	4a1d      	ldr	r2, [pc, #116]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495e:	f7fc fffb 	bl	8001958 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004966:	f7fc fff7 	bl	8001958 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e0d5      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004978:	4b14      	ldr	r3, [pc, #80]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 800497a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1ef      	bne.n	8004966 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 80c9 	beq.w	8004b22 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004990:	4b0e      	ldr	r3, [pc, #56]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b0c      	cmp	r3, #12
 800499a:	f000 8083 	beq.w	8004aa4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d15e      	bne.n	8004a64 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a6:	4b09      	ldr	r3, [pc, #36]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a08      	ldr	r2, [pc, #32]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80049ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b2:	f7fc ffd1 	bl	8001958 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b8:	e00c      	b.n	80049d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ba:	f7fc ffcd 	bl	8001958 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d905      	bls.n	80049d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e0ab      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d4:	4b55      	ldr	r3, [pc, #340]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1ec      	bne.n	80049ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e0:	4b52      	ldr	r3, [pc, #328]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	4b52      	ldr	r3, [pc, #328]	@ (8004b30 <HAL_RCC_OscConfig+0x61c>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6a11      	ldr	r1, [r2, #32]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049f0:	3a01      	subs	r2, #1
 80049f2:	0112      	lsls	r2, r2, #4
 80049f4:	4311      	orrs	r1, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80049fa:	0212      	lsls	r2, r2, #8
 80049fc:	4311      	orrs	r1, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a02:	0852      	lsrs	r2, r2, #1
 8004a04:	3a01      	subs	r2, #1
 8004a06:	0552      	lsls	r2, r2, #21
 8004a08:	4311      	orrs	r1, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a0e:	0852      	lsrs	r2, r2, #1
 8004a10:	3a01      	subs	r2, #1
 8004a12:	0652      	lsls	r2, r2, #25
 8004a14:	4311      	orrs	r1, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a1a:	06d2      	lsls	r2, r2, #27
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	4943      	ldr	r1, [pc, #268]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a24:	4b41      	ldr	r3, [pc, #260]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a40      	ldr	r2, [pc, #256]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a2e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a30:	4b3e      	ldr	r3, [pc, #248]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a3d      	ldr	r2, [pc, #244]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fc ff8c 	bl	8001958 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fc ff88 	bl	8001958 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e066      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a56:	4b35      	ldr	r3, [pc, #212]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x530>
 8004a62:	e05e      	b.n	8004b22 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a64:	4b31      	ldr	r3, [pc, #196]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a30      	ldr	r2, [pc, #192]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a70:	f7fc ff72 	bl	8001958 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fc ff6e 	bl	8001958 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e04c      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a8a:	4b28      	ldr	r3, [pc, #160]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a96:	4b25      	ldr	r3, [pc, #148]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	4924      	ldr	r1, [pc, #144]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a9c:	4b25      	ldr	r3, [pc, #148]	@ (8004b34 <HAL_RCC_OscConfig+0x620>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	60cb      	str	r3, [r1, #12]
 8004aa2:	e03e      	b.n	8004b22 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e039      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f003 0203 	and.w	r2, r3, #3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d12c      	bne.n	8004b1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d123      	bne.n	8004b1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d11b      	bne.n	8004b1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d113      	bne.n	8004b1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	3b01      	subs	r3, #1
 8004b04:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d109      	bne.n	8004b1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b14:	085b      	lsrs	r3, r3, #1
 8004b16:	3b01      	subs	r3, #1
 8004b18:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d001      	beq.n	8004b22 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3720      	adds	r7, #32
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	019f800c 	.word	0x019f800c
 8004b34:	feeefffc 	.word	0xfeeefffc

08004b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e11e      	b.n	8004d8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b50:	4b91      	ldr	r3, [pc, #580]	@ (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 030f 	and.w	r3, r3, #15
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d910      	bls.n	8004b80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5e:	4b8e      	ldr	r3, [pc, #568]	@ (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 020f 	bic.w	r2, r3, #15
 8004b66:	498c      	ldr	r1, [pc, #560]	@ (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6e:	4b8a      	ldr	r3, [pc, #552]	@ (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e106      	b.n	8004d8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d073      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d129      	bne.n	8004be8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b94:	4b81      	ldr	r3, [pc, #516]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0f4      	b.n	8004d8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ba4:	f000 f9d0 	bl	8004f48 <RCC_GetSysClockFreqFromPLLSource>
 8004ba8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4a7c      	ldr	r2, [pc, #496]	@ (8004da0 <HAL_RCC_ClockConfig+0x268>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d93f      	bls.n	8004c32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bb2:	4b7a      	ldr	r3, [pc, #488]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d033      	beq.n	8004c32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d12f      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bd2:	4b72      	ldr	r3, [pc, #456]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bda:	4a70      	ldr	r2, [pc, #448]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004be0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004be2:	2380      	movs	r3, #128	@ 0x80
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	e024      	b.n	8004c32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d107      	bne.n	8004c00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d109      	bne.n	8004c10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0c6      	b.n	8004d8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c00:	4b66      	ldr	r3, [pc, #408]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e0be      	b.n	8004d8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c10:	f000 f8ce 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 8004c14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4a61      	ldr	r2, [pc, #388]	@ (8004da0 <HAL_RCC_ClockConfig+0x268>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d909      	bls.n	8004c32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c1e:	4b5f      	ldr	r3, [pc, #380]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c26:	4a5d      	ldr	r2, [pc, #372]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c2e:	2380      	movs	r3, #128	@ 0x80
 8004c30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c32:	4b5a      	ldr	r3, [pc, #360]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f023 0203 	bic.w	r2, r3, #3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	4957      	ldr	r1, [pc, #348]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c44:	f7fc fe88 	bl	8001958 <HAL_GetTick>
 8004c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4a:	e00a      	b.n	8004c62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c4c:	f7fc fe84 	bl	8001958 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e095      	b.n	8004d8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c62:	4b4e      	ldr	r3, [pc, #312]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 020c 	and.w	r2, r3, #12
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d1eb      	bne.n	8004c4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d023      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c8c:	4b43      	ldr	r3, [pc, #268]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	4a42      	ldr	r2, [pc, #264]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004c92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d007      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004ca4:	4b3d      	ldr	r3, [pc, #244]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004cac:	4a3b      	ldr	r2, [pc, #236]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004cae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004cb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb4:	4b39      	ldr	r3, [pc, #228]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4936      	ldr	r1, [pc, #216]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	608b      	str	r3, [r1, #8]
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2b80      	cmp	r3, #128	@ 0x80
 8004ccc:	d105      	bne.n	8004cda <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cce:	4b33      	ldr	r3, [pc, #204]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	4a32      	ldr	r2, [pc, #200]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004cd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cd8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cda:	4b2f      	ldr	r3, [pc, #188]	@ (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d21d      	bcs.n	8004d24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f023 020f 	bic.w	r2, r3, #15
 8004cf0:	4929      	ldr	r1, [pc, #164]	@ (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004cf8:	f7fc fe2e 	bl	8001958 <HAL_GetTick>
 8004cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfe:	e00a      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d00:	f7fc fe2a 	bl	8001958 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e03b      	b.n	8004d8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d16:	4b20      	ldr	r3, [pc, #128]	@ (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d1ed      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d30:	4b1a      	ldr	r3, [pc, #104]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4917      	ldr	r1, [pc, #92]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d4e:	4b13      	ldr	r3, [pc, #76]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	490f      	ldr	r1, [pc, #60]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d62:	f000 f825 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 8004d66:	4602      	mov	r2, r0
 8004d68:	4b0c      	ldr	r3, [pc, #48]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	490c      	ldr	r1, [pc, #48]	@ (8004da4 <HAL_RCC_ClockConfig+0x26c>)
 8004d74:	5ccb      	ldrb	r3, [r1, r3]
 8004d76:	f003 031f 	and.w	r3, r3, #31
 8004d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004da8 <HAL_RCC_ClockConfig+0x270>)
 8004d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d82:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <HAL_RCC_ClockConfig+0x274>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fb ffa6 	bl	8000cd8 <HAL_InitTick>
 8004d8c:	4603      	mov	r3, r0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40022000 	.word	0x40022000
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	04c4b400 	.word	0x04c4b400
 8004da4:	080095c8 	.word	0x080095c8
 8004da8:	20000000 	.word	0x20000000
 8004dac:	20000090 	.word	0x20000090

08004db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004db6:	4b2c      	ldr	r3, [pc, #176]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 030c 	and.w	r3, r3, #12
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d102      	bne.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	e047      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004dc8:	4b27      	ldr	r3, [pc, #156]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 030c 	and.w	r3, r3, #12
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d102      	bne.n	8004dda <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dd4:	4b26      	ldr	r3, [pc, #152]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	e03e      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004dda:	4b23      	ldr	r3, [pc, #140]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 030c 	and.w	r3, r3, #12
 8004de2:	2b0c      	cmp	r3, #12
 8004de4:	d136      	bne.n	8004e54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004de6:	4b20      	ldr	r3, [pc, #128]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004df0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d10c      	bne.n	8004e1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e04:	4a1a      	ldr	r2, [pc, #104]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0c:	4a16      	ldr	r2, [pc, #88]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e0e:	68d2      	ldr	r2, [r2, #12]
 8004e10:	0a12      	lsrs	r2, r2, #8
 8004e12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e16:	fb02 f303 	mul.w	r3, r2, r3
 8004e1a:	617b      	str	r3, [r7, #20]
      break;
 8004e1c:	e00c      	b.n	8004e38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e1e:	4a13      	ldr	r2, [pc, #76]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e26:	4a10      	ldr	r2, [pc, #64]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e28:	68d2      	ldr	r2, [r2, #12]
 8004e2a:	0a12      	lsrs	r2, r2, #8
 8004e2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e30:	fb02 f303 	mul.w	r3, r2, r3
 8004e34:	617b      	str	r3, [r7, #20]
      break;
 8004e36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e38:	4b0b      	ldr	r3, [pc, #44]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	0e5b      	lsrs	r3, r3, #25
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	3301      	adds	r3, #1
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	e001      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e58:	693b      	ldr	r3, [r7, #16]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	00f42400 	.word	0x00f42400
 8004e70:	016e3600 	.word	0x016e3600

08004e74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e78:	4b03      	ldr	r3, [pc, #12]	@ (8004e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000000 	.word	0x20000000

08004e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e90:	f7ff fff0 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004e94:	4602      	mov	r2, r0
 8004e96:	4b06      	ldr	r3, [pc, #24]	@ (8004eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	0a1b      	lsrs	r3, r3, #8
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4904      	ldr	r1, [pc, #16]	@ (8004eb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ea2:	5ccb      	ldrb	r3, [r1, r3]
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	080095d8 	.word	0x080095d8

08004eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ebc:	f7ff ffda 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4b06      	ldr	r3, [pc, #24]	@ (8004edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	0adb      	lsrs	r3, r3, #11
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4904      	ldr	r1, [pc, #16]	@ (8004ee0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ece:	5ccb      	ldrb	r3, [r1, r3]
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	080095d8 	.word	0x080095d8

08004ee4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	220f      	movs	r2, #15
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004ef4:	4b12      	ldr	r3, [pc, #72]	@ (8004f40 <HAL_RCC_GetClockConfig+0x5c>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 0203 	and.w	r2, r3, #3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004f00:	4b0f      	ldr	r3, [pc, #60]	@ (8004f40 <HAL_RCC_GetClockConfig+0x5c>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f40 <HAL_RCC_GetClockConfig+0x5c>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004f18:	4b09      	ldr	r3, [pc, #36]	@ (8004f40 <HAL_RCC_GetClockConfig+0x5c>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	08db      	lsrs	r3, r3, #3
 8004f1e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f26:	4b07      	ldr	r3, [pc, #28]	@ (8004f44 <HAL_RCC_GetClockConfig+0x60>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 020f 	and.w	r2, r3, #15
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	601a      	str	r2, [r3, #0]
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40021000 	.word	0x40021000
 8004f44:	40022000 	.word	0x40022000

08004f48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f58:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	091b      	lsrs	r3, r3, #4
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	3301      	adds	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d10c      	bne.n	8004f86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f6c:	4a17      	ldr	r2, [pc, #92]	@ (8004fcc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f74:	4a14      	ldr	r2, [pc, #80]	@ (8004fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f76:	68d2      	ldr	r2, [r2, #12]
 8004f78:	0a12      	lsrs	r2, r2, #8
 8004f7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	617b      	str	r3, [r7, #20]
    break;
 8004f84:	e00c      	b.n	8004fa0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f86:	4a12      	ldr	r2, [pc, #72]	@ (8004fd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	4a0e      	ldr	r2, [pc, #56]	@ (8004fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f90:	68d2      	ldr	r2, [r2, #12]
 8004f92:	0a12      	lsrs	r2, r2, #8
 8004f94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f98:	fb02 f303 	mul.w	r3, r2, r3
 8004f9c:	617b      	str	r3, [r7, #20]
    break;
 8004f9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fa0:	4b09      	ldr	r3, [pc, #36]	@ (8004fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	0e5b      	lsrs	r3, r3, #25
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	3301      	adds	r3, #1
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004fba:	687b      	ldr	r3, [r7, #4]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	016e3600 	.word	0x016e3600
 8004fd0:	00f42400 	.word	0x00f42400

08004fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fdc:	2300      	movs	r3, #0
 8004fde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 8098 	beq.w	8005122 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ff6:	4b43      	ldr	r3, [pc, #268]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10d      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005002:	4b40      	ldr	r3, [pc, #256]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005006:	4a3f      	ldr	r2, [pc, #252]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800500c:	6593      	str	r3, [r2, #88]	@ 0x58
 800500e:	4b3d      	ldr	r3, [pc, #244]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800501a:	2301      	movs	r3, #1
 800501c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800501e:	4b3a      	ldr	r3, [pc, #232]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a39      	ldr	r2, [pc, #228]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005028:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800502a:	f7fc fc95 	bl	8001958 <HAL_GetTick>
 800502e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005030:	e009      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005032:	f7fc fc91 	bl	8001958 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d902      	bls.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	74fb      	strb	r3, [r7, #19]
        break;
 8005044:	e005      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005046:	4b30      	ldr	r3, [pc, #192]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0ef      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005052:	7cfb      	ldrb	r3, [r7, #19]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d159      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005058:	4b2a      	ldr	r3, [pc, #168]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800505e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005062:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d01e      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	429a      	cmp	r2, r3
 8005072:	d019      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005074:	4b23      	ldr	r3, [pc, #140]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800507a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800507e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005080:	4b20      	ldr	r3, [pc, #128]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005086:	4a1f      	ldr	r2, [pc, #124]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800508c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005090:	4b1c      	ldr	r3, [pc, #112]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005096:	4a1b      	ldr	r2, [pc, #108]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800509c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050a0:	4a18      	ldr	r2, [pc, #96]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d016      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b2:	f7fc fc51 	bl	8001958 <HAL_GetTick>
 80050b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050b8:	e00b      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ba:	f7fc fc4d 	bl	8001958 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d902      	bls.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	74fb      	strb	r3, [r7, #19]
            break;
 80050d0:	e006      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0ec      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80050e0:	7cfb      	ldrb	r3, [r7, #19]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10b      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050e6:	4b07      	ldr	r3, [pc, #28]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f4:	4903      	ldr	r1, [pc, #12]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050fc:	e008      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050fe:	7cfb      	ldrb	r3, [r7, #19]
 8005100:	74bb      	strb	r3, [r7, #18]
 8005102:	e005      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005104:	40021000 	.word	0x40021000
 8005108:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510c:	7cfb      	ldrb	r3, [r7, #19]
 800510e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005110:	7c7b      	ldrb	r3, [r7, #17]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d105      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005116:	4ba7      	ldr	r3, [pc, #668]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800511a:	4aa6      	ldr	r2, [pc, #664]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005120:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800512e:	4ba1      	ldr	r3, [pc, #644]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005134:	f023 0203 	bic.w	r2, r3, #3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	499d      	ldr	r1, [pc, #628]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005150:	4b98      	ldr	r3, [pc, #608]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005156:	f023 020c 	bic.w	r2, r3, #12
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	4995      	ldr	r1, [pc, #596]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005160:	4313      	orrs	r3, r2
 8005162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005172:	4b90      	ldr	r3, [pc, #576]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005178:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	498c      	ldr	r1, [pc, #560]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005194:	4b87      	ldr	r3, [pc, #540]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	4984      	ldr	r1, [pc, #528]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051b6:	4b7f      	ldr	r3, [pc, #508]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	497b      	ldr	r1, [pc, #492]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051d8:	4b76      	ldr	r3, [pc, #472]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	4973      	ldr	r1, [pc, #460]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051fa:	4b6e      	ldr	r3, [pc, #440]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005200:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	496a      	ldr	r1, [pc, #424]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800521c:	4b65      	ldr	r3, [pc, #404]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800521e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005222:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	4962      	ldr	r1, [pc, #392]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800523e:	4b5d      	ldr	r3, [pc, #372]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005244:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	4959      	ldr	r1, [pc, #356]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005260:	4b54      	ldr	r3, [pc, #336]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005262:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005266:	f023 0203 	bic.w	r2, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526e:	4951      	ldr	r1, [pc, #324]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005282:	4b4c      	ldr	r3, [pc, #304]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005288:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	4948      	ldr	r1, [pc, #288]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d015      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052a4:	4b43      	ldr	r3, [pc, #268]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b2:	4940      	ldr	r1, [pc, #256]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052c2:	d105      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c4:	4b3b      	ldr	r3, [pc, #236]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	4a3a      	ldr	r2, [pc, #232]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052ce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d015      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052dc:	4b35      	ldr	r3, [pc, #212]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ea:	4932      	ldr	r1, [pc, #200]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052fa:	d105      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052fc:	4b2d      	ldr	r3, [pc, #180]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	4a2c      	ldr	r2, [pc, #176]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005306:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d015      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005314:	4b27      	ldr	r3, [pc, #156]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005322:	4924      	ldr	r1, [pc, #144]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005332:	d105      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005334:	4b1f      	ldr	r3, [pc, #124]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	4a1e      	ldr	r2, [pc, #120]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800533e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d015      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800534c:	4b19      	ldr	r3, [pc, #100]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800534e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005352:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535a:	4916      	ldr	r1, [pc, #88]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005366:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800536a:	d105      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800536c:	4b11      	ldr	r3, [pc, #68]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4a10      	ldr	r2, [pc, #64]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005376:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d019      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005384:	4b0b      	ldr	r3, [pc, #44]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	4908      	ldr	r1, [pc, #32]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053a2:	d109      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053a4:	4b03      	ldr	r3, [pc, #12]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	4a02      	ldr	r2, [pc, #8]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053ae:	60d3      	str	r3, [r2, #12]
 80053b0:	e002      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80053b2:	bf00      	nop
 80053b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d015      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80053c4:	4b29      	ldr	r3, [pc, #164]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d2:	4926      	ldr	r1, [pc, #152]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053e2:	d105      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053e4:	4b21      	ldr	r3, [pc, #132]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	4a20      	ldr	r2, [pc, #128]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d015      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80053fc:	4b1b      	ldr	r3, [pc, #108]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005402:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800540a:	4918      	ldr	r1, [pc, #96]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800541a:	d105      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800541c:	4b13      	ldr	r3, [pc, #76]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4a12      	ldr	r2, [pc, #72]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005426:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d015      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005434:	4b0d      	ldr	r3, [pc, #52]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005436:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800543a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005442:	490a      	ldr	r1, [pc, #40]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800544e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005452:	d105      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005454:	4b05      	ldr	r3, [pc, #20]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4a04      	ldr	r2, [pc, #16]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800545a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800545e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005460:	7cbb      	ldrb	r3, [r7, #18]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40021000 	.word	0x40021000

08005470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e049      	b.n	8005516 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7fb ff1e 	bl	80012d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4619      	mov	r1, r3
 80054ae:	4610      	mov	r0, r2
 80054b0:	f000 fc00 	bl	8005cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d001      	beq.n	8005538 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e04c      	b.n	80055d2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a26      	ldr	r2, [pc, #152]	@ (80055e0 <HAL_TIM_Base_Start+0xc0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d022      	beq.n	8005590 <HAL_TIM_Base_Start+0x70>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005552:	d01d      	beq.n	8005590 <HAL_TIM_Base_Start+0x70>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a22      	ldr	r2, [pc, #136]	@ (80055e4 <HAL_TIM_Base_Start+0xc4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d018      	beq.n	8005590 <HAL_TIM_Base_Start+0x70>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a21      	ldr	r2, [pc, #132]	@ (80055e8 <HAL_TIM_Base_Start+0xc8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d013      	beq.n	8005590 <HAL_TIM_Base_Start+0x70>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1f      	ldr	r2, [pc, #124]	@ (80055ec <HAL_TIM_Base_Start+0xcc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00e      	beq.n	8005590 <HAL_TIM_Base_Start+0x70>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1e      	ldr	r2, [pc, #120]	@ (80055f0 <HAL_TIM_Base_Start+0xd0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d009      	beq.n	8005590 <HAL_TIM_Base_Start+0x70>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1c      	ldr	r2, [pc, #112]	@ (80055f4 <HAL_TIM_Base_Start+0xd4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d004      	beq.n	8005590 <HAL_TIM_Base_Start+0x70>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1b      	ldr	r2, [pc, #108]	@ (80055f8 <HAL_TIM_Base_Start+0xd8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d115      	bne.n	80055bc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	4b19      	ldr	r3, [pc, #100]	@ (80055fc <HAL_TIM_Base_Start+0xdc>)
 8005598:	4013      	ands	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b06      	cmp	r3, #6
 80055a0:	d015      	beq.n	80055ce <HAL_TIM_Base_Start+0xae>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055a8:	d011      	beq.n	80055ce <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f042 0201 	orr.w	r2, r2, #1
 80055b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ba:	e008      	b.n	80055ce <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0201 	orr.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	e000      	b.n	80055d0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800
 80055ec:	40000c00 	.word	0x40000c00
 80055f0:	40013400 	.word	0x40013400
 80055f4:	40014000 	.word	0x40014000
 80055f8:	40015000 	.word	0x40015000
 80055fc:	00010007 	.word	0x00010007

08005600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b01      	cmp	r3, #1
 8005612:	d001      	beq.n	8005618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e054      	b.n	80056c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a26      	ldr	r2, [pc, #152]	@ (80056d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d022      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0x80>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005642:	d01d      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0x80>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a22      	ldr	r2, [pc, #136]	@ (80056d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d018      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0x80>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a21      	ldr	r2, [pc, #132]	@ (80056d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d013      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0x80>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a1f      	ldr	r2, [pc, #124]	@ (80056dc <HAL_TIM_Base_Start_IT+0xdc>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00e      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0x80>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a1e      	ldr	r2, [pc, #120]	@ (80056e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d009      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0x80>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1c      	ldr	r2, [pc, #112]	@ (80056e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d004      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0x80>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1b      	ldr	r2, [pc, #108]	@ (80056e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d115      	bne.n	80056ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	4b19      	ldr	r3, [pc, #100]	@ (80056ec <HAL_TIM_Base_Start_IT+0xec>)
 8005688:	4013      	ands	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b06      	cmp	r3, #6
 8005690:	d015      	beq.n	80056be <HAL_TIM_Base_Start_IT+0xbe>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005698:	d011      	beq.n	80056be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0201 	orr.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056aa:	e008      	b.n	80056be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	e000      	b.n	80056c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40012c00 	.word	0x40012c00
 80056d4:	40000400 	.word	0x40000400
 80056d8:	40000800 	.word	0x40000800
 80056dc:	40000c00 	.word	0x40000c00
 80056e0:	40013400 	.word	0x40013400
 80056e4:	40014000 	.word	0x40014000
 80056e8:	40015000 	.word	0x40015000
 80056ec:	00010007 	.word	0x00010007

080056f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e049      	b.n	8005796 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fb fd4e 	bl	80011b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f000 fac0 	bl	8005cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d020      	beq.n	8005802 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d01b      	beq.n	8005802 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f06f 0202 	mvn.w	r2, #2
 80057d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fa45 	bl	8005c78 <HAL_TIM_IC_CaptureCallback>
 80057ee:	e005      	b.n	80057fc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fa37 	bl	8005c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fa48 	bl	8005c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	d020      	beq.n	800584e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01b      	beq.n	800584e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f06f 0204 	mvn.w	r2, #4
 800581e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fa1f 	bl	8005c78 <HAL_TIM_IC_CaptureCallback>
 800583a:	e005      	b.n	8005848 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fa11 	bl	8005c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fa22 	bl	8005c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	2b00      	cmp	r3, #0
 8005856:	d020      	beq.n	800589a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d01b      	beq.n	800589a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f06f 0208 	mvn.w	r2, #8
 800586a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2204      	movs	r2, #4
 8005870:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	f003 0303 	and.w	r3, r3, #3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f9f9 	bl	8005c78 <HAL_TIM_IC_CaptureCallback>
 8005886:	e005      	b.n	8005894 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f9eb 	bl	8005c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f9fc 	bl	8005c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f003 0310 	and.w	r3, r3, #16
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d020      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f003 0310 	and.w	r3, r3, #16
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d01b      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f06f 0210 	mvn.w	r2, #16
 80058b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2208      	movs	r2, #8
 80058bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f9d3 	bl	8005c78 <HAL_TIM_IC_CaptureCallback>
 80058d2:	e005      	b.n	80058e0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f9c5 	bl	8005c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f9d6 	bl	8005c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00c      	beq.n	800590a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f06f 0201 	mvn.w	r2, #1
 8005902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7fb ff19 	bl	800173c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005910:	2b00      	cmp	r3, #0
 8005912:	d104      	bne.n	800591e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00c      	beq.n	8005938 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005924:	2b00      	cmp	r3, #0
 8005926:	d007      	beq.n	8005938 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fff4 	bl	8006920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00c      	beq.n	800595c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005948:	2b00      	cmp	r3, #0
 800594a:	d007      	beq.n	800595c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 ffec 	bl	8006934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00c      	beq.n	8005980 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596c:	2b00      	cmp	r3, #0
 800596e:	d007      	beq.n	8005980 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f990 	bl	8005ca0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00c      	beq.n	80059a4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f06f 0220 	mvn.w	r2, #32
 800599c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 ffb4 	bl	800690c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00c      	beq.n	80059c8 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80059c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 ffc0 	bl	8006948 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00c      	beq.n	80059ec <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d007      	beq.n	80059ec <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80059e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 ffb8 	bl	800695c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00c      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d007      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 ffb0 	bl	8006970 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00c      	beq.n	8005a34 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 ffa8 	bl	8006984 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a34:	bf00      	nop
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e0ff      	b.n	8005c5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b14      	cmp	r3, #20
 8005a66:	f200 80f0 	bhi.w	8005c4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a70:	08005ac5 	.word	0x08005ac5
 8005a74:	08005c4b 	.word	0x08005c4b
 8005a78:	08005c4b 	.word	0x08005c4b
 8005a7c:	08005c4b 	.word	0x08005c4b
 8005a80:	08005b05 	.word	0x08005b05
 8005a84:	08005c4b 	.word	0x08005c4b
 8005a88:	08005c4b 	.word	0x08005c4b
 8005a8c:	08005c4b 	.word	0x08005c4b
 8005a90:	08005b47 	.word	0x08005b47
 8005a94:	08005c4b 	.word	0x08005c4b
 8005a98:	08005c4b 	.word	0x08005c4b
 8005a9c:	08005c4b 	.word	0x08005c4b
 8005aa0:	08005b87 	.word	0x08005b87
 8005aa4:	08005c4b 	.word	0x08005c4b
 8005aa8:	08005c4b 	.word	0x08005c4b
 8005aac:	08005c4b 	.word	0x08005c4b
 8005ab0:	08005bc9 	.word	0x08005bc9
 8005ab4:	08005c4b 	.word	0x08005c4b
 8005ab8:	08005c4b 	.word	0x08005c4b
 8005abc:	08005c4b 	.word	0x08005c4b
 8005ac0:	08005c09 	.word	0x08005c09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 f9a6 	bl	8005e1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0208 	orr.w	r2, r2, #8
 8005ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0204 	bic.w	r2, r2, #4
 8005aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6999      	ldr	r1, [r3, #24]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	619a      	str	r2, [r3, #24]
      break;
 8005b02:	e0a5      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fa20 	bl	8005f50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699a      	ldr	r2, [r3, #24]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6999      	ldr	r1, [r3, #24]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	021a      	lsls	r2, r3, #8
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	619a      	str	r2, [r3, #24]
      break;
 8005b44:	e084      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fa93 	bl	8006078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0208 	orr.w	r2, r2, #8
 8005b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69da      	ldr	r2, [r3, #28]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0204 	bic.w	r2, r2, #4
 8005b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69d9      	ldr	r1, [r3, #28]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	61da      	str	r2, [r3, #28]
      break;
 8005b84:	e064      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 fb05 	bl	800619c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69d9      	ldr	r1, [r3, #28]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	021a      	lsls	r2, r3, #8
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	61da      	str	r2, [r3, #28]
      break;
 8005bc6:	e043      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fb78 	bl	80062c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0208 	orr.w	r2, r2, #8
 8005be2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0204 	bic.w	r2, r2, #4
 8005bf2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	691a      	ldr	r2, [r3, #16]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c06:	e023      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fbc2 	bl	8006398 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c22:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c32:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	021a      	lsls	r2, r3, #8
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c48:	e002      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop

08005c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a4c      	ldr	r2, [pc, #304]	@ (8005df8 <TIM_Base_SetConfig+0x144>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d017      	beq.n	8005cfc <TIM_Base_SetConfig+0x48>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cd2:	d013      	beq.n	8005cfc <TIM_Base_SetConfig+0x48>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a49      	ldr	r2, [pc, #292]	@ (8005dfc <TIM_Base_SetConfig+0x148>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00f      	beq.n	8005cfc <TIM_Base_SetConfig+0x48>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a48      	ldr	r2, [pc, #288]	@ (8005e00 <TIM_Base_SetConfig+0x14c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d00b      	beq.n	8005cfc <TIM_Base_SetConfig+0x48>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a47      	ldr	r2, [pc, #284]	@ (8005e04 <TIM_Base_SetConfig+0x150>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d007      	beq.n	8005cfc <TIM_Base_SetConfig+0x48>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a46      	ldr	r2, [pc, #280]	@ (8005e08 <TIM_Base_SetConfig+0x154>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_Base_SetConfig+0x48>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a45      	ldr	r2, [pc, #276]	@ (8005e0c <TIM_Base_SetConfig+0x158>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d108      	bne.n	8005d0e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a39      	ldr	r2, [pc, #228]	@ (8005df8 <TIM_Base_SetConfig+0x144>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d023      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d1c:	d01f      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a36      	ldr	r2, [pc, #216]	@ (8005dfc <TIM_Base_SetConfig+0x148>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d01b      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a35      	ldr	r2, [pc, #212]	@ (8005e00 <TIM_Base_SetConfig+0x14c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d017      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a34      	ldr	r2, [pc, #208]	@ (8005e04 <TIM_Base_SetConfig+0x150>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d013      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a33      	ldr	r2, [pc, #204]	@ (8005e08 <TIM_Base_SetConfig+0x154>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00f      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a33      	ldr	r2, [pc, #204]	@ (8005e10 <TIM_Base_SetConfig+0x15c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00b      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a32      	ldr	r2, [pc, #200]	@ (8005e14 <TIM_Base_SetConfig+0x160>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d007      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a31      	ldr	r2, [pc, #196]	@ (8005e18 <TIM_Base_SetConfig+0x164>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d003      	beq.n	8005d5e <TIM_Base_SetConfig+0xaa>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a2c      	ldr	r2, [pc, #176]	@ (8005e0c <TIM_Base_SetConfig+0x158>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d108      	bne.n	8005d70 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a18      	ldr	r2, [pc, #96]	@ (8005df8 <TIM_Base_SetConfig+0x144>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d013      	beq.n	8005dc4 <TIM_Base_SetConfig+0x110>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005e08 <TIM_Base_SetConfig+0x154>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00f      	beq.n	8005dc4 <TIM_Base_SetConfig+0x110>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a1a      	ldr	r2, [pc, #104]	@ (8005e10 <TIM_Base_SetConfig+0x15c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <TIM_Base_SetConfig+0x110>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a19      	ldr	r2, [pc, #100]	@ (8005e14 <TIM_Base_SetConfig+0x160>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d007      	beq.n	8005dc4 <TIM_Base_SetConfig+0x110>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a18      	ldr	r2, [pc, #96]	@ (8005e18 <TIM_Base_SetConfig+0x164>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_Base_SetConfig+0x110>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a13      	ldr	r2, [pc, #76]	@ (8005e0c <TIM_Base_SetConfig+0x158>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d103      	bne.n	8005dcc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d105      	bne.n	8005dea <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f023 0201 	bic.w	r2, r3, #1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	611a      	str	r2, [r3, #16]
  }
}
 8005dea:	bf00      	nop
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40012c00 	.word	0x40012c00
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40000800 	.word	0x40000800
 8005e04:	40000c00 	.word	0x40000c00
 8005e08:	40013400 	.word	0x40013400
 8005e0c:	40015000 	.word	0x40015000
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40014400 	.word	0x40014400
 8005e18:	40014800 	.word	0x40014800

08005e1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	f023 0201 	bic.w	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0303 	bic.w	r3, r3, #3
 8005e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f023 0302 	bic.w	r3, r3, #2
 8005e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a30      	ldr	r2, [pc, #192]	@ (8005f38 <TIM_OC1_SetConfig+0x11c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d013      	beq.n	8005ea4 <TIM_OC1_SetConfig+0x88>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8005f3c <TIM_OC1_SetConfig+0x120>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00f      	beq.n	8005ea4 <TIM_OC1_SetConfig+0x88>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a2e      	ldr	r2, [pc, #184]	@ (8005f40 <TIM_OC1_SetConfig+0x124>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00b      	beq.n	8005ea4 <TIM_OC1_SetConfig+0x88>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8005f44 <TIM_OC1_SetConfig+0x128>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d007      	beq.n	8005ea4 <TIM_OC1_SetConfig+0x88>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a2c      	ldr	r2, [pc, #176]	@ (8005f48 <TIM_OC1_SetConfig+0x12c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_OC1_SetConfig+0x88>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a2b      	ldr	r2, [pc, #172]	@ (8005f4c <TIM_OC1_SetConfig+0x130>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d10c      	bne.n	8005ebe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f023 0308 	bic.w	r3, r3, #8
 8005eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f023 0304 	bic.w	r3, r3, #4
 8005ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f38 <TIM_OC1_SetConfig+0x11c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d013      	beq.n	8005eee <TIM_OC1_SetConfig+0xd2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8005f3c <TIM_OC1_SetConfig+0x120>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00f      	beq.n	8005eee <TIM_OC1_SetConfig+0xd2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f40 <TIM_OC1_SetConfig+0x124>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00b      	beq.n	8005eee <TIM_OC1_SetConfig+0xd2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8005f44 <TIM_OC1_SetConfig+0x128>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d007      	beq.n	8005eee <TIM_OC1_SetConfig+0xd2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a19      	ldr	r2, [pc, #100]	@ (8005f48 <TIM_OC1_SetConfig+0x12c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d003      	beq.n	8005eee <TIM_OC1_SetConfig+0xd2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a18      	ldr	r2, [pc, #96]	@ (8005f4c <TIM_OC1_SetConfig+0x130>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d111      	bne.n	8005f12 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	621a      	str	r2, [r3, #32]
}
 8005f2c:	bf00      	nop
 8005f2e:	371c      	adds	r7, #28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	40012c00 	.word	0x40012c00
 8005f3c:	40013400 	.word	0x40013400
 8005f40:	40014000 	.word	0x40014000
 8005f44:	40014400 	.word	0x40014400
 8005f48:	40014800 	.word	0x40014800
 8005f4c:	40015000 	.word	0x40015000

08005f50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	f023 0210 	bic.w	r2, r3, #16
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	021b      	lsls	r3, r3, #8
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f023 0320 	bic.w	r3, r3, #32
 8005f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a2c      	ldr	r2, [pc, #176]	@ (8006060 <TIM_OC2_SetConfig+0x110>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d007      	beq.n	8005fc4 <TIM_OC2_SetConfig+0x74>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8006064 <TIM_OC2_SetConfig+0x114>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d003      	beq.n	8005fc4 <TIM_OC2_SetConfig+0x74>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8006068 <TIM_OC2_SetConfig+0x118>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d10d      	bne.n	8005fe0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8006060 <TIM_OC2_SetConfig+0x110>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d013      	beq.n	8006010 <TIM_OC2_SetConfig+0xc0>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a1e      	ldr	r2, [pc, #120]	@ (8006064 <TIM_OC2_SetConfig+0x114>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00f      	beq.n	8006010 <TIM_OC2_SetConfig+0xc0>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800606c <TIM_OC2_SetConfig+0x11c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00b      	beq.n	8006010 <TIM_OC2_SetConfig+0xc0>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8006070 <TIM_OC2_SetConfig+0x120>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d007      	beq.n	8006010 <TIM_OC2_SetConfig+0xc0>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a1c      	ldr	r2, [pc, #112]	@ (8006074 <TIM_OC2_SetConfig+0x124>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_OC2_SetConfig+0xc0>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a17      	ldr	r2, [pc, #92]	@ (8006068 <TIM_OC2_SetConfig+0x118>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d113      	bne.n	8006038 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006016:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800601e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	4313      	orrs	r3, r2
 8006036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	621a      	str	r2, [r3, #32]
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40012c00 	.word	0x40012c00
 8006064:	40013400 	.word	0x40013400
 8006068:	40015000 	.word	0x40015000
 800606c:	40014000 	.word	0x40014000
 8006070:	40014400 	.word	0x40014400
 8006074:	40014800 	.word	0x40014800

08006078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0303 	bic.w	r3, r3, #3
 80060b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a2b      	ldr	r2, [pc, #172]	@ (8006184 <TIM_OC3_SetConfig+0x10c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d007      	beq.n	80060ea <TIM_OC3_SetConfig+0x72>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2a      	ldr	r2, [pc, #168]	@ (8006188 <TIM_OC3_SetConfig+0x110>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d003      	beq.n	80060ea <TIM_OC3_SetConfig+0x72>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a29      	ldr	r2, [pc, #164]	@ (800618c <TIM_OC3_SetConfig+0x114>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d10d      	bne.n	8006106 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	021b      	lsls	r3, r3, #8
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a1e      	ldr	r2, [pc, #120]	@ (8006184 <TIM_OC3_SetConfig+0x10c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d013      	beq.n	8006136 <TIM_OC3_SetConfig+0xbe>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a1d      	ldr	r2, [pc, #116]	@ (8006188 <TIM_OC3_SetConfig+0x110>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00f      	beq.n	8006136 <TIM_OC3_SetConfig+0xbe>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a1d      	ldr	r2, [pc, #116]	@ (8006190 <TIM_OC3_SetConfig+0x118>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00b      	beq.n	8006136 <TIM_OC3_SetConfig+0xbe>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a1c      	ldr	r2, [pc, #112]	@ (8006194 <TIM_OC3_SetConfig+0x11c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d007      	beq.n	8006136 <TIM_OC3_SetConfig+0xbe>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a1b      	ldr	r2, [pc, #108]	@ (8006198 <TIM_OC3_SetConfig+0x120>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d003      	beq.n	8006136 <TIM_OC3_SetConfig+0xbe>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a16      	ldr	r2, [pc, #88]	@ (800618c <TIM_OC3_SetConfig+0x114>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d113      	bne.n	800615e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800613c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	621a      	str	r2, [r3, #32]
}
 8006178:	bf00      	nop
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	40012c00 	.word	0x40012c00
 8006188:	40013400 	.word	0x40013400
 800618c:	40015000 	.word	0x40015000
 8006190:	40014000 	.word	0x40014000
 8006194:	40014400 	.word	0x40014400
 8006198:	40014800 	.word	0x40014800

0800619c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	021b      	lsls	r3, r3, #8
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	031b      	lsls	r3, r3, #12
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a2c      	ldr	r2, [pc, #176]	@ (80062ac <TIM_OC4_SetConfig+0x110>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d007      	beq.n	8006210 <TIM_OC4_SetConfig+0x74>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a2b      	ldr	r2, [pc, #172]	@ (80062b0 <TIM_OC4_SetConfig+0x114>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d003      	beq.n	8006210 <TIM_OC4_SetConfig+0x74>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a2a      	ldr	r2, [pc, #168]	@ (80062b4 <TIM_OC4_SetConfig+0x118>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d10d      	bne.n	800622c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	031b      	lsls	r3, r3, #12
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	4313      	orrs	r3, r2
 8006222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800622a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a1f      	ldr	r2, [pc, #124]	@ (80062ac <TIM_OC4_SetConfig+0x110>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d013      	beq.n	800625c <TIM_OC4_SetConfig+0xc0>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a1e      	ldr	r2, [pc, #120]	@ (80062b0 <TIM_OC4_SetConfig+0x114>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00f      	beq.n	800625c <TIM_OC4_SetConfig+0xc0>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a1e      	ldr	r2, [pc, #120]	@ (80062b8 <TIM_OC4_SetConfig+0x11c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00b      	beq.n	800625c <TIM_OC4_SetConfig+0xc0>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a1d      	ldr	r2, [pc, #116]	@ (80062bc <TIM_OC4_SetConfig+0x120>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d007      	beq.n	800625c <TIM_OC4_SetConfig+0xc0>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a1c      	ldr	r2, [pc, #112]	@ (80062c0 <TIM_OC4_SetConfig+0x124>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_OC4_SetConfig+0xc0>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a17      	ldr	r2, [pc, #92]	@ (80062b4 <TIM_OC4_SetConfig+0x118>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d113      	bne.n	8006284 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006262:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800626a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	019b      	lsls	r3, r3, #6
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	019b      	lsls	r3, r3, #6
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	621a      	str	r2, [r3, #32]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40012c00 	.word	0x40012c00
 80062b0:	40013400 	.word	0x40013400
 80062b4:	40015000 	.word	0x40015000
 80062b8:	40014000 	.word	0x40014000
 80062bc:	40014400 	.word	0x40014400
 80062c0:	40014800 	.word	0x40014800

080062c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006308:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	041b      	lsls	r3, r3, #16
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a19      	ldr	r2, [pc, #100]	@ (8006380 <TIM_OC5_SetConfig+0xbc>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <TIM_OC5_SetConfig+0x82>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a18      	ldr	r2, [pc, #96]	@ (8006384 <TIM_OC5_SetConfig+0xc0>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d00f      	beq.n	8006346 <TIM_OC5_SetConfig+0x82>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a17      	ldr	r2, [pc, #92]	@ (8006388 <TIM_OC5_SetConfig+0xc4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00b      	beq.n	8006346 <TIM_OC5_SetConfig+0x82>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a16      	ldr	r2, [pc, #88]	@ (800638c <TIM_OC5_SetConfig+0xc8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d007      	beq.n	8006346 <TIM_OC5_SetConfig+0x82>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a15      	ldr	r2, [pc, #84]	@ (8006390 <TIM_OC5_SetConfig+0xcc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d003      	beq.n	8006346 <TIM_OC5_SetConfig+0x82>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a14      	ldr	r2, [pc, #80]	@ (8006394 <TIM_OC5_SetConfig+0xd0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d109      	bne.n	800635a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800634c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	621a      	str	r2, [r3, #32]
}
 8006374:	bf00      	nop
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	40012c00 	.word	0x40012c00
 8006384:	40013400 	.word	0x40013400
 8006388:	40014000 	.word	0x40014000
 800638c:	40014400 	.word	0x40014400
 8006390:	40014800 	.word	0x40014800
 8006394:	40015000 	.word	0x40015000

08006398 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	051b      	lsls	r3, r3, #20
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a1a      	ldr	r2, [pc, #104]	@ (8006458 <TIM_OC6_SetConfig+0xc0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d013      	beq.n	800641c <TIM_OC6_SetConfig+0x84>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a19      	ldr	r2, [pc, #100]	@ (800645c <TIM_OC6_SetConfig+0xc4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00f      	beq.n	800641c <TIM_OC6_SetConfig+0x84>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a18      	ldr	r2, [pc, #96]	@ (8006460 <TIM_OC6_SetConfig+0xc8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00b      	beq.n	800641c <TIM_OC6_SetConfig+0x84>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a17      	ldr	r2, [pc, #92]	@ (8006464 <TIM_OC6_SetConfig+0xcc>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d007      	beq.n	800641c <TIM_OC6_SetConfig+0x84>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a16      	ldr	r2, [pc, #88]	@ (8006468 <TIM_OC6_SetConfig+0xd0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d003      	beq.n	800641c <TIM_OC6_SetConfig+0x84>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a15      	ldr	r2, [pc, #84]	@ (800646c <TIM_OC6_SetConfig+0xd4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d109      	bne.n	8006430 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006422:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	029b      	lsls	r3, r3, #10
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	621a      	str	r2, [r3, #32]
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40012c00 	.word	0x40012c00
 800645c:	40013400 	.word	0x40013400
 8006460:	40014000 	.word	0x40014000
 8006464:	40014400 	.word	0x40014400
 8006468:	40014800 	.word	0x40014800
 800646c:	40015000 	.word	0x40015000

08006470 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
 800647c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	f023 0201 	bic.w	r2, r3, #1
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4a28      	ldr	r2, [pc, #160]	@ (800653c <TIM_TI1_SetConfig+0xcc>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d01b      	beq.n	80064d6 <TIM_TI1_SetConfig+0x66>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a4:	d017      	beq.n	80064d6 <TIM_TI1_SetConfig+0x66>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4a25      	ldr	r2, [pc, #148]	@ (8006540 <TIM_TI1_SetConfig+0xd0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d013      	beq.n	80064d6 <TIM_TI1_SetConfig+0x66>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4a24      	ldr	r2, [pc, #144]	@ (8006544 <TIM_TI1_SetConfig+0xd4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d00f      	beq.n	80064d6 <TIM_TI1_SetConfig+0x66>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4a23      	ldr	r2, [pc, #140]	@ (8006548 <TIM_TI1_SetConfig+0xd8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d00b      	beq.n	80064d6 <TIM_TI1_SetConfig+0x66>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4a22      	ldr	r2, [pc, #136]	@ (800654c <TIM_TI1_SetConfig+0xdc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d007      	beq.n	80064d6 <TIM_TI1_SetConfig+0x66>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4a21      	ldr	r2, [pc, #132]	@ (8006550 <TIM_TI1_SetConfig+0xe0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d003      	beq.n	80064d6 <TIM_TI1_SetConfig+0x66>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4a20      	ldr	r2, [pc, #128]	@ (8006554 <TIM_TI1_SetConfig+0xe4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d101      	bne.n	80064da <TIM_TI1_SetConfig+0x6a>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <TIM_TI1_SetConfig+0x6c>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0303 	bic.w	r3, r3, #3
 80064e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	e003      	b.n	80064fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f043 0301 	orr.w	r3, r3, #1
 80064f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	011b      	lsls	r3, r3, #4
 8006506:	b2db      	uxtb	r3, r3
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f023 030a 	bic.w	r3, r3, #10
 8006514:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f003 030a 	and.w	r3, r3, #10
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4313      	orrs	r3, r2
 8006520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	621a      	str	r2, [r3, #32]
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	40012c00 	.word	0x40012c00
 8006540:	40000400 	.word	0x40000400
 8006544:	40000800 	.word	0x40000800
 8006548:	40000c00 	.word	0x40000c00
 800654c:	40013400 	.word	0x40013400
 8006550:	40014000 	.word	0x40014000
 8006554:	40015000 	.word	0x40015000

08006558 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08a      	sub	sp, #40	@ 0x28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e0a0      	b.n	80066ae <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d106      	bne.n	8006586 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7fa fe47 	bl	8001214 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2202      	movs	r2, #2
 800658a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	3304      	adds	r3, #4
 8006596:	4619      	mov	r1, r3
 8006598:	4610      	mov	r0, r2
 800659a:	f7ff fb8b 	bl	8005cb4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	6819      	ldr	r1, [r3, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	2203      	movs	r2, #3
 80065ac:	f7ff ff60 	bl	8006470 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 020c 	bic.w	r2, r2, #12
 80065be:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6999      	ldr	r1, [r3, #24]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80065e0:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80065f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065f4:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006604:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006614:	f023 0307 	bic.w	r3, r3, #7
 8006618:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0204 	orr.w	r2, r2, #4
 8006628:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800662a:	2300      	movs	r3, #0
 800662c:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800662e:	2300      	movs	r3, #0
 8006630:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006632:	2370      	movs	r3, #112	@ 0x70
 8006634:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006636:	2300      	movs	r3, #0
 8006638:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800663a:	2300      	movs	r3, #0
 800663c:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800663e:	2300      	movs	r3, #0
 8006640:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f107 020c 	add.w	r2, r7, #12
 8006650:	4611      	mov	r1, r2
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff fc7c 	bl	8005f50 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6812      	ldr	r2, [r2, #0]
 8006662:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800666a:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 800667a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3728      	adds	r7, #40	@ 0x28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e074      	b.n	80067ba <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a34      	ldr	r2, [pc, #208]	@ (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d009      	beq.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a33      	ldr	r2, [pc, #204]	@ (80067cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d004      	beq.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a31      	ldr	r2, [pc, #196]	@ (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d108      	bne.n	8006720 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006714:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800672a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a21      	ldr	r2, [pc, #132]	@ (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d022      	beq.n	800678e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006750:	d01d      	beq.n	800678e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a1f      	ldr	r2, [pc, #124]	@ (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d018      	beq.n	800678e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a1d      	ldr	r2, [pc, #116]	@ (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d013      	beq.n	800678e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1c      	ldr	r2, [pc, #112]	@ (80067dc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d00e      	beq.n	800678e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a15      	ldr	r2, [pc, #84]	@ (80067cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d009      	beq.n	800678e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a18      	ldr	r2, [pc, #96]	@ (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d004      	beq.n	800678e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a11      	ldr	r2, [pc, #68]	@ (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d10c      	bne.n	80067a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	4313      	orrs	r3, r2
 800679e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40012c00 	.word	0x40012c00
 80067cc:	40013400 	.word	0x40013400
 80067d0:	40015000 	.word	0x40015000
 80067d4:	40000400 	.word	0x40000400
 80067d8:	40000800 	.word	0x40000800
 80067dc:	40000c00 	.word	0x40000c00
 80067e0:	40014000 	.word	0x40014000

080067e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e078      	b.n	80068f2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	4313      	orrs	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	041b      	lsls	r3, r3, #16
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a1c      	ldr	r2, [pc, #112]	@ (8006900 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d009      	beq.n	80068a6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a1b      	ldr	r2, [pc, #108]	@ (8006904 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d004      	beq.n	80068a6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a19      	ldr	r2, [pc, #100]	@ (8006908 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d11c      	bne.n	80068e0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b0:	051b      	lsls	r3, r3, #20
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	6a1b      	ldr	r3, [r3, #32]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068dc:	4313      	orrs	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40012c00 	.word	0x40012c00
 8006904:	40013400 	.word	0x40013400
 8006908:	40015000 	.word	0x40015000

0800690c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e042      	b.n	8006a30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d106      	bne.n	80069c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7fa fdb1 	bl	8001524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2224      	movs	r2, #36	@ 0x24
 80069c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 0201 	bic.w	r2, r2, #1
 80069d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 ff60 	bl	80078a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fc61 	bl	80072b0 <UART_SetConfig>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e01b      	b.n	8006a30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 0201 	orr.w	r2, r2, #1
 8006a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 ffdf 	bl	80079ec <UART_CheckIdleState>
 8006a2e:	4603      	mov	r3, r0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08a      	sub	sp, #40	@ 0x28
 8006a3c:	af02      	add	r7, sp, #8
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	603b      	str	r3, [r7, #0]
 8006a44:	4613      	mov	r3, r2
 8006a46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d17b      	bne.n	8006b4a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <HAL_UART_Transmit+0x26>
 8006a58:	88fb      	ldrh	r3, [r7, #6]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e074      	b.n	8006b4c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2221      	movs	r2, #33	@ 0x21
 8006a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a72:	f7fa ff71 	bl	8001958 <HAL_GetTick>
 8006a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	88fa      	ldrh	r2, [r7, #6]
 8006a7c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	88fa      	ldrh	r2, [r7, #6]
 8006a84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a90:	d108      	bne.n	8006aa4 <HAL_UART_Transmit+0x6c>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d104      	bne.n	8006aa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	e003      	b.n	8006aac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006aac:	e030      	b.n	8006b10 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2180      	movs	r1, #128	@ 0x80
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f001 f841 	bl	8007b40 <UART_WaitOnFlagUntilTimeout>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d005      	beq.n	8006ad0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e03d      	b.n	8006b4c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10b      	bne.n	8006aee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ae4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	3302      	adds	r3, #2
 8006aea:	61bb      	str	r3, [r7, #24]
 8006aec:	e007      	b.n	8006afe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	781a      	ldrb	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	3301      	adds	r3, #1
 8006afc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1c8      	bne.n	8006aae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2200      	movs	r2, #0
 8006b24:	2140      	movs	r1, #64	@ 0x40
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f001 f80a 	bl	8007b40 <UART_WaitOnFlagUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d005      	beq.n	8006b3e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e006      	b.n	8006b4c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2220      	movs	r2, #32
 8006b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	e000      	b.n	8006b4c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006b4a:	2302      	movs	r3, #2
  }
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08a      	sub	sp, #40	@ 0x28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b68:	2b20      	cmp	r3, #32
 8006b6a:	d137      	bne.n	8006bdc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <HAL_UART_Receive_IT+0x24>
 8006b72:	88fb      	ldrh	r3, [r7, #6]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e030      	b.n	8006bde <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a18      	ldr	r2, [pc, #96]	@ (8006be8 <HAL_UART_Receive_IT+0x94>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d01f      	beq.n	8006bcc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d018      	beq.n	8006bcc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	e853 3f00 	ldrex	r3, [r3]
 8006ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb8:	623b      	str	r3, [r7, #32]
 8006bba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	69f9      	ldr	r1, [r7, #28]
 8006bbe:	6a3a      	ldr	r2, [r7, #32]
 8006bc0:	e841 2300 	strex	r3, r2, [r1]
 8006bc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e6      	bne.n	8006b9a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006bcc:	88fb      	ldrh	r3, [r7, #6]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f001 f822 	bl	8007c1c <UART_Start_Receive_IT>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	e000      	b.n	8006bde <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bdc:	2302      	movs	r3, #2
  }
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3728      	adds	r7, #40	@ 0x28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40008000 	.word	0x40008000

08006bec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b0ba      	sub	sp, #232	@ 0xe8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006c16:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d11b      	bne.n	8006c60 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d015      	beq.n	8006c60 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c38:	f003 0320 	and.w	r3, r3, #32
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d105      	bne.n	8006c4c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d009      	beq.n	8006c60 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8300 	beq.w	8007256 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
      }
      return;
 8006c5e:	e2fa      	b.n	8007256 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 8123 	beq.w	8006eb0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c6a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8006ea4 <HAL_UART_IRQHandler+0x2b8>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d106      	bne.n	8006c84 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006c7a:	4b8b      	ldr	r3, [pc, #556]	@ (8006ea8 <HAL_UART_IRQHandler+0x2bc>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 8116 	beq.w	8006eb0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d011      	beq.n	8006cb4 <HAL_UART_IRQHandler+0xc8>
 8006c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006caa:	f043 0201 	orr.w	r2, r3, #1
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d011      	beq.n	8006ce4 <HAL_UART_IRQHandler+0xf8>
 8006cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cda:	f043 0204 	orr.w	r2, r3, #4
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d011      	beq.n	8006d14 <HAL_UART_IRQHandler+0x128>
 8006cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00b      	beq.n	8006d14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2204      	movs	r2, #4
 8006d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d0a:	f043 0202 	orr.w	r2, r3, #2
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d18:	f003 0308 	and.w	r3, r3, #8
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d017      	beq.n	8006d50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d24:	f003 0320 	and.w	r3, r3, #32
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d105      	bne.n	8006d38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006d30:	4b5c      	ldr	r3, [pc, #368]	@ (8006ea4 <HAL_UART_IRQHandler+0x2b8>)
 8006d32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00b      	beq.n	8006d50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2208      	movs	r2, #8
 8006d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d46:	f043 0208 	orr.w	r2, r3, #8
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d012      	beq.n	8006d82 <HAL_UART_IRQHandler+0x196>
 8006d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00c      	beq.n	8006d82 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d78:	f043 0220 	orr.w	r2, r3, #32
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 8266 	beq.w	800725a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d92:	f003 0320 	and.w	r3, r3, #32
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d013      	beq.n	8006dc2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d105      	bne.n	8006db2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d007      	beq.n	8006dc2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dc8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd6:	2b40      	cmp	r3, #64	@ 0x40
 8006dd8:	d005      	beq.n	8006de6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006dda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dde:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d054      	beq.n	8006e90 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 f83a 	bl	8007e60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df6:	2b40      	cmp	r3, #64	@ 0x40
 8006df8:	d146      	bne.n	8006e88 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3308      	adds	r3, #8
 8006e00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e08:	e853 3f00 	ldrex	r3, [r3]
 8006e0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3308      	adds	r3, #8
 8006e22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1d9      	bne.n	8006dfa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d017      	beq.n	8006e80 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e56:	4a15      	ldr	r2, [pc, #84]	@ (8006eac <HAL_UART_IRQHandler+0x2c0>)
 8006e58:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fc ff2f 	bl	8003cc4 <HAL_DMA_Abort_IT>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d019      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e7e:	e00f      	b.n	8006ea0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f9ff 	bl	8007284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e86:	e00b      	b.n	8006ea0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f9fb 	bl	8007284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e8e:	e007      	b.n	8006ea0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f9f7 	bl	8007284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006e9e:	e1dc      	b.n	800725a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea0:	bf00      	nop
    return;
 8006ea2:	e1da      	b.n	800725a <HAL_UART_IRQHandler+0x66e>
 8006ea4:	10000001 	.word	0x10000001
 8006ea8:	04000120 	.word	0x04000120
 8006eac:	08007f2d 	.word	0x08007f2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	f040 8170 	bne.w	800719a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ebe:	f003 0310 	and.w	r3, r3, #16
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 8169 	beq.w	800719a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8162 	beq.w	800719a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2210      	movs	r2, #16
 8006edc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee8:	2b40      	cmp	r3, #64	@ 0x40
 8006eea:	f040 80d8 	bne.w	800709e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006efc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80af 	beq.w	8007064 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f10:	429a      	cmp	r2, r3
 8006f12:	f080 80a7 	bcs.w	8007064 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f040 8087 	bne.w	8007042 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f40:	e853 3f00 	ldrex	r3, [r3]
 8006f44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f62:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1da      	bne.n	8006f34 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3308      	adds	r3, #8
 8006f84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f90:	f023 0301 	bic.w	r3, r3, #1
 8006f94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006fa2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006fa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e1      	bne.n	8006f7e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006fca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006fde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006fe4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006fec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e3      	bne.n	8006fba <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800700e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007010:	f023 0310 	bic.w	r3, r3, #16
 8007014:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	461a      	mov	r2, r3
 800701e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007022:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007024:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007028:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800702a:	e841 2300 	strex	r3, r2, [r1]
 800702e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e4      	bne.n	8007000 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800703c:	4618      	mov	r0, r3
 800703e:	f7fc fde8 	bl	8003c12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007054:	b29b      	uxth	r3, r3
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	b29b      	uxth	r3, r3
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f91b 	bl	8007298 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007062:	e0fc      	b.n	800725e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800706a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800706e:	429a      	cmp	r2, r3
 8007070:	f040 80f5 	bne.w	800725e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b20      	cmp	r3, #32
 8007084:	f040 80eb 	bne.w	800725e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f8fe 	bl	8007298 <HAL_UARTEx_RxEventCallback>
      return;
 800709c:	e0df      	b.n	800725e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 80d1 	beq.w	8007262 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80070c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 80cc 	beq.w	8007262 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80070ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80070ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e4      	bne.n	80070ca <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3308      	adds	r3, #8
 8007106:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710a:	e853 3f00 	ldrex	r3, [r3]
 800710e:	623b      	str	r3, [r7, #32]
   return(result);
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007116:	f023 0301 	bic.w	r3, r3, #1
 800711a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3308      	adds	r3, #8
 8007124:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007128:	633a      	str	r2, [r7, #48]	@ 0x30
 800712a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800712e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e1      	bne.n	8007100 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	60fb      	str	r3, [r7, #12]
   return(result);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f023 0310 	bic.w	r3, r3, #16
 8007164:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007172:	61fb      	str	r3, [r7, #28]
 8007174:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	69b9      	ldr	r1, [r7, #24]
 8007178:	69fa      	ldr	r2, [r7, #28]
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	617b      	str	r3, [r7, #20]
   return(result);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e4      	bne.n	8007150 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2202      	movs	r2, #2
 800718a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800718c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f880 	bl	8007298 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007198:	e063      	b.n	8007262 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800719a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800719e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00e      	beq.n	80071c4 <HAL_UART_IRQHandler+0x5d8>
 80071a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d008      	beq.n	80071c4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80071ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 fc13 	bl	80089e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071c2:	e051      	b.n	8007268 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80071c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d014      	beq.n	80071fa <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80071d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d105      	bne.n	80071e8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80071dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d008      	beq.n	80071fa <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d03a      	beq.n	8007266 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	4798      	blx	r3
    }
    return;
 80071f8:	e035      	b.n	8007266 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007202:	2b00      	cmp	r3, #0
 8007204:	d009      	beq.n	800721a <HAL_UART_IRQHandler+0x62e>
 8007206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800720a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fe9c 	bl	8007f50 <UART_EndTransmit_IT>
    return;
 8007218:	e026      	b.n	8007268 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800721a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800721e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d009      	beq.n	800723a <HAL_UART_IRQHandler+0x64e>
 8007226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800722a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 fbec 	bl	8008a10 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007238:	e016      	b.n	8007268 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800723a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800723e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d010      	beq.n	8007268 <HAL_UART_IRQHandler+0x67c>
 8007246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800724a:	2b00      	cmp	r3, #0
 800724c:	da0c      	bge.n	8007268 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f001 fbd4 	bl	80089fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007254:	e008      	b.n	8007268 <HAL_UART_IRQHandler+0x67c>
      return;
 8007256:	bf00      	nop
 8007258:	e006      	b.n	8007268 <HAL_UART_IRQHandler+0x67c>
    return;
 800725a:	bf00      	nop
 800725c:	e004      	b.n	8007268 <HAL_UART_IRQHandler+0x67c>
      return;
 800725e:	bf00      	nop
 8007260:	e002      	b.n	8007268 <HAL_UART_IRQHandler+0x67c>
      return;
 8007262:	bf00      	nop
 8007264:	e000      	b.n	8007268 <HAL_UART_IRQHandler+0x67c>
    return;
 8007266:	bf00      	nop
  }
}
 8007268:	37e8      	adds	r7, #232	@ 0xe8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop

08007270 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072b4:	b08c      	sub	sp, #48	@ 0x30
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	689a      	ldr	r2, [r3, #8]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	431a      	orrs	r2, r3
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	431a      	orrs	r2, r3
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	69db      	ldr	r3, [r3, #28]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	4baa      	ldr	r3, [pc, #680]	@ (8007588 <UART_SetConfig+0x2d8>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	6812      	ldr	r2, [r2, #0]
 80072e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072e8:	430b      	orrs	r3, r1
 80072ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a9f      	ldr	r2, [pc, #636]	@ (800758c <UART_SetConfig+0x2dc>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d004      	beq.n	800731c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007318:	4313      	orrs	r3, r2
 800731a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007326:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	6812      	ldr	r2, [r2, #0]
 800732e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007330:	430b      	orrs	r3, r1
 8007332:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733a:	f023 010f 	bic.w	r1, r3, #15
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a90      	ldr	r2, [pc, #576]	@ (8007590 <UART_SetConfig+0x2e0>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d125      	bne.n	80073a0 <UART_SetConfig+0xf0>
 8007354:	4b8f      	ldr	r3, [pc, #572]	@ (8007594 <UART_SetConfig+0x2e4>)
 8007356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	2b03      	cmp	r3, #3
 8007360:	d81a      	bhi.n	8007398 <UART_SetConfig+0xe8>
 8007362:	a201      	add	r2, pc, #4	@ (adr r2, 8007368 <UART_SetConfig+0xb8>)
 8007364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007368:	08007379 	.word	0x08007379
 800736c:	08007389 	.word	0x08007389
 8007370:	08007381 	.word	0x08007381
 8007374:	08007391 	.word	0x08007391
 8007378:	2301      	movs	r3, #1
 800737a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800737e:	e116      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007380:	2302      	movs	r3, #2
 8007382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007386:	e112      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007388:	2304      	movs	r3, #4
 800738a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800738e:	e10e      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007390:	2308      	movs	r3, #8
 8007392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007396:	e10a      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007398:	2310      	movs	r3, #16
 800739a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800739e:	e106      	b.n	80075ae <UART_SetConfig+0x2fe>
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a7c      	ldr	r2, [pc, #496]	@ (8007598 <UART_SetConfig+0x2e8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d138      	bne.n	800741c <UART_SetConfig+0x16c>
 80073aa:	4b7a      	ldr	r3, [pc, #488]	@ (8007594 <UART_SetConfig+0x2e4>)
 80073ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b0:	f003 030c 	and.w	r3, r3, #12
 80073b4:	2b0c      	cmp	r3, #12
 80073b6:	d82d      	bhi.n	8007414 <UART_SetConfig+0x164>
 80073b8:	a201      	add	r2, pc, #4	@ (adr r2, 80073c0 <UART_SetConfig+0x110>)
 80073ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073be:	bf00      	nop
 80073c0:	080073f5 	.word	0x080073f5
 80073c4:	08007415 	.word	0x08007415
 80073c8:	08007415 	.word	0x08007415
 80073cc:	08007415 	.word	0x08007415
 80073d0:	08007405 	.word	0x08007405
 80073d4:	08007415 	.word	0x08007415
 80073d8:	08007415 	.word	0x08007415
 80073dc:	08007415 	.word	0x08007415
 80073e0:	080073fd 	.word	0x080073fd
 80073e4:	08007415 	.word	0x08007415
 80073e8:	08007415 	.word	0x08007415
 80073ec:	08007415 	.word	0x08007415
 80073f0:	0800740d 	.word	0x0800740d
 80073f4:	2300      	movs	r3, #0
 80073f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073fa:	e0d8      	b.n	80075ae <UART_SetConfig+0x2fe>
 80073fc:	2302      	movs	r3, #2
 80073fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007402:	e0d4      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007404:	2304      	movs	r3, #4
 8007406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800740a:	e0d0      	b.n	80075ae <UART_SetConfig+0x2fe>
 800740c:	2308      	movs	r3, #8
 800740e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007412:	e0cc      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007414:	2310      	movs	r3, #16
 8007416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800741a:	e0c8      	b.n	80075ae <UART_SetConfig+0x2fe>
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a5e      	ldr	r2, [pc, #376]	@ (800759c <UART_SetConfig+0x2ec>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d125      	bne.n	8007472 <UART_SetConfig+0x1c2>
 8007426:	4b5b      	ldr	r3, [pc, #364]	@ (8007594 <UART_SetConfig+0x2e4>)
 8007428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800742c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007430:	2b30      	cmp	r3, #48	@ 0x30
 8007432:	d016      	beq.n	8007462 <UART_SetConfig+0x1b2>
 8007434:	2b30      	cmp	r3, #48	@ 0x30
 8007436:	d818      	bhi.n	800746a <UART_SetConfig+0x1ba>
 8007438:	2b20      	cmp	r3, #32
 800743a:	d00a      	beq.n	8007452 <UART_SetConfig+0x1a2>
 800743c:	2b20      	cmp	r3, #32
 800743e:	d814      	bhi.n	800746a <UART_SetConfig+0x1ba>
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <UART_SetConfig+0x19a>
 8007444:	2b10      	cmp	r3, #16
 8007446:	d008      	beq.n	800745a <UART_SetConfig+0x1aa>
 8007448:	e00f      	b.n	800746a <UART_SetConfig+0x1ba>
 800744a:	2300      	movs	r3, #0
 800744c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007450:	e0ad      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007452:	2302      	movs	r3, #2
 8007454:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007458:	e0a9      	b.n	80075ae <UART_SetConfig+0x2fe>
 800745a:	2304      	movs	r3, #4
 800745c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007460:	e0a5      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007462:	2308      	movs	r3, #8
 8007464:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007468:	e0a1      	b.n	80075ae <UART_SetConfig+0x2fe>
 800746a:	2310      	movs	r3, #16
 800746c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007470:	e09d      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a4a      	ldr	r2, [pc, #296]	@ (80075a0 <UART_SetConfig+0x2f0>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d125      	bne.n	80074c8 <UART_SetConfig+0x218>
 800747c:	4b45      	ldr	r3, [pc, #276]	@ (8007594 <UART_SetConfig+0x2e4>)
 800747e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007482:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007486:	2bc0      	cmp	r3, #192	@ 0xc0
 8007488:	d016      	beq.n	80074b8 <UART_SetConfig+0x208>
 800748a:	2bc0      	cmp	r3, #192	@ 0xc0
 800748c:	d818      	bhi.n	80074c0 <UART_SetConfig+0x210>
 800748e:	2b80      	cmp	r3, #128	@ 0x80
 8007490:	d00a      	beq.n	80074a8 <UART_SetConfig+0x1f8>
 8007492:	2b80      	cmp	r3, #128	@ 0x80
 8007494:	d814      	bhi.n	80074c0 <UART_SetConfig+0x210>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <UART_SetConfig+0x1f0>
 800749a:	2b40      	cmp	r3, #64	@ 0x40
 800749c:	d008      	beq.n	80074b0 <UART_SetConfig+0x200>
 800749e:	e00f      	b.n	80074c0 <UART_SetConfig+0x210>
 80074a0:	2300      	movs	r3, #0
 80074a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074a6:	e082      	b.n	80075ae <UART_SetConfig+0x2fe>
 80074a8:	2302      	movs	r3, #2
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ae:	e07e      	b.n	80075ae <UART_SetConfig+0x2fe>
 80074b0:	2304      	movs	r3, #4
 80074b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074b6:	e07a      	b.n	80075ae <UART_SetConfig+0x2fe>
 80074b8:	2308      	movs	r3, #8
 80074ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074be:	e076      	b.n	80075ae <UART_SetConfig+0x2fe>
 80074c0:	2310      	movs	r3, #16
 80074c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074c6:	e072      	b.n	80075ae <UART_SetConfig+0x2fe>
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a35      	ldr	r2, [pc, #212]	@ (80075a4 <UART_SetConfig+0x2f4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d12a      	bne.n	8007528 <UART_SetConfig+0x278>
 80074d2:	4b30      	ldr	r3, [pc, #192]	@ (8007594 <UART_SetConfig+0x2e4>)
 80074d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074e0:	d01a      	beq.n	8007518 <UART_SetConfig+0x268>
 80074e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074e6:	d81b      	bhi.n	8007520 <UART_SetConfig+0x270>
 80074e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074ec:	d00c      	beq.n	8007508 <UART_SetConfig+0x258>
 80074ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074f2:	d815      	bhi.n	8007520 <UART_SetConfig+0x270>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d003      	beq.n	8007500 <UART_SetConfig+0x250>
 80074f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074fc:	d008      	beq.n	8007510 <UART_SetConfig+0x260>
 80074fe:	e00f      	b.n	8007520 <UART_SetConfig+0x270>
 8007500:	2300      	movs	r3, #0
 8007502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007506:	e052      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007508:	2302      	movs	r3, #2
 800750a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800750e:	e04e      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007510:	2304      	movs	r3, #4
 8007512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007516:	e04a      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007518:	2308      	movs	r3, #8
 800751a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800751e:	e046      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007520:	2310      	movs	r3, #16
 8007522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007526:	e042      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a17      	ldr	r2, [pc, #92]	@ (800758c <UART_SetConfig+0x2dc>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d13a      	bne.n	80075a8 <UART_SetConfig+0x2f8>
 8007532:	4b18      	ldr	r3, [pc, #96]	@ (8007594 <UART_SetConfig+0x2e4>)
 8007534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007538:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800753c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007540:	d01a      	beq.n	8007578 <UART_SetConfig+0x2c8>
 8007542:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007546:	d81b      	bhi.n	8007580 <UART_SetConfig+0x2d0>
 8007548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800754c:	d00c      	beq.n	8007568 <UART_SetConfig+0x2b8>
 800754e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007552:	d815      	bhi.n	8007580 <UART_SetConfig+0x2d0>
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <UART_SetConfig+0x2b0>
 8007558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800755c:	d008      	beq.n	8007570 <UART_SetConfig+0x2c0>
 800755e:	e00f      	b.n	8007580 <UART_SetConfig+0x2d0>
 8007560:	2300      	movs	r3, #0
 8007562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007566:	e022      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007568:	2302      	movs	r3, #2
 800756a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800756e:	e01e      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007570:	2304      	movs	r3, #4
 8007572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007576:	e01a      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007578:	2308      	movs	r3, #8
 800757a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800757e:	e016      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007580:	2310      	movs	r3, #16
 8007582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007586:	e012      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007588:	cfff69f3 	.word	0xcfff69f3
 800758c:	40008000 	.word	0x40008000
 8007590:	40013800 	.word	0x40013800
 8007594:	40021000 	.word	0x40021000
 8007598:	40004400 	.word	0x40004400
 800759c:	40004800 	.word	0x40004800
 80075a0:	40004c00 	.word	0x40004c00
 80075a4:	40005000 	.word	0x40005000
 80075a8:	2310      	movs	r3, #16
 80075aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4aae      	ldr	r2, [pc, #696]	@ (800786c <UART_SetConfig+0x5bc>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	f040 8097 	bne.w	80076e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80075be:	2b08      	cmp	r3, #8
 80075c0:	d823      	bhi.n	800760a <UART_SetConfig+0x35a>
 80075c2:	a201      	add	r2, pc, #4	@ (adr r2, 80075c8 <UART_SetConfig+0x318>)
 80075c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c8:	080075ed 	.word	0x080075ed
 80075cc:	0800760b 	.word	0x0800760b
 80075d0:	080075f5 	.word	0x080075f5
 80075d4:	0800760b 	.word	0x0800760b
 80075d8:	080075fb 	.word	0x080075fb
 80075dc:	0800760b 	.word	0x0800760b
 80075e0:	0800760b 	.word	0x0800760b
 80075e4:	0800760b 	.word	0x0800760b
 80075e8:	08007603 	.word	0x08007603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075ec:	f7fd fc4e 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 80075f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075f2:	e010      	b.n	8007616 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075f4:	4b9e      	ldr	r3, [pc, #632]	@ (8007870 <UART_SetConfig+0x5c0>)
 80075f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075f8:	e00d      	b.n	8007616 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075fa:	f7fd fbd9 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 80075fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007600:	e009      	b.n	8007616 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007606:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007608:	e005      	b.n	8007616 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007614:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 8130 	beq.w	800787e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007622:	4a94      	ldr	r2, [pc, #592]	@ (8007874 <UART_SetConfig+0x5c4>)
 8007624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007628:	461a      	mov	r2, r3
 800762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007630:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	4613      	mov	r3, r2
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	4413      	add	r3, r2
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	429a      	cmp	r2, r3
 8007640:	d305      	bcc.n	800764e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	429a      	cmp	r2, r3
 800764c:	d903      	bls.n	8007656 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007654:	e113      	b.n	800787e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007658:	2200      	movs	r2, #0
 800765a:	60bb      	str	r3, [r7, #8]
 800765c:	60fa      	str	r2, [r7, #12]
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007662:	4a84      	ldr	r2, [pc, #528]	@ (8007874 <UART_SetConfig+0x5c4>)
 8007664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007668:	b29b      	uxth	r3, r3
 800766a:	2200      	movs	r2, #0
 800766c:	603b      	str	r3, [r7, #0]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007674:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007678:	f7f8 fe2a 	bl	80002d0 <__aeabi_uldivmod>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	4610      	mov	r0, r2
 8007682:	4619      	mov	r1, r3
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	020b      	lsls	r3, r1, #8
 800768e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007692:	0202      	lsls	r2, r0, #8
 8007694:	6979      	ldr	r1, [r7, #20]
 8007696:	6849      	ldr	r1, [r1, #4]
 8007698:	0849      	lsrs	r1, r1, #1
 800769a:	2000      	movs	r0, #0
 800769c:	460c      	mov	r4, r1
 800769e:	4605      	mov	r5, r0
 80076a0:	eb12 0804 	adds.w	r8, r2, r4
 80076a4:	eb43 0905 	adc.w	r9, r3, r5
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	469a      	mov	sl, r3
 80076b0:	4693      	mov	fp, r2
 80076b2:	4652      	mov	r2, sl
 80076b4:	465b      	mov	r3, fp
 80076b6:	4640      	mov	r0, r8
 80076b8:	4649      	mov	r1, r9
 80076ba:	f7f8 fe09 	bl	80002d0 <__aeabi_uldivmod>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	4613      	mov	r3, r2
 80076c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076cc:	d308      	bcc.n	80076e0 <UART_SetConfig+0x430>
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076d4:	d204      	bcs.n	80076e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6a3a      	ldr	r2, [r7, #32]
 80076dc:	60da      	str	r2, [r3, #12]
 80076de:	e0ce      	b.n	800787e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076e6:	e0ca      	b.n	800787e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	69db      	ldr	r3, [r3, #28]
 80076ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076f0:	d166      	bne.n	80077c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80076f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	d827      	bhi.n	800774a <UART_SetConfig+0x49a>
 80076fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <UART_SetConfig+0x450>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007725 	.word	0x08007725
 8007704:	0800772d 	.word	0x0800772d
 8007708:	08007735 	.word	0x08007735
 800770c:	0800774b 	.word	0x0800774b
 8007710:	0800773b 	.word	0x0800773b
 8007714:	0800774b 	.word	0x0800774b
 8007718:	0800774b 	.word	0x0800774b
 800771c:	0800774b 	.word	0x0800774b
 8007720:	08007743 	.word	0x08007743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007724:	f7fd fbb2 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 8007728:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800772a:	e014      	b.n	8007756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800772c:	f7fd fbc4 	bl	8004eb8 <HAL_RCC_GetPCLK2Freq>
 8007730:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007732:	e010      	b.n	8007756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007734:	4b4e      	ldr	r3, [pc, #312]	@ (8007870 <UART_SetConfig+0x5c0>)
 8007736:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007738:	e00d      	b.n	8007756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800773a:	f7fd fb39 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 800773e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007740:	e009      	b.n	8007756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007746:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007748:	e005      	b.n	8007756 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007754:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 8090 	beq.w	800787e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007762:	4a44      	ldr	r2, [pc, #272]	@ (8007874 <UART_SetConfig+0x5c4>)
 8007764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007768:	461a      	mov	r2, r3
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007770:	005a      	lsls	r2, r3, #1
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	085b      	lsrs	r3, r3, #1
 8007778:	441a      	add	r2, r3
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007782:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	2b0f      	cmp	r3, #15
 8007788:	d916      	bls.n	80077b8 <UART_SetConfig+0x508>
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007790:	d212      	bcs.n	80077b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	b29b      	uxth	r3, r3
 8007796:	f023 030f 	bic.w	r3, r3, #15
 800779a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	085b      	lsrs	r3, r3, #1
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	8bfb      	ldrh	r3, [r7, #30]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	8bfa      	ldrh	r2, [r7, #30]
 80077b4:	60da      	str	r2, [r3, #12]
 80077b6:	e062      	b.n	800787e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80077be:	e05e      	b.n	800787e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80077c4:	2b08      	cmp	r3, #8
 80077c6:	d828      	bhi.n	800781a <UART_SetConfig+0x56a>
 80077c8:	a201      	add	r2, pc, #4	@ (adr r2, 80077d0 <UART_SetConfig+0x520>)
 80077ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ce:	bf00      	nop
 80077d0:	080077f5 	.word	0x080077f5
 80077d4:	080077fd 	.word	0x080077fd
 80077d8:	08007805 	.word	0x08007805
 80077dc:	0800781b 	.word	0x0800781b
 80077e0:	0800780b 	.word	0x0800780b
 80077e4:	0800781b 	.word	0x0800781b
 80077e8:	0800781b 	.word	0x0800781b
 80077ec:	0800781b 	.word	0x0800781b
 80077f0:	08007813 	.word	0x08007813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077f4:	f7fd fb4a 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 80077f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077fa:	e014      	b.n	8007826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077fc:	f7fd fb5c 	bl	8004eb8 <HAL_RCC_GetPCLK2Freq>
 8007800:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007802:	e010      	b.n	8007826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007804:	4b1a      	ldr	r3, [pc, #104]	@ (8007870 <UART_SetConfig+0x5c0>)
 8007806:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007808:	e00d      	b.n	8007826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800780a:	f7fd fad1 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 800780e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007810:	e009      	b.n	8007826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007816:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007818:	e005      	b.n	8007826 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007824:	bf00      	nop
    }

    if (pclk != 0U)
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	d028      	beq.n	800787e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007830:	4a10      	ldr	r2, [pc, #64]	@ (8007874 <UART_SetConfig+0x5c4>)
 8007832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007836:	461a      	mov	r2, r3
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	fbb3 f2f2 	udiv	r2, r3, r2
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	085b      	lsrs	r3, r3, #1
 8007844:	441a      	add	r2, r3
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	fbb2 f3f3 	udiv	r3, r2, r3
 800784e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	2b0f      	cmp	r3, #15
 8007854:	d910      	bls.n	8007878 <UART_SetConfig+0x5c8>
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800785c:	d20c      	bcs.n	8007878 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	b29a      	uxth	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60da      	str	r2, [r3, #12]
 8007868:	e009      	b.n	800787e <UART_SetConfig+0x5ce>
 800786a:	bf00      	nop
 800786c:	40008000 	.word	0x40008000
 8007870:	00f42400 	.word	0x00f42400
 8007874:	080095e0 	.word	0x080095e0
      }
      else
      {
        ret = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	2201      	movs	r2, #1
 8007882:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2201      	movs	r2, #1
 800788a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2200      	movs	r2, #0
 8007892:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2200      	movs	r2, #0
 8007898:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800789a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3730      	adds	r7, #48	@ 0x30
 80078a2:	46bd      	mov	sp, r7
 80078a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080078a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b4:	f003 0308 	and.w	r3, r3, #8
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00a      	beq.n	80078d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	430a      	orrs	r2, r1
 80078f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00a      	beq.n	8007916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800791a:	f003 0304 	and.w	r3, r3, #4
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00a      	beq.n	800795a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795e:	f003 0320 	and.w	r3, r3, #32
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01a      	beq.n	80079be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079a6:	d10a      	bne.n	80079be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00a      	beq.n	80079e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	605a      	str	r2, [r3, #4]
  }
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b098      	sub	sp, #96	@ 0x60
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079fc:	f7f9 ffac 	bl	8001958 <HAL_GetTick>
 8007a00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0308 	and.w	r3, r3, #8
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d12f      	bne.n	8007a70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f88e 	bl	8007b40 <UART_WaitOnFlagUntilTimeout>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d022      	beq.n	8007a70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e6      	bne.n	8007a2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e063      	b.n	8007b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0304 	and.w	r3, r3, #4
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d149      	bne.n	8007b12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a7e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a86:	2200      	movs	r2, #0
 8007a88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f857 	bl	8007b40 <UART_WaitOnFlagUntilTimeout>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d03c      	beq.n	8007b12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ab6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ab8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e6      	bne.n	8007a98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3308      	adds	r3, #8
 8007ad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f023 0301 	bic.w	r3, r3, #1
 8007ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3308      	adds	r3, #8
 8007ae8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007aea:	61fa      	str	r2, [r7, #28]
 8007aec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	69b9      	ldr	r1, [r7, #24]
 8007af0:	69fa      	ldr	r2, [r7, #28]
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	617b      	str	r3, [r7, #20]
   return(result);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e5      	bne.n	8007aca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e012      	b.n	8007b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3758      	adds	r7, #88	@ 0x58
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b50:	e04f      	b.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b58:	d04b      	beq.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5a:	f7f9 fefd 	bl	8001958 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d302      	bcc.n	8007b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e04e      	b.n	8007c12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d037      	beq.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b80      	cmp	r3, #128	@ 0x80
 8007b86:	d034      	beq.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b40      	cmp	r3, #64	@ 0x40
 8007b8c:	d031      	beq.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69db      	ldr	r3, [r3, #28]
 8007b94:	f003 0308 	and.w	r3, r3, #8
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d110      	bne.n	8007bbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2208      	movs	r2, #8
 8007ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 f95b 	bl	8007e60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2208      	movs	r2, #8
 8007bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e029      	b.n	8007c12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bcc:	d111      	bne.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f941 	bl	8007e60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2220      	movs	r2, #32
 8007be2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e00f      	b.n	8007c12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69da      	ldr	r2, [r3, #28]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	bf0c      	ite	eq
 8007c02:	2301      	moveq	r3, #1
 8007c04:	2300      	movne	r3, #0
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	461a      	mov	r2, r3
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d0a0      	beq.n	8007b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b0a3      	sub	sp, #140	@ 0x8c
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	4613      	mov	r3, r2
 8007c28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	88fa      	ldrh	r2, [r7, #6]
 8007c34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	88fa      	ldrh	r2, [r7, #6]
 8007c3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c4e:	d10e      	bne.n	8007c6e <UART_Start_Receive_IT+0x52>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d105      	bne.n	8007c64 <UART_Start_Receive_IT+0x48>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007c5e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c62:	e02d      	b.n	8007cc0 <UART_Start_Receive_IT+0xa4>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	22ff      	movs	r2, #255	@ 0xff
 8007c68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c6c:	e028      	b.n	8007cc0 <UART_Start_Receive_IT+0xa4>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10d      	bne.n	8007c92 <UART_Start_Receive_IT+0x76>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d104      	bne.n	8007c88 <UART_Start_Receive_IT+0x6c>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	22ff      	movs	r2, #255	@ 0xff
 8007c82:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c86:	e01b      	b.n	8007cc0 <UART_Start_Receive_IT+0xa4>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	227f      	movs	r2, #127	@ 0x7f
 8007c8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c90:	e016      	b.n	8007cc0 <UART_Start_Receive_IT+0xa4>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c9a:	d10d      	bne.n	8007cb8 <UART_Start_Receive_IT+0x9c>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d104      	bne.n	8007cae <UART_Start_Receive_IT+0x92>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	227f      	movs	r2, #127	@ 0x7f
 8007ca8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007cac:	e008      	b.n	8007cc0 <UART_Start_Receive_IT+0xa4>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	223f      	movs	r2, #63	@ 0x3f
 8007cb2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007cb6:	e003      	b.n	8007cc0 <UART_Start_Receive_IT+0xa4>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2222      	movs	r2, #34	@ 0x22
 8007ccc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3308      	adds	r3, #8
 8007cd6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cda:	e853 3f00 	ldrex	r3, [r3]
 8007cde:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007ce0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ce2:	f043 0301 	orr.w	r3, r3, #1
 8007ce6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007cf4:	673a      	str	r2, [r7, #112]	@ 0x70
 8007cf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007cfa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007cfc:	e841 2300 	strex	r3, r2, [r1]
 8007d00:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007d02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e3      	bne.n	8007cd0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d10:	d14f      	bne.n	8007db2 <UART_Start_Receive_IT+0x196>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d18:	88fa      	ldrh	r2, [r7, #6]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d349      	bcc.n	8007db2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d26:	d107      	bne.n	8007d38 <UART_Start_Receive_IT+0x11c>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d103      	bne.n	8007d38 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4a47      	ldr	r2, [pc, #284]	@ (8007e50 <UART_Start_Receive_IT+0x234>)
 8007d34:	675a      	str	r2, [r3, #116]	@ 0x74
 8007d36:	e002      	b.n	8007d3e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4a46      	ldr	r2, [pc, #280]	@ (8007e54 <UART_Start_Receive_IT+0x238>)
 8007d3c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d01a      	beq.n	8007d7c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d4e:	e853 3f00 	ldrex	r3, [r3]
 8007d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007d54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d6a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007d6e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007d70:	e841 2300 	strex	r3, r2, [r1]
 8007d74:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1e4      	bne.n	8007d46 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3308      	adds	r3, #8
 8007d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d86:	e853 3f00 	ldrex	r3, [r3]
 8007d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3308      	adds	r3, #8
 8007d9a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007d9c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007d9e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007da2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e5      	bne.n	8007d7c <UART_Start_Receive_IT+0x160>
 8007db0:	e046      	b.n	8007e40 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dba:	d107      	bne.n	8007dcc <UART_Start_Receive_IT+0x1b0>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d103      	bne.n	8007dcc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	4a24      	ldr	r2, [pc, #144]	@ (8007e58 <UART_Start_Receive_IT+0x23c>)
 8007dc8:	675a      	str	r2, [r3, #116]	@ 0x74
 8007dca:	e002      	b.n	8007dd2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4a23      	ldr	r2, [pc, #140]	@ (8007e5c <UART_Start_Receive_IT+0x240>)
 8007dd0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d019      	beq.n	8007e0e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de2:	e853 3f00 	ldrex	r3, [r3]
 8007de6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dea:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007dee:	677b      	str	r3, [r7, #116]	@ 0x74
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	461a      	mov	r2, r3
 8007df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dfa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007dfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e00:	e841 2300 	strex	r3, r2, [r1]
 8007e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1e6      	bne.n	8007dda <UART_Start_Receive_IT+0x1be>
 8007e0c:	e018      	b.n	8007e40 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	e853 3f00 	ldrex	r3, [r3]
 8007e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f043 0320 	orr.w	r3, r3, #32
 8007e22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e2c:	623b      	str	r3, [r7, #32]
 8007e2e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e30:	69f9      	ldr	r1, [r7, #28]
 8007e32:	6a3a      	ldr	r2, [r7, #32]
 8007e34:	e841 2300 	strex	r3, r2, [r1]
 8007e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e6      	bne.n	8007e0e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	378c      	adds	r7, #140	@ 0x8c
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	0800867d 	.word	0x0800867d
 8007e54:	08008319 	.word	0x08008319
 8007e58:	08008161 	.word	0x08008161
 8007e5c:	08007fa9 	.word	0x08007fa9

08007e60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b095      	sub	sp, #84	@ 0x54
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e86:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e88:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e8e:	e841 2300 	strex	r3, r2, [r1]
 8007e92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1e6      	bne.n	8007e68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3308      	adds	r3, #8
 8007ea0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eb0:	f023 0301 	bic.w	r3, r3, #1
 8007eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3308      	adds	r3, #8
 8007ebc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ebe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ec4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e3      	bne.n	8007e9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d118      	bne.n	8007f0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	e853 3f00 	ldrex	r3, [r3]
 8007ee6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	f023 0310 	bic.w	r3, r3, #16
 8007eee:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ef8:	61bb      	str	r3, [r7, #24]
 8007efa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efc:	6979      	ldr	r1, [r7, #20]
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	e841 2300 	strex	r3, r2, [r1]
 8007f04:	613b      	str	r3, [r7, #16]
   return(result);
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1e6      	bne.n	8007eda <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f20:	bf00      	nop
 8007f22:	3754      	adds	r7, #84	@ 0x54
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f7ff f99e 	bl	8007284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f48:	bf00      	nop
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	e853 3f00 	ldrex	r3, [r3]
 8007f64:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f6c:	61fb      	str	r3, [r7, #28]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	61bb      	str	r3, [r7, #24]
 8007f78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7a:	6979      	ldr	r1, [r7, #20]
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	e841 2300 	strex	r3, r2, [r1]
 8007f82:	613b      	str	r3, [r7, #16]
   return(result);
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1e6      	bne.n	8007f58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff f969 	bl	8007270 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f9e:	bf00      	nop
 8007fa0:	3720      	adds	r7, #32
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b09c      	sub	sp, #112	@ 0x70
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007fb6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fc0:	2b22      	cmp	r3, #34	@ 0x22
 8007fc2:	f040 80be 	bne.w	8008142 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fcc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007fd0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007fd4:	b2d9      	uxtb	r1, r3
 8007fd6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fe0:	400a      	ands	r2, r1
 8007fe2:	b2d2      	uxtb	r2, r2
 8007fe4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fea:	1c5a      	adds	r2, r3, #1
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008008:	b29b      	uxth	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	f040 80a1 	bne.w	8008152 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008018:	e853 3f00 	ldrex	r3, [r3]
 800801c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800801e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008020:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008024:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800802e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008030:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008032:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008034:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008036:	e841 2300 	strex	r3, r2, [r1]
 800803a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800803c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1e6      	bne.n	8008010 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3308      	adds	r3, #8
 8008048:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008054:	f023 0301 	bic.w	r3, r3, #1
 8008058:	667b      	str	r3, [r7, #100]	@ 0x64
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3308      	adds	r3, #8
 8008060:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008062:	647a      	str	r2, [r7, #68]	@ 0x44
 8008064:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008068:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e5      	bne.n	8008042 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2220      	movs	r2, #32
 800807a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a33      	ldr	r2, [pc, #204]	@ (800815c <UART_RxISR_8BIT+0x1b4>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d01f      	beq.n	80080d4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d018      	beq.n	80080d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	e853 3f00 	ldrex	r3, [r3]
 80080ae:	623b      	str	r3, [r7, #32]
   return(result);
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80080b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	461a      	mov	r2, r3
 80080be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80080c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080c8:	e841 2300 	strex	r3, r2, [r1]
 80080cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e6      	bne.n	80080a2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d12e      	bne.n	800813a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	e853 3f00 	ldrex	r3, [r3]
 80080ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0310 	bic.w	r3, r3, #16
 80080f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008100:	61fb      	str	r3, [r7, #28]
 8008102:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008104:	69b9      	ldr	r1, [r7, #24]
 8008106:	69fa      	ldr	r2, [r7, #28]
 8008108:	e841 2300 	strex	r3, r2, [r1]
 800810c:	617b      	str	r3, [r7, #20]
   return(result);
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1e6      	bne.n	80080e2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	69db      	ldr	r3, [r3, #28]
 800811a:	f003 0310 	and.w	r3, r3, #16
 800811e:	2b10      	cmp	r3, #16
 8008120:	d103      	bne.n	800812a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2210      	movs	r2, #16
 8008128:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7ff f8b0 	bl	8007298 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008138:	e00b      	b.n	8008152 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7f9 fba2 	bl	8001884 <HAL_UART_RxCpltCallback>
}
 8008140:	e007      	b.n	8008152 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	699a      	ldr	r2, [r3, #24]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f042 0208 	orr.w	r2, r2, #8
 8008150:	619a      	str	r2, [r3, #24]
}
 8008152:	bf00      	nop
 8008154:	3770      	adds	r7, #112	@ 0x70
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	40008000 	.word	0x40008000

08008160 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b09c      	sub	sp, #112	@ 0x70
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800816e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008178:	2b22      	cmp	r3, #34	@ 0x22
 800817a:	f040 80be 	bne.w	80082fa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008184:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800818c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800818e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008192:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008196:	4013      	ands	r3, r2
 8008198:	b29a      	uxth	r2, r3
 800819a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800819c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081a2:	1c9a      	adds	r2, r3, #2
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	3b01      	subs	r3, #1
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f040 80a1 	bne.w	800830a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80081d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80081e8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80081ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80081ee:	e841 2300 	strex	r3, r2, [r1]
 80081f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80081f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1e6      	bne.n	80081c8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3308      	adds	r3, #8
 8008200:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800820a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820c:	f023 0301 	bic.w	r3, r3, #1
 8008210:	663b      	str	r3, [r7, #96]	@ 0x60
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3308      	adds	r3, #8
 8008218:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800821a:	643a      	str	r2, [r7, #64]	@ 0x40
 800821c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008220:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e5      	bne.n	80081fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2220      	movs	r2, #32
 8008232:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a33      	ldr	r2, [pc, #204]	@ (8008314 <UART_RxISR_16BIT+0x1b4>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d01f      	beq.n	800828c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d018      	beq.n	800828c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	6a3b      	ldr	r3, [r7, #32]
 8008262:	e853 3f00 	ldrex	r3, [r3]
 8008266:	61fb      	str	r3, [r7, #28]
   return(result);
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800826e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	461a      	mov	r2, r3
 8008276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800827a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800827e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008280:	e841 2300 	strex	r3, r2, [r1]
 8008284:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1e6      	bne.n	800825a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008290:	2b01      	cmp	r3, #1
 8008292:	d12e      	bne.n	80082f2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	e853 3f00 	ldrex	r3, [r3]
 80082a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f023 0310 	bic.w	r3, r3, #16
 80082ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80082b8:	61bb      	str	r3, [r7, #24]
 80082ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082bc:	6979      	ldr	r1, [r7, #20]
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	e841 2300 	strex	r3, r2, [r1]
 80082c4:	613b      	str	r3, [r7, #16]
   return(result);
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1e6      	bne.n	800829a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	f003 0310 	and.w	r3, r3, #16
 80082d6:	2b10      	cmp	r3, #16
 80082d8:	d103      	bne.n	80082e2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2210      	movs	r2, #16
 80082e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7fe ffd4 	bl	8007298 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082f0:	e00b      	b.n	800830a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7f9 fac6 	bl	8001884 <HAL_UART_RxCpltCallback>
}
 80082f8:	e007      	b.n	800830a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	699a      	ldr	r2, [r3, #24]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f042 0208 	orr.w	r2, r2, #8
 8008308:	619a      	str	r2, [r3, #24]
}
 800830a:	bf00      	nop
 800830c:	3770      	adds	r7, #112	@ 0x70
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	40008000 	.word	0x40008000

08008318 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b0ac      	sub	sp, #176	@ 0xb0
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008326:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800834e:	2b22      	cmp	r3, #34	@ 0x22
 8008350:	f040 8183 	bne.w	800865a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800835a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800835e:	e126      	b.n	80085ae <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008366:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800836a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800836e:	b2d9      	uxtb	r1, r3
 8008370:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008374:	b2da      	uxtb	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800837a:	400a      	ands	r2, r1
 800837c:	b2d2      	uxtb	r2, r2
 800837e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008384:	1c5a      	adds	r2, r3, #1
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008390:	b29b      	uxth	r3, r3
 8008392:	3b01      	subs	r3, #1
 8008394:	b29a      	uxth	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80083a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083aa:	f003 0307 	and.w	r3, r3, #7
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d053      	beq.n	800845a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d011      	beq.n	80083e2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80083be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80083c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00b      	beq.n	80083e2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2201      	movs	r2, #1
 80083d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083d8:	f043 0201 	orr.w	r2, r3, #1
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d011      	beq.n	8008412 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80083ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00b      	beq.n	8008412 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2202      	movs	r2, #2
 8008400:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008408:	f043 0204 	orr.w	r2, r3, #4
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008416:	f003 0304 	and.w	r3, r3, #4
 800841a:	2b00      	cmp	r3, #0
 800841c:	d011      	beq.n	8008442 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800841e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00b      	beq.n	8008442 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2204      	movs	r2, #4
 8008430:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008438:	f043 0202 	orr.w	r2, r3, #2
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008448:	2b00      	cmp	r3, #0
 800844a:	d006      	beq.n	800845a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7fe ff19 	bl	8007284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008460:	b29b      	uxth	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	f040 80a3 	bne.w	80085ae <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008470:	e853 3f00 	ldrex	r3, [r3]
 8008474:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800847c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800848a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800848c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008490:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008498:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e4      	bne.n	8008468 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3308      	adds	r3, #8
 80084a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084a8:	e853 3f00 	ldrex	r3, [r3]
 80084ac:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80084ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084b4:	f023 0301 	bic.w	r3, r3, #1
 80084b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3308      	adds	r3, #8
 80084c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80084c6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80084c8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ca:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80084cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80084ce:	e841 2300 	strex	r3, r2, [r1]
 80084d2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80084d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e1      	bne.n	800849e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2220      	movs	r2, #32
 80084de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a60      	ldr	r2, [pc, #384]	@ (8008674 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d021      	beq.n	800853c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d01a      	beq.n	800853c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800850e:	e853 3f00 	ldrex	r3, [r3]
 8008512:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008516:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800851a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008528:	657b      	str	r3, [r7, #84]	@ 0x54
 800852a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800852e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008530:	e841 2300 	strex	r3, r2, [r1]
 8008534:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e4      	bne.n	8008506 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008540:	2b01      	cmp	r3, #1
 8008542:	d130      	bne.n	80085a6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008552:	e853 3f00 	ldrex	r3, [r3]
 8008556:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855a:	f023 0310 	bic.w	r3, r3, #16
 800855e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	461a      	mov	r2, r3
 8008568:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800856c:	643b      	str	r3, [r7, #64]	@ 0x40
 800856e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008570:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008572:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008574:	e841 2300 	strex	r3, r2, [r1]
 8008578:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800857a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e4      	bne.n	800854a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	f003 0310 	and.w	r3, r3, #16
 800858a:	2b10      	cmp	r3, #16
 800858c:	d103      	bne.n	8008596 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2210      	movs	r2, #16
 8008594:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800859c:	4619      	mov	r1, r3
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7fe fe7a 	bl	8007298 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80085a4:	e00e      	b.n	80085c4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7f9 f96c 	bl	8001884 <HAL_UART_RxCpltCallback>
        break;
 80085ac:	e00a      	b.n	80085c4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80085ae:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d006      	beq.n	80085c4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80085b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085ba:	f003 0320 	and.w	r3, r3, #32
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f47f aece 	bne.w	8008360 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085ca:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80085ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d049      	beq.n	800866a <UART_RxISR_8BIT_FIFOEN+0x352>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80085dc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d242      	bcs.n	800866a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3308      	adds	r3, #8
 80085ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	e853 3f00 	ldrex	r3, [r3]
 80085f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3308      	adds	r3, #8
 8008604:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008608:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800860a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800860e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e3      	bne.n	80085e4 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a16      	ldr	r2, [pc, #88]	@ (8008678 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8008620:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	e853 3f00 	ldrex	r3, [r3]
 800862e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	f043 0320 	orr.w	r3, r3, #32
 8008636:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008644:	61bb      	str	r3, [r7, #24]
 8008646:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	6979      	ldr	r1, [r7, #20]
 800864a:	69ba      	ldr	r2, [r7, #24]
 800864c:	e841 2300 	strex	r3, r2, [r1]
 8008650:	613b      	str	r3, [r7, #16]
   return(result);
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e4      	bne.n	8008622 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008658:	e007      	b.n	800866a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	699a      	ldr	r2, [r3, #24]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f042 0208 	orr.w	r2, r2, #8
 8008668:	619a      	str	r2, [r3, #24]
}
 800866a:	bf00      	nop
 800866c:	37b0      	adds	r7, #176	@ 0xb0
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	40008000 	.word	0x40008000
 8008678:	08007fa9 	.word	0x08007fa9

0800867c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b0ae      	sub	sp, #184	@ 0xb8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800868a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	69db      	ldr	r3, [r3, #28]
 8008694:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086b2:	2b22      	cmp	r3, #34	@ 0x22
 80086b4:	f040 8187 	bne.w	80089c6 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80086be:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086c2:	e12a      	b.n	800891a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ca:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80086d6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80086da:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80086de:	4013      	ands	r3, r2
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80086e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ec:	1c9a      	adds	r2, r3, #2
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	3b01      	subs	r3, #1
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800870e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008712:	f003 0307 	and.w	r3, r3, #7
 8008716:	2b00      	cmp	r3, #0
 8008718:	d053      	beq.n	80087c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800871a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b00      	cmp	r3, #0
 8008724:	d011      	beq.n	800874a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800872a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00b      	beq.n	800874a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2201      	movs	r2, #1
 8008738:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008740:	f043 0201 	orr.w	r2, r3, #1
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800874a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d011      	beq.n	800877a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008756:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00b      	beq.n	800877a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2202      	movs	r2, #2
 8008768:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008770:	f043 0204 	orr.w	r2, r3, #4
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800877a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800877e:	f003 0304 	and.w	r3, r3, #4
 8008782:	2b00      	cmp	r3, #0
 8008784:	d011      	beq.n	80087aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00b      	beq.n	80087aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2204      	movs	r2, #4
 8008798:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087a0:	f043 0202 	orr.w	r2, r3, #2
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d006      	beq.n	80087c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7fe fd65 	bl	8007284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f040 80a5 	bne.w	800891a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80087de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	461a      	mov	r2, r3
 80087ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008804:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e2      	bne.n	80087d0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3308      	adds	r3, #8
 8008810:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800881a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800881c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008820:	f023 0301 	bic.w	r3, r3, #1
 8008824:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3308      	adds	r3, #8
 800882e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008832:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008834:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008838:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008840:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e1      	bne.n	800880a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2220      	movs	r2, #32
 800884a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a60      	ldr	r2, [pc, #384]	@ (80089e0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d021      	beq.n	80088a8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d01a      	beq.n	80088a8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800887a:	e853 3f00 	ldrex	r3, [r3]
 800887e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008880:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008882:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008886:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008894:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008896:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008898:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800889a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800889c:	e841 2300 	strex	r3, r2, [r1]
 80088a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1e4      	bne.n	8008872 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d130      	bne.n	8008912 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088be:	e853 3f00 	ldrex	r3, [r3]
 80088c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c6:	f023 0310 	bic.w	r3, r3, #16
 80088ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	461a      	mov	r2, r3
 80088d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80088d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80088da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088e0:	e841 2300 	strex	r3, r2, [r1]
 80088e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e4      	bne.n	80088b6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	69db      	ldr	r3, [r3, #28]
 80088f2:	f003 0310 	and.w	r3, r3, #16
 80088f6:	2b10      	cmp	r3, #16
 80088f8:	d103      	bne.n	8008902 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2210      	movs	r2, #16
 8008900:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7fe fcc4 	bl	8007298 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008910:	e00e      	b.n	8008930 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7f8 ffb6 	bl	8001884 <HAL_UART_RxCpltCallback>
        break;
 8008918:	e00a      	b.n	8008930 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800891a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800891e:	2b00      	cmp	r3, #0
 8008920:	d006      	beq.n	8008930 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8008922:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b00      	cmp	r3, #0
 800892c:	f47f aeca 	bne.w	80086c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008936:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800893a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800893e:	2b00      	cmp	r3, #0
 8008940:	d049      	beq.n	80089d6 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008948:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800894c:	429a      	cmp	r2, r3
 800894e:	d242      	bcs.n	80089d6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3308      	adds	r3, #8
 8008956:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895a:	e853 3f00 	ldrex	r3, [r3]
 800895e:	623b      	str	r3, [r7, #32]
   return(result);
 8008960:	6a3b      	ldr	r3, [r7, #32]
 8008962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008966:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	3308      	adds	r3, #8
 8008970:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008974:	633a      	str	r2, [r7, #48]	@ 0x30
 8008976:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800897a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e3      	bne.n	8008950 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a16      	ldr	r2, [pc, #88]	@ (80089e4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800898c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	e853 3f00 	ldrex	r3, [r3]
 800899a:	60fb      	str	r3, [r7, #12]
   return(result);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f043 0320 	orr.w	r3, r3, #32
 80089a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089b0:	61fb      	str	r3, [r7, #28]
 80089b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	69b9      	ldr	r1, [r7, #24]
 80089b6:	69fa      	ldr	r2, [r7, #28]
 80089b8:	e841 2300 	strex	r3, r2, [r1]
 80089bc:	617b      	str	r3, [r7, #20]
   return(result);
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e4      	bne.n	800898e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089c4:	e007      	b.n	80089d6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	699a      	ldr	r2, [r3, #24]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f042 0208 	orr.w	r2, r2, #8
 80089d4:	619a      	str	r2, [r3, #24]
}
 80089d6:	bf00      	nop
 80089d8:	37b8      	adds	r7, #184	@ 0xb8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	40008000 	.word	0x40008000
 80089e4:	08008161 	.word	0x08008161

080089e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d101      	bne.n	8008a3a <HAL_UARTEx_DisableFifoMode+0x16>
 8008a36:	2302      	movs	r3, #2
 8008a38:	e027      	b.n	8008a8a <HAL_UARTEx_DisableFifoMode+0x66>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2224      	movs	r2, #36	@ 0x24
 8008a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f022 0201 	bic.w	r2, r2, #1
 8008a60:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008a68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b084      	sub	sp, #16
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d101      	bne.n	8008aae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008aaa:	2302      	movs	r3, #2
 8008aac:	e02d      	b.n	8008b0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2224      	movs	r2, #36	@ 0x24
 8008aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f022 0201 	bic.w	r2, r2, #1
 8008ad4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f850 	bl	8008b90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2220      	movs	r2, #32
 8008afc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d101      	bne.n	8008b2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b26:	2302      	movs	r3, #2
 8008b28:	e02d      	b.n	8008b86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2224      	movs	r2, #36	@ 0x24
 8008b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f022 0201 	bic.w	r2, r2, #1
 8008b50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f812 	bl	8008b90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2220      	movs	r2, #32
 8008b78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
	...

08008b90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d108      	bne.n	8008bb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008bb0:	e031      	b.n	8008c16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bb2:	2308      	movs	r3, #8
 8008bb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008bb6:	2308      	movs	r3, #8
 8008bb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	0e5b      	lsrs	r3, r3, #25
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	f003 0307 	and.w	r3, r3, #7
 8008bc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	0f5b      	lsrs	r3, r3, #29
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	f003 0307 	and.w	r3, r3, #7
 8008bd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bda:	7bbb      	ldrb	r3, [r7, #14]
 8008bdc:	7b3a      	ldrb	r2, [r7, #12]
 8008bde:	4911      	ldr	r1, [pc, #68]	@ (8008c24 <UARTEx_SetNbDataToProcess+0x94>)
 8008be0:	5c8a      	ldrb	r2, [r1, r2]
 8008be2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008be6:	7b3a      	ldrb	r2, [r7, #12]
 8008be8:	490f      	ldr	r1, [pc, #60]	@ (8008c28 <UARTEx_SetNbDataToProcess+0x98>)
 8008bea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bec:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	7b7a      	ldrb	r2, [r7, #13]
 8008bfc:	4909      	ldr	r1, [pc, #36]	@ (8008c24 <UARTEx_SetNbDataToProcess+0x94>)
 8008bfe:	5c8a      	ldrb	r2, [r1, r2]
 8008c00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c04:	7b7a      	ldrb	r2, [r7, #13]
 8008c06:	4908      	ldr	r1, [pc, #32]	@ (8008c28 <UARTEx_SetNbDataToProcess+0x98>)
 8008c08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008c16:	bf00      	nop
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	080095f8 	.word	0x080095f8
 8008c28:	08009600 	.word	0x08009600

08008c2c <sniprintf>:
 8008c2c:	b40c      	push	{r2, r3}
 8008c2e:	b530      	push	{r4, r5, lr}
 8008c30:	4b17      	ldr	r3, [pc, #92]	@ (8008c90 <sniprintf+0x64>)
 8008c32:	1e0c      	subs	r4, r1, #0
 8008c34:	681d      	ldr	r5, [r3, #0]
 8008c36:	b09d      	sub	sp, #116	@ 0x74
 8008c38:	da08      	bge.n	8008c4c <sniprintf+0x20>
 8008c3a:	238b      	movs	r3, #139	@ 0x8b
 8008c3c:	602b      	str	r3, [r5, #0]
 8008c3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c42:	b01d      	add	sp, #116	@ 0x74
 8008c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c48:	b002      	add	sp, #8
 8008c4a:	4770      	bx	lr
 8008c4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008c50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c54:	bf14      	ite	ne
 8008c56:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008c5a:	4623      	moveq	r3, r4
 8008c5c:	9304      	str	r3, [sp, #16]
 8008c5e:	9307      	str	r3, [sp, #28]
 8008c60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c64:	9002      	str	r0, [sp, #8]
 8008c66:	9006      	str	r0, [sp, #24]
 8008c68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008c6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008c6e:	ab21      	add	r3, sp, #132	@ 0x84
 8008c70:	a902      	add	r1, sp, #8
 8008c72:	4628      	mov	r0, r5
 8008c74:	9301      	str	r3, [sp, #4]
 8008c76:	f000 f995 	bl	8008fa4 <_svfiprintf_r>
 8008c7a:	1c43      	adds	r3, r0, #1
 8008c7c:	bfbc      	itt	lt
 8008c7e:	238b      	movlt	r3, #139	@ 0x8b
 8008c80:	602b      	strlt	r3, [r5, #0]
 8008c82:	2c00      	cmp	r4, #0
 8008c84:	d0dd      	beq.n	8008c42 <sniprintf+0x16>
 8008c86:	9b02      	ldr	r3, [sp, #8]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	701a      	strb	r2, [r3, #0]
 8008c8c:	e7d9      	b.n	8008c42 <sniprintf+0x16>
 8008c8e:	bf00      	nop
 8008c90:	20000098 	.word	0x20000098

08008c94 <memset>:
 8008c94:	4402      	add	r2, r0
 8008c96:	4603      	mov	r3, r0
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d100      	bne.n	8008c9e <memset+0xa>
 8008c9c:	4770      	bx	lr
 8008c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8008ca2:	e7f9      	b.n	8008c98 <memset+0x4>

08008ca4 <__errno>:
 8008ca4:	4b01      	ldr	r3, [pc, #4]	@ (8008cac <__errno+0x8>)
 8008ca6:	6818      	ldr	r0, [r3, #0]
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	20000098 	.word	0x20000098

08008cb0 <__libc_init_array>:
 8008cb0:	b570      	push	{r4, r5, r6, lr}
 8008cb2:	4d0d      	ldr	r5, [pc, #52]	@ (8008ce8 <__libc_init_array+0x38>)
 8008cb4:	4c0d      	ldr	r4, [pc, #52]	@ (8008cec <__libc_init_array+0x3c>)
 8008cb6:	1b64      	subs	r4, r4, r5
 8008cb8:	10a4      	asrs	r4, r4, #2
 8008cba:	2600      	movs	r6, #0
 8008cbc:	42a6      	cmp	r6, r4
 8008cbe:	d109      	bne.n	8008cd4 <__libc_init_array+0x24>
 8008cc0:	4d0b      	ldr	r5, [pc, #44]	@ (8008cf0 <__libc_init_array+0x40>)
 8008cc2:	4c0c      	ldr	r4, [pc, #48]	@ (8008cf4 <__libc_init_array+0x44>)
 8008cc4:	f000 fc66 	bl	8009594 <_init>
 8008cc8:	1b64      	subs	r4, r4, r5
 8008cca:	10a4      	asrs	r4, r4, #2
 8008ccc:	2600      	movs	r6, #0
 8008cce:	42a6      	cmp	r6, r4
 8008cd0:	d105      	bne.n	8008cde <__libc_init_array+0x2e>
 8008cd2:	bd70      	pop	{r4, r5, r6, pc}
 8008cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd8:	4798      	blx	r3
 8008cda:	3601      	adds	r6, #1
 8008cdc:	e7ee      	b.n	8008cbc <__libc_init_array+0xc>
 8008cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ce2:	4798      	blx	r3
 8008ce4:	3601      	adds	r6, #1
 8008ce6:	e7f2      	b.n	8008cce <__libc_init_array+0x1e>
 8008ce8:	08009644 	.word	0x08009644
 8008cec:	08009644 	.word	0x08009644
 8008cf0:	08009644 	.word	0x08009644
 8008cf4:	08009648 	.word	0x08009648

08008cf8 <__retarget_lock_acquire_recursive>:
 8008cf8:	4770      	bx	lr

08008cfa <__retarget_lock_release_recursive>:
 8008cfa:	4770      	bx	lr

08008cfc <_free_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4605      	mov	r5, r0
 8008d00:	2900      	cmp	r1, #0
 8008d02:	d041      	beq.n	8008d88 <_free_r+0x8c>
 8008d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d08:	1f0c      	subs	r4, r1, #4
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	bfb8      	it	lt
 8008d0e:	18e4      	addlt	r4, r4, r3
 8008d10:	f000 f8e0 	bl	8008ed4 <__malloc_lock>
 8008d14:	4a1d      	ldr	r2, [pc, #116]	@ (8008d8c <_free_r+0x90>)
 8008d16:	6813      	ldr	r3, [r2, #0]
 8008d18:	b933      	cbnz	r3, 8008d28 <_free_r+0x2c>
 8008d1a:	6063      	str	r3, [r4, #4]
 8008d1c:	6014      	str	r4, [r2, #0]
 8008d1e:	4628      	mov	r0, r5
 8008d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d24:	f000 b8dc 	b.w	8008ee0 <__malloc_unlock>
 8008d28:	42a3      	cmp	r3, r4
 8008d2a:	d908      	bls.n	8008d3e <_free_r+0x42>
 8008d2c:	6820      	ldr	r0, [r4, #0]
 8008d2e:	1821      	adds	r1, r4, r0
 8008d30:	428b      	cmp	r3, r1
 8008d32:	bf01      	itttt	eq
 8008d34:	6819      	ldreq	r1, [r3, #0]
 8008d36:	685b      	ldreq	r3, [r3, #4]
 8008d38:	1809      	addeq	r1, r1, r0
 8008d3a:	6021      	streq	r1, [r4, #0]
 8008d3c:	e7ed      	b.n	8008d1a <_free_r+0x1e>
 8008d3e:	461a      	mov	r2, r3
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	b10b      	cbz	r3, 8008d48 <_free_r+0x4c>
 8008d44:	42a3      	cmp	r3, r4
 8008d46:	d9fa      	bls.n	8008d3e <_free_r+0x42>
 8008d48:	6811      	ldr	r1, [r2, #0]
 8008d4a:	1850      	adds	r0, r2, r1
 8008d4c:	42a0      	cmp	r0, r4
 8008d4e:	d10b      	bne.n	8008d68 <_free_r+0x6c>
 8008d50:	6820      	ldr	r0, [r4, #0]
 8008d52:	4401      	add	r1, r0
 8008d54:	1850      	adds	r0, r2, r1
 8008d56:	4283      	cmp	r3, r0
 8008d58:	6011      	str	r1, [r2, #0]
 8008d5a:	d1e0      	bne.n	8008d1e <_free_r+0x22>
 8008d5c:	6818      	ldr	r0, [r3, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	6053      	str	r3, [r2, #4]
 8008d62:	4408      	add	r0, r1
 8008d64:	6010      	str	r0, [r2, #0]
 8008d66:	e7da      	b.n	8008d1e <_free_r+0x22>
 8008d68:	d902      	bls.n	8008d70 <_free_r+0x74>
 8008d6a:	230c      	movs	r3, #12
 8008d6c:	602b      	str	r3, [r5, #0]
 8008d6e:	e7d6      	b.n	8008d1e <_free_r+0x22>
 8008d70:	6820      	ldr	r0, [r4, #0]
 8008d72:	1821      	adds	r1, r4, r0
 8008d74:	428b      	cmp	r3, r1
 8008d76:	bf04      	itt	eq
 8008d78:	6819      	ldreq	r1, [r3, #0]
 8008d7a:	685b      	ldreq	r3, [r3, #4]
 8008d7c:	6063      	str	r3, [r4, #4]
 8008d7e:	bf04      	itt	eq
 8008d80:	1809      	addeq	r1, r1, r0
 8008d82:	6021      	streq	r1, [r4, #0]
 8008d84:	6054      	str	r4, [r2, #4]
 8008d86:	e7ca      	b.n	8008d1e <_free_r+0x22>
 8008d88:	bd38      	pop	{r3, r4, r5, pc}
 8008d8a:	bf00      	nop
 8008d8c:	200006ac 	.word	0x200006ac

08008d90 <sbrk_aligned>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	4e0f      	ldr	r6, [pc, #60]	@ (8008dd0 <sbrk_aligned+0x40>)
 8008d94:	460c      	mov	r4, r1
 8008d96:	6831      	ldr	r1, [r6, #0]
 8008d98:	4605      	mov	r5, r0
 8008d9a:	b911      	cbnz	r1, 8008da2 <sbrk_aligned+0x12>
 8008d9c:	f000 fba6 	bl	80094ec <_sbrk_r>
 8008da0:	6030      	str	r0, [r6, #0]
 8008da2:	4621      	mov	r1, r4
 8008da4:	4628      	mov	r0, r5
 8008da6:	f000 fba1 	bl	80094ec <_sbrk_r>
 8008daa:	1c43      	adds	r3, r0, #1
 8008dac:	d103      	bne.n	8008db6 <sbrk_aligned+0x26>
 8008dae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008db2:	4620      	mov	r0, r4
 8008db4:	bd70      	pop	{r4, r5, r6, pc}
 8008db6:	1cc4      	adds	r4, r0, #3
 8008db8:	f024 0403 	bic.w	r4, r4, #3
 8008dbc:	42a0      	cmp	r0, r4
 8008dbe:	d0f8      	beq.n	8008db2 <sbrk_aligned+0x22>
 8008dc0:	1a21      	subs	r1, r4, r0
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	f000 fb92 	bl	80094ec <_sbrk_r>
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d1f2      	bne.n	8008db2 <sbrk_aligned+0x22>
 8008dcc:	e7ef      	b.n	8008dae <sbrk_aligned+0x1e>
 8008dce:	bf00      	nop
 8008dd0:	200006a8 	.word	0x200006a8

08008dd4 <_malloc_r>:
 8008dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dd8:	1ccd      	adds	r5, r1, #3
 8008dda:	f025 0503 	bic.w	r5, r5, #3
 8008dde:	3508      	adds	r5, #8
 8008de0:	2d0c      	cmp	r5, #12
 8008de2:	bf38      	it	cc
 8008de4:	250c      	movcc	r5, #12
 8008de6:	2d00      	cmp	r5, #0
 8008de8:	4606      	mov	r6, r0
 8008dea:	db01      	blt.n	8008df0 <_malloc_r+0x1c>
 8008dec:	42a9      	cmp	r1, r5
 8008dee:	d904      	bls.n	8008dfa <_malloc_r+0x26>
 8008df0:	230c      	movs	r3, #12
 8008df2:	6033      	str	r3, [r6, #0]
 8008df4:	2000      	movs	r0, #0
 8008df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ed0 <_malloc_r+0xfc>
 8008dfe:	f000 f869 	bl	8008ed4 <__malloc_lock>
 8008e02:	f8d8 3000 	ldr.w	r3, [r8]
 8008e06:	461c      	mov	r4, r3
 8008e08:	bb44      	cbnz	r4, 8008e5c <_malloc_r+0x88>
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	f7ff ffbf 	bl	8008d90 <sbrk_aligned>
 8008e12:	1c43      	adds	r3, r0, #1
 8008e14:	4604      	mov	r4, r0
 8008e16:	d158      	bne.n	8008eca <_malloc_r+0xf6>
 8008e18:	f8d8 4000 	ldr.w	r4, [r8]
 8008e1c:	4627      	mov	r7, r4
 8008e1e:	2f00      	cmp	r7, #0
 8008e20:	d143      	bne.n	8008eaa <_malloc_r+0xd6>
 8008e22:	2c00      	cmp	r4, #0
 8008e24:	d04b      	beq.n	8008ebe <_malloc_r+0xea>
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	4639      	mov	r1, r7
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	eb04 0903 	add.w	r9, r4, r3
 8008e30:	f000 fb5c 	bl	80094ec <_sbrk_r>
 8008e34:	4581      	cmp	r9, r0
 8008e36:	d142      	bne.n	8008ebe <_malloc_r+0xea>
 8008e38:	6821      	ldr	r1, [r4, #0]
 8008e3a:	1a6d      	subs	r5, r5, r1
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f7ff ffa6 	bl	8008d90 <sbrk_aligned>
 8008e44:	3001      	adds	r0, #1
 8008e46:	d03a      	beq.n	8008ebe <_malloc_r+0xea>
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	442b      	add	r3, r5
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	bb62      	cbnz	r2, 8008eb0 <_malloc_r+0xdc>
 8008e56:	f8c8 7000 	str.w	r7, [r8]
 8008e5a:	e00f      	b.n	8008e7c <_malloc_r+0xa8>
 8008e5c:	6822      	ldr	r2, [r4, #0]
 8008e5e:	1b52      	subs	r2, r2, r5
 8008e60:	d420      	bmi.n	8008ea4 <_malloc_r+0xd0>
 8008e62:	2a0b      	cmp	r2, #11
 8008e64:	d917      	bls.n	8008e96 <_malloc_r+0xc2>
 8008e66:	1961      	adds	r1, r4, r5
 8008e68:	42a3      	cmp	r3, r4
 8008e6a:	6025      	str	r5, [r4, #0]
 8008e6c:	bf18      	it	ne
 8008e6e:	6059      	strne	r1, [r3, #4]
 8008e70:	6863      	ldr	r3, [r4, #4]
 8008e72:	bf08      	it	eq
 8008e74:	f8c8 1000 	streq.w	r1, [r8]
 8008e78:	5162      	str	r2, [r4, r5]
 8008e7a:	604b      	str	r3, [r1, #4]
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f000 f82f 	bl	8008ee0 <__malloc_unlock>
 8008e82:	f104 000b 	add.w	r0, r4, #11
 8008e86:	1d23      	adds	r3, r4, #4
 8008e88:	f020 0007 	bic.w	r0, r0, #7
 8008e8c:	1ac2      	subs	r2, r0, r3
 8008e8e:	bf1c      	itt	ne
 8008e90:	1a1b      	subne	r3, r3, r0
 8008e92:	50a3      	strne	r3, [r4, r2]
 8008e94:	e7af      	b.n	8008df6 <_malloc_r+0x22>
 8008e96:	6862      	ldr	r2, [r4, #4]
 8008e98:	42a3      	cmp	r3, r4
 8008e9a:	bf0c      	ite	eq
 8008e9c:	f8c8 2000 	streq.w	r2, [r8]
 8008ea0:	605a      	strne	r2, [r3, #4]
 8008ea2:	e7eb      	b.n	8008e7c <_malloc_r+0xa8>
 8008ea4:	4623      	mov	r3, r4
 8008ea6:	6864      	ldr	r4, [r4, #4]
 8008ea8:	e7ae      	b.n	8008e08 <_malloc_r+0x34>
 8008eaa:	463c      	mov	r4, r7
 8008eac:	687f      	ldr	r7, [r7, #4]
 8008eae:	e7b6      	b.n	8008e1e <_malloc_r+0x4a>
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	42a3      	cmp	r3, r4
 8008eb6:	d1fb      	bne.n	8008eb0 <_malloc_r+0xdc>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	6053      	str	r3, [r2, #4]
 8008ebc:	e7de      	b.n	8008e7c <_malloc_r+0xa8>
 8008ebe:	230c      	movs	r3, #12
 8008ec0:	6033      	str	r3, [r6, #0]
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f000 f80c 	bl	8008ee0 <__malloc_unlock>
 8008ec8:	e794      	b.n	8008df4 <_malloc_r+0x20>
 8008eca:	6005      	str	r5, [r0, #0]
 8008ecc:	e7d6      	b.n	8008e7c <_malloc_r+0xa8>
 8008ece:	bf00      	nop
 8008ed0:	200006ac 	.word	0x200006ac

08008ed4 <__malloc_lock>:
 8008ed4:	4801      	ldr	r0, [pc, #4]	@ (8008edc <__malloc_lock+0x8>)
 8008ed6:	f7ff bf0f 	b.w	8008cf8 <__retarget_lock_acquire_recursive>
 8008eda:	bf00      	nop
 8008edc:	200006a4 	.word	0x200006a4

08008ee0 <__malloc_unlock>:
 8008ee0:	4801      	ldr	r0, [pc, #4]	@ (8008ee8 <__malloc_unlock+0x8>)
 8008ee2:	f7ff bf0a 	b.w	8008cfa <__retarget_lock_release_recursive>
 8008ee6:	bf00      	nop
 8008ee8:	200006a4 	.word	0x200006a4

08008eec <__ssputs_r>:
 8008eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef0:	688e      	ldr	r6, [r1, #8]
 8008ef2:	461f      	mov	r7, r3
 8008ef4:	42be      	cmp	r6, r7
 8008ef6:	680b      	ldr	r3, [r1, #0]
 8008ef8:	4682      	mov	sl, r0
 8008efa:	460c      	mov	r4, r1
 8008efc:	4690      	mov	r8, r2
 8008efe:	d82d      	bhi.n	8008f5c <__ssputs_r+0x70>
 8008f00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f08:	d026      	beq.n	8008f58 <__ssputs_r+0x6c>
 8008f0a:	6965      	ldr	r5, [r4, #20]
 8008f0c:	6909      	ldr	r1, [r1, #16]
 8008f0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f12:	eba3 0901 	sub.w	r9, r3, r1
 8008f16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f1a:	1c7b      	adds	r3, r7, #1
 8008f1c:	444b      	add	r3, r9
 8008f1e:	106d      	asrs	r5, r5, #1
 8008f20:	429d      	cmp	r5, r3
 8008f22:	bf38      	it	cc
 8008f24:	461d      	movcc	r5, r3
 8008f26:	0553      	lsls	r3, r2, #21
 8008f28:	d527      	bpl.n	8008f7a <__ssputs_r+0x8e>
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	f7ff ff52 	bl	8008dd4 <_malloc_r>
 8008f30:	4606      	mov	r6, r0
 8008f32:	b360      	cbz	r0, 8008f8e <__ssputs_r+0xa2>
 8008f34:	6921      	ldr	r1, [r4, #16]
 8008f36:	464a      	mov	r2, r9
 8008f38:	f000 fae8 	bl	800950c <memcpy>
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f46:	81a3      	strh	r3, [r4, #12]
 8008f48:	6126      	str	r6, [r4, #16]
 8008f4a:	6165      	str	r5, [r4, #20]
 8008f4c:	444e      	add	r6, r9
 8008f4e:	eba5 0509 	sub.w	r5, r5, r9
 8008f52:	6026      	str	r6, [r4, #0]
 8008f54:	60a5      	str	r5, [r4, #8]
 8008f56:	463e      	mov	r6, r7
 8008f58:	42be      	cmp	r6, r7
 8008f5a:	d900      	bls.n	8008f5e <__ssputs_r+0x72>
 8008f5c:	463e      	mov	r6, r7
 8008f5e:	6820      	ldr	r0, [r4, #0]
 8008f60:	4632      	mov	r2, r6
 8008f62:	4641      	mov	r1, r8
 8008f64:	f000 faa8 	bl	80094b8 <memmove>
 8008f68:	68a3      	ldr	r3, [r4, #8]
 8008f6a:	1b9b      	subs	r3, r3, r6
 8008f6c:	60a3      	str	r3, [r4, #8]
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	4433      	add	r3, r6
 8008f72:	6023      	str	r3, [r4, #0]
 8008f74:	2000      	movs	r0, #0
 8008f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f7a:	462a      	mov	r2, r5
 8008f7c:	f000 fad4 	bl	8009528 <_realloc_r>
 8008f80:	4606      	mov	r6, r0
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d1e0      	bne.n	8008f48 <__ssputs_r+0x5c>
 8008f86:	6921      	ldr	r1, [r4, #16]
 8008f88:	4650      	mov	r0, sl
 8008f8a:	f7ff feb7 	bl	8008cfc <_free_r>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	f8ca 3000 	str.w	r3, [sl]
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f9a:	81a3      	strh	r3, [r4, #12]
 8008f9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fa0:	e7e9      	b.n	8008f76 <__ssputs_r+0x8a>
	...

08008fa4 <_svfiprintf_r>:
 8008fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa8:	4698      	mov	r8, r3
 8008faa:	898b      	ldrh	r3, [r1, #12]
 8008fac:	061b      	lsls	r3, r3, #24
 8008fae:	b09d      	sub	sp, #116	@ 0x74
 8008fb0:	4607      	mov	r7, r0
 8008fb2:	460d      	mov	r5, r1
 8008fb4:	4614      	mov	r4, r2
 8008fb6:	d510      	bpl.n	8008fda <_svfiprintf_r+0x36>
 8008fb8:	690b      	ldr	r3, [r1, #16]
 8008fba:	b973      	cbnz	r3, 8008fda <_svfiprintf_r+0x36>
 8008fbc:	2140      	movs	r1, #64	@ 0x40
 8008fbe:	f7ff ff09 	bl	8008dd4 <_malloc_r>
 8008fc2:	6028      	str	r0, [r5, #0]
 8008fc4:	6128      	str	r0, [r5, #16]
 8008fc6:	b930      	cbnz	r0, 8008fd6 <_svfiprintf_r+0x32>
 8008fc8:	230c      	movs	r3, #12
 8008fca:	603b      	str	r3, [r7, #0]
 8008fcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fd0:	b01d      	add	sp, #116	@ 0x74
 8008fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd6:	2340      	movs	r3, #64	@ 0x40
 8008fd8:	616b      	str	r3, [r5, #20]
 8008fda:	2300      	movs	r3, #0
 8008fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fde:	2320      	movs	r3, #32
 8008fe0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fe8:	2330      	movs	r3, #48	@ 0x30
 8008fea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009188 <_svfiprintf_r+0x1e4>
 8008fee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ff2:	f04f 0901 	mov.w	r9, #1
 8008ff6:	4623      	mov	r3, r4
 8008ff8:	469a      	mov	sl, r3
 8008ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ffe:	b10a      	cbz	r2, 8009004 <_svfiprintf_r+0x60>
 8009000:	2a25      	cmp	r2, #37	@ 0x25
 8009002:	d1f9      	bne.n	8008ff8 <_svfiprintf_r+0x54>
 8009004:	ebba 0b04 	subs.w	fp, sl, r4
 8009008:	d00b      	beq.n	8009022 <_svfiprintf_r+0x7e>
 800900a:	465b      	mov	r3, fp
 800900c:	4622      	mov	r2, r4
 800900e:	4629      	mov	r1, r5
 8009010:	4638      	mov	r0, r7
 8009012:	f7ff ff6b 	bl	8008eec <__ssputs_r>
 8009016:	3001      	adds	r0, #1
 8009018:	f000 80a7 	beq.w	800916a <_svfiprintf_r+0x1c6>
 800901c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800901e:	445a      	add	r2, fp
 8009020:	9209      	str	r2, [sp, #36]	@ 0x24
 8009022:	f89a 3000 	ldrb.w	r3, [sl]
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 809f 	beq.w	800916a <_svfiprintf_r+0x1c6>
 800902c:	2300      	movs	r3, #0
 800902e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009036:	f10a 0a01 	add.w	sl, sl, #1
 800903a:	9304      	str	r3, [sp, #16]
 800903c:	9307      	str	r3, [sp, #28]
 800903e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009042:	931a      	str	r3, [sp, #104]	@ 0x68
 8009044:	4654      	mov	r4, sl
 8009046:	2205      	movs	r2, #5
 8009048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800904c:	484e      	ldr	r0, [pc, #312]	@ (8009188 <_svfiprintf_r+0x1e4>)
 800904e:	f7f7 f8ef 	bl	8000230 <memchr>
 8009052:	9a04      	ldr	r2, [sp, #16]
 8009054:	b9d8      	cbnz	r0, 800908e <_svfiprintf_r+0xea>
 8009056:	06d0      	lsls	r0, r2, #27
 8009058:	bf44      	itt	mi
 800905a:	2320      	movmi	r3, #32
 800905c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009060:	0711      	lsls	r1, r2, #28
 8009062:	bf44      	itt	mi
 8009064:	232b      	movmi	r3, #43	@ 0x2b
 8009066:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800906a:	f89a 3000 	ldrb.w	r3, [sl]
 800906e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009070:	d015      	beq.n	800909e <_svfiprintf_r+0xfa>
 8009072:	9a07      	ldr	r2, [sp, #28]
 8009074:	4654      	mov	r4, sl
 8009076:	2000      	movs	r0, #0
 8009078:	f04f 0c0a 	mov.w	ip, #10
 800907c:	4621      	mov	r1, r4
 800907e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009082:	3b30      	subs	r3, #48	@ 0x30
 8009084:	2b09      	cmp	r3, #9
 8009086:	d94b      	bls.n	8009120 <_svfiprintf_r+0x17c>
 8009088:	b1b0      	cbz	r0, 80090b8 <_svfiprintf_r+0x114>
 800908a:	9207      	str	r2, [sp, #28]
 800908c:	e014      	b.n	80090b8 <_svfiprintf_r+0x114>
 800908e:	eba0 0308 	sub.w	r3, r0, r8
 8009092:	fa09 f303 	lsl.w	r3, r9, r3
 8009096:	4313      	orrs	r3, r2
 8009098:	9304      	str	r3, [sp, #16]
 800909a:	46a2      	mov	sl, r4
 800909c:	e7d2      	b.n	8009044 <_svfiprintf_r+0xa0>
 800909e:	9b03      	ldr	r3, [sp, #12]
 80090a0:	1d19      	adds	r1, r3, #4
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	9103      	str	r1, [sp, #12]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	bfbb      	ittet	lt
 80090aa:	425b      	neglt	r3, r3
 80090ac:	f042 0202 	orrlt.w	r2, r2, #2
 80090b0:	9307      	strge	r3, [sp, #28]
 80090b2:	9307      	strlt	r3, [sp, #28]
 80090b4:	bfb8      	it	lt
 80090b6:	9204      	strlt	r2, [sp, #16]
 80090b8:	7823      	ldrb	r3, [r4, #0]
 80090ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80090bc:	d10a      	bne.n	80090d4 <_svfiprintf_r+0x130>
 80090be:	7863      	ldrb	r3, [r4, #1]
 80090c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80090c2:	d132      	bne.n	800912a <_svfiprintf_r+0x186>
 80090c4:	9b03      	ldr	r3, [sp, #12]
 80090c6:	1d1a      	adds	r2, r3, #4
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	9203      	str	r2, [sp, #12]
 80090cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090d0:	3402      	adds	r4, #2
 80090d2:	9305      	str	r3, [sp, #20]
 80090d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009198 <_svfiprintf_r+0x1f4>
 80090d8:	7821      	ldrb	r1, [r4, #0]
 80090da:	2203      	movs	r2, #3
 80090dc:	4650      	mov	r0, sl
 80090de:	f7f7 f8a7 	bl	8000230 <memchr>
 80090e2:	b138      	cbz	r0, 80090f4 <_svfiprintf_r+0x150>
 80090e4:	9b04      	ldr	r3, [sp, #16]
 80090e6:	eba0 000a 	sub.w	r0, r0, sl
 80090ea:	2240      	movs	r2, #64	@ 0x40
 80090ec:	4082      	lsls	r2, r0
 80090ee:	4313      	orrs	r3, r2
 80090f0:	3401      	adds	r4, #1
 80090f2:	9304      	str	r3, [sp, #16]
 80090f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f8:	4824      	ldr	r0, [pc, #144]	@ (800918c <_svfiprintf_r+0x1e8>)
 80090fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090fe:	2206      	movs	r2, #6
 8009100:	f7f7 f896 	bl	8000230 <memchr>
 8009104:	2800      	cmp	r0, #0
 8009106:	d036      	beq.n	8009176 <_svfiprintf_r+0x1d2>
 8009108:	4b21      	ldr	r3, [pc, #132]	@ (8009190 <_svfiprintf_r+0x1ec>)
 800910a:	bb1b      	cbnz	r3, 8009154 <_svfiprintf_r+0x1b0>
 800910c:	9b03      	ldr	r3, [sp, #12]
 800910e:	3307      	adds	r3, #7
 8009110:	f023 0307 	bic.w	r3, r3, #7
 8009114:	3308      	adds	r3, #8
 8009116:	9303      	str	r3, [sp, #12]
 8009118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800911a:	4433      	add	r3, r6
 800911c:	9309      	str	r3, [sp, #36]	@ 0x24
 800911e:	e76a      	b.n	8008ff6 <_svfiprintf_r+0x52>
 8009120:	fb0c 3202 	mla	r2, ip, r2, r3
 8009124:	460c      	mov	r4, r1
 8009126:	2001      	movs	r0, #1
 8009128:	e7a8      	b.n	800907c <_svfiprintf_r+0xd8>
 800912a:	2300      	movs	r3, #0
 800912c:	3401      	adds	r4, #1
 800912e:	9305      	str	r3, [sp, #20]
 8009130:	4619      	mov	r1, r3
 8009132:	f04f 0c0a 	mov.w	ip, #10
 8009136:	4620      	mov	r0, r4
 8009138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800913c:	3a30      	subs	r2, #48	@ 0x30
 800913e:	2a09      	cmp	r2, #9
 8009140:	d903      	bls.n	800914a <_svfiprintf_r+0x1a6>
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0c6      	beq.n	80090d4 <_svfiprintf_r+0x130>
 8009146:	9105      	str	r1, [sp, #20]
 8009148:	e7c4      	b.n	80090d4 <_svfiprintf_r+0x130>
 800914a:	fb0c 2101 	mla	r1, ip, r1, r2
 800914e:	4604      	mov	r4, r0
 8009150:	2301      	movs	r3, #1
 8009152:	e7f0      	b.n	8009136 <_svfiprintf_r+0x192>
 8009154:	ab03      	add	r3, sp, #12
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	462a      	mov	r2, r5
 800915a:	4b0e      	ldr	r3, [pc, #56]	@ (8009194 <_svfiprintf_r+0x1f0>)
 800915c:	a904      	add	r1, sp, #16
 800915e:	4638      	mov	r0, r7
 8009160:	f3af 8000 	nop.w
 8009164:	1c42      	adds	r2, r0, #1
 8009166:	4606      	mov	r6, r0
 8009168:	d1d6      	bne.n	8009118 <_svfiprintf_r+0x174>
 800916a:	89ab      	ldrh	r3, [r5, #12]
 800916c:	065b      	lsls	r3, r3, #25
 800916e:	f53f af2d 	bmi.w	8008fcc <_svfiprintf_r+0x28>
 8009172:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009174:	e72c      	b.n	8008fd0 <_svfiprintf_r+0x2c>
 8009176:	ab03      	add	r3, sp, #12
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	462a      	mov	r2, r5
 800917c:	4b05      	ldr	r3, [pc, #20]	@ (8009194 <_svfiprintf_r+0x1f0>)
 800917e:	a904      	add	r1, sp, #16
 8009180:	4638      	mov	r0, r7
 8009182:	f000 f879 	bl	8009278 <_printf_i>
 8009186:	e7ed      	b.n	8009164 <_svfiprintf_r+0x1c0>
 8009188:	08009608 	.word	0x08009608
 800918c:	08009612 	.word	0x08009612
 8009190:	00000000 	.word	0x00000000
 8009194:	08008eed 	.word	0x08008eed
 8009198:	0800960e 	.word	0x0800960e

0800919c <_printf_common>:
 800919c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a0:	4616      	mov	r6, r2
 80091a2:	4698      	mov	r8, r3
 80091a4:	688a      	ldr	r2, [r1, #8]
 80091a6:	690b      	ldr	r3, [r1, #16]
 80091a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091ac:	4293      	cmp	r3, r2
 80091ae:	bfb8      	it	lt
 80091b0:	4613      	movlt	r3, r2
 80091b2:	6033      	str	r3, [r6, #0]
 80091b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091b8:	4607      	mov	r7, r0
 80091ba:	460c      	mov	r4, r1
 80091bc:	b10a      	cbz	r2, 80091c2 <_printf_common+0x26>
 80091be:	3301      	adds	r3, #1
 80091c0:	6033      	str	r3, [r6, #0]
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	0699      	lsls	r1, r3, #26
 80091c6:	bf42      	ittt	mi
 80091c8:	6833      	ldrmi	r3, [r6, #0]
 80091ca:	3302      	addmi	r3, #2
 80091cc:	6033      	strmi	r3, [r6, #0]
 80091ce:	6825      	ldr	r5, [r4, #0]
 80091d0:	f015 0506 	ands.w	r5, r5, #6
 80091d4:	d106      	bne.n	80091e4 <_printf_common+0x48>
 80091d6:	f104 0a19 	add.w	sl, r4, #25
 80091da:	68e3      	ldr	r3, [r4, #12]
 80091dc:	6832      	ldr	r2, [r6, #0]
 80091de:	1a9b      	subs	r3, r3, r2
 80091e0:	42ab      	cmp	r3, r5
 80091e2:	dc26      	bgt.n	8009232 <_printf_common+0x96>
 80091e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091e8:	6822      	ldr	r2, [r4, #0]
 80091ea:	3b00      	subs	r3, #0
 80091ec:	bf18      	it	ne
 80091ee:	2301      	movne	r3, #1
 80091f0:	0692      	lsls	r2, r2, #26
 80091f2:	d42b      	bmi.n	800924c <_printf_common+0xb0>
 80091f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80091f8:	4641      	mov	r1, r8
 80091fa:	4638      	mov	r0, r7
 80091fc:	47c8      	blx	r9
 80091fe:	3001      	adds	r0, #1
 8009200:	d01e      	beq.n	8009240 <_printf_common+0xa4>
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	6922      	ldr	r2, [r4, #16]
 8009206:	f003 0306 	and.w	r3, r3, #6
 800920a:	2b04      	cmp	r3, #4
 800920c:	bf02      	ittt	eq
 800920e:	68e5      	ldreq	r5, [r4, #12]
 8009210:	6833      	ldreq	r3, [r6, #0]
 8009212:	1aed      	subeq	r5, r5, r3
 8009214:	68a3      	ldr	r3, [r4, #8]
 8009216:	bf0c      	ite	eq
 8009218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800921c:	2500      	movne	r5, #0
 800921e:	4293      	cmp	r3, r2
 8009220:	bfc4      	itt	gt
 8009222:	1a9b      	subgt	r3, r3, r2
 8009224:	18ed      	addgt	r5, r5, r3
 8009226:	2600      	movs	r6, #0
 8009228:	341a      	adds	r4, #26
 800922a:	42b5      	cmp	r5, r6
 800922c:	d11a      	bne.n	8009264 <_printf_common+0xc8>
 800922e:	2000      	movs	r0, #0
 8009230:	e008      	b.n	8009244 <_printf_common+0xa8>
 8009232:	2301      	movs	r3, #1
 8009234:	4652      	mov	r2, sl
 8009236:	4641      	mov	r1, r8
 8009238:	4638      	mov	r0, r7
 800923a:	47c8      	blx	r9
 800923c:	3001      	adds	r0, #1
 800923e:	d103      	bne.n	8009248 <_printf_common+0xac>
 8009240:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009248:	3501      	adds	r5, #1
 800924a:	e7c6      	b.n	80091da <_printf_common+0x3e>
 800924c:	18e1      	adds	r1, r4, r3
 800924e:	1c5a      	adds	r2, r3, #1
 8009250:	2030      	movs	r0, #48	@ 0x30
 8009252:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009256:	4422      	add	r2, r4
 8009258:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800925c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009260:	3302      	adds	r3, #2
 8009262:	e7c7      	b.n	80091f4 <_printf_common+0x58>
 8009264:	2301      	movs	r3, #1
 8009266:	4622      	mov	r2, r4
 8009268:	4641      	mov	r1, r8
 800926a:	4638      	mov	r0, r7
 800926c:	47c8      	blx	r9
 800926e:	3001      	adds	r0, #1
 8009270:	d0e6      	beq.n	8009240 <_printf_common+0xa4>
 8009272:	3601      	adds	r6, #1
 8009274:	e7d9      	b.n	800922a <_printf_common+0x8e>
	...

08009278 <_printf_i>:
 8009278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800927c:	7e0f      	ldrb	r7, [r1, #24]
 800927e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009280:	2f78      	cmp	r7, #120	@ 0x78
 8009282:	4691      	mov	r9, r2
 8009284:	4680      	mov	r8, r0
 8009286:	460c      	mov	r4, r1
 8009288:	469a      	mov	sl, r3
 800928a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800928e:	d807      	bhi.n	80092a0 <_printf_i+0x28>
 8009290:	2f62      	cmp	r7, #98	@ 0x62
 8009292:	d80a      	bhi.n	80092aa <_printf_i+0x32>
 8009294:	2f00      	cmp	r7, #0
 8009296:	f000 80d2 	beq.w	800943e <_printf_i+0x1c6>
 800929a:	2f58      	cmp	r7, #88	@ 0x58
 800929c:	f000 80b9 	beq.w	8009412 <_printf_i+0x19a>
 80092a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092a8:	e03a      	b.n	8009320 <_printf_i+0xa8>
 80092aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092ae:	2b15      	cmp	r3, #21
 80092b0:	d8f6      	bhi.n	80092a0 <_printf_i+0x28>
 80092b2:	a101      	add	r1, pc, #4	@ (adr r1, 80092b8 <_printf_i+0x40>)
 80092b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092b8:	08009311 	.word	0x08009311
 80092bc:	08009325 	.word	0x08009325
 80092c0:	080092a1 	.word	0x080092a1
 80092c4:	080092a1 	.word	0x080092a1
 80092c8:	080092a1 	.word	0x080092a1
 80092cc:	080092a1 	.word	0x080092a1
 80092d0:	08009325 	.word	0x08009325
 80092d4:	080092a1 	.word	0x080092a1
 80092d8:	080092a1 	.word	0x080092a1
 80092dc:	080092a1 	.word	0x080092a1
 80092e0:	080092a1 	.word	0x080092a1
 80092e4:	08009425 	.word	0x08009425
 80092e8:	0800934f 	.word	0x0800934f
 80092ec:	080093df 	.word	0x080093df
 80092f0:	080092a1 	.word	0x080092a1
 80092f4:	080092a1 	.word	0x080092a1
 80092f8:	08009447 	.word	0x08009447
 80092fc:	080092a1 	.word	0x080092a1
 8009300:	0800934f 	.word	0x0800934f
 8009304:	080092a1 	.word	0x080092a1
 8009308:	080092a1 	.word	0x080092a1
 800930c:	080093e7 	.word	0x080093e7
 8009310:	6833      	ldr	r3, [r6, #0]
 8009312:	1d1a      	adds	r2, r3, #4
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6032      	str	r2, [r6, #0]
 8009318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800931c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009320:	2301      	movs	r3, #1
 8009322:	e09d      	b.n	8009460 <_printf_i+0x1e8>
 8009324:	6833      	ldr	r3, [r6, #0]
 8009326:	6820      	ldr	r0, [r4, #0]
 8009328:	1d19      	adds	r1, r3, #4
 800932a:	6031      	str	r1, [r6, #0]
 800932c:	0606      	lsls	r6, r0, #24
 800932e:	d501      	bpl.n	8009334 <_printf_i+0xbc>
 8009330:	681d      	ldr	r5, [r3, #0]
 8009332:	e003      	b.n	800933c <_printf_i+0xc4>
 8009334:	0645      	lsls	r5, r0, #25
 8009336:	d5fb      	bpl.n	8009330 <_printf_i+0xb8>
 8009338:	f9b3 5000 	ldrsh.w	r5, [r3]
 800933c:	2d00      	cmp	r5, #0
 800933e:	da03      	bge.n	8009348 <_printf_i+0xd0>
 8009340:	232d      	movs	r3, #45	@ 0x2d
 8009342:	426d      	negs	r5, r5
 8009344:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009348:	4859      	ldr	r0, [pc, #356]	@ (80094b0 <_printf_i+0x238>)
 800934a:	230a      	movs	r3, #10
 800934c:	e011      	b.n	8009372 <_printf_i+0xfa>
 800934e:	6821      	ldr	r1, [r4, #0]
 8009350:	6833      	ldr	r3, [r6, #0]
 8009352:	0608      	lsls	r0, r1, #24
 8009354:	f853 5b04 	ldr.w	r5, [r3], #4
 8009358:	d402      	bmi.n	8009360 <_printf_i+0xe8>
 800935a:	0649      	lsls	r1, r1, #25
 800935c:	bf48      	it	mi
 800935e:	b2ad      	uxthmi	r5, r5
 8009360:	2f6f      	cmp	r7, #111	@ 0x6f
 8009362:	4853      	ldr	r0, [pc, #332]	@ (80094b0 <_printf_i+0x238>)
 8009364:	6033      	str	r3, [r6, #0]
 8009366:	bf14      	ite	ne
 8009368:	230a      	movne	r3, #10
 800936a:	2308      	moveq	r3, #8
 800936c:	2100      	movs	r1, #0
 800936e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009372:	6866      	ldr	r6, [r4, #4]
 8009374:	60a6      	str	r6, [r4, #8]
 8009376:	2e00      	cmp	r6, #0
 8009378:	bfa2      	ittt	ge
 800937a:	6821      	ldrge	r1, [r4, #0]
 800937c:	f021 0104 	bicge.w	r1, r1, #4
 8009380:	6021      	strge	r1, [r4, #0]
 8009382:	b90d      	cbnz	r5, 8009388 <_printf_i+0x110>
 8009384:	2e00      	cmp	r6, #0
 8009386:	d04b      	beq.n	8009420 <_printf_i+0x1a8>
 8009388:	4616      	mov	r6, r2
 800938a:	fbb5 f1f3 	udiv	r1, r5, r3
 800938e:	fb03 5711 	mls	r7, r3, r1, r5
 8009392:	5dc7      	ldrb	r7, [r0, r7]
 8009394:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009398:	462f      	mov	r7, r5
 800939a:	42bb      	cmp	r3, r7
 800939c:	460d      	mov	r5, r1
 800939e:	d9f4      	bls.n	800938a <_printf_i+0x112>
 80093a0:	2b08      	cmp	r3, #8
 80093a2:	d10b      	bne.n	80093bc <_printf_i+0x144>
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	07df      	lsls	r7, r3, #31
 80093a8:	d508      	bpl.n	80093bc <_printf_i+0x144>
 80093aa:	6923      	ldr	r3, [r4, #16]
 80093ac:	6861      	ldr	r1, [r4, #4]
 80093ae:	4299      	cmp	r1, r3
 80093b0:	bfde      	ittt	le
 80093b2:	2330      	movle	r3, #48	@ 0x30
 80093b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80093bc:	1b92      	subs	r2, r2, r6
 80093be:	6122      	str	r2, [r4, #16]
 80093c0:	f8cd a000 	str.w	sl, [sp]
 80093c4:	464b      	mov	r3, r9
 80093c6:	aa03      	add	r2, sp, #12
 80093c8:	4621      	mov	r1, r4
 80093ca:	4640      	mov	r0, r8
 80093cc:	f7ff fee6 	bl	800919c <_printf_common>
 80093d0:	3001      	adds	r0, #1
 80093d2:	d14a      	bne.n	800946a <_printf_i+0x1f2>
 80093d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093d8:	b004      	add	sp, #16
 80093da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	f043 0320 	orr.w	r3, r3, #32
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	4833      	ldr	r0, [pc, #204]	@ (80094b4 <_printf_i+0x23c>)
 80093e8:	2778      	movs	r7, #120	@ 0x78
 80093ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	6831      	ldr	r1, [r6, #0]
 80093f2:	061f      	lsls	r7, r3, #24
 80093f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80093f8:	d402      	bmi.n	8009400 <_printf_i+0x188>
 80093fa:	065f      	lsls	r7, r3, #25
 80093fc:	bf48      	it	mi
 80093fe:	b2ad      	uxthmi	r5, r5
 8009400:	6031      	str	r1, [r6, #0]
 8009402:	07d9      	lsls	r1, r3, #31
 8009404:	bf44      	itt	mi
 8009406:	f043 0320 	orrmi.w	r3, r3, #32
 800940a:	6023      	strmi	r3, [r4, #0]
 800940c:	b11d      	cbz	r5, 8009416 <_printf_i+0x19e>
 800940e:	2310      	movs	r3, #16
 8009410:	e7ac      	b.n	800936c <_printf_i+0xf4>
 8009412:	4827      	ldr	r0, [pc, #156]	@ (80094b0 <_printf_i+0x238>)
 8009414:	e7e9      	b.n	80093ea <_printf_i+0x172>
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	f023 0320 	bic.w	r3, r3, #32
 800941c:	6023      	str	r3, [r4, #0]
 800941e:	e7f6      	b.n	800940e <_printf_i+0x196>
 8009420:	4616      	mov	r6, r2
 8009422:	e7bd      	b.n	80093a0 <_printf_i+0x128>
 8009424:	6833      	ldr	r3, [r6, #0]
 8009426:	6825      	ldr	r5, [r4, #0]
 8009428:	6961      	ldr	r1, [r4, #20]
 800942a:	1d18      	adds	r0, r3, #4
 800942c:	6030      	str	r0, [r6, #0]
 800942e:	062e      	lsls	r6, r5, #24
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	d501      	bpl.n	8009438 <_printf_i+0x1c0>
 8009434:	6019      	str	r1, [r3, #0]
 8009436:	e002      	b.n	800943e <_printf_i+0x1c6>
 8009438:	0668      	lsls	r0, r5, #25
 800943a:	d5fb      	bpl.n	8009434 <_printf_i+0x1bc>
 800943c:	8019      	strh	r1, [r3, #0]
 800943e:	2300      	movs	r3, #0
 8009440:	6123      	str	r3, [r4, #16]
 8009442:	4616      	mov	r6, r2
 8009444:	e7bc      	b.n	80093c0 <_printf_i+0x148>
 8009446:	6833      	ldr	r3, [r6, #0]
 8009448:	1d1a      	adds	r2, r3, #4
 800944a:	6032      	str	r2, [r6, #0]
 800944c:	681e      	ldr	r6, [r3, #0]
 800944e:	6862      	ldr	r2, [r4, #4]
 8009450:	2100      	movs	r1, #0
 8009452:	4630      	mov	r0, r6
 8009454:	f7f6 feec 	bl	8000230 <memchr>
 8009458:	b108      	cbz	r0, 800945e <_printf_i+0x1e6>
 800945a:	1b80      	subs	r0, r0, r6
 800945c:	6060      	str	r0, [r4, #4]
 800945e:	6863      	ldr	r3, [r4, #4]
 8009460:	6123      	str	r3, [r4, #16]
 8009462:	2300      	movs	r3, #0
 8009464:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009468:	e7aa      	b.n	80093c0 <_printf_i+0x148>
 800946a:	6923      	ldr	r3, [r4, #16]
 800946c:	4632      	mov	r2, r6
 800946e:	4649      	mov	r1, r9
 8009470:	4640      	mov	r0, r8
 8009472:	47d0      	blx	sl
 8009474:	3001      	adds	r0, #1
 8009476:	d0ad      	beq.n	80093d4 <_printf_i+0x15c>
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	079b      	lsls	r3, r3, #30
 800947c:	d413      	bmi.n	80094a6 <_printf_i+0x22e>
 800947e:	68e0      	ldr	r0, [r4, #12]
 8009480:	9b03      	ldr	r3, [sp, #12]
 8009482:	4298      	cmp	r0, r3
 8009484:	bfb8      	it	lt
 8009486:	4618      	movlt	r0, r3
 8009488:	e7a6      	b.n	80093d8 <_printf_i+0x160>
 800948a:	2301      	movs	r3, #1
 800948c:	4632      	mov	r2, r6
 800948e:	4649      	mov	r1, r9
 8009490:	4640      	mov	r0, r8
 8009492:	47d0      	blx	sl
 8009494:	3001      	adds	r0, #1
 8009496:	d09d      	beq.n	80093d4 <_printf_i+0x15c>
 8009498:	3501      	adds	r5, #1
 800949a:	68e3      	ldr	r3, [r4, #12]
 800949c:	9903      	ldr	r1, [sp, #12]
 800949e:	1a5b      	subs	r3, r3, r1
 80094a0:	42ab      	cmp	r3, r5
 80094a2:	dcf2      	bgt.n	800948a <_printf_i+0x212>
 80094a4:	e7eb      	b.n	800947e <_printf_i+0x206>
 80094a6:	2500      	movs	r5, #0
 80094a8:	f104 0619 	add.w	r6, r4, #25
 80094ac:	e7f5      	b.n	800949a <_printf_i+0x222>
 80094ae:	bf00      	nop
 80094b0:	08009619 	.word	0x08009619
 80094b4:	0800962a 	.word	0x0800962a

080094b8 <memmove>:
 80094b8:	4288      	cmp	r0, r1
 80094ba:	b510      	push	{r4, lr}
 80094bc:	eb01 0402 	add.w	r4, r1, r2
 80094c0:	d902      	bls.n	80094c8 <memmove+0x10>
 80094c2:	4284      	cmp	r4, r0
 80094c4:	4623      	mov	r3, r4
 80094c6:	d807      	bhi.n	80094d8 <memmove+0x20>
 80094c8:	1e43      	subs	r3, r0, #1
 80094ca:	42a1      	cmp	r1, r4
 80094cc:	d008      	beq.n	80094e0 <memmove+0x28>
 80094ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094d6:	e7f8      	b.n	80094ca <memmove+0x12>
 80094d8:	4402      	add	r2, r0
 80094da:	4601      	mov	r1, r0
 80094dc:	428a      	cmp	r2, r1
 80094de:	d100      	bne.n	80094e2 <memmove+0x2a>
 80094e0:	bd10      	pop	{r4, pc}
 80094e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094ea:	e7f7      	b.n	80094dc <memmove+0x24>

080094ec <_sbrk_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4d06      	ldr	r5, [pc, #24]	@ (8009508 <_sbrk_r+0x1c>)
 80094f0:	2300      	movs	r3, #0
 80094f2:	4604      	mov	r4, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	602b      	str	r3, [r5, #0]
 80094f8:	f7f7 fce6 	bl	8000ec8 <_sbrk>
 80094fc:	1c43      	adds	r3, r0, #1
 80094fe:	d102      	bne.n	8009506 <_sbrk_r+0x1a>
 8009500:	682b      	ldr	r3, [r5, #0]
 8009502:	b103      	cbz	r3, 8009506 <_sbrk_r+0x1a>
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	bd38      	pop	{r3, r4, r5, pc}
 8009508:	200006a0 	.word	0x200006a0

0800950c <memcpy>:
 800950c:	440a      	add	r2, r1
 800950e:	4291      	cmp	r1, r2
 8009510:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009514:	d100      	bne.n	8009518 <memcpy+0xc>
 8009516:	4770      	bx	lr
 8009518:	b510      	push	{r4, lr}
 800951a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800951e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009522:	4291      	cmp	r1, r2
 8009524:	d1f9      	bne.n	800951a <memcpy+0xe>
 8009526:	bd10      	pop	{r4, pc}

08009528 <_realloc_r>:
 8009528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800952c:	4680      	mov	r8, r0
 800952e:	4615      	mov	r5, r2
 8009530:	460c      	mov	r4, r1
 8009532:	b921      	cbnz	r1, 800953e <_realloc_r+0x16>
 8009534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009538:	4611      	mov	r1, r2
 800953a:	f7ff bc4b 	b.w	8008dd4 <_malloc_r>
 800953e:	b92a      	cbnz	r2, 800954c <_realloc_r+0x24>
 8009540:	f7ff fbdc 	bl	8008cfc <_free_r>
 8009544:	2400      	movs	r4, #0
 8009546:	4620      	mov	r0, r4
 8009548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800954c:	f000 f81a 	bl	8009584 <_malloc_usable_size_r>
 8009550:	4285      	cmp	r5, r0
 8009552:	4606      	mov	r6, r0
 8009554:	d802      	bhi.n	800955c <_realloc_r+0x34>
 8009556:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800955a:	d8f4      	bhi.n	8009546 <_realloc_r+0x1e>
 800955c:	4629      	mov	r1, r5
 800955e:	4640      	mov	r0, r8
 8009560:	f7ff fc38 	bl	8008dd4 <_malloc_r>
 8009564:	4607      	mov	r7, r0
 8009566:	2800      	cmp	r0, #0
 8009568:	d0ec      	beq.n	8009544 <_realloc_r+0x1c>
 800956a:	42b5      	cmp	r5, r6
 800956c:	462a      	mov	r2, r5
 800956e:	4621      	mov	r1, r4
 8009570:	bf28      	it	cs
 8009572:	4632      	movcs	r2, r6
 8009574:	f7ff ffca 	bl	800950c <memcpy>
 8009578:	4621      	mov	r1, r4
 800957a:	4640      	mov	r0, r8
 800957c:	f7ff fbbe 	bl	8008cfc <_free_r>
 8009580:	463c      	mov	r4, r7
 8009582:	e7e0      	b.n	8009546 <_realloc_r+0x1e>

08009584 <_malloc_usable_size_r>:
 8009584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009588:	1f18      	subs	r0, r3, #4
 800958a:	2b00      	cmp	r3, #0
 800958c:	bfbc      	itt	lt
 800958e:	580b      	ldrlt	r3, [r1, r0]
 8009590:	18c0      	addlt	r0, r0, r3
 8009592:	4770      	bx	lr

08009594 <_init>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	bf00      	nop
 8009598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959a:	bc08      	pop	{r3}
 800959c:	469e      	mov	lr, r3
 800959e:	4770      	bx	lr

080095a0 <_fini>:
 80095a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a2:	bf00      	nop
 80095a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a6:	bc08      	pop	{r3}
 80095a8:	469e      	mov	lr, r3
 80095aa:	4770      	bx	lr
