
TP_ACTIONNEUR_FRICOT_CHAPART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009608  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  080097e8  080097e8  0000a7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009af8  08009af8  0000b12c  2**0
                  CONTENTS
  4 .ARM          00000008  08009af8  08009af8  0000aaf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b00  08009b00  0000b12c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b00  08009b00  0000ab00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b04  08009b04  0000ab04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08009b08  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  2000012c  08009c34  0000b12c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08009c34  0000b698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b12c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab34  00000000  00000000  0000b15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000381e  00000000  00000000  00025c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  000294b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001161  00000000  00000000  0002ab30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a95c  00000000  00000000  0002bc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae93  00000000  00000000  000565ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115366  00000000  00000000  00071480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001867e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ad8  00000000  00000000  0018682c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0018d304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000012c 	.word	0x2000012c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080097d0 	.word	0x080097d0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000130 	.word	0x20000130
 800021c:	080097d0 	.word	0x080097d0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f008 f83c 	bl	8008676 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000620:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000632:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800063a:	2201      	movs	r2, #1
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800066a:	f001 fcab 	bl	8001fc4 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000674:	f000 fa81 	bl	8000b7a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000680:	4619      	mov	r1, r3
 8000682:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000684:	f002 fac0 	bl	8002c08 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800068e:	f000 fa74 	bl	8000b7a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_ADC1_Init+0xec>)
 8000694:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	237f      	movs	r3, #127	@ 0x7f
 80006a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a2:	2304      	movs	r3, #4
 80006a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 80006b0:	f001 fe44 	bl	800233c <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ba:	f000 fa5e 	bl	8000b7a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	@ 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000148 	.word	0x20000148
 80006cc:	21800100 	.word	0x21800100

080006d0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2220      	movs	r2, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f007 ffca 	bl	8008676 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000794 <MX_ADC2_Init+0xc4>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000708:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800070a:	2204      	movs	r2, #4
 800070c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000716:	2200      	movs	r2, #0
 8000718:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800071c:	2201      	movs	r2, #1
 800071e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800074a:	4811      	ldr	r0, [pc, #68]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800074c:	f001 fc3a 	bl	8001fc4 <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000756:	f000 fa10 	bl	8000b7a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_ADC2_Init+0xc8>)
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075e:	2306      	movs	r3, #6
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000766:	237f      	movs	r3, #127	@ 0x7f
 8000768:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076a:	2304      	movs	r3, #4
 800076c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000778:	f001 fde0 	bl	800233c <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000782:	f000 f9fa 	bl	8000b7a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200001b4 	.word	0x200001b4
 8000794:	50000100 	.word	0x50000100
 8000798:	19200040 	.word	0x19200040

0800079c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0a4      	sub	sp, #144	@ 0x90
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b8:	2254      	movs	r2, #84	@ 0x54
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 ff5a 	bl	8008676 <memset>
  if(adcHandle->Instance==ADC1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ca:	d174      	bne.n	80008b6 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fc8d 	bl	80040fc <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007e8:	f000 f9c7 	bl	8000b7a <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007ec:	4b63      	ldr	r3, [pc, #396]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a62      	ldr	r2, [pc, #392]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007f6:	4b61      	ldr	r3, [pc, #388]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10b      	bne.n	8000816 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007fe:	4b60      	ldr	r3, [pc, #384]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a5f      	ldr	r2, [pc, #380]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000804:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b5d      	ldr	r3, [pc, #372]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b5a      	ldr	r3, [pc, #360]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a59      	ldr	r2, [pc, #356]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b57      	ldr	r3, [pc, #348]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b54      	ldr	r3, [pc, #336]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a53      	ldr	r2, [pc, #332]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b4e      	ldr	r3, [pc, #312]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a4d      	ldr	r2, [pc, #308]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b4b      	ldr	r3, [pc, #300]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800085e:	2304      	movs	r3, #4
 8000860:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000872:	4619      	mov	r1, r3
 8000874:	4843      	ldr	r0, [pc, #268]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000876:	f002 fc6f 	bl	8003158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800087a:	2302      	movs	r3, #2
 800087c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000894:	f002 fc60 	bl	8003158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000898:	2303      	movs	r3, #3
 800089a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089c:	2303      	movs	r3, #3
 800089e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008ac:	4619      	mov	r1, r3
 80008ae:	4836      	ldr	r0, [pc, #216]	@ (8000988 <HAL_ADC_MspInit+0x1ec>)
 80008b0:	f002 fc52 	bl	8003158 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008b4:	e05e      	b.n	8000974 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a34      	ldr	r2, [pc, #208]	@ (800098c <HAL_ADC_MspInit+0x1f0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d159      	bne.n	8000974 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008c6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 fc13 	bl	80040fc <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008dc:	f000 f94d 	bl	8000b7a <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008e0:	4b26      	ldr	r3, [pc, #152]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a25      	ldr	r2, [pc, #148]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ea:	4b24      	ldr	r3, [pc, #144]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10b      	bne.n	800090a <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a16      	ldr	r2, [pc, #88]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800093a:	230b      	movs	r3, #11
 800093c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093e:	2303      	movs	r3, #3
 8000940:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000952:	f002 fc01 	bl	8003158 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000956:	2301      	movs	r3, #1
 8000958:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095a:	2303      	movs	r3, #3
 800095c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f002 fbf2 	bl	8003158 <HAL_GPIO_Init>
}
 8000974:	bf00      	nop
 8000976:	3790      	adds	r7, #144	@ 0x90
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000220 	.word	0x20000220
 8000980:	40021000 	.word	0x40021000
 8000984:	48000800 	.word	0x48000800
 8000988:	48000400 	.word	0x48000400
 800098c:	50000100 	.word	0x50000100

08000990 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b3f      	ldr	r3, [pc, #252]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a3e      	ldr	r2, [pc, #248]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b3c      	ldr	r3, [pc, #240]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009be:	4b39      	ldr	r3, [pc, #228]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	4a38      	ldr	r2, [pc, #224]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009c4:	f043 0320 	orr.w	r3, r3, #32
 80009c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ca:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	f003 0320 	and.w	r3, r3, #32
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b33      	ldr	r3, [pc, #204]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a32      	ldr	r2, [pc, #200]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b30      	ldr	r3, [pc, #192]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4a2c      	ldr	r2, [pc, #176]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	4a26      	ldr	r2, [pc, #152]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a12:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a26:	f002 fd19 	bl	800345c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	481e      	ldr	r0, [pc, #120]	@ (8000aa8 <MX_GPIO_Init+0x118>)
 8000a30:	f002 fd14 	bl	800345c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4818      	ldr	r0, [pc, #96]	@ (8000aac <MX_GPIO_Init+0x11c>)
 8000a4c:	f002 fb84 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a50:	2320      	movs	r3, #32
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f002 fb75 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4808      	ldr	r0, [pc, #32]	@ (8000aa8 <MX_GPIO_Init+0x118>)
 8000a86:	f002 fb67 	bl	8003158 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2028      	movs	r0, #40	@ 0x28
 8000a90:	f002 fa7a 	bl	8002f88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a94:	2028      	movs	r0, #40	@ 0x28
 8000a96:	f002 fa91 	bl	8002fbc <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	@ 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48000c00 	.word	0x48000c00
 8000aac:	48000800 	.word	0x48000800

08000ab0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ab4:	f001 f879 	bl	8001baa <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ab8:	f000 f816 	bl	8000ae8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000abc:	f7ff ff68 	bl	8000990 <MX_GPIO_Init>
	MX_ADC2_Init();
 8000ac0:	f7ff fe06 	bl	80006d0 <MX_ADC2_Init>
	MX_ADC1_Init();
 8000ac4:	f7ff fd8c 	bl	80005e0 <MX_ADC1_Init>
	MX_TIM1_Init();
 8000ac8:	f000 fa26 	bl	8000f18 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000acc:	f000 fad2 	bl	8001074 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8000ad0:	f000 fc62 	bl	8001398 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000ad4:	f000 fcac 	bl	8001430 <MX_USART3_UART_Init>
	MX_TIM7_Init();
 8000ad8:	f000 fb18 	bl	800110c <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */

	Shell_Init();
 8000adc:	f000 feec 	bl	80018b8 <Shell_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000ae0:	f000 ff2a 	bl	8001938 <Shell_Loop>
	{
 8000ae4:	bf00      	nop
 8000ae6:	e7fb      	b.n	8000ae0 <main+0x30>

08000ae8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b094      	sub	sp, #80	@ 0x50
 8000aec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 0318 	add.w	r3, r7, #24
 8000af2:	2238      	movs	r2, #56	@ 0x38
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f007 fdbd 	bl	8008676 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f002 fce2 	bl	80034d4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b18:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000b22:	2306      	movs	r3, #6
 8000b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000b26:	2355      	movs	r3, #85	@ 0x55
 8000b28:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b36:	f107 0318 	add.w	r3, r7, #24
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f002 fd7e 	bl	800363c <HAL_RCC_OscConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000b46:	f000 f818 	bl	8000b7a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4a:	230f      	movs	r3, #15
 8000b4c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2104      	movs	r1, #4
 8000b62:	4618      	mov	r0, r3
 8000b64:	f003 f87c 	bl	8003c60 <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000b6e:	f000 f804 	bl	8000b7a <Error_Handler>
	}
}
 8000b72:	bf00      	nop
 8000b74:	3750      	adds	r7, #80	@ 0x50
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7e:	b672      	cpsid	i
}
 8000b80:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b82:	bf00      	nop
 8000b84:	e7fd      	b.n	8000b82 <Error_Handler+0x8>
	...

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b92:	4a0e      	ldr	r2, [pc, #56]	@ (8000bcc <HAL_MspInit+0x44>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <HAL_MspInit+0x44>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000baa:	4a08      	ldr	r2, [pc, #32]	@ (8000bcc <HAL_MspInit+0x44>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_MspInit+0x44>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bbe:	f002 fd2d 	bl	800361c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	@ 0x30
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000be0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c94 <HAL_InitTick+0xc4>)
 8000be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be4:	4a2b      	ldr	r2, [pc, #172]	@ (8000c94 <HAL_InitTick+0xc4>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bec:	4b29      	ldr	r3, [pc, #164]	@ (8000c94 <HAL_InitTick+0xc4>)
 8000bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf0:	f003 0310 	and.w	r3, r3, #16
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf8:	f107 020c 	add.w	r2, r7, #12
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f003 fa02 	bl	800400c <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c08:	f003 f9d4 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8000c0c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c10:	4a21      	ldr	r2, [pc, #132]	@ (8000c98 <HAL_InitTick+0xc8>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	0c9b      	lsrs	r3, r3, #18
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <HAL_InitTick+0xcc>)
 8000c1e:	4a20      	ldr	r2, [pc, #128]	@ (8000ca0 <HAL_InitTick+0xd0>)
 8000c20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c22:	4b1e      	ldr	r3, [pc, #120]	@ (8000c9c <HAL_InitTick+0xcc>)
 8000c24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c28:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c9c <HAL_InitTick+0xcc>)
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	@ (8000c9c <HAL_InitTick+0xcc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <HAL_InitTick+0xcc>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000c3c:	4817      	ldr	r0, [pc, #92]	@ (8000c9c <HAL_InitTick+0xcc>)
 8000c3e:	f003 fcab 	bl	8004598 <HAL_TIM_Base_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d11b      	bne.n	8000c88 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c50:	4812      	ldr	r0, [pc, #72]	@ (8000c9c <HAL_InitTick+0xcc>)
 8000c52:	f003 fd1f 	bl	8004694 <HAL_TIM_Base_Start_IT>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d111      	bne.n	8000c88 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c64:	2036      	movs	r0, #54	@ 0x36
 8000c66:	f002 f9a9 	bl	8002fbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d808      	bhi.n	8000c82 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	2036      	movs	r0, #54	@ 0x36
 8000c76:	f002 f987 	bl	8002f88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <HAL_InitTick+0xd4>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	e002      	b.n	8000c88 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3730      	adds	r7, #48	@ 0x30
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40021000 	.word	0x40021000
 8000c98:	431bde83 	.word	0x431bde83
 8000c9c:	20000224 	.word	0x20000224
 8000ca0:	40001000 	.word	0x40001000
 8000ca4:	200000c8 	.word	0x200000c8

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <NMI_Handler+0x4>

08000cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <MemManage_Handler+0x4>

08000cc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d0c:	4802      	ldr	r0, [pc, #8]	@ (8000d18 <USART2_IRQHandler+0x10>)
 8000d0e:	f005 fad1 	bl	80062b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000358 	.word	0x20000358

08000d1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d20:	4802      	ldr	r0, [pc, #8]	@ (8000d2c <USART3_IRQHandler+0x10>)
 8000d22:	f005 fac7 	bl	80062b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200003ec 	.word	0x200003ec

08000d30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000d34:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d38:	f002 fba8 	bl	800348c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d44:	4802      	ldr	r0, [pc, #8]	@ (8000d50 <TIM6_DAC_IRQHandler+0x10>)
 8000d46:	f003 ff23 	bl	8004b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000224 	.word	0x20000224

08000d54 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d58:	4802      	ldr	r0, [pc, #8]	@ (8000d64 <TIM7_DAC_IRQHandler+0x10>)
 8000d5a:	f003 ff19 	bl	8004b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000030c 	.word	0x2000030c

08000d68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return 1;
 8000d6c:	2301      	movs	r3, #1
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <_kill>:

int _kill(int pid, int sig)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d82:	f007 fd23 	bl	80087cc <__errno>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2216      	movs	r2, #22
 8000d8a:	601a      	str	r2, [r3, #0]
  return -1;
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_exit>:

void _exit (int status)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ffe7 	bl	8000d78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000daa:	bf00      	nop
 8000dac:	e7fd      	b.n	8000daa <_exit+0x12>

08000dae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	e00a      	b.n	8000dd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc0:	f3af 8000 	nop.w
 8000dc4:	4601      	mov	r1, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1c5a      	adds	r2, r3, #1
 8000dca:	60ba      	str	r2, [r7, #8]
 8000dcc:	b2ca      	uxtb	r2, r1
 8000dce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	dbf0      	blt.n	8000dc0 <_read+0x12>
  }

  return len;
 8000dde:	687b      	ldr	r3, [r7, #4]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	e009      	b.n	8000e0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	60ba      	str	r2, [r7, #8]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	dbf1      	blt.n	8000dfa <_write+0x12>
  }
  return len;
 8000e16:	687b      	ldr	r3, [r7, #4]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_close>:

int _close(int file)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e48:	605a      	str	r2, [r3, #4]
  return 0;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <_isatty>:

int _isatty(int file)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e60:	2301      	movs	r3, #1
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b085      	sub	sp, #20
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e90:	4a14      	ldr	r2, [pc, #80]	@ (8000ee4 <_sbrk+0x5c>)
 8000e92:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <_sbrk+0x60>)
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <_sbrk+0x64>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	@ (8000ef0 <_sbrk+0x68>)
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d207      	bcs.n	8000ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb8:	f007 fc88 	bl	80087cc <__errno>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ec6:	e009      	b.n	8000edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ece:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <_sbrk+0x64>)
 8000ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20020000 	.word	0x20020000
 8000ee8:	00000400 	.word	0x00000400
 8000eec:	20000270 	.word	0x20000270
 8000ef0:	20000698 	.word	0x20000698

08000ef4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <SystemInit+0x20>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efe:	4a05      	ldr	r2, [pc, #20]	@ (8000f14 <SystemInit+0x20>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b098      	sub	sp, #96	@ 0x60
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	615a      	str	r2, [r3, #20]
 8000f3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2234      	movs	r2, #52	@ 0x34
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f007 fb96 	bl	8008676 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f4a:	4b48      	ldr	r3, [pc, #288]	@ (800106c <MX_TIM1_Init+0x154>)
 8000f4c:	4a48      	ldr	r2, [pc, #288]	@ (8001070 <MX_TIM1_Init+0x158>)
 8000f4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f50:	4b46      	ldr	r3, [pc, #280]	@ (800106c <MX_TIM1_Init+0x154>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f56:	4b45      	ldr	r3, [pc, #276]	@ (800106c <MX_TIM1_Init+0x154>)
 8000f58:	2220      	movs	r2, #32
 8000f5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8000f5c:	4b43      	ldr	r3, [pc, #268]	@ (800106c <MX_TIM1_Init+0x154>)
 8000f5e:	f242 1233 	movw	r2, #8499	@ 0x2133
 8000f62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f64:	4b41      	ldr	r3, [pc, #260]	@ (800106c <MX_TIM1_Init+0x154>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f6a:	4b40      	ldr	r3, [pc, #256]	@ (800106c <MX_TIM1_Init+0x154>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f70:	4b3e      	ldr	r3, [pc, #248]	@ (800106c <MX_TIM1_Init+0x154>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f76:	483d      	ldr	r0, [pc, #244]	@ (800106c <MX_TIM1_Init+0x154>)
 8000f78:	f003 fc04 	bl	8004784 <HAL_TIM_PWM_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f7ff fdfa 	bl	8000b7a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f92:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f96:	4619      	mov	r1, r3
 8000f98:	4834      	ldr	r0, [pc, #208]	@ (800106c <MX_TIM1_Init+0x154>)
 8000f9a:	f004 fecb 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fa4:	f7ff fde9 	bl	8000b7a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa8:	2360      	movs	r3, #96	@ 0x60
 8000faa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 4249;
 8000fac:	f241 0399 	movw	r3, #4249	@ 0x1099
 8000fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fca:	2200      	movs	r2, #0
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4827      	ldr	r0, [pc, #156]	@ (800106c <MX_TIM1_Init+0x154>)
 8000fd0:	f003 ff2e 	bl	8004e30 <HAL_TIM_PWM_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000fda:	f7ff fdce 	bl	8000b7a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fde:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4821      	ldr	r0, [pc, #132]	@ (800106c <MX_TIM1_Init+0x154>)
 8000fe8:	f003 ff22 	bl	8004e30 <HAL_TIM_PWM_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000ff2:	f7ff fdc2 	bl	8000b7a <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ffa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ffe:	2208      	movs	r2, #8
 8001000:	4619      	mov	r1, r3
 8001002:	481a      	ldr	r0, [pc, #104]	@ (800106c <MX_TIM1_Init+0x154>)
 8001004:	f003 ff14 	bl	8004e30 <HAL_TIM_PWM_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800100e:	f7ff fdb4 	bl	8000b7a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 800101e:	2314      	movs	r3, #20
 8001020:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001026:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800102a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001038:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800103c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	4619      	mov	r1, r3
 800104e:	4807      	ldr	r0, [pc, #28]	@ (800106c <MX_TIM1_Init+0x154>)
 8001050:	f004 ff06 	bl	8005e60 <HAL_TIMEx_ConfigBreakDeadTime>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800105a:	f7ff fd8e 	bl	8000b7a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800105e:	4803      	ldr	r0, [pc, #12]	@ (800106c <MX_TIM1_Init+0x154>)
 8001060:	f000 f932 	bl	80012c8 <HAL_TIM_MspPostInit>

}
 8001064:	bf00      	nop
 8001066:	3760      	adds	r7, #96	@ 0x60
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000274 	.word	0x20000274
 8001070:	40012c00 	.word	0x40012c00

08001074 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001092:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <MX_TIM3_Init+0x90>)
 8001094:	4a1c      	ldr	r2, [pc, #112]	@ (8001108 <MX_TIM3_Init+0x94>)
 8001096:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001098:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <MX_TIM3_Init+0x90>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109e:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <MX_TIM3_Init+0x90>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010a4:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <MX_TIM3_Init+0x90>)
 80010a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ac:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <MX_TIM3_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_TIM3_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	480d      	ldr	r0, [pc, #52]	@ (8001104 <MX_TIM3_Init+0x90>)
 80010d0:	f004 fc61 	bl	8005996 <HAL_TIMEx_HallSensor_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80010da:	f7ff fd4e 	bl	8000b7a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80010de:	2350      	movs	r3, #80	@ 0x50
 80010e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	@ (8001104 <MX_TIM3_Init+0x90>)
 80010ec:	f004 fe22 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80010f6:	f7ff fd40 	bl	8000b7a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	3720      	adds	r7, #32
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200002c0 	.word	0x200002c0
 8001108:	40000400 	.word	0x40000400

0800110c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800111c:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <MX_TIM7_Init+0x64>)
 800111e:	4a15      	ldr	r2, [pc, #84]	@ (8001174 <MX_TIM7_Init+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 8001122:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <MX_TIM7_Init+0x64>)
 8001124:	22a9      	movs	r2, #169	@ 0xa9
 8001126:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <MX_TIM7_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800112e:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <MX_TIM7_Init+0x64>)
 8001130:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001134:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <MX_TIM7_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800113c:	480c      	ldr	r0, [pc, #48]	@ (8001170 <MX_TIM7_Init+0x64>)
 800113e:	f003 fa2b 	bl	8004598 <HAL_TIM_Base_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001148:	f7ff fd17 	bl	8000b7a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	@ (8001170 <MX_TIM7_Init+0x64>)
 800115a:	f004 fdeb 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001164:	f7ff fd09 	bl	8000b7a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000030c 	.word	0x2000030c
 8001174:	40001400 	.word	0x40001400

08001178 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <HAL_TIM_PWM_MspInit+0x38>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d10b      	bne.n	80011a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <HAL_TIM_PWM_MspInit+0x3c>)
 800118c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800118e:	4a09      	ldr	r2, [pc, #36]	@ (80011b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001190:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001194:	6613      	str	r3, [r2, #96]	@ 0x60
 8001196:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40012c00 	.word	0x40012c00
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	@ 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a26      	ldr	r2, [pc, #152]	@ (8001270 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d145      	bne.n	8001266 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011da:	4b26      	ldr	r3, [pc, #152]	@ (8001274 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011de:	4a25      	ldr	r2, [pc, #148]	@ (8001274 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011e6:	4b23      	ldr	r3, [pc, #140]	@ (8001274 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b20      	ldr	r3, [pc, #128]	@ (8001274 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001274 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001274 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	4a19      	ldr	r2, [pc, #100]	@ (8001274 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001216:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001222:	2350      	movs	r3, #80	@ 0x50
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001232:	2302      	movs	r3, #2
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001240:	f001 ff8a 	bl	8003158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001244:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001256:	2302      	movs	r3, #2
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	@ (8001278 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001262:	f001 ff79 	bl	8003158 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001266:	bf00      	nop
 8001268:	3728      	adds	r7, #40	@ 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40000400 	.word	0x40000400
 8001274:	40021000 	.word	0x40021000
 8001278:	48000800 	.word	0x48000800

0800127c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0d      	ldr	r2, [pc, #52]	@ (80012c0 <HAL_TIM_Base_MspInit+0x44>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d113      	bne.n	80012b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <HAL_TIM_Base_MspInit+0x48>)
 8001290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001292:	4a0c      	ldr	r2, [pc, #48]	@ (80012c4 <HAL_TIM_Base_MspInit+0x48>)
 8001294:	f043 0320 	orr.w	r3, r3, #32
 8001298:	6593      	str	r3, [r2, #88]	@ 0x58
 800129a:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <HAL_TIM_Base_MspInit+0x48>)
 800129c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129e:	f003 0320 	and.w	r3, r3, #32
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2037      	movs	r0, #55	@ 0x37
 80012ac:	f001 fe6c 	bl	8002f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80012b0:	2037      	movs	r0, #55	@ 0x37
 80012b2:	f001 fe83 	bl	8002fbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40001400 	.word	0x40001400
 80012c4:	40021000 	.word	0x40021000

080012c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a29      	ldr	r2, [pc, #164]	@ (800138c <HAL_TIM_MspPostInit+0xc4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d14b      	bne.n	8001382 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <HAL_TIM_MspPostInit+0xc8>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	4a28      	ldr	r2, [pc, #160]	@ (8001390 <HAL_TIM_MspPostInit+0xc8>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f6:	4b26      	ldr	r3, [pc, #152]	@ (8001390 <HAL_TIM_MspPostInit+0xc8>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <HAL_TIM_MspPostInit+0xc8>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	4a22      	ldr	r2, [pc, #136]	@ (8001390 <HAL_TIM_MspPostInit+0xc8>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130e:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <HAL_TIM_MspPostInit+0xc8>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800131a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800131e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800132c:	2306      	movs	r3, #6
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	4817      	ldr	r0, [pc, #92]	@ (8001394 <HAL_TIM_MspPostInit+0xcc>)
 8001338:	f001 ff0e 	bl	8003158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 800133c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800134e:	2304      	movs	r3, #4
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	480e      	ldr	r0, [pc, #56]	@ (8001394 <HAL_TIM_MspPostInit+0xcc>)
 800135a:	f001 fefd 	bl	8003158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 800135e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001370:	2306      	movs	r3, #6
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137e:	f001 feeb 	bl	8003158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	@ 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40012c00 	.word	0x40012c00
 8001390:	40021000 	.word	0x40021000
 8001394:	48000400 	.word	0x48000400

08001398 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800139c:	4b22      	ldr	r3, [pc, #136]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 800139e:	4a23      	ldr	r2, [pc, #140]	@ (800142c <MX_USART2_UART_Init+0x94>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013a2:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ce:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d4:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013da:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e0:	4811      	ldr	r0, [pc, #68]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013e2:	f004 fe3c 	bl	800605e <HAL_UART_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013ec:	f7ff fbc5 	bl	8000b7a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f0:	2100      	movs	r1, #0
 80013f2:	480d      	ldr	r0, [pc, #52]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013f4:	f006 feb3 	bl	800815e <HAL_UARTEx_SetTxFifoThreshold>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013fe:	f7ff fbbc 	bl	8000b7a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001402:	2100      	movs	r1, #0
 8001404:	4808      	ldr	r0, [pc, #32]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 8001406:	f006 fee8 	bl	80081da <HAL_UARTEx_SetRxFifoThreshold>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001410:	f7ff fbb3 	bl	8000b7a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 8001416:	f006 fe69 	bl	80080ec <HAL_UARTEx_DisableFifoMode>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001420:	f7ff fbab 	bl	8000b7a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000358 	.word	0x20000358
 800142c:	40004400 	.word	0x40004400

08001430 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001434:	4b22      	ldr	r3, [pc, #136]	@ (80014c0 <MX_USART3_UART_Init+0x90>)
 8001436:	4a23      	ldr	r2, [pc, #140]	@ (80014c4 <MX_USART3_UART_Init+0x94>)
 8001438:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800143a:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <MX_USART3_UART_Init+0x90>)
 800143c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001440:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b1f      	ldr	r3, [pc, #124]	@ (80014c0 <MX_USART3_UART_Init+0x90>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <MX_USART3_UART_Init+0x90>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800144e:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <MX_USART3_UART_Init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <MX_USART3_UART_Init+0x90>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <MX_USART3_UART_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <MX_USART3_UART_Init+0x90>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001466:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <MX_USART3_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <MX_USART3_UART_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <MX_USART3_UART_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001478:	4811      	ldr	r0, [pc, #68]	@ (80014c0 <MX_USART3_UART_Init+0x90>)
 800147a:	f004 fdf0 	bl	800605e <HAL_UART_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001484:	f7ff fb79 	bl	8000b7a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001488:	2100      	movs	r1, #0
 800148a:	480d      	ldr	r0, [pc, #52]	@ (80014c0 <MX_USART3_UART_Init+0x90>)
 800148c:	f006 fe67 	bl	800815e <HAL_UARTEx_SetTxFifoThreshold>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001496:	f7ff fb70 	bl	8000b7a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149a:	2100      	movs	r1, #0
 800149c:	4808      	ldr	r0, [pc, #32]	@ (80014c0 <MX_USART3_UART_Init+0x90>)
 800149e:	f006 fe9c 	bl	80081da <HAL_UARTEx_SetRxFifoThreshold>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014a8:	f7ff fb67 	bl	8000b7a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014ac:	4804      	ldr	r0, [pc, #16]	@ (80014c0 <MX_USART3_UART_Init+0x90>)
 80014ae:	f006 fe1d 	bl	80080ec <HAL_UARTEx_DisableFifoMode>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014b8:	f7ff fb5f 	bl	8000b7a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200003ec 	.word	0x200003ec
 80014c4:	40004800 	.word	0x40004800

080014c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0a0      	sub	sp, #128	@ 0x80
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e0:	f107 0318 	add.w	r3, r7, #24
 80014e4:	2254      	movs	r2, #84	@ 0x54
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f007 f8c4 	bl	8008676 <memset>
  if(uartHandle->Instance==USART2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a45      	ldr	r2, [pc, #276]	@ (8001608 <HAL_UART_MspInit+0x140>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d13f      	bne.n	8001578 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	4618      	mov	r0, r3
 8001506:	f002 fdf9 	bl	80040fc <HAL_RCCEx_PeriphCLKConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001510:	f7ff fb33 	bl	8000b7a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001514:	4b3d      	ldr	r3, [pc, #244]	@ (800160c <HAL_UART_MspInit+0x144>)
 8001516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001518:	4a3c      	ldr	r2, [pc, #240]	@ (800160c <HAL_UART_MspInit+0x144>)
 800151a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800151e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001520:	4b3a      	ldr	r3, [pc, #232]	@ (800160c <HAL_UART_MspInit+0x144>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b37      	ldr	r3, [pc, #220]	@ (800160c <HAL_UART_MspInit+0x144>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001530:	4a36      	ldr	r2, [pc, #216]	@ (800160c <HAL_UART_MspInit+0x144>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001538:	4b34      	ldr	r3, [pc, #208]	@ (800160c <HAL_UART_MspInit+0x144>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001544:	230c      	movs	r3, #12
 8001546:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001554:	2307      	movs	r3, #7
 8001556:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800155c:	4619      	mov	r1, r3
 800155e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001562:	f001 fdf9 	bl	8003158 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	2026      	movs	r0, #38	@ 0x26
 800156c:	f001 fd0c 	bl	8002f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001570:	2026      	movs	r0, #38	@ 0x26
 8001572:	f001 fd23 	bl	8002fbc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001576:	e043      	b.n	8001600 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a24      	ldr	r2, [pc, #144]	@ (8001610 <HAL_UART_MspInit+0x148>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d13e      	bne.n	8001600 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001582:	2304      	movs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158a:	f107 0318 	add.w	r3, r7, #24
 800158e:	4618      	mov	r0, r3
 8001590:	f002 fdb4 	bl	80040fc <HAL_RCCEx_PeriphCLKConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800159a:	f7ff faee 	bl	8000b7a <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800159e:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <HAL_UART_MspInit+0x144>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a2:	4a1a      	ldr	r2, [pc, #104]	@ (800160c <HAL_UART_MspInit+0x144>)
 80015a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015aa:	4b18      	ldr	r3, [pc, #96]	@ (800160c <HAL_UART_MspInit+0x144>)
 80015ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_UART_MspInit+0x144>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ba:	4a14      	ldr	r2, [pc, #80]	@ (800160c <HAL_UART_MspInit+0x144>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c2:	4b12      	ldr	r3, [pc, #72]	@ (800160c <HAL_UART_MspInit+0x144>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015ce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015e0:	2307      	movs	r3, #7
 80015e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80015e8:	4619      	mov	r1, r3
 80015ea:	480a      	ldr	r0, [pc, #40]	@ (8001614 <HAL_UART_MspInit+0x14c>)
 80015ec:	f001 fdb4 	bl	8003158 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	2027      	movs	r0, #39	@ 0x27
 80015f6:	f001 fcc7 	bl	8002f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015fa:	2027      	movs	r0, #39	@ 0x27
 80015fc:	f001 fcde 	bl	8002fbc <HAL_NVIC_EnableIRQ>
}
 8001600:	bf00      	nop
 8001602:	3780      	adds	r7, #128	@ 0x80
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40004400 	.word	0x40004400
 800160c:	40021000 	.word	0x40021000
 8001610:	40004800 	.word	0x40004800
 8001614:	48000800 	.word	0x48000800

08001618 <PWM_set_pulse>:
#include <stdlib.h>

PWM_HandleTypeDef pwm_handle;

void PWM_set_pulse(uint32_t speed)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
	//on disable l'intteruption pour éviter la modification des variables global dans l'interrupt du timer 7
    __disable_irq();  // Disable interrupts
    pwm_handle.pulse1 = MAX_PULSE* speed/100;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f242 1233 	movw	r2, #8499	@ 0x2133
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	4a13      	ldr	r2, [pc, #76]	@ (800167c <PWM_set_pulse+0x64>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	095b      	lsrs	r3, r3, #5
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <PWM_set_pulse+0x68>)
 800163a:	801a      	strh	r2, [r3, #0]
    pwm_handle.pulse2 = MAX_PULSE - pwm_handle.pulse1;
 800163c:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <PWM_set_pulse+0x68>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 8001644:	3333      	adds	r3, #51	@ 0x33
 8001646:	b29a      	uxth	r2, r3
 8001648:	4b0d      	ldr	r3, [pc, #52]	@ (8001680 <PWM_set_pulse+0x68>)
 800164a:	805a      	strh	r2, [r3, #2]
    pwm_handle.previous_pulse1 = htim1.Instance->CCR1;
 800164c:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <PWM_set_pulse+0x6c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001652:	b29a      	uxth	r2, r3
 8001654:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <PWM_set_pulse+0x68>)
 8001656:	809a      	strh	r2, [r3, #4]
    pwm_handle.previous_pulse2 = htim1.Instance->CCR2;
 8001658:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <PWM_set_pulse+0x6c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <PWM_set_pulse+0x68>)
 8001662:	80da      	strh	r2, [r3, #6]
  __ASM volatile ("cpsie i" : : : "memory");
 8001664:	b662      	cpsie	i
}
 8001666:	bf00      	nop
	 __enable_irq();   // Enable interrupts

	 pwm_handle.interrupt_counter = 0;
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <PWM_set_pulse+0x68>)
 800166a:	2200      	movs	r2, #0
 800166c:	819a      	strh	r2, [r3, #12]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	51eb851f 	.word	0x51eb851f
 8001680:	20000480 	.word	0x20000480
 8001684:	20000274 	.word	0x20000274

08001688 <PWM_Start>:

void PWM_Start()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800168c:	2100      	movs	r1, #0
 800168e:	4817      	ldr	r0, [pc, #92]	@ (80016ec <PWM_Start+0x64>)
 8001690:	f003 f8d0 	bl	8004834 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001694:	2100      	movs	r1, #0
 8001696:	4815      	ldr	r0, [pc, #84]	@ (80016ec <PWM_Start+0x64>)
 8001698:	f004 fa2c 	bl	8005af4 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800169c:	2104      	movs	r1, #4
 800169e:	4813      	ldr	r0, [pc, #76]	@ (80016ec <PWM_Start+0x64>)
 80016a0:	f003 f8c8 	bl	8004834 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80016a4:	2104      	movs	r1, #4
 80016a6:	4811      	ldr	r0, [pc, #68]	@ (80016ec <PWM_Start+0x64>)
 80016a8:	f004 fa24 	bl	8005af4 <HAL_TIMEx_PWMN_Start>

	pwm_handle.interrupt_counter = 0;
 80016ac:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <PWM_Start+0x68>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	819a      	strh	r2, [r3, #12]

	pwm_handle.previous_pulse1 = htim1.Instance->CCR1;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <PWM_Start+0x64>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <PWM_Start+0x68>)
 80016bc:	809a      	strh	r2, [r3, #4]
	pwm_handle.previous_pulse2 = htim1.Instance->CCR2;
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <PWM_Start+0x64>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <PWM_Start+0x68>)
 80016c8:	80da      	strh	r2, [r3, #6]
	pwm_handle.pulse1 = htim1.Instance->CCR1;
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <PWM_Start+0x64>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <PWM_Start+0x68>)
 80016d4:	801a      	strh	r2, [r3, #0]
	pwm_handle.pulse2 = htim1.Instance->CCR2;
 80016d6:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <PWM_Start+0x64>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <PWM_Start+0x68>)
 80016e0:	805a      	strh	r2, [r3, #2]

	HAL_TIM_Base_Start_IT(&htim7);
 80016e2:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <PWM_Start+0x6c>)
 80016e4:	f002 ffd6 	bl	8004694 <HAL_TIM_Base_Start_IT>

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000274 	.word	0x20000274
 80016f0:	20000480 	.word	0x20000480
 80016f4:	2000030c 	.word	0x2000030c

080016f8 <PWM_Stop>:

void PWM_Stop()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80016fc:	2100      	movs	r1, #0
 80016fe:	480a      	ldr	r0, [pc, #40]	@ (8001728 <PWM_Stop+0x30>)
 8001700:	f003 f9aa 	bl	8004a58 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001704:	2100      	movs	r1, #0
 8001706:	4808      	ldr	r0, [pc, #32]	@ (8001728 <PWM_Stop+0x30>)
 8001708:	f004 fab6 	bl	8005c78 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800170c:	2104      	movs	r1, #4
 800170e:	4806      	ldr	r0, [pc, #24]	@ (8001728 <PWM_Stop+0x30>)
 8001710:	f003 f9a2 	bl	8004a58 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001714:	2104      	movs	r1, #4
 8001716:	4804      	ldr	r0, [pc, #16]	@ (8001728 <PWM_Stop+0x30>)
 8001718:	f004 faae 	bl	8005c78 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_Base_Stop(&htim7);
 800171c:	4803      	ldr	r0, [pc, #12]	@ (800172c <PWM_Stop+0x34>)
 800171e:	f002 ff92 	bl	8004646 <HAL_TIM_Base_Stop>

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000274 	.word	0x20000274
 800172c:	2000030c 	.word	0x2000030c

08001730 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a29      	ldr	r2, [pc, #164]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d101      	bne.n	8001746 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001742:	f000 fa4b 	bl	8001bdc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM7)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a27      	ldr	r2, [pc, #156]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d145      	bne.n	80017dc <HAL_TIM_PeriodElapsedCallback+0xac>
	{
		if(pwm_handle.interrupt_counter < RAMP_TIME - 1) //on update la valeur de pulse chaque miliseconde
 8001750:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001752:	899b      	ldrh	r3, [r3, #12]
 8001754:	f640 729e 	movw	r2, #3998	@ 0xf9e
 8001758:	4293      	cmp	r3, r2
 800175a:	d83f      	bhi.n	80017dc <HAL_TIM_PeriodElapsedCallback+0xac>
		{
			pwm_handle.intermediate_pulse1 = pwm_handle.previous_pulse1 + (pwm_handle.pulse1 - pwm_handle.previous_pulse1)  * (pwm_handle.interrupt_counter+1)/RAMP_TIME ;
 800175c:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800175e:	889a      	ldrh	r2, [r3, #4]
 8001760:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001768:	889b      	ldrh	r3, [r3, #4]
 800176a:	1acb      	subs	r3, r1, r3
 800176c:	491f      	ldr	r1, [pc, #124]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800176e:	8989      	ldrh	r1, [r1, #12]
 8001770:	3101      	adds	r1, #1
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	491e      	ldr	r1, [pc, #120]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001778:	fb81 0103 	smull	r0, r1, r1, r3
 800177c:	1209      	asrs	r1, r1, #8
 800177e:	17db      	asrs	r3, r3, #31
 8001780:	1acb      	subs	r3, r1, r3
 8001782:	b29b      	uxth	r3, r3
 8001784:	4413      	add	r3, r2
 8001786:	b29a      	uxth	r2, r3
 8001788:	4b18      	ldr	r3, [pc, #96]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800178a:	811a      	strh	r2, [r3, #8]
			pwm_handle.intermediate_pulse2 = pwm_handle.previous_pulse2 + (pwm_handle.pulse2 - pwm_handle.previous_pulse2)  * (pwm_handle.interrupt_counter+1)/RAMP_TIME ;
 800178c:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800178e:	88da      	ldrh	r2, [r3, #6]
 8001790:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001792:	885b      	ldrh	r3, [r3, #2]
 8001794:	4619      	mov	r1, r3
 8001796:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001798:	88db      	ldrh	r3, [r3, #6]
 800179a:	1acb      	subs	r3, r1, r3
 800179c:	4913      	ldr	r1, [pc, #76]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800179e:	8989      	ldrh	r1, [r1, #12]
 80017a0:	3101      	adds	r1, #1
 80017a2:	fb01 f303 	mul.w	r3, r1, r3
 80017a6:	4912      	ldr	r1, [pc, #72]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80017a8:	fb81 0103 	smull	r0, r1, r1, r3
 80017ac:	1209      	asrs	r1, r1, #8
 80017ae:	17db      	asrs	r3, r3, #31
 80017b0:	1acb      	subs	r3, r1, r3
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017ba:	815a      	strh	r2, [r3, #10]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm_handle.intermediate_pulse1);
 80017bc:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017be:	891a      	ldrh	r2, [r3, #8]
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,pwm_handle.intermediate_pulse2);
 80017c6:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017c8:	895a      	ldrh	r2, [r3, #10]
 80017ca:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	639a      	str	r2, [r3, #56]	@ 0x38

			pwm_handle.interrupt_counter++;
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017d2:	899b      	ldrh	r3, [r3, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017da:	819a      	strh	r2, [r3, #12]
		}

	}
	/* USER CODE END Callback 1 */
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40001000 	.word	0x40001000
 80017e8:	40001400 	.word	0x40001400
 80017ec:	20000480 	.word	0x20000480
 80017f0:	10624dd3 	.word	0x10624dd3
 80017f4:	20000274 	.word	0x20000274

080017f8 <speed>:
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

int speed(char **argv,int argc)
{
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	b092      	sub	sp, #72	@ 0x48
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
	uint32_t speed = atoi(argv[1]);//speed in expected in % of max speed
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3304      	adds	r3, #4
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f006 fd73 	bl	80082f4 <atoi>
 800180e:	4603      	mov	r3, r0
 8001810:	647b      	str	r3, [r7, #68]	@ 0x44
	if(argc != 2)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d018      	beq.n	800184a <speed+0x52>
	{
		uint8_t error_message[] = "Error : speed function expect exactly 1 parameter \r\n";
 8001818:	4b22      	ldr	r3, [pc, #136]	@ (80018a4 <speed+0xac>)
 800181a:	f107 0408 	add.w	r4, r7, #8
 800181e:	461d      	mov	r5, r3
 8001820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800182a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800182c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001830:	6020      	str	r0, [r4, #0]
 8001832:	3404      	adds	r4, #4
 8001834:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, error_message, sizeof(error_message), HAL_MAX_DELAY);
 8001836:	f107 0108 	add.w	r1, r7, #8
 800183a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800183e:	2235      	movs	r2, #53	@ 0x35
 8001840:	4819      	ldr	r0, [pc, #100]	@ (80018a8 <speed+0xb0>)
 8001842:	f004 fc5c 	bl	80060fe <HAL_UART_Transmit>

		return 1;
 8001846:	2301      	movs	r3, #1
 8001848:	e028      	b.n	800189c <speed+0xa4>
//	{
//		uint8_t error_message[] = " Error : speed function expect a parameter that is an int represention \r\n";
//		HAL_UART_Transmit(&huart2, error_message, sizeof(error_message), HAL_MAX_DELAY);
//		return 1;
//	}
	else if(speed > 95)//on vérifie qu'on met pas la vitesse ne soit pas au dessus de 95% de la max par sécurité
 800184a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800184c:	2b5f      	cmp	r3, #95	@ 0x5f
 800184e:	d913      	bls.n	8001878 <speed+0x80>
	{
		uint8_t error_message[] = "speed function must not exceed 95% of max value  \r\n";
 8001850:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <speed+0xb4>)
 8001852:	f107 0408 	add.w	r4, r7, #8
 8001856:	461d      	mov	r5, r3
 8001858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800185a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800185c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800185e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001864:	682b      	ldr	r3, [r5, #0]
 8001866:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, error_message, sizeof(error_message), HAL_MAX_DELAY);
 8001868:	f107 0108 	add.w	r1, r7, #8
 800186c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001870:	2234      	movs	r2, #52	@ 0x34
 8001872:	480d      	ldr	r0, [pc, #52]	@ (80018a8 <speed+0xb0>)
 8001874:	f004 fc43 	bl	80060fe <HAL_UART_Transmit>
	}
	PWM_set_pulse(speed);
 8001878:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800187a:	f7ff fecd 	bl	8001618 <PWM_set_pulse>
	int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "speed set to %lu of max value \r\n",(unsigned long)speed);
 800187e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001880:	4a0b      	ldr	r2, [pc, #44]	@ (80018b0 <speed+0xb8>)
 8001882:	2140      	movs	r1, #64	@ 0x40
 8001884:	480b      	ldr	r0, [pc, #44]	@ (80018b4 <speed+0xbc>)
 8001886:	f006 fe7f 	bl	8008588 <sniprintf>
 800188a:	6438      	str	r0, [r7, #64]	@ 0x40
	HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800188c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800188e:	b29a      	uxth	r2, r3
 8001890:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001894:	4907      	ldr	r1, [pc, #28]	@ (80018b4 <speed+0xbc>)
 8001896:	4804      	ldr	r0, [pc, #16]	@ (80018a8 <speed+0xb0>)
 8001898:	f004 fc31 	bl	80060fe <HAL_UART_Transmit>

}
 800189c:	4618      	mov	r0, r3
 800189e:	3748      	adds	r7, #72	@ 0x48
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bdb0      	pop	{r4, r5, r7, pc}
 80018a4:	0800980c 	.word	0x0800980c
 80018a8:	20000358 	.word	0x20000358
 80018ac:	08009844 	.word	0x08009844
 80018b0:	080097e8 	.word	0x080097e8
 80018b4:	20000494 	.word	0x20000494

080018b8 <Shell_Init>:

void Shell_Init(void){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 80018bc:	2224      	movs	r2, #36	@ 0x24
 80018be:	2100      	movs	r1, #0
 80018c0:	4816      	ldr	r0, [pc, #88]	@ (800191c <Shell_Init+0x64>)
 80018c2:	f006 fed8 	bl	8008676 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 80018c6:	2240      	movs	r2, #64	@ 0x40
 80018c8:	2100      	movs	r1, #0
 80018ca:	4815      	ldr	r0, [pc, #84]	@ (8001920 <Shell_Init+0x68>)
 80018cc:	f006 fed3 	bl	8008676 <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 80018d0:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <Shell_Init+0x6c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 80018d6:	2240      	movs	r2, #64	@ 0x40
 80018d8:	2100      	movs	r1, #0
 80018da:	4813      	ldr	r0, [pc, #76]	@ (8001928 <Shell_Init+0x70>)
 80018dc:	f006 fecb 	bl	8008676 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80018e0:	2201      	movs	r2, #1
 80018e2:	4910      	ldr	r1, [pc, #64]	@ (8001924 <Shell_Init+0x6c>)
 80018e4:	4811      	ldr	r0, [pc, #68]	@ (800192c <Shell_Init+0x74>)
 80018e6:	f004 fc99 	bl	800621c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 80018ea:	4811      	ldr	r0, [pc, #68]	@ (8001930 <Shell_Init+0x78>)
 80018ec:	f7fe fca2 	bl	8000234 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018f8:	490d      	ldr	r1, [pc, #52]	@ (8001930 <Shell_Init+0x78>)
 80018fa:	480c      	ldr	r0, [pc, #48]	@ (800192c <Shell_Init+0x74>)
 80018fc:	f004 fbff 	bl	80060fe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001900:	480c      	ldr	r0, [pc, #48]	@ (8001934 <Shell_Init+0x7c>)
 8001902:	f7fe fc97 	bl	8000234 <strlen>
 8001906:	4603      	mov	r3, r0
 8001908:	b29a      	uxth	r2, r3
 800190a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800190e:	4909      	ldr	r1, [pc, #36]	@ (8001934 <Shell_Init+0x7c>)
 8001910:	4806      	ldr	r0, [pc, #24]	@ (800192c <Shell_Init+0x74>)
 8001912:	f004 fbf4 	bl	80060fe <HAL_UART_Transmit>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000518 	.word	0x20000518
 8001920:	200004d4 	.word	0x200004d4
 8001924:	20000490 	.word	0x20000490
 8001928:	20000494 	.word	0x20000494
 800192c:	20000358 	.word	0x20000358
 8001930:	20000028 	.word	0x20000028
 8001934:	20000004 	.word	0x20000004

08001938 <Shell_Loop>:


void Shell_Loop(void){
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 800193e:	4b65      	ldr	r3, [pc, #404]	@ (8001ad4 <Shell_Loop+0x19c>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d05b      	beq.n	80019fe <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8001946:	4b64      	ldr	r3, [pc, #400]	@ (8001ad8 <Shell_Loop+0x1a0>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b08      	cmp	r3, #8
 800194c:	d034      	beq.n	80019b8 <Shell_Loop+0x80>
 800194e:	2b0d      	cmp	r3, #13
 8001950:	d142      	bne.n	80019d8 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001952:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001956:	2203      	movs	r2, #3
 8001958:	4960      	ldr	r1, [pc, #384]	@ (8001adc <Shell_Loop+0x1a4>)
 800195a:	4861      	ldr	r0, [pc, #388]	@ (8001ae0 <Shell_Loop+0x1a8>)
 800195c:	f004 fbcf 	bl	80060fe <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8001960:	4b60      	ldr	r3, [pc, #384]	@ (8001ae4 <Shell_Loop+0x1ac>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a60      	ldr	r2, [pc, #384]	@ (8001ae8 <Shell_Loop+0x1b0>)
 8001966:	2100      	movs	r1, #0
 8001968:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 800196a:	4b60      	ldr	r3, [pc, #384]	@ (8001aec <Shell_Loop+0x1b4>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8001970:	495f      	ldr	r1, [pc, #380]	@ (8001af0 <Shell_Loop+0x1b8>)
 8001972:	485d      	ldr	r0, [pc, #372]	@ (8001ae8 <Shell_Loop+0x1b0>)
 8001974:	f006 fe88 	bl	8008688 <strtok>
 8001978:	4603      	mov	r3, r0
 800197a:	4a5e      	ldr	r2, [pc, #376]	@ (8001af4 <Shell_Loop+0x1bc>)
 800197c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800197e:	e010      	b.n	80019a2 <Shell_Loop+0x6a>
				argv[argc++] = token;
 8001980:	4b5a      	ldr	r3, [pc, #360]	@ (8001aec <Shell_Loop+0x1b4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	4959      	ldr	r1, [pc, #356]	@ (8001aec <Shell_Loop+0x1b4>)
 8001988:	600a      	str	r2, [r1, #0]
 800198a:	4a5a      	ldr	r2, [pc, #360]	@ (8001af4 <Shell_Loop+0x1bc>)
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	495a      	ldr	r1, [pc, #360]	@ (8001af8 <Shell_Loop+0x1c0>)
 8001990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001994:	4956      	ldr	r1, [pc, #344]	@ (8001af0 <Shell_Loop+0x1b8>)
 8001996:	2000      	movs	r0, #0
 8001998:	f006 fe76 	bl	8008688 <strtok>
 800199c:	4603      	mov	r3, r0
 800199e:	4a55      	ldr	r2, [pc, #340]	@ (8001af4 <Shell_Loop+0x1bc>)
 80019a0:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80019a2:	4b54      	ldr	r3, [pc, #336]	@ (8001af4 <Shell_Loop+0x1bc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1ea      	bne.n	8001980 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 80019aa:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae4 <Shell_Loop+0x1ac>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 80019b0:	4b52      	ldr	r3, [pc, #328]	@ (8001afc <Shell_Loop+0x1c4>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
			break;
 80019b6:	e01f      	b.n	80019f8 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 80019b8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae4 <Shell_Loop+0x1ac>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	1e5a      	subs	r2, r3, #1
 80019be:	4949      	ldr	r1, [pc, #292]	@ (8001ae4 <Shell_Loop+0x1ac>)
 80019c0:	600a      	str	r2, [r1, #0]
 80019c2:	4a49      	ldr	r2, [pc, #292]	@ (8001ae8 <Shell_Loop+0x1b0>)
 80019c4:	2100      	movs	r1, #0
 80019c6:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019cc:	2204      	movs	r2, #4
 80019ce:	494c      	ldr	r1, [pc, #304]	@ (8001b00 <Shell_Loop+0x1c8>)
 80019d0:	4843      	ldr	r0, [pc, #268]	@ (8001ae0 <Shell_Loop+0x1a8>)
 80019d2:	f004 fb94 	bl	80060fe <HAL_UART_Transmit>
			break;
 80019d6:	e00f      	b.n	80019f8 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80019d8:	4b42      	ldr	r3, [pc, #264]	@ (8001ae4 <Shell_Loop+0x1ac>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	1c5a      	adds	r2, r3, #1
 80019de:	4941      	ldr	r1, [pc, #260]	@ (8001ae4 <Shell_Loop+0x1ac>)
 80019e0:	600a      	str	r2, [r1, #0]
 80019e2:	4a3d      	ldr	r2, [pc, #244]	@ (8001ad8 <Shell_Loop+0x1a0>)
 80019e4:	7811      	ldrb	r1, [r2, #0]
 80019e6:	4a40      	ldr	r2, [pc, #256]	@ (8001ae8 <Shell_Loop+0x1b0>)
 80019e8:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ee:	2201      	movs	r2, #1
 80019f0:	4939      	ldr	r1, [pc, #228]	@ (8001ad8 <Shell_Loop+0x1a0>)
 80019f2:	483b      	ldr	r0, [pc, #236]	@ (8001ae0 <Shell_Loop+0x1a8>)
 80019f4:	f004 fb83 	bl	80060fe <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80019f8:	4b36      	ldr	r3, [pc, #216]	@ (8001ad4 <Shell_Loop+0x19c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 80019fe:	4b3f      	ldr	r3, [pc, #252]	@ (8001afc <Shell_Loop+0x1c4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d061      	beq.n	8001aca <Shell_Loop+0x192>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8001a06:	4b3c      	ldr	r3, [pc, #240]	@ (8001af8 <Shell_Loop+0x1c0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	493e      	ldr	r1, [pc, #248]	@ (8001b04 <Shell_Loop+0x1cc>)
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fc07 	bl	8000220 <strcmp>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d107      	bne.n	8001a28 <Shell_Loop+0xf0>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a1c:	221a      	movs	r2, #26
 8001a1e:	493a      	ldr	r1, [pc, #232]	@ (8001b08 <Shell_Loop+0x1d0>)
 8001a20:	482f      	ldr	r0, [pc, #188]	@ (8001ae0 <Shell_Loop+0x1a8>)
 8001a22:	f004 fb6c 	bl	80060fe <HAL_UART_Transmit>
 8001a26:	e046      	b.n	8001ab6 <Shell_Loop+0x17e>
		}
		else if(strcmp(argv[0],"help")==0){
 8001a28:	4b33      	ldr	r3, [pc, #204]	@ (8001af8 <Shell_Loop+0x1c0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4937      	ldr	r1, [pc, #220]	@ (8001b0c <Shell_Loop+0x1d4>)
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fbf6 	bl	8000220 <strcmp>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10e      	bne.n	8001a58 <Shell_Loop+0x120>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8001a3a:	4a35      	ldr	r2, [pc, #212]	@ (8001b10 <Shell_Loop+0x1d8>)
 8001a3c:	2140      	movs	r1, #64	@ 0x40
 8001a3e:	4835      	ldr	r0, [pc, #212]	@ (8001b14 <Shell_Loop+0x1dc>)
 8001a40:	f006 fda2 	bl	8008588 <sniprintf>
 8001a44:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a4e:	4931      	ldr	r1, [pc, #196]	@ (8001b14 <Shell_Loop+0x1dc>)
 8001a50:	4823      	ldr	r0, [pc, #140]	@ (8001ae0 <Shell_Loop+0x1a8>)
 8001a52:	f004 fb54 	bl	80060fe <HAL_UART_Transmit>
 8001a56:	e02e      	b.n	8001ab6 <Shell_Loop+0x17e>
		}
		else if(strcmp(argv[0],"speed")==0){
 8001a58:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <Shell_Loop+0x1c0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	492e      	ldr	r1, [pc, #184]	@ (8001b18 <Shell_Loop+0x1e0>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fbde 	bl	8000220 <strcmp>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <Shell_Loop+0x140>
			speed(argv,argc);
 8001a6a:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <Shell_Loop+0x1b4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4821      	ldr	r0, [pc, #132]	@ (8001af8 <Shell_Loop+0x1c0>)
 8001a72:	f7ff fec1 	bl	80017f8 <speed>
 8001a76:	e01e      	b.n	8001ab6 <Shell_Loop+0x17e>
		}
		else if(strcmp(argv[0],"start")==0){
 8001a78:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <Shell_Loop+0x1c0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4927      	ldr	r1, [pc, #156]	@ (8001b1c <Shell_Loop+0x1e4>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fbce 	bl	8000220 <strcmp>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <Shell_Loop+0x158>
			PWM_Start();
 8001a8a:	f7ff fdfd 	bl	8001688 <PWM_Start>
 8001a8e:	e012      	b.n	8001ab6 <Shell_Loop+0x17e>
		}
		else if(strcmp(argv[0],"stop")==0){
 8001a90:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <Shell_Loop+0x1c0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4922      	ldr	r1, [pc, #136]	@ (8001b20 <Shell_Loop+0x1e8>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fbc2 	bl	8000220 <strcmp>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <Shell_Loop+0x170>
			PWM_Stop();
 8001aa2:	f7ff fe29 	bl	80016f8 <PWM_Stop>
 8001aa6:	e006      	b.n	8001ab6 <Shell_Loop+0x17e>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aac:	2214      	movs	r2, #20
 8001aae:	491d      	ldr	r1, [pc, #116]	@ (8001b24 <Shell_Loop+0x1ec>)
 8001ab0:	480b      	ldr	r0, [pc, #44]	@ (8001ae0 <Shell_Loop+0x1a8>)
 8001ab2:	f004 fb24 	bl	80060fe <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aba:	2222      	movs	r2, #34	@ 0x22
 8001abc:	491a      	ldr	r1, [pc, #104]	@ (8001b28 <Shell_Loop+0x1f0>)
 8001abe:	4808      	ldr	r0, [pc, #32]	@ (8001ae0 <Shell_Loop+0x1a8>)
 8001ac0:	f004 fb1d 	bl	80060fe <HAL_UART_Transmit>
		newCmdReady = 0;
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <Shell_Loop+0x1c4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
	}
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000048e 	.word	0x2000048e
 8001ad8:	20000490 	.word	0x20000490
 8001adc:	20000090 	.word	0x20000090
 8001ae0:	20000358 	.word	0x20000358
 8001ae4:	20000514 	.word	0x20000514
 8001ae8:	200004d4 	.word	0x200004d4
 8001aec:	2000053c 	.word	0x2000053c
 8001af0:	08009878 	.word	0x08009878
 8001af4:	20000540 	.word	0x20000540
 8001af8:	20000518 	.word	0x20000518
 8001afc:	20000544 	.word	0x20000544
 8001b00:	20000094 	.word	0x20000094
 8001b04:	0800987c 	.word	0x0800987c
 8001b08:	200000ac 	.word	0x200000ac
 8001b0c:	0800988c 	.word	0x0800988c
 8001b10:	08009894 	.word	0x08009894
 8001b14:	20000494 	.word	0x20000494
 8001b18:	080098bc 	.word	0x080098bc
 8001b1c:	080098c4 	.word	0x080098c4
 8001b20:	080098cc 	.word	0x080098cc
 8001b24:	20000098 	.word	0x20000098
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <HAL_UART_RxCpltCallback+0x20>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4904      	ldr	r1, [pc, #16]	@ (8001b50 <HAL_UART_RxCpltCallback+0x24>)
 8001b3e:	4805      	ldr	r0, [pc, #20]	@ (8001b54 <HAL_UART_RxCpltCallback+0x28>)
 8001b40:	f004 fb6c 	bl	800621c <HAL_UART_Receive_IT>
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2000048e 	.word	0x2000048e
 8001b50:	20000490 	.word	0x20000490
 8001b54:	20000358 	.word	0x20000358

08001b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b58:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b5c:	480d      	ldr	r0, [pc, #52]	@ (8001b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b5e:	490e      	ldr	r1, [pc, #56]	@ (8001b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b60:	4a0e      	ldr	r2, [pc, #56]	@ (8001b9c <LoopForever+0xe>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b74:	4c0b      	ldr	r4, [pc, #44]	@ (8001ba4 <LoopForever+0x16>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b82:	f7ff f9b7 	bl	8000ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b86:	f006 fe27 	bl	80087d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b8a:	f7fe ff91 	bl	8000ab0 <main>

08001b8e <LoopForever>:

LoopForever:
    b LoopForever
 8001b8e:	e7fe      	b.n	8001b8e <LoopForever>
  ldr   r0, =_estack
 8001b90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8001b9c:	08009b08 	.word	0x08009b08
  ldr r2, =_sbss
 8001ba0:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8001ba4:	20000698 	.word	0x20000698

08001ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC1_2_IRQHandler>

08001baa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f001 f9dc 	bl	8002f72 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bba:	200f      	movs	r0, #15
 8001bbc:	f7ff f808 	bl	8000bd0 <HAL_InitTick>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	e001      	b.n	8001bd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bcc:	f7fe ffdc 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bd0:	79fb      	ldrb	r3, [r7, #7]

}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be0:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <HAL_IncTick+0x1c>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <HAL_IncTick+0x20>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4413      	add	r3, r2
 8001bea:	4a03      	ldr	r2, [pc, #12]	@ (8001bf8 <HAL_IncTick+0x1c>)
 8001bec:	6013      	str	r3, [r2, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	20000548 	.word	0x20000548
 8001bfc:	200000cc 	.word	0x200000cc

08001c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <HAL_GetTick+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000548 	.word	0x20000548

08001c18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	609a      	str	r2, [r3, #8]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	609a      	str	r2, [r3, #8]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3360      	adds	r3, #96	@ 0x60
 8001c92:	461a      	mov	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <LL_ADC_SetOffset+0x44>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cb8:	bf00      	nop
 8001cba:	371c      	adds	r7, #28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	03fff000 	.word	0x03fff000

08001cc8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3360      	adds	r3, #96	@ 0x60
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3360      	adds	r3, #96	@ 0x60
 8001d04:	461a      	mov	r2, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d1e:	bf00      	nop
 8001d20:	371c      	adds	r7, #28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b087      	sub	sp, #28
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3360      	adds	r3, #96	@ 0x60
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d54:	bf00      	nop
 8001d56:	371c      	adds	r7, #28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	3360      	adds	r3, #96	@ 0x60
 8001d70:	461a      	mov	r2, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	431a      	orrs	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d8a:	bf00      	nop
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	615a      	str	r2, [r3, #20]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	3330      	adds	r3, #48	@ 0x30
 8001dcc:	461a      	mov	r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	4413      	add	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f003 031f 	and.w	r3, r3, #31
 8001de6:	211f      	movs	r1, #31
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	401a      	ands	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	0e9b      	lsrs	r3, r3, #26
 8001df4:	f003 011f 	and.w	r1, r3, #31
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	431a      	orrs	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e08:	bf00      	nop
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3314      	adds	r3, #20
 8001e24:	461a      	mov	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	0e5b      	lsrs	r3, r3, #25
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	4413      	add	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	0d1b      	lsrs	r3, r3, #20
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	2107      	movs	r1, #7
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	401a      	ands	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	0d1b      	lsrs	r3, r3, #20
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e5e:	bf00      	nop
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0318 	and.w	r3, r3, #24
 8001e8e:	4908      	ldr	r1, [pc, #32]	@ (8001eb0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e90:	40d9      	lsrs	r1, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	400b      	ands	r3, r1
 8001e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	0007ffff 	.word	0x0007ffff

08001eb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ec4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6093      	str	r3, [r2, #8]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ee8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001eec:	d101      	bne.n	8001ef2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f3c:	d101      	bne.n	8001f42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <LL_ADC_IsEnabled+0x18>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <LL_ADC_IsEnabled+0x1a>
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d101      	bne.n	8001f8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d101      	bne.n	8001fb4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b089      	sub	sp, #36	@ 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e1a9      	b.n	8002332 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d109      	bne.n	8002000 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7fe fbd5 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff67 	bl	8001ed8 <LL_ADC_IsDeepPowerDownEnabled>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d004      	beq.n	800201a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff4d 	bl	8001eb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ff82 	bl	8001f28 <LL_ADC_IsInternalRegulatorEnabled>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d115      	bne.n	8002056 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff66 	bl	8001f00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002034:	4b9c      	ldr	r3, [pc, #624]	@ (80022a8 <HAL_ADC_Init+0x2e4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	099b      	lsrs	r3, r3, #6
 800203a:	4a9c      	ldr	r2, [pc, #624]	@ (80022ac <HAL_ADC_Init+0x2e8>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	099b      	lsrs	r3, r3, #6
 8002042:	3301      	adds	r3, #1
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002048:	e002      	b.n	8002050 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3b01      	subs	r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f9      	bne.n	800204a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ff64 	bl	8001f28 <LL_ADC_IsInternalRegulatorEnabled>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10d      	bne.n	8002082 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206a:	f043 0210 	orr.w	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff75 	bl	8001f76 <LL_ADC_REG_IsConversionOngoing>
 800208c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	f040 8142 	bne.w	8002320 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f040 813e 	bne.w	8002320 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80020ac:	f043 0202 	orr.w	r2, r3, #2
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff49 	bl	8001f50 <LL_ADC_IsEnabled>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d141      	bne.n	8002148 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020cc:	d004      	beq.n	80020d8 <HAL_ADC_Init+0x114>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a77      	ldr	r2, [pc, #476]	@ (80022b0 <HAL_ADC_Init+0x2ec>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d10f      	bne.n	80020f8 <HAL_ADC_Init+0x134>
 80020d8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020dc:	f7ff ff38 	bl	8001f50 <LL_ADC_IsEnabled>
 80020e0:	4604      	mov	r4, r0
 80020e2:	4873      	ldr	r0, [pc, #460]	@ (80022b0 <HAL_ADC_Init+0x2ec>)
 80020e4:	f7ff ff34 	bl	8001f50 <LL_ADC_IsEnabled>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4323      	orrs	r3, r4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	e012      	b.n	800211e <HAL_ADC_Init+0x15a>
 80020f8:	486e      	ldr	r0, [pc, #440]	@ (80022b4 <HAL_ADC_Init+0x2f0>)
 80020fa:	f7ff ff29 	bl	8001f50 <LL_ADC_IsEnabled>
 80020fe:	4604      	mov	r4, r0
 8002100:	486d      	ldr	r0, [pc, #436]	@ (80022b8 <HAL_ADC_Init+0x2f4>)
 8002102:	f7ff ff25 	bl	8001f50 <LL_ADC_IsEnabled>
 8002106:	4603      	mov	r3, r0
 8002108:	431c      	orrs	r4, r3
 800210a:	486c      	ldr	r0, [pc, #432]	@ (80022bc <HAL_ADC_Init+0x2f8>)
 800210c:	f7ff ff20 	bl	8001f50 <LL_ADC_IsEnabled>
 8002110:	4603      	mov	r3, r0
 8002112:	4323      	orrs	r3, r4
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d012      	beq.n	8002148 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800212a:	d004      	beq.n	8002136 <HAL_ADC_Init+0x172>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a5f      	ldr	r2, [pc, #380]	@ (80022b0 <HAL_ADC_Init+0x2ec>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d101      	bne.n	800213a <HAL_ADC_Init+0x176>
 8002136:	4a62      	ldr	r2, [pc, #392]	@ (80022c0 <HAL_ADC_Init+0x2fc>)
 8002138:	e000      	b.n	800213c <HAL_ADC_Init+0x178>
 800213a:	4a62      	ldr	r2, [pc, #392]	@ (80022c4 <HAL_ADC_Init+0x300>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	4619      	mov	r1, r3
 8002142:	4610      	mov	r0, r2
 8002144:	f7ff fd68 	bl	8001c18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7f5b      	ldrb	r3, [r3, #29]
 800214c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002152:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002158:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800215e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002166:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002172:	2b01      	cmp	r3, #1
 8002174:	d106      	bne.n	8002184 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217a:	3b01      	subs	r3, #1
 800217c:	045b      	lsls	r3, r3, #17
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	2b00      	cmp	r3, #0
 800218a:	d009      	beq.n	80021a0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002198:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	4b48      	ldr	r3, [pc, #288]	@ (80022c8 <HAL_ADC_Init+0x304>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	69b9      	ldr	r1, [r7, #24]
 80021b0:	430b      	orrs	r3, r1
 80021b2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff fee4 	bl	8001f9c <LL_ADC_INJ_IsConversionOngoing>
 80021d4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d17f      	bne.n	80022dc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d17c      	bne.n	80022dc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021e6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021ee:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021fe:	f023 0302 	bic.w	r3, r3, #2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	69b9      	ldr	r1, [r7, #24]
 8002208:	430b      	orrs	r3, r1
 800220a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d017      	beq.n	8002244 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002222:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800222c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002230:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6911      	ldr	r1, [r2, #16]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	430b      	orrs	r3, r1
 800223e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002242:	e013      	b.n	800226c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002252:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002264:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002268:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002272:	2b01      	cmp	r3, #1
 8002274:	d12a      	bne.n	80022cc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002280:	f023 0304 	bic.w	r3, r3, #4
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800228c:	4311      	orrs	r1, r2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002292:	4311      	orrs	r1, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002298:	430a      	orrs	r2, r1
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0201 	orr.w	r2, r2, #1
 80022a4:	611a      	str	r2, [r3, #16]
 80022a6:	e019      	b.n	80022dc <HAL_ADC_Init+0x318>
 80022a8:	20000000 	.word	0x20000000
 80022ac:	053e2d63 	.word	0x053e2d63
 80022b0:	50000100 	.word	0x50000100
 80022b4:	50000400 	.word	0x50000400
 80022b8:	50000500 	.word	0x50000500
 80022bc:	50000600 	.word	0x50000600
 80022c0:	50000300 	.word	0x50000300
 80022c4:	50000700 	.word	0x50000700
 80022c8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0201 	bic.w	r2, r2, #1
 80022da:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d10c      	bne.n	80022fe <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	f023 010f 	bic.w	r1, r3, #15
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	1e5a      	subs	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80022fc:	e007      	b.n	800230e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 020f 	bic.w	r2, r2, #15
 800230c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	f043 0201 	orr.w	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800231e:	e007      	b.n	8002330 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002324:	f043 0210 	orr.w	r2, r3, #16
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002330:	7ffb      	ldrb	r3, [r7, #31]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3724      	adds	r7, #36	@ 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd90      	pop	{r4, r7, pc}
 800233a:	bf00      	nop

0800233c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b0b6      	sub	sp, #216	@ 0xd8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002356:	2b01      	cmp	r3, #1
 8002358:	d102      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x24>
 800235a:	2302      	movs	r3, #2
 800235c:	f000 bc13 	b.w	8002b86 <HAL_ADC_ConfigChannel+0x84a>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fe02 	bl	8001f76 <LL_ADC_REG_IsConversionOngoing>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	f040 83f3 	bne.w	8002b60 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	f7ff fd18 	bl	8001dbc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fdf0 	bl	8001f76 <LL_ADC_REG_IsConversionOngoing>
 8002396:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fdfc 	bl	8001f9c <LL_ADC_INJ_IsConversionOngoing>
 80023a4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f040 81d9 	bne.w	8002764 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 81d4 	bne.w	8002764 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023c4:	d10f      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7ff fd1f 	bl	8001e14 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fcd9 	bl	8001d96 <LL_ADC_SetSamplingTimeCommonConfig>
 80023e4:	e00e      	b.n	8002404 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6819      	ldr	r1, [r3, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f7ff fd0e 	bl	8001e14 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fcc9 	bl	8001d96 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	08db      	lsrs	r3, r3, #3
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b04      	cmp	r3, #4
 8002424:	d022      	beq.n	800246c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6919      	ldr	r1, [r3, #16]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002436:	f7ff fc23 	bl	8001c80 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6919      	ldr	r1, [r3, #16]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	461a      	mov	r2, r3
 8002448:	f7ff fc6f 	bl	8001d2a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002458:	2b01      	cmp	r3, #1
 800245a:	d102      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x126>
 800245c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002460:	e000      	b.n	8002464 <HAL_ADC_ConfigChannel+0x128>
 8002462:	2300      	movs	r3, #0
 8002464:	461a      	mov	r2, r3
 8002466:	f7ff fc7b 	bl	8001d60 <LL_ADC_SetOffsetSaturation>
 800246a:	e17b      	b.n	8002764 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fc28 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 8002478:	4603      	mov	r3, r0
 800247a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x15c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fc1d 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	0e9b      	lsrs	r3, r3, #26
 8002492:	f003 021f 	and.w	r2, r3, #31
 8002496:	e01e      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x19a>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fc12 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80024c6:	2320      	movs	r3, #32
 80024c8:	e004      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80024ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x1b2>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	0e9b      	lsrs	r3, r3, #26
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	e018      	b.n	8002520 <HAL_ADC_ConfigChannel+0x1e4>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002506:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800250a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e004      	b.n	8002520 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002520:	429a      	cmp	r2, r3
 8002522:	d106      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2200      	movs	r2, #0
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fbe1 	bl	8001cf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2101      	movs	r1, #1
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fbc5 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 800253e:	4603      	mov	r3, r0
 8002540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <HAL_ADC_ConfigChannel+0x222>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2101      	movs	r1, #1
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fbba 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	0e9b      	lsrs	r3, r3, #26
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	e01e      	b.n	800259c <HAL_ADC_ConfigChannel+0x260>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2101      	movs	r1, #1
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fbaf 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800257c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002584:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800258c:	2320      	movs	r3, #32
 800258e:	e004      	b.n	800259a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x278>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0e9b      	lsrs	r3, r3, #26
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	e018      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x2aa>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80025c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80025d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e004      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80025dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d106      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2200      	movs	r2, #0
 80025f0:	2101      	movs	r1, #1
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fb7e 	bl	8001cf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2102      	movs	r1, #2
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fb62 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 8002604:	4603      	mov	r3, r0
 8002606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10a      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x2e8>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2102      	movs	r1, #2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fb57 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 800261a:	4603      	mov	r3, r0
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	f003 021f 	and.w	r2, r3, #31
 8002622:	e01e      	b.n	8002662 <HAL_ADC_ConfigChannel+0x326>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2102      	movs	r1, #2
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fb4c 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 8002630:	4603      	mov	r3, r0
 8002632:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002642:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002646:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800264a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002652:	2320      	movs	r3, #32
 8002654:	e004      	b.n	8002660 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002656:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266a:	2b00      	cmp	r3, #0
 800266c:	d105      	bne.n	800267a <HAL_ADC_ConfigChannel+0x33e>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	0e9b      	lsrs	r3, r3, #26
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	e016      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x36c>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800268c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800268e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002692:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800269a:	2320      	movs	r3, #32
 800269c:	e004      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800269e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d106      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2200      	movs	r2, #0
 80026b2:	2102      	movs	r1, #2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fb1d 	bl	8001cf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2103      	movs	r1, #3
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fb01 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x3aa>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2103      	movs	r1, #3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff faf6 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	0e9b      	lsrs	r3, r3, #26
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	e017      	b.n	8002716 <HAL_ADC_ConfigChannel+0x3da>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2103      	movs	r1, #3
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff faeb 	bl	8001cc8 <LL_ADC_GetOffsetChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80026fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002700:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002702:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e003      	b.n	8002714 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800270c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271e:	2b00      	cmp	r3, #0
 8002720:	d105      	bne.n	800272e <HAL_ADC_ConfigChannel+0x3f2>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	0e9b      	lsrs	r3, r3, #26
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	e011      	b.n	8002752 <HAL_ADC_ConfigChannel+0x416>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800273c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800273e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002740:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002746:	2320      	movs	r3, #32
 8002748:	e003      	b.n	8002752 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800274a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800274c:	fab3 f383 	clz	r3, r3
 8002750:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002752:	429a      	cmp	r2, r3
 8002754:	d106      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2200      	movs	r2, #0
 800275c:	2103      	movs	r1, #3
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fac8 	bl	8001cf4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fbf1 	bl	8001f50 <LL_ADC_IsEnabled>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	f040 813d 	bne.w	80029f0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6819      	ldr	r1, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	461a      	mov	r2, r3
 8002784:	f7ff fb72 	bl	8001e6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4aa2      	ldr	r2, [pc, #648]	@ (8002a18 <HAL_ADC_ConfigChannel+0x6dc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	f040 812e 	bne.w	80029f0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10b      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x480>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	0e9b      	lsrs	r3, r3, #26
 80027aa:	3301      	adds	r3, #1
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2b09      	cmp	r3, #9
 80027b2:	bf94      	ite	ls
 80027b4:	2301      	movls	r3, #1
 80027b6:	2300      	movhi	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e019      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x4b4>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80027ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027cc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80027ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e003      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80027d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	2b09      	cmp	r3, #9
 80027e8:	bf94      	ite	ls
 80027ea:	2301      	movls	r3, #1
 80027ec:	2300      	movhi	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d079      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d107      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x4d4>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0e9b      	lsrs	r3, r3, #26
 8002806:	3301      	adds	r3, #1
 8002808:	069b      	lsls	r3, r3, #26
 800280a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800280e:	e015      	b.n	800283c <HAL_ADC_ConfigChannel+0x500>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800281e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002820:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002828:	2320      	movs	r3, #32
 800282a:	e003      	b.n	8002834 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800282c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	3301      	adds	r3, #1
 8002836:	069b      	lsls	r3, r3, #26
 8002838:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d109      	bne.n	800285c <HAL_ADC_ConfigChannel+0x520>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	3301      	adds	r3, #1
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	2101      	movs	r1, #1
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	e017      	b.n	800288c <HAL_ADC_ConfigChannel+0x550>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800286a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800286c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800286e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002874:	2320      	movs	r3, #32
 8002876:	e003      	b.n	8002880 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002878:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	3301      	adds	r3, #1
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2101      	movs	r1, #1
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	ea42 0103 	orr.w	r1, r2, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x576>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0e9b      	lsrs	r3, r3, #26
 80028a2:	3301      	adds	r3, #1
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	051b      	lsls	r3, r3, #20
 80028b0:	e018      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x5a8>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80028c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80028c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80028ca:	2320      	movs	r3, #32
 80028cc:	e003      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80028ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	3301      	adds	r3, #1
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e4:	430b      	orrs	r3, r1
 80028e6:	e07e      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d107      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x5c8>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0e9b      	lsrs	r3, r3, #26
 80028fa:	3301      	adds	r3, #1
 80028fc:	069b      	lsls	r3, r3, #26
 80028fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002902:	e015      	b.n	8002930 <HAL_ADC_ConfigChannel+0x5f4>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002914:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800291c:	2320      	movs	r3, #32
 800291e:	e003      	b.n	8002928 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	3301      	adds	r3, #1
 800292a:	069b      	lsls	r3, r3, #26
 800292c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x614>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	0e9b      	lsrs	r3, r3, #26
 8002942:	3301      	adds	r3, #1
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	e017      	b.n	8002980 <HAL_ADC_ConfigChannel+0x644>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	61fb      	str	r3, [r7, #28]
  return result;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e003      	b.n	8002974 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	3301      	adds	r3, #1
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	2101      	movs	r1, #1
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	ea42 0103 	orr.w	r1, r2, r3
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10d      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x670>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0e9b      	lsrs	r3, r3, #26
 8002996:	3301      	adds	r3, #1
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	3b1e      	subs	r3, #30
 80029a4:	051b      	lsls	r3, r3, #20
 80029a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	e01b      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x6a8>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	613b      	str	r3, [r7, #16]
  return result;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80029c4:	2320      	movs	r3, #32
 80029c6:	e003      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	3301      	adds	r3, #1
 80029d2:	f003 021f 	and.w	r2, r3, #31
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	3b1e      	subs	r3, #30
 80029de:	051b      	lsls	r3, r3, #20
 80029e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ea:	4619      	mov	r1, r3
 80029ec:	f7ff fa12 	bl	8001e14 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b09      	ldr	r3, [pc, #36]	@ (8002a1c <HAL_ADC_ConfigChannel+0x6e0>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80be 	beq.w	8002b7a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a06:	d004      	beq.n	8002a12 <HAL_ADC_ConfigChannel+0x6d6>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a04      	ldr	r2, [pc, #16]	@ (8002a20 <HAL_ADC_ConfigChannel+0x6e4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d10a      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x6ec>
 8002a12:	4b04      	ldr	r3, [pc, #16]	@ (8002a24 <HAL_ADC_ConfigChannel+0x6e8>)
 8002a14:	e009      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x6ee>
 8002a16:	bf00      	nop
 8002a18:	407f0000 	.word	0x407f0000
 8002a1c:	80080000 	.word	0x80080000
 8002a20:	50000100 	.word	0x50000100
 8002a24:	50000300 	.word	0x50000300
 8002a28:	4b59      	ldr	r3, [pc, #356]	@ (8002b90 <HAL_ADC_ConfigChannel+0x854>)
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff f91a 	bl	8001c64 <LL_ADC_GetCommonPathInternalCh>
 8002a30:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a56      	ldr	r2, [pc, #344]	@ (8002b94 <HAL_ADC_ConfigChannel+0x858>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d004      	beq.n	8002a48 <HAL_ADC_ConfigChannel+0x70c>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a55      	ldr	r2, [pc, #340]	@ (8002b98 <HAL_ADC_ConfigChannel+0x85c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d13a      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d134      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a5c:	d005      	beq.n	8002a6a <HAL_ADC_ConfigChannel+0x72e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a4e      	ldr	r2, [pc, #312]	@ (8002b9c <HAL_ADC_ConfigChannel+0x860>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	f040 8085 	bne.w	8002b74 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a72:	d004      	beq.n	8002a7e <HAL_ADC_ConfigChannel+0x742>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a49      	ldr	r2, [pc, #292]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x864>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x746>
 8002a7e:	4a49      	ldr	r2, [pc, #292]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x868>)
 8002a80:	e000      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x748>
 8002a82:	4a43      	ldr	r2, [pc, #268]	@ (8002b90 <HAL_ADC_ConfigChannel+0x854>)
 8002a84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4610      	mov	r0, r2
 8002a90:	f7ff f8d5 	bl	8001c3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a94:	4b44      	ldr	r3, [pc, #272]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x86c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	099b      	lsrs	r3, r3, #6
 8002a9a:	4a44      	ldr	r2, [pc, #272]	@ (8002bac <HAL_ADC_ConfigChannel+0x870>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	099b      	lsrs	r3, r3, #6
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002aae:	e002      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f9      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002abc:	e05a      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a3b      	ldr	r2, [pc, #236]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x874>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d125      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ac8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002acc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d11f      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a31      	ldr	r2, [pc, #196]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x864>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d104      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x7ac>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a34      	ldr	r2, [pc, #208]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x878>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d047      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002af0:	d004      	beq.n	8002afc <HAL_ADC_ConfigChannel+0x7c0>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x864>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d101      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x7c4>
 8002afc:	4a29      	ldr	r2, [pc, #164]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x868>)
 8002afe:	e000      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x7c6>
 8002b00:	4a23      	ldr	r2, [pc, #140]	@ (8002b90 <HAL_ADC_ConfigChannel+0x854>)
 8002b02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	f7ff f896 	bl	8001c3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b12:	e031      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a27      	ldr	r2, [pc, #156]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x87c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d12d      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d127      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x864>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d022      	beq.n	8002b7a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b3c:	d004      	beq.n	8002b48 <HAL_ADC_ConfigChannel+0x80c>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a17      	ldr	r2, [pc, #92]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x864>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x810>
 8002b48:	4a16      	ldr	r2, [pc, #88]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x868>)
 8002b4a:	e000      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x812>
 8002b4c:	4a10      	ldr	r2, [pc, #64]	@ (8002b90 <HAL_ADC_ConfigChannel+0x854>)
 8002b4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b56:	4619      	mov	r1, r3
 8002b58:	4610      	mov	r0, r2
 8002b5a:	f7ff f870 	bl	8001c3e <LL_ADC_SetCommonPathInternalCh>
 8002b5e:	e00c      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b64:	f043 0220 	orr.w	r2, r3, #32
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002b72:	e002      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b74:	bf00      	nop
 8002b76:	e000      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b78:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b82:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	37d8      	adds	r7, #216	@ 0xd8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	50000700 	.word	0x50000700
 8002b94:	c3210000 	.word	0xc3210000
 8002b98:	90c00010 	.word	0x90c00010
 8002b9c:	50000600 	.word	0x50000600
 8002ba0:	50000100 	.word	0x50000100
 8002ba4:	50000300 	.word	0x50000300
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	053e2d63 	.word	0x053e2d63
 8002bb0:	c7520000 	.word	0xc7520000
 8002bb4:	50000500 	.word	0x50000500
 8002bb8:	cb840000 	.word	0xcb840000

08002bbc <LL_ADC_IsEnabled>:
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <LL_ADC_IsEnabled+0x18>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <LL_ADC_IsEnabled+0x1a>
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d101      	bne.n	8002bfa <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b0a1      	sub	sp, #132	@ 0x84
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0e7      	b.n	8002df6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c2e:	2300      	movs	r3, #0
 8002c30:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c32:	2300      	movs	r3, #0
 8002c34:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c3e:	d102      	bne.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c40:	4b6f      	ldr	r3, [pc, #444]	@ (8002e00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	e009      	b.n	8002c5a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6e      	ldr	r2, [pc, #440]	@ (8002e04 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d102      	bne.n	8002c56 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002c50:	4b6d      	ldr	r3, [pc, #436]	@ (8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	e001      	b.n	8002c5a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002c56:	2300      	movs	r3, #0
 8002c58:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10b      	bne.n	8002c78 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0be      	b.n	8002df6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff ffb1 	bl	8002be2 <LL_ADC_REG_IsConversionOngoing>
 8002c80:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff ffab 	bl	8002be2 <LL_ADC_REG_IsConversionOngoing>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 80a0 	bne.w	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002c94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 809c 	bne.w	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ca4:	d004      	beq.n	8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a55      	ldr	r2, [pc, #340]	@ (8002e00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d101      	bne.n	8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002cb0:	4b56      	ldr	r3, [pc, #344]	@ (8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002cb2:	e000      	b.n	8002cb6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002cb4:	4b56      	ldr	r3, [pc, #344]	@ (8002e10 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002cb6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d04b      	beq.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002cc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	6859      	ldr	r1, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002cd2:	035b      	lsls	r3, r3, #13
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cda:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ce4:	d004      	beq.n	8002cf0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a45      	ldr	r2, [pc, #276]	@ (8002e00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d10f      	bne.n	8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002cf0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002cf4:	f7ff ff62 	bl	8002bbc <LL_ADC_IsEnabled>
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	4841      	ldr	r0, [pc, #260]	@ (8002e00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cfc:	f7ff ff5e 	bl	8002bbc <LL_ADC_IsEnabled>
 8002d00:	4603      	mov	r3, r0
 8002d02:	4323      	orrs	r3, r4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf0c      	ite	eq
 8002d08:	2301      	moveq	r3, #1
 8002d0a:	2300      	movne	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e012      	b.n	8002d36 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002d10:	483c      	ldr	r0, [pc, #240]	@ (8002e04 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d12:	f7ff ff53 	bl	8002bbc <LL_ADC_IsEnabled>
 8002d16:	4604      	mov	r4, r0
 8002d18:	483b      	ldr	r0, [pc, #236]	@ (8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d1a:	f7ff ff4f 	bl	8002bbc <LL_ADC_IsEnabled>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	431c      	orrs	r4, r3
 8002d22:	483c      	ldr	r0, [pc, #240]	@ (8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002d24:	f7ff ff4a 	bl	8002bbc <LL_ADC_IsEnabled>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4323      	orrs	r3, r4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d056      	beq.n	8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d42:	f023 030f 	bic.w	r3, r3, #15
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	6811      	ldr	r1, [r2, #0]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	6892      	ldr	r2, [r2, #8]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	431a      	orrs	r2, r3
 8002d52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d54:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d56:	e047      	b.n	8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d62:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d6c:	d004      	beq.n	8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a23      	ldr	r2, [pc, #140]	@ (8002e00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d10f      	bne.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002d78:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d7c:	f7ff ff1e 	bl	8002bbc <LL_ADC_IsEnabled>
 8002d80:	4604      	mov	r4, r0
 8002d82:	481f      	ldr	r0, [pc, #124]	@ (8002e00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d84:	f7ff ff1a 	bl	8002bbc <LL_ADC_IsEnabled>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4323      	orrs	r3, r4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e012      	b.n	8002dbe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002d98:	481a      	ldr	r0, [pc, #104]	@ (8002e04 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d9a:	f7ff ff0f 	bl	8002bbc <LL_ADC_IsEnabled>
 8002d9e:	4604      	mov	r4, r0
 8002da0:	4819      	ldr	r0, [pc, #100]	@ (8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002da2:	f7ff ff0b 	bl	8002bbc <LL_ADC_IsEnabled>
 8002da6:	4603      	mov	r3, r0
 8002da8:	431c      	orrs	r4, r3
 8002daa:	481a      	ldr	r0, [pc, #104]	@ (8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002dac:	f7ff ff06 	bl	8002bbc <LL_ADC_IsEnabled>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4323      	orrs	r3, r4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d012      	beq.n	8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002dc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002dca:	f023 030f 	bic.w	r3, r3, #15
 8002dce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002dd0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dd2:	e009      	b.n	8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd8:	f043 0220 	orr.w	r2, r3, #32
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002de6:	e000      	b.n	8002dea <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002de8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002df2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3784      	adds	r7, #132	@ 0x84
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd90      	pop	{r4, r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	50000100 	.word	0x50000100
 8002e04:	50000400 	.word	0x50000400
 8002e08:	50000500 	.word	0x50000500
 8002e0c:	50000300 	.word	0x50000300
 8002e10:	50000700 	.word	0x50000700
 8002e14:	50000600 	.word	0x50000600

08002e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e28:	4b0c      	ldr	r3, [pc, #48]	@ (8002e5c <__NVIC_SetPriorityGrouping+0x44>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e34:	4013      	ands	r3, r2
 8002e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e4a:	4a04      	ldr	r2, [pc, #16]	@ (8002e5c <__NVIC_SetPriorityGrouping+0x44>)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	60d3      	str	r3, [r2, #12]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e64:	4b04      	ldr	r3, [pc, #16]	@ (8002e78 <__NVIC_GetPriorityGrouping+0x18>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	f003 0307 	and.w	r3, r3, #7
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	db0b      	blt.n	8002ea6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	f003 021f 	and.w	r2, r3, #31
 8002e94:	4907      	ldr	r1, [pc, #28]	@ (8002eb4 <__NVIC_EnableIRQ+0x38>)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000e100 	.word	0xe000e100

08002eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	db0a      	blt.n	8002ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	490c      	ldr	r1, [pc, #48]	@ (8002f04 <__NVIC_SetPriority+0x4c>)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	0112      	lsls	r2, r2, #4
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	440b      	add	r3, r1
 8002edc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee0:	e00a      	b.n	8002ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	4908      	ldr	r1, [pc, #32]	@ (8002f08 <__NVIC_SetPriority+0x50>)
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	3b04      	subs	r3, #4
 8002ef0:	0112      	lsls	r2, r2, #4
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	761a      	strb	r2, [r3, #24]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000e100 	.word	0xe000e100
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	@ 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f1c3 0307 	rsb	r3, r3, #7
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	bf28      	it	cs
 8002f2a:	2304      	movcs	r3, #4
 8002f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3304      	adds	r3, #4
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d902      	bls.n	8002f3c <NVIC_EncodePriority+0x30>
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3b03      	subs	r3, #3
 8002f3a:	e000      	b.n	8002f3e <NVIC_EncodePriority+0x32>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	401a      	ands	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	43d9      	mvns	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f64:	4313      	orrs	r3, r2
         );
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3724      	adds	r7, #36	@ 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff ff4c 	bl	8002e18 <__NVIC_SetPriorityGrouping>
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f96:	f7ff ff63 	bl	8002e60 <__NVIC_GetPriorityGrouping>
 8002f9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	6978      	ldr	r0, [r7, #20]
 8002fa2:	f7ff ffb3 	bl	8002f0c <NVIC_EncodePriority>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff ff82 	bl	8002eb8 <__NVIC_SetPriority>
}
 8002fb4:	bf00      	nop
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff ff56 	bl	8002e7c <__NVIC_EnableIRQ>
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d005      	beq.n	8002ffc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
 8002ffa:	e037      	b.n	800306c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 020e 	bic.w	r2, r2, #14
 800300a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003016:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800301a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003030:	f003 021f 	and.w	r2, r3, #31
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f202 	lsl.w	r2, r1, r2
 800303e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003048:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00c      	beq.n	800306c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003060:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800306a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d00d      	beq.n	80030be <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2204      	movs	r2, #4
 80030a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	e047      	b.n	800314e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 020e 	bic.w	r2, r2, #14
 80030cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0201 	bic.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f2:	f003 021f 	and.w	r2, r3, #31
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	2101      	movs	r1, #1
 80030fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003100:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800310a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00c      	beq.n	800312e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003122:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800312c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
    }
  }
  return status;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003166:	e15a      	b.n	800341e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	2101      	movs	r1, #1
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	4013      	ands	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 814c 	beq.w	8003418 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d005      	beq.n	8003198 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003194:	2b02      	cmp	r3, #2
 8003196:	d130      	bne.n	80031fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	2203      	movs	r2, #3
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031ce:	2201      	movs	r2, #1
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	091b      	lsrs	r3, r3, #4
 80031e4:	f003 0201 	and.w	r2, r3, #1
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b03      	cmp	r3, #3
 8003204:	d017      	beq.n	8003236 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	2203      	movs	r2, #3
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4013      	ands	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d123      	bne.n	800328a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	08da      	lsrs	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3208      	adds	r2, #8
 800324a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800324e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	220f      	movs	r2, #15
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	08da      	lsrs	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3208      	adds	r2, #8
 8003284:	6939      	ldr	r1, [r7, #16]
 8003286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	2203      	movs	r2, #3
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4013      	ands	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 0203 	and.w	r2, r3, #3
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 80a6 	beq.w	8003418 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032cc:	4b5b      	ldr	r3, [pc, #364]	@ (800343c <HAL_GPIO_Init+0x2e4>)
 80032ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d0:	4a5a      	ldr	r2, [pc, #360]	@ (800343c <HAL_GPIO_Init+0x2e4>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80032d8:	4b58      	ldr	r3, [pc, #352]	@ (800343c <HAL_GPIO_Init+0x2e4>)
 80032da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032e4:	4a56      	ldr	r2, [pc, #344]	@ (8003440 <HAL_GPIO_Init+0x2e8>)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	089b      	lsrs	r3, r3, #2
 80032ea:	3302      	adds	r3, #2
 80032ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	220f      	movs	r2, #15
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800330e:	d01f      	beq.n	8003350 <HAL_GPIO_Init+0x1f8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a4c      	ldr	r2, [pc, #304]	@ (8003444 <HAL_GPIO_Init+0x2ec>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d019      	beq.n	800334c <HAL_GPIO_Init+0x1f4>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a4b      	ldr	r2, [pc, #300]	@ (8003448 <HAL_GPIO_Init+0x2f0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <HAL_GPIO_Init+0x1f0>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a4a      	ldr	r2, [pc, #296]	@ (800344c <HAL_GPIO_Init+0x2f4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00d      	beq.n	8003344 <HAL_GPIO_Init+0x1ec>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a49      	ldr	r2, [pc, #292]	@ (8003450 <HAL_GPIO_Init+0x2f8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <HAL_GPIO_Init+0x1e8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a48      	ldr	r2, [pc, #288]	@ (8003454 <HAL_GPIO_Init+0x2fc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d101      	bne.n	800333c <HAL_GPIO_Init+0x1e4>
 8003338:	2305      	movs	r3, #5
 800333a:	e00a      	b.n	8003352 <HAL_GPIO_Init+0x1fa>
 800333c:	2306      	movs	r3, #6
 800333e:	e008      	b.n	8003352 <HAL_GPIO_Init+0x1fa>
 8003340:	2304      	movs	r3, #4
 8003342:	e006      	b.n	8003352 <HAL_GPIO_Init+0x1fa>
 8003344:	2303      	movs	r3, #3
 8003346:	e004      	b.n	8003352 <HAL_GPIO_Init+0x1fa>
 8003348:	2302      	movs	r3, #2
 800334a:	e002      	b.n	8003352 <HAL_GPIO_Init+0x1fa>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <HAL_GPIO_Init+0x1fa>
 8003350:	2300      	movs	r3, #0
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	f002 0203 	and.w	r2, r2, #3
 8003358:	0092      	lsls	r2, r2, #2
 800335a:	4093      	lsls	r3, r2
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003362:	4937      	ldr	r1, [pc, #220]	@ (8003440 <HAL_GPIO_Init+0x2e8>)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	089b      	lsrs	r3, r3, #2
 8003368:	3302      	adds	r3, #2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003370:	4b39      	ldr	r3, [pc, #228]	@ (8003458 <HAL_GPIO_Init+0x300>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	43db      	mvns	r3, r3
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4013      	ands	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003394:	4a30      	ldr	r2, [pc, #192]	@ (8003458 <HAL_GPIO_Init+0x300>)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800339a:	4b2f      	ldr	r3, [pc, #188]	@ (8003458 <HAL_GPIO_Init+0x300>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033be:	4a26      	ldr	r2, [pc, #152]	@ (8003458 <HAL_GPIO_Init+0x300>)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80033c4:	4b24      	ldr	r3, [pc, #144]	@ (8003458 <HAL_GPIO_Init+0x300>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003458 <HAL_GPIO_Init+0x300>)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003458 <HAL_GPIO_Init+0x300>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003412:	4a11      	ldr	r2, [pc, #68]	@ (8003458 <HAL_GPIO_Init+0x300>)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	3301      	adds	r3, #1
 800341c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	f47f ae9d 	bne.w	8003168 <HAL_GPIO_Init+0x10>
  }
}
 800342e:	bf00      	nop
 8003430:	bf00      	nop
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	40021000 	.word	0x40021000
 8003440:	40010000 	.word	0x40010000
 8003444:	48000400 	.word	0x48000400
 8003448:	48000800 	.word	0x48000800
 800344c:	48000c00 	.word	0x48000c00
 8003450:	48001000 	.word	0x48001000
 8003454:	48001400 	.word	0x48001400
 8003458:	40010400 	.word	0x40010400

0800345c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	807b      	strh	r3, [r7, #2]
 8003468:	4613      	mov	r3, r2
 800346a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800346c:	787b      	ldrb	r3, [r7, #1]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003472:	887a      	ldrh	r2, [r7, #2]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003478:	e002      	b.n	8003480 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800347a:	887a      	ldrh	r2, [r7, #2]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003496:	4b08      	ldr	r3, [pc, #32]	@ (80034b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	4013      	ands	r3, r2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d006      	beq.n	80034b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034a2:	4a05      	ldr	r2, [pc, #20]	@ (80034b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034a4:	88fb      	ldrh	r3, [r7, #6]
 80034a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 f806 	bl	80034bc <HAL_GPIO_EXTI_Callback>
  }
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40010400 	.word	0x40010400

080034bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d141      	bne.n	8003566 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ee:	d131      	bne.n	8003554 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034f0:	4b47      	ldr	r3, [pc, #284]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034f6:	4a46      	ldr	r2, [pc, #280]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003500:	4b43      	ldr	r3, [pc, #268]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003508:	4a41      	ldr	r2, [pc, #260]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800350a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800350e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003510:	4b40      	ldr	r3, [pc, #256]	@ (8003614 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2232      	movs	r2, #50	@ 0x32
 8003516:	fb02 f303 	mul.w	r3, r2, r3
 800351a:	4a3f      	ldr	r2, [pc, #252]	@ (8003618 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	0c9b      	lsrs	r3, r3, #18
 8003522:	3301      	adds	r3, #1
 8003524:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003526:	e002      	b.n	800352e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3b01      	subs	r3, #1
 800352c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800352e:	4b38      	ldr	r3, [pc, #224]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800353a:	d102      	bne.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f2      	bne.n	8003528 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003542:	4b33      	ldr	r3, [pc, #204]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800354a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800354e:	d158      	bne.n	8003602 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e057      	b.n	8003604 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003554:	4b2e      	ldr	r3, [pc, #184]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800355a:	4a2d      	ldr	r2, [pc, #180]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800355c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003560:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003564:	e04d      	b.n	8003602 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800356c:	d141      	bne.n	80035f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800356e:	4b28      	ldr	r3, [pc, #160]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800357a:	d131      	bne.n	80035e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800357c:	4b24      	ldr	r3, [pc, #144]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800357e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003582:	4a23      	ldr	r2, [pc, #140]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003588:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800358c:	4b20      	ldr	r3, [pc, #128]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003594:	4a1e      	ldr	r2, [pc, #120]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003596:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800359a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800359c:	4b1d      	ldr	r3, [pc, #116]	@ (8003614 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2232      	movs	r2, #50	@ 0x32
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003618 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	0c9b      	lsrs	r3, r3, #18
 80035ae:	3301      	adds	r3, #1
 80035b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035b2:	e002      	b.n	80035ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ba:	4b15      	ldr	r3, [pc, #84]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c6:	d102      	bne.n	80035ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f2      	bne.n	80035b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035ce:	4b10      	ldr	r3, [pc, #64]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035da:	d112      	bne.n	8003602 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e011      	b.n	8003604 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80035f0:	e007      	b.n	8003602 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035f2:	4b07      	ldr	r3, [pc, #28]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035fa:	4a05      	ldr	r2, [pc, #20]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003600:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	40007000 	.word	0x40007000
 8003614:	20000000 	.word	0x20000000
 8003618:	431bde83 	.word	0x431bde83

0800361c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003620:	4b05      	ldr	r3, [pc, #20]	@ (8003638 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a04      	ldr	r2, [pc, #16]	@ (8003638 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003626:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800362a:	6093      	str	r3, [r2, #8]
}
 800362c:	bf00      	nop
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40007000 	.word	0x40007000

0800363c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e2fe      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d075      	beq.n	8003746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365a:	4b97      	ldr	r3, [pc, #604]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003664:	4b94      	ldr	r3, [pc, #592]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2b0c      	cmp	r3, #12
 8003672:	d102      	bne.n	800367a <HAL_RCC_OscConfig+0x3e>
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2b03      	cmp	r3, #3
 8003678:	d002      	beq.n	8003680 <HAL_RCC_OscConfig+0x44>
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d10b      	bne.n	8003698 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003680:	4b8d      	ldr	r3, [pc, #564]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d05b      	beq.n	8003744 <HAL_RCC_OscConfig+0x108>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d157      	bne.n	8003744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e2d9      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a0:	d106      	bne.n	80036b0 <HAL_RCC_OscConfig+0x74>
 80036a2:	4b85      	ldr	r3, [pc, #532]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a84      	ldr	r2, [pc, #528]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 80036a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e01d      	b.n	80036ec <HAL_RCC_OscConfig+0xb0>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCC_OscConfig+0x98>
 80036ba:	4b7f      	ldr	r3, [pc, #508]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a7e      	ldr	r2, [pc, #504]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 80036c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	4b7c      	ldr	r3, [pc, #496]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a7b      	ldr	r2, [pc, #492]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 80036cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	e00b      	b.n	80036ec <HAL_RCC_OscConfig+0xb0>
 80036d4:	4b78      	ldr	r3, [pc, #480]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a77      	ldr	r2, [pc, #476]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 80036da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	4b75      	ldr	r3, [pc, #468]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a74      	ldr	r2, [pc, #464]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 80036e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d013      	beq.n	800371c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f4:	f7fe fa84 	bl	8001c00 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036fc:	f7fe fa80 	bl	8001c00 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	@ 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e29e      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800370e:	4b6a      	ldr	r3, [pc, #424]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0xc0>
 800371a:	e014      	b.n	8003746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe fa70 	bl	8001c00 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003724:	f7fe fa6c 	bl	8001c00 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	@ 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e28a      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003736:	4b60      	ldr	r3, [pc, #384]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0xe8>
 8003742:	e000      	b.n	8003746 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d075      	beq.n	800383e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003752:	4b59      	ldr	r3, [pc, #356]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800375c:	4b56      	ldr	r3, [pc, #344]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b0c      	cmp	r3, #12
 800376a:	d102      	bne.n	8003772 <HAL_RCC_OscConfig+0x136>
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d002      	beq.n	8003778 <HAL_RCC_OscConfig+0x13c>
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b04      	cmp	r3, #4
 8003776:	d11f      	bne.n	80037b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003778:	4b4f      	ldr	r3, [pc, #316]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_OscConfig+0x154>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e25d      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003790:	4b49      	ldr	r3, [pc, #292]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	061b      	lsls	r3, r3, #24
 800379e:	4946      	ldr	r1, [pc, #280]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037a4:	4b45      	ldr	r3, [pc, #276]	@ (80038bc <HAL_RCC_OscConfig+0x280>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fd fa11 	bl	8000bd0 <HAL_InitTick>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d043      	beq.n	800383c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e249      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d023      	beq.n	8003808 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c0:	4b3d      	ldr	r3, [pc, #244]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a3c      	ldr	r2, [pc, #240]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 80037c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe fa18 	bl	8001c00 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d4:	f7fe fa14 	bl	8001c00 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e232      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e6:	4b34      	ldr	r3, [pc, #208]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f2:	4b31      	ldr	r3, [pc, #196]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	061b      	lsls	r3, r3, #24
 8003800:	492d      	ldr	r1, [pc, #180]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]
 8003806:	e01a      	b.n	800383e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003808:	4b2b      	ldr	r3, [pc, #172]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a2a      	ldr	r2, [pc, #168]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 800380e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fe f9f4 	bl	8001c00 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381c:	f7fe f9f0 	bl	8001c00 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e20e      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800382e:	4b22      	ldr	r3, [pc, #136]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x1e0>
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800383c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d041      	beq.n	80038ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d01c      	beq.n	800388c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003852:	4b19      	ldr	r3, [pc, #100]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 8003854:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003858:	4a17      	ldr	r2, [pc, #92]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003862:	f7fe f9cd 	bl	8001c00 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800386a:	f7fe f9c9 	bl	8001c00 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e1e7      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800387c:	4b0e      	ldr	r3, [pc, #56]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 800387e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0ef      	beq.n	800386a <HAL_RCC_OscConfig+0x22e>
 800388a:	e020      	b.n	80038ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800388c:	4b0a      	ldr	r3, [pc, #40]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 800388e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003892:	4a09      	ldr	r2, [pc, #36]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fe f9b0 	bl	8001c00 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038a2:	e00d      	b.n	80038c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a4:	f7fe f9ac 	bl	8001c00 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d906      	bls.n	80038c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e1ca      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
 80038bc:	200000c8 	.word	0x200000c8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038c0:	4b8c      	ldr	r3, [pc, #560]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 80038c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1ea      	bne.n	80038a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80a6 	beq.w	8003a28 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038dc:	2300      	movs	r3, #0
 80038de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038e0:	4b84      	ldr	r3, [pc, #528]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_RCC_OscConfig+0x2b4>
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <HAL_RCC_OscConfig+0x2b6>
 80038f0:	2300      	movs	r3, #0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00d      	beq.n	8003912 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f6:	4b7f      	ldr	r3, [pc, #508]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 80038f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fa:	4a7e      	ldr	r2, [pc, #504]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003900:	6593      	str	r3, [r2, #88]	@ 0x58
 8003902:	4b7c      	ldr	r3, [pc, #496]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800390e:	2301      	movs	r3, #1
 8003910:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003912:	4b79      	ldr	r3, [pc, #484]	@ (8003af8 <HAL_RCC_OscConfig+0x4bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d118      	bne.n	8003950 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800391e:	4b76      	ldr	r3, [pc, #472]	@ (8003af8 <HAL_RCC_OscConfig+0x4bc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a75      	ldr	r2, [pc, #468]	@ (8003af8 <HAL_RCC_OscConfig+0x4bc>)
 8003924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392a:	f7fe f969 	bl	8001c00 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003932:	f7fe f965 	bl	8001c00 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e183      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003944:	4b6c      	ldr	r3, [pc, #432]	@ (8003af8 <HAL_RCC_OscConfig+0x4bc>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d108      	bne.n	800396a <HAL_RCC_OscConfig+0x32e>
 8003958:	4b66      	ldr	r3, [pc, #408]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800395e:	4a65      	ldr	r2, [pc, #404]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003968:	e024      	b.n	80039b4 <HAL_RCC_OscConfig+0x378>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b05      	cmp	r3, #5
 8003970:	d110      	bne.n	8003994 <HAL_RCC_OscConfig+0x358>
 8003972:	4b60      	ldr	r3, [pc, #384]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003978:	4a5e      	ldr	r2, [pc, #376]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 800397a:	f043 0304 	orr.w	r3, r3, #4
 800397e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003982:	4b5c      	ldr	r3, [pc, #368]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003988:	4a5a      	ldr	r2, [pc, #360]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003992:	e00f      	b.n	80039b4 <HAL_RCC_OscConfig+0x378>
 8003994:	4b57      	ldr	r3, [pc, #348]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800399a:	4a56      	ldr	r2, [pc, #344]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039a4:	4b53      	ldr	r3, [pc, #332]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039aa:	4a52      	ldr	r2, [pc, #328]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 80039ac:	f023 0304 	bic.w	r3, r3, #4
 80039b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d016      	beq.n	80039ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039bc:	f7fe f920 	bl	8001c00 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c2:	e00a      	b.n	80039da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c4:	f7fe f91c 	bl	8001c00 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e138      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039da:	4b46      	ldr	r3, [pc, #280]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0ed      	beq.n	80039c4 <HAL_RCC_OscConfig+0x388>
 80039e8:	e015      	b.n	8003a16 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ea:	f7fe f909 	bl	8001c00 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039f0:	e00a      	b.n	8003a08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f2:	f7fe f905 	bl	8001c00 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e121      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a08:	4b3a      	ldr	r3, [pc, #232]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1ed      	bne.n	80039f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a16:	7ffb      	ldrb	r3, [r7, #31]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d105      	bne.n	8003a28 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1c:	4b35      	ldr	r3, [pc, #212]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a20:	4a34      	ldr	r2, [pc, #208]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003a22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a26:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d03c      	beq.n	8003aae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01c      	beq.n	8003a76 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a42:	4a2c      	ldr	r2, [pc, #176]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4c:	f7fe f8d8 	bl	8001c00 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a54:	f7fe f8d4 	bl	8001c00 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e0f2      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a66:	4b23      	ldr	r3, [pc, #140]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0ef      	beq.n	8003a54 <HAL_RCC_OscConfig+0x418>
 8003a74:	e01b      	b.n	8003aae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a76:	4b1f      	ldr	r3, [pc, #124]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003a78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a86:	f7fe f8bb 	bl	8001c00 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a8e:	f7fe f8b7 	bl	8001c00 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e0d5      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003aa0:	4b14      	ldr	r3, [pc, #80]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003aa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1ef      	bne.n	8003a8e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80c9 	beq.w	8003c4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b0c      	cmp	r3, #12
 8003ac2:	f000 8083 	beq.w	8003bcc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d15e      	bne.n	8003b8c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ace:	4b09      	ldr	r3, [pc, #36]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a08      	ldr	r2, [pc, #32]	@ (8003af4 <HAL_RCC_OscConfig+0x4b8>)
 8003ad4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ada:	f7fe f891 	bl	8001c00 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae0:	e00c      	b.n	8003afc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae2:	f7fe f88d 	bl	8001c00 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d905      	bls.n	8003afc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e0ab      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003afc:	4b55      	ldr	r3, [pc, #340]	@ (8003c54 <HAL_RCC_OscConfig+0x618>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ec      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b08:	4b52      	ldr	r3, [pc, #328]	@ (8003c54 <HAL_RCC_OscConfig+0x618>)
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	4b52      	ldr	r3, [pc, #328]	@ (8003c58 <HAL_RCC_OscConfig+0x61c>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6a11      	ldr	r1, [r2, #32]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b18:	3a01      	subs	r2, #1
 8003b1a:	0112      	lsls	r2, r2, #4
 8003b1c:	4311      	orrs	r1, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b22:	0212      	lsls	r2, r2, #8
 8003b24:	4311      	orrs	r1, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b2a:	0852      	lsrs	r2, r2, #1
 8003b2c:	3a01      	subs	r2, #1
 8003b2e:	0552      	lsls	r2, r2, #21
 8003b30:	4311      	orrs	r1, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b36:	0852      	lsrs	r2, r2, #1
 8003b38:	3a01      	subs	r2, #1
 8003b3a:	0652      	lsls	r2, r2, #25
 8003b3c:	4311      	orrs	r1, r2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b42:	06d2      	lsls	r2, r2, #27
 8003b44:	430a      	orrs	r2, r1
 8003b46:	4943      	ldr	r1, [pc, #268]	@ (8003c54 <HAL_RCC_OscConfig+0x618>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b4c:	4b41      	ldr	r3, [pc, #260]	@ (8003c54 <HAL_RCC_OscConfig+0x618>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a40      	ldr	r2, [pc, #256]	@ (8003c54 <HAL_RCC_OscConfig+0x618>)
 8003b52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b56:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b58:	4b3e      	ldr	r3, [pc, #248]	@ (8003c54 <HAL_RCC_OscConfig+0x618>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a3d      	ldr	r2, [pc, #244]	@ (8003c54 <HAL_RCC_OscConfig+0x618>)
 8003b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fe f84c 	bl	8001c00 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fe f848 	bl	8001c00 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e066      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b7e:	4b35      	ldr	r3, [pc, #212]	@ (8003c54 <HAL_RCC_OscConfig+0x618>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x530>
 8003b8a:	e05e      	b.n	8003c4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8c:	4b31      	ldr	r3, [pc, #196]	@ (8003c54 <HAL_RCC_OscConfig+0x618>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a30      	ldr	r2, [pc, #192]	@ (8003c54 <HAL_RCC_OscConfig+0x618>)
 8003b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fe f832 	bl	8001c00 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fe f82e 	bl	8001c00 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e04c      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bb2:	4b28      	ldr	r3, [pc, #160]	@ (8003c54 <HAL_RCC_OscConfig+0x618>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003bbe:	4b25      	ldr	r3, [pc, #148]	@ (8003c54 <HAL_RCC_OscConfig+0x618>)
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	4924      	ldr	r1, [pc, #144]	@ (8003c54 <HAL_RCC_OscConfig+0x618>)
 8003bc4:	4b25      	ldr	r3, [pc, #148]	@ (8003c5c <HAL_RCC_OscConfig+0x620>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	60cb      	str	r3, [r1, #12]
 8003bca:	e03e      	b.n	8003c4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e039      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8003c54 <HAL_RCC_OscConfig+0x618>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f003 0203 	and.w	r2, r3, #3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d12c      	bne.n	8003c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d123      	bne.n	8003c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d11b      	bne.n	8003c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d113      	bne.n	8003c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d109      	bne.n	8003c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d001      	beq.n	8003c4a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3720      	adds	r7, #32
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40021000 	.word	0x40021000
 8003c58:	019f800c 	.word	0x019f800c
 8003c5c:	feeefffc 	.word	0xfeeefffc

08003c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e11e      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c78:	4b91      	ldr	r3, [pc, #580]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d910      	bls.n	8003ca8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c86:	4b8e      	ldr	r3, [pc, #568]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 020f 	bic.w	r2, r3, #15
 8003c8e:	498c      	ldr	r1, [pc, #560]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c96:	4b8a      	ldr	r3, [pc, #552]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e106      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d073      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d129      	bne.n	8003d10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbc:	4b81      	ldr	r3, [pc, #516]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0f4      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ccc:	f000 f9d0 	bl	8004070 <RCC_GetSysClockFreqFromPLLSource>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4a7c      	ldr	r2, [pc, #496]	@ (8003ec8 <HAL_RCC_ClockConfig+0x268>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d93f      	bls.n	8003d5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003cda:	4b7a      	ldr	r3, [pc, #488]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d033      	beq.n	8003d5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d12f      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cfa:	4b72      	ldr	r3, [pc, #456]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d02:	4a70      	ldr	r2, [pc, #448]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d0a:	2380      	movs	r3, #128	@ 0x80
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	e024      	b.n	8003d5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d107      	bne.n	8003d28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d18:	4b6a      	ldr	r3, [pc, #424]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d109      	bne.n	8003d38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0c6      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d28:	4b66      	ldr	r3, [pc, #408]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0be      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d38:	f000 f8ce 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 8003d3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4a61      	ldr	r2, [pc, #388]	@ (8003ec8 <HAL_RCC_ClockConfig+0x268>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d909      	bls.n	8003d5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d46:	4b5f      	ldr	r3, [pc, #380]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d4e:	4a5d      	ldr	r2, [pc, #372]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d56:	2380      	movs	r3, #128	@ 0x80
 8003d58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d5a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f023 0203 	bic.w	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4957      	ldr	r1, [pc, #348]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d6c:	f7fd ff48 	bl	8001c00 <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d72:	e00a      	b.n	8003d8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d74:	f7fd ff44 	bl	8001c00 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e095      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 020c 	and.w	r2, r3, #12
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d1eb      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d023      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003db4:	4b43      	ldr	r3, [pc, #268]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a42      	ldr	r2, [pc, #264]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003dba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003dbe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003dd4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003dd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003dda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ddc:	4b39      	ldr	r3, [pc, #228]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4936      	ldr	r1, [pc, #216]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2b80      	cmp	r3, #128	@ 0x80
 8003df4:	d105      	bne.n	8003e02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003df6:	4b33      	ldr	r3, [pc, #204]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	4a32      	ldr	r2, [pc, #200]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003dfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e02:	4b2f      	ldr	r3, [pc, #188]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d21d      	bcs.n	8003e4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e10:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 020f 	bic.w	r2, r3, #15
 8003e18:	4929      	ldr	r1, [pc, #164]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e20:	f7fd feee 	bl	8001c00 <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e28:	f7fd feea 	bl	8001c00 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e03b      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3e:	4b20      	ldr	r3, [pc, #128]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d1ed      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e58:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4917      	ldr	r1, [pc, #92]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e76:	4b13      	ldr	r3, [pc, #76]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	490f      	ldr	r1, [pc, #60]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e8a:	f000 f825 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	490c      	ldr	r1, [pc, #48]	@ (8003ecc <HAL_RCC_ClockConfig+0x26c>)
 8003e9c:	5ccb      	ldrb	r3, [r1, r3]
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed0 <HAL_RCC_ClockConfig+0x270>)
 8003ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed4 <HAL_RCC_ClockConfig+0x274>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fc fe8e 	bl	8000bd0 <HAL_InitTick>
 8003eb4:	4603      	mov	r3, r0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40022000 	.word	0x40022000
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	04c4b400 	.word	0x04c4b400
 8003ecc:	080098d4 	.word	0x080098d4
 8003ed0:	20000000 	.word	0x20000000
 8003ed4:	200000c8 	.word	0x200000c8

08003ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ede:	4b2c      	ldr	r3, [pc, #176]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d102      	bne.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eea:	4b2a      	ldr	r3, [pc, #168]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	e047      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ef0:	4b27      	ldr	r3, [pc, #156]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 030c 	and.w	r3, r3, #12
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d102      	bne.n	8003f02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003efc:	4b26      	ldr	r3, [pc, #152]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	e03e      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f02:	4b23      	ldr	r3, [pc, #140]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
 8003f0a:	2b0c      	cmp	r3, #12
 8003f0c:	d136      	bne.n	8003f7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f0e:	4b20      	ldr	r3, [pc, #128]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f18:	4b1d      	ldr	r3, [pc, #116]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	3301      	adds	r3, #1
 8003f24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d10c      	bne.n	8003f46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f34:	4a16      	ldr	r2, [pc, #88]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f36:	68d2      	ldr	r2, [r2, #12]
 8003f38:	0a12      	lsrs	r2, r2, #8
 8003f3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f3e:	fb02 f303 	mul.w	r3, r2, r3
 8003f42:	617b      	str	r3, [r7, #20]
      break;
 8003f44:	e00c      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f46:	4a13      	ldr	r2, [pc, #76]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4e:	4a10      	ldr	r2, [pc, #64]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f50:	68d2      	ldr	r2, [r2, #12]
 8003f52:	0a12      	lsrs	r2, r2, #8
 8003f54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	617b      	str	r3, [r7, #20]
      break;
 8003f5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f60:	4b0b      	ldr	r3, [pc, #44]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	0e5b      	lsrs	r3, r3, #25
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	e001      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f80:	693b      	ldr	r3, [r7, #16]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40021000 	.word	0x40021000
 8003f94:	00f42400 	.word	0x00f42400
 8003f98:	016e3600 	.word	0x016e3600

08003f9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa0:	4b03      	ldr	r3, [pc, #12]	@ (8003fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20000000 	.word	0x20000000

08003fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fb8:	f7ff fff0 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	0a1b      	lsrs	r3, r3, #8
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	4904      	ldr	r1, [pc, #16]	@ (8003fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fca:	5ccb      	ldrb	r3, [r1, r3]
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	080098e4 	.word	0x080098e4

08003fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fe4:	f7ff ffda 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	0adb      	lsrs	r3, r3, #11
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	4904      	ldr	r1, [pc, #16]	@ (8004008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ff6:	5ccb      	ldrb	r3, [r1, r3]
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004000:	4618      	mov	r0, r3
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40021000 	.word	0x40021000
 8004008:	080098e4 	.word	0x080098e4

0800400c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	220f      	movs	r2, #15
 800401a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800401c:	4b12      	ldr	r3, [pc, #72]	@ (8004068 <HAL_RCC_GetClockConfig+0x5c>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0203 	and.w	r2, r3, #3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004028:	4b0f      	ldr	r3, [pc, #60]	@ (8004068 <HAL_RCC_GetClockConfig+0x5c>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004034:	4b0c      	ldr	r3, [pc, #48]	@ (8004068 <HAL_RCC_GetClockConfig+0x5c>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004040:	4b09      	ldr	r3, [pc, #36]	@ (8004068 <HAL_RCC_GetClockConfig+0x5c>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	08db      	lsrs	r3, r3, #3
 8004046:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800404e:	4b07      	ldr	r3, [pc, #28]	@ (800406c <HAL_RCC_GetClockConfig+0x60>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 020f 	and.w	r2, r3, #15
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	601a      	str	r2, [r3, #0]
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
 800406c:	40022000 	.word	0x40022000

08004070 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004076:	4b1e      	ldr	r3, [pc, #120]	@ (80040f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004080:	4b1b      	ldr	r3, [pc, #108]	@ (80040f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	3301      	adds	r3, #1
 800408c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b03      	cmp	r3, #3
 8004092:	d10c      	bne.n	80040ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004094:	4a17      	ldr	r2, [pc, #92]	@ (80040f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	4a14      	ldr	r2, [pc, #80]	@ (80040f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800409e:	68d2      	ldr	r2, [r2, #12]
 80040a0:	0a12      	lsrs	r2, r2, #8
 80040a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040a6:	fb02 f303 	mul.w	r3, r2, r3
 80040aa:	617b      	str	r3, [r7, #20]
    break;
 80040ac:	e00c      	b.n	80040c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040ae:	4a12      	ldr	r2, [pc, #72]	@ (80040f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b6:	4a0e      	ldr	r2, [pc, #56]	@ (80040f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040b8:	68d2      	ldr	r2, [r2, #12]
 80040ba:	0a12      	lsrs	r2, r2, #8
 80040bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040c0:	fb02 f303 	mul.w	r3, r2, r3
 80040c4:	617b      	str	r3, [r7, #20]
    break;
 80040c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040c8:	4b09      	ldr	r3, [pc, #36]	@ (80040f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	0e5b      	lsrs	r3, r3, #25
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	3301      	adds	r3, #1
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80040e2:	687b      	ldr	r3, [r7, #4]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	40021000 	.word	0x40021000
 80040f4:	016e3600 	.word	0x016e3600
 80040f8:	00f42400 	.word	0x00f42400

080040fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004104:	2300      	movs	r3, #0
 8004106:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004108:	2300      	movs	r3, #0
 800410a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8098 	beq.w	800424a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800411a:	2300      	movs	r3, #0
 800411c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800411e:	4b43      	ldr	r3, [pc, #268]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10d      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800412a:	4b40      	ldr	r3, [pc, #256]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800412c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412e:	4a3f      	ldr	r2, [pc, #252]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004134:	6593      	str	r3, [r2, #88]	@ 0x58
 8004136:	4b3d      	ldr	r3, [pc, #244]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800413e:	60bb      	str	r3, [r7, #8]
 8004140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004142:	2301      	movs	r3, #1
 8004144:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004146:	4b3a      	ldr	r3, [pc, #232]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a39      	ldr	r2, [pc, #228]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004150:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004152:	f7fd fd55 	bl	8001c00 <HAL_GetTick>
 8004156:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004158:	e009      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415a:	f7fd fd51 	bl	8001c00 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d902      	bls.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	74fb      	strb	r3, [r7, #19]
        break;
 800416c:	e005      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800416e:	4b30      	ldr	r3, [pc, #192]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0ef      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d159      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004180:	4b2a      	ldr	r3, [pc, #168]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800418a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d01e      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	429a      	cmp	r2, r3
 800419a:	d019      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800419c:	4b23      	ldr	r3, [pc, #140]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041a8:	4b20      	ldr	r3, [pc, #128]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ae:	4a1f      	ldr	r2, [pc, #124]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041b8:	4b1c      	ldr	r3, [pc, #112]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041be:	4a1b      	ldr	r2, [pc, #108]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041c8:	4a18      	ldr	r2, [pc, #96]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041da:	f7fd fd11 	bl	8001c00 <HAL_GetTick>
 80041de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e0:	e00b      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e2:	f7fd fd0d 	bl	8001c00 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d902      	bls.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	74fb      	strb	r3, [r7, #19]
            break;
 80041f8:	e006      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041fa:	4b0c      	ldr	r3, [pc, #48]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0ec      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004208:	7cfb      	ldrb	r3, [r7, #19]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800420e:	4b07      	ldr	r3, [pc, #28]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004214:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800421c:	4903      	ldr	r1, [pc, #12]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004224:	e008      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004226:	7cfb      	ldrb	r3, [r7, #19]
 8004228:	74bb      	strb	r3, [r7, #18]
 800422a:	e005      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800422c:	40021000 	.word	0x40021000
 8004230:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	7cfb      	ldrb	r3, [r7, #19]
 8004236:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004238:	7c7b      	ldrb	r3, [r7, #17]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d105      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800423e:	4ba7      	ldr	r3, [pc, #668]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004242:	4aa6      	ldr	r2, [pc, #664]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004244:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004248:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004256:	4ba1      	ldr	r3, [pc, #644]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425c:	f023 0203 	bic.w	r2, r3, #3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	499d      	ldr	r1, [pc, #628]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004278:	4b98      	ldr	r3, [pc, #608]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427e:	f023 020c 	bic.w	r2, r3, #12
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	4995      	ldr	r1, [pc, #596]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800429a:	4b90      	ldr	r3, [pc, #576]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	498c      	ldr	r1, [pc, #560]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042bc:	4b87      	ldr	r3, [pc, #540]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	4984      	ldr	r1, [pc, #528]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042de:	4b7f      	ldr	r3, [pc, #508]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	497b      	ldr	r1, [pc, #492]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004300:	4b76      	ldr	r3, [pc, #472]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004306:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	4973      	ldr	r1, [pc, #460]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004322:	4b6e      	ldr	r3, [pc, #440]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004328:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	496a      	ldr	r1, [pc, #424]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004344:	4b65      	ldr	r3, [pc, #404]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	4962      	ldr	r1, [pc, #392]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004366:	4b5d      	ldr	r3, [pc, #372]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	4959      	ldr	r1, [pc, #356]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004388:	4b54      	ldr	r3, [pc, #336]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800438a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800438e:	f023 0203 	bic.w	r2, r3, #3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004396:	4951      	ldr	r1, [pc, #324]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043aa:	4b4c      	ldr	r3, [pc, #304]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b8:	4948      	ldr	r1, [pc, #288]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d015      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043cc:	4b43      	ldr	r3, [pc, #268]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043da:	4940      	ldr	r1, [pc, #256]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043ea:	d105      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ec:	4b3b      	ldr	r3, [pc, #236]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4a3a      	ldr	r2, [pc, #232]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043f6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004400:	2b00      	cmp	r3, #0
 8004402:	d015      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004404:	4b35      	ldr	r3, [pc, #212]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004412:	4932      	ldr	r1, [pc, #200]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800441e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004422:	d105      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004424:	4b2d      	ldr	r3, [pc, #180]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4a2c      	ldr	r2, [pc, #176]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800442a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800442e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d015      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800443c:	4b27      	ldr	r3, [pc, #156]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004442:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444a:	4924      	ldr	r1, [pc, #144]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004456:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800445a:	d105      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800445c:	4b1f      	ldr	r3, [pc, #124]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4a1e      	ldr	r2, [pc, #120]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004466:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d015      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004474:	4b19      	ldr	r3, [pc, #100]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800447a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004482:	4916      	ldr	r1, [pc, #88]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004492:	d105      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004494:	4b11      	ldr	r3, [pc, #68]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	4a10      	ldr	r2, [pc, #64]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800449a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800449e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d019      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044ac:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	4908      	ldr	r1, [pc, #32]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044ca:	d109      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044cc:	4b03      	ldr	r3, [pc, #12]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4a02      	ldr	r2, [pc, #8]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044d6:	60d3      	str	r3, [r2, #12]
 80044d8:	e002      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d015      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044ec:	4b29      	ldr	r3, [pc, #164]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fa:	4926      	ldr	r1, [pc, #152]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004506:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800450a:	d105      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800450c:	4b21      	ldr	r3, [pc, #132]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a20      	ldr	r2, [pc, #128]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004516:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d015      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004524:	4b1b      	ldr	r3, [pc, #108]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004532:	4918      	ldr	r1, [pc, #96]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004542:	d105      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004544:	4b13      	ldr	r3, [pc, #76]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a12      	ldr	r2, [pc, #72]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800454a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800454e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d015      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800455c:	4b0d      	ldr	r3, [pc, #52]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800455e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004562:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800456a:	490a      	ldr	r1, [pc, #40]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004576:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800457a:	d105      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800457c:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a04      	ldr	r2, [pc, #16]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004582:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004586:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004588:	7cbb      	ldrb	r3, [r7, #18]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000

08004598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e049      	b.n	800463e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fc fe5c 	bl	800127c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4619      	mov	r1, r3
 80045d6:	4610      	mov	r0, r2
 80045d8:	f000 fd66 	bl	80050a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a1a      	ldr	r2, [r3, #32]
 8004654:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10f      	bne.n	800467e <HAL_TIM_Base_Stop+0x38>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6a1a      	ldr	r2, [r3, #32]
 8004664:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004668:	4013      	ands	r3, r2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d107      	bne.n	800467e <HAL_TIM_Base_Stop+0x38>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0201 	bic.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d001      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e054      	b.n	8004756 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a26      	ldr	r2, [pc, #152]	@ (8004764 <HAL_TIM_Base_Start_IT+0xd0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d022      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x80>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046d6:	d01d      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x80>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a22      	ldr	r2, [pc, #136]	@ (8004768 <HAL_TIM_Base_Start_IT+0xd4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d018      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x80>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a21      	ldr	r2, [pc, #132]	@ (800476c <HAL_TIM_Base_Start_IT+0xd8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d013      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x80>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004770 <HAL_TIM_Base_Start_IT+0xdc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00e      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x80>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004774 <HAL_TIM_Base_Start_IT+0xe0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d009      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x80>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1c      	ldr	r2, [pc, #112]	@ (8004778 <HAL_TIM_Base_Start_IT+0xe4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x80>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1b      	ldr	r2, [pc, #108]	@ (800477c <HAL_TIM_Base_Start_IT+0xe8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d115      	bne.n	8004740 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	4b19      	ldr	r3, [pc, #100]	@ (8004780 <HAL_TIM_Base_Start_IT+0xec>)
 800471c:	4013      	ands	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b06      	cmp	r3, #6
 8004724:	d015      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0xbe>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800472c:	d011      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0201 	orr.w	r2, r2, #1
 800473c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473e:	e008      	b.n	8004752 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	e000      	b.n	8004754 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004752:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40012c00 	.word	0x40012c00
 8004768:	40000400 	.word	0x40000400
 800476c:	40000800 	.word	0x40000800
 8004770:	40000c00 	.word	0x40000c00
 8004774:	40013400 	.word	0x40013400
 8004778:	40014000 	.word	0x40014000
 800477c:	40015000 	.word	0x40015000
 8004780:	00010007 	.word	0x00010007

08004784 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e049      	b.n	800482a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fc fce4 	bl	8001178 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3304      	adds	r3, #4
 80047c0:	4619      	mov	r1, r3
 80047c2:	4610      	mov	r0, r2
 80047c4:	f000 fc70 	bl	80050a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d109      	bne.n	8004858 <HAL_TIM_PWM_Start+0x24>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	bf14      	ite	ne
 8004850:	2301      	movne	r3, #1
 8004852:	2300      	moveq	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	e03c      	b.n	80048d2 <HAL_TIM_PWM_Start+0x9e>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b04      	cmp	r3, #4
 800485c:	d109      	bne.n	8004872 <HAL_TIM_PWM_Start+0x3e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b01      	cmp	r3, #1
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	e02f      	b.n	80048d2 <HAL_TIM_PWM_Start+0x9e>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d109      	bne.n	800488c <HAL_TIM_PWM_Start+0x58>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e022      	b.n	80048d2 <HAL_TIM_PWM_Start+0x9e>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b0c      	cmp	r3, #12
 8004890:	d109      	bne.n	80048a6 <HAL_TIM_PWM_Start+0x72>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	bf14      	ite	ne
 800489e:	2301      	movne	r3, #1
 80048a0:	2300      	moveq	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	e015      	b.n	80048d2 <HAL_TIM_PWM_Start+0x9e>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d109      	bne.n	80048c0 <HAL_TIM_PWM_Start+0x8c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	bf14      	ite	ne
 80048b8:	2301      	movne	r3, #1
 80048ba:	2300      	moveq	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	e008      	b.n	80048d2 <HAL_TIM_PWM_Start+0x9e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e0a6      	b.n	8004a28 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <HAL_TIM_PWM_Start+0xb6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048e8:	e023      	b.n	8004932 <HAL_TIM_PWM_Start+0xfe>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_PWM_Start+0xc6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048f8:	e01b      	b.n	8004932 <HAL_TIM_PWM_Start+0xfe>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d104      	bne.n	800490a <HAL_TIM_PWM_Start+0xd6>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004908:	e013      	b.n	8004932 <HAL_TIM_PWM_Start+0xfe>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b0c      	cmp	r3, #12
 800490e:	d104      	bne.n	800491a <HAL_TIM_PWM_Start+0xe6>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004918:	e00b      	b.n	8004932 <HAL_TIM_PWM_Start+0xfe>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b10      	cmp	r3, #16
 800491e:	d104      	bne.n	800492a <HAL_TIM_PWM_Start+0xf6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004928:	e003      	b.n	8004932 <HAL_TIM_PWM_Start+0xfe>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2201      	movs	r2, #1
 8004938:	6839      	ldr	r1, [r7, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f001 f806 	bl	800594c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a3a      	ldr	r2, [pc, #232]	@ (8004a30 <HAL_TIM_PWM_Start+0x1fc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d018      	beq.n	800497c <HAL_TIM_PWM_Start+0x148>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a39      	ldr	r2, [pc, #228]	@ (8004a34 <HAL_TIM_PWM_Start+0x200>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d013      	beq.n	800497c <HAL_TIM_PWM_Start+0x148>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a37      	ldr	r2, [pc, #220]	@ (8004a38 <HAL_TIM_PWM_Start+0x204>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00e      	beq.n	800497c <HAL_TIM_PWM_Start+0x148>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a36      	ldr	r2, [pc, #216]	@ (8004a3c <HAL_TIM_PWM_Start+0x208>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d009      	beq.n	800497c <HAL_TIM_PWM_Start+0x148>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a34      	ldr	r2, [pc, #208]	@ (8004a40 <HAL_TIM_PWM_Start+0x20c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d004      	beq.n	800497c <HAL_TIM_PWM_Start+0x148>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a33      	ldr	r2, [pc, #204]	@ (8004a44 <HAL_TIM_PWM_Start+0x210>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d101      	bne.n	8004980 <HAL_TIM_PWM_Start+0x14c>
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <HAL_TIM_PWM_Start+0x14e>
 8004980:	2300      	movs	r3, #0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d007      	beq.n	8004996 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004994:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a25      	ldr	r2, [pc, #148]	@ (8004a30 <HAL_TIM_PWM_Start+0x1fc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d022      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x1b2>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a8:	d01d      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x1b2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a26      	ldr	r2, [pc, #152]	@ (8004a48 <HAL_TIM_PWM_Start+0x214>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d018      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x1b2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a24      	ldr	r2, [pc, #144]	@ (8004a4c <HAL_TIM_PWM_Start+0x218>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x1b2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a23      	ldr	r2, [pc, #140]	@ (8004a50 <HAL_TIM_PWM_Start+0x21c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00e      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x1b2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a19      	ldr	r2, [pc, #100]	@ (8004a34 <HAL_TIM_PWM_Start+0x200>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d009      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x1b2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a18      	ldr	r2, [pc, #96]	@ (8004a38 <HAL_TIM_PWM_Start+0x204>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d004      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x1b2>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a18      	ldr	r2, [pc, #96]	@ (8004a44 <HAL_TIM_PWM_Start+0x210>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d115      	bne.n	8004a12 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	4b19      	ldr	r3, [pc, #100]	@ (8004a54 <HAL_TIM_PWM_Start+0x220>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b06      	cmp	r3, #6
 80049f6:	d015      	beq.n	8004a24 <HAL_TIM_PWM_Start+0x1f0>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049fe:	d011      	beq.n	8004a24 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a10:	e008      	b.n	8004a24 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0201 	orr.w	r2, r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	e000      	b.n	8004a26 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40012c00 	.word	0x40012c00
 8004a34:	40013400 	.word	0x40013400
 8004a38:	40014000 	.word	0x40014000
 8004a3c:	40014400 	.word	0x40014400
 8004a40:	40014800 	.word	0x40014800
 8004a44:	40015000 	.word	0x40015000
 8004a48:	40000400 	.word	0x40000400
 8004a4c:	40000800 	.word	0x40000800
 8004a50:	40000c00 	.word	0x40000c00
 8004a54:	00010007 	.word	0x00010007

08004a58 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2200      	movs	r2, #0
 8004a68:	6839      	ldr	r1, [r7, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 ff6e 	bl	800594c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a40      	ldr	r2, [pc, #256]	@ (8004b78 <HAL_TIM_PWM_Stop+0x120>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d018      	beq.n	8004aac <HAL_TIM_PWM_Stop+0x54>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a3f      	ldr	r2, [pc, #252]	@ (8004b7c <HAL_TIM_PWM_Stop+0x124>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d013      	beq.n	8004aac <HAL_TIM_PWM_Stop+0x54>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a3d      	ldr	r2, [pc, #244]	@ (8004b80 <HAL_TIM_PWM_Stop+0x128>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00e      	beq.n	8004aac <HAL_TIM_PWM_Stop+0x54>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a3c      	ldr	r2, [pc, #240]	@ (8004b84 <HAL_TIM_PWM_Stop+0x12c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_TIM_PWM_Stop+0x54>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a3a      	ldr	r2, [pc, #232]	@ (8004b88 <HAL_TIM_PWM_Stop+0x130>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_TIM_PWM_Stop+0x54>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a39      	ldr	r2, [pc, #228]	@ (8004b8c <HAL_TIM_PWM_Stop+0x134>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d101      	bne.n	8004ab0 <HAL_TIM_PWM_Stop+0x58>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <HAL_TIM_PWM_Stop+0x5a>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d017      	beq.n	8004ae6 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6a1a      	ldr	r2, [r3, #32]
 8004abc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10f      	bne.n	8004ae6 <HAL_TIM_PWM_Stop+0x8e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6a1a      	ldr	r2, [r3, #32]
 8004acc:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d107      	bne.n	8004ae6 <HAL_TIM_PWM_Stop+0x8e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ae4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a1a      	ldr	r2, [r3, #32]
 8004aec:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10f      	bne.n	8004b16 <HAL_TIM_PWM_Stop+0xbe>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6a1a      	ldr	r2, [r3, #32]
 8004afc:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d107      	bne.n	8004b16 <HAL_TIM_PWM_Stop+0xbe>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0201 	bic.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d104      	bne.n	8004b26 <HAL_TIM_PWM_Stop+0xce>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b24:	e023      	b.n	8004b6e <HAL_TIM_PWM_Stop+0x116>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d104      	bne.n	8004b36 <HAL_TIM_PWM_Stop+0xde>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b34:	e01b      	b.n	8004b6e <HAL_TIM_PWM_Stop+0x116>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d104      	bne.n	8004b46 <HAL_TIM_PWM_Stop+0xee>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b44:	e013      	b.n	8004b6e <HAL_TIM_PWM_Stop+0x116>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b0c      	cmp	r3, #12
 8004b4a:	d104      	bne.n	8004b56 <HAL_TIM_PWM_Stop+0xfe>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b54:	e00b      	b.n	8004b6e <HAL_TIM_PWM_Stop+0x116>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b10      	cmp	r3, #16
 8004b5a:	d104      	bne.n	8004b66 <HAL_TIM_PWM_Stop+0x10e>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b64:	e003      	b.n	8004b6e <HAL_TIM_PWM_Stop+0x116>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40013400 	.word	0x40013400
 8004b80:	40014000 	.word	0x40014000
 8004b84:	40014400 	.word	0x40014400
 8004b88:	40014800 	.word	0x40014800
 8004b8c:	40015000 	.word	0x40015000

08004b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d020      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01b      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0202 	mvn.w	r2, #2
 8004bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fa46 	bl	800506c <HAL_TIM_IC_CaptureCallback>
 8004be0:	e005      	b.n	8004bee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fa38 	bl	8005058 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fa49 	bl	8005080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d020      	beq.n	8004c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01b      	beq.n	8004c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0204 	mvn.w	r2, #4
 8004c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2202      	movs	r2, #2
 8004c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fa20 	bl	800506c <HAL_TIM_IC_CaptureCallback>
 8004c2c:	e005      	b.n	8004c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fa12 	bl	8005058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fa23 	bl	8005080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d020      	beq.n	8004c8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f003 0308 	and.w	r3, r3, #8
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01b      	beq.n	8004c8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0208 	mvn.w	r2, #8
 8004c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2204      	movs	r2, #4
 8004c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f9fa 	bl	800506c <HAL_TIM_IC_CaptureCallback>
 8004c78:	e005      	b.n	8004c86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f9ec 	bl	8005058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f9fd 	bl	8005080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d020      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01b      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0210 	mvn.w	r2, #16
 8004ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2208      	movs	r2, #8
 8004cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f9d4 	bl	800506c <HAL_TIM_IC_CaptureCallback>
 8004cc4:	e005      	b.n	8004cd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f9c6 	bl	8005058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f9d7 	bl	8005080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00c      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0201 	mvn.w	r2, #1
 8004cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fc fd1a 	bl	8001730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d104      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00c      	beq.n	8004d2a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f001 f939 	bl	8005f9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00c      	beq.n	8004d4e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d007      	beq.n	8004d4e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f001 f931 	bl	8005fb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00c      	beq.n	8004d72 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f991 	bl	8005094 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00c      	beq.n	8004d96 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d007      	beq.n	8004d96 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f06f 0220 	mvn.w	r2, #32
 8004d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f001 f8f9 	bl	8005f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00c      	beq.n	8004dba <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d007      	beq.n	8004dba <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f001 f905 	bl	8005fc4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00c      	beq.n	8004dde <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f001 f8fd 	bl	8005fd8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00c      	beq.n	8004e02 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f001 f8f5 	bl	8005fec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00c      	beq.n	8004e26 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d007      	beq.n	8004e26 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f001 f8ed 	bl	8006000 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e0ff      	b.n	800504e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b14      	cmp	r3, #20
 8004e5a:	f200 80f0 	bhi.w	800503e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e64:	08004eb9 	.word	0x08004eb9
 8004e68:	0800503f 	.word	0x0800503f
 8004e6c:	0800503f 	.word	0x0800503f
 8004e70:	0800503f 	.word	0x0800503f
 8004e74:	08004ef9 	.word	0x08004ef9
 8004e78:	0800503f 	.word	0x0800503f
 8004e7c:	0800503f 	.word	0x0800503f
 8004e80:	0800503f 	.word	0x0800503f
 8004e84:	08004f3b 	.word	0x08004f3b
 8004e88:	0800503f 	.word	0x0800503f
 8004e8c:	0800503f 	.word	0x0800503f
 8004e90:	0800503f 	.word	0x0800503f
 8004e94:	08004f7b 	.word	0x08004f7b
 8004e98:	0800503f 	.word	0x0800503f
 8004e9c:	0800503f 	.word	0x0800503f
 8004ea0:	0800503f 	.word	0x0800503f
 8004ea4:	08004fbd 	.word	0x08004fbd
 8004ea8:	0800503f 	.word	0x0800503f
 8004eac:	0800503f 	.word	0x0800503f
 8004eb0:	0800503f 	.word	0x0800503f
 8004eb4:	08004ffd 	.word	0x08004ffd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 f9a6 	bl	8005210 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0208 	orr.w	r2, r2, #8
 8004ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0204 	bic.w	r2, r2, #4
 8004ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6999      	ldr	r1, [r3, #24]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	691a      	ldr	r2, [r3, #16]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	619a      	str	r2, [r3, #24]
      break;
 8004ef6:	e0a5      	b.n	8005044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fa20 	bl	8005344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6999      	ldr	r1, [r3, #24]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	021a      	lsls	r2, r3, #8
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	619a      	str	r2, [r3, #24]
      break;
 8004f38:	e084      	b.n	8005044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fa93 	bl	800546c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69da      	ldr	r2, [r3, #28]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0208 	orr.w	r2, r2, #8
 8004f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0204 	bic.w	r2, r2, #4
 8004f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69d9      	ldr	r1, [r3, #28]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	61da      	str	r2, [r3, #28]
      break;
 8004f78:	e064      	b.n	8005044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fb05 	bl	8005590 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69da      	ldr	r2, [r3, #28]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69d9      	ldr	r1, [r3, #28]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	021a      	lsls	r2, r3, #8
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	61da      	str	r2, [r3, #28]
      break;
 8004fba:	e043      	b.n	8005044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fb78 	bl	80056b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0208 	orr.w	r2, r2, #8
 8004fd6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0204 	bic.w	r2, r2, #4
 8004fe6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004ffa:	e023      	b.n	8005044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fbc2 	bl	800578c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005016:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005026:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	021a      	lsls	r2, r3, #8
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800503c:	e002      	b.n	8005044 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	75fb      	strb	r3, [r7, #23]
      break;
 8005042:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800504c:	7dfb      	ldrb	r3, [r7, #23]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop

08005058 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a4c      	ldr	r2, [pc, #304]	@ (80051ec <TIM_Base_SetConfig+0x144>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d017      	beq.n	80050f0 <TIM_Base_SetConfig+0x48>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c6:	d013      	beq.n	80050f0 <TIM_Base_SetConfig+0x48>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a49      	ldr	r2, [pc, #292]	@ (80051f0 <TIM_Base_SetConfig+0x148>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00f      	beq.n	80050f0 <TIM_Base_SetConfig+0x48>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a48      	ldr	r2, [pc, #288]	@ (80051f4 <TIM_Base_SetConfig+0x14c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00b      	beq.n	80050f0 <TIM_Base_SetConfig+0x48>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a47      	ldr	r2, [pc, #284]	@ (80051f8 <TIM_Base_SetConfig+0x150>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d007      	beq.n	80050f0 <TIM_Base_SetConfig+0x48>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a46      	ldr	r2, [pc, #280]	@ (80051fc <TIM_Base_SetConfig+0x154>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d003      	beq.n	80050f0 <TIM_Base_SetConfig+0x48>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a45      	ldr	r2, [pc, #276]	@ (8005200 <TIM_Base_SetConfig+0x158>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d108      	bne.n	8005102 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a39      	ldr	r2, [pc, #228]	@ (80051ec <TIM_Base_SetConfig+0x144>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d023      	beq.n	8005152 <TIM_Base_SetConfig+0xaa>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005110:	d01f      	beq.n	8005152 <TIM_Base_SetConfig+0xaa>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a36      	ldr	r2, [pc, #216]	@ (80051f0 <TIM_Base_SetConfig+0x148>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d01b      	beq.n	8005152 <TIM_Base_SetConfig+0xaa>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a35      	ldr	r2, [pc, #212]	@ (80051f4 <TIM_Base_SetConfig+0x14c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d017      	beq.n	8005152 <TIM_Base_SetConfig+0xaa>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a34      	ldr	r2, [pc, #208]	@ (80051f8 <TIM_Base_SetConfig+0x150>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d013      	beq.n	8005152 <TIM_Base_SetConfig+0xaa>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a33      	ldr	r2, [pc, #204]	@ (80051fc <TIM_Base_SetConfig+0x154>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00f      	beq.n	8005152 <TIM_Base_SetConfig+0xaa>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a33      	ldr	r2, [pc, #204]	@ (8005204 <TIM_Base_SetConfig+0x15c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00b      	beq.n	8005152 <TIM_Base_SetConfig+0xaa>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a32      	ldr	r2, [pc, #200]	@ (8005208 <TIM_Base_SetConfig+0x160>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d007      	beq.n	8005152 <TIM_Base_SetConfig+0xaa>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a31      	ldr	r2, [pc, #196]	@ (800520c <TIM_Base_SetConfig+0x164>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d003      	beq.n	8005152 <TIM_Base_SetConfig+0xaa>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a2c      	ldr	r2, [pc, #176]	@ (8005200 <TIM_Base_SetConfig+0x158>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d108      	bne.n	8005164 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a18      	ldr	r2, [pc, #96]	@ (80051ec <TIM_Base_SetConfig+0x144>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d013      	beq.n	80051b8 <TIM_Base_SetConfig+0x110>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a1a      	ldr	r2, [pc, #104]	@ (80051fc <TIM_Base_SetConfig+0x154>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00f      	beq.n	80051b8 <TIM_Base_SetConfig+0x110>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a1a      	ldr	r2, [pc, #104]	@ (8005204 <TIM_Base_SetConfig+0x15c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00b      	beq.n	80051b8 <TIM_Base_SetConfig+0x110>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a19      	ldr	r2, [pc, #100]	@ (8005208 <TIM_Base_SetConfig+0x160>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d007      	beq.n	80051b8 <TIM_Base_SetConfig+0x110>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a18      	ldr	r2, [pc, #96]	@ (800520c <TIM_Base_SetConfig+0x164>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d003      	beq.n	80051b8 <TIM_Base_SetConfig+0x110>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a13      	ldr	r2, [pc, #76]	@ (8005200 <TIM_Base_SetConfig+0x158>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d103      	bne.n	80051c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d105      	bne.n	80051de <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f023 0201 	bic.w	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	611a      	str	r2, [r3, #16]
  }
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40000400 	.word	0x40000400
 80051f4:	40000800 	.word	0x40000800
 80051f8:	40000c00 	.word	0x40000c00
 80051fc:	40013400 	.word	0x40013400
 8005200:	40015000 	.word	0x40015000
 8005204:	40014000 	.word	0x40014000
 8005208:	40014400 	.word	0x40014400
 800520c:	40014800 	.word	0x40014800

08005210 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	f023 0201 	bic.w	r2, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800523e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0303 	bic.w	r3, r3, #3
 800524a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f023 0302 	bic.w	r3, r3, #2
 800525c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a30      	ldr	r2, [pc, #192]	@ (800532c <TIM_OC1_SetConfig+0x11c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <TIM_OC1_SetConfig+0x88>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a2f      	ldr	r2, [pc, #188]	@ (8005330 <TIM_OC1_SetConfig+0x120>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00f      	beq.n	8005298 <TIM_OC1_SetConfig+0x88>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a2e      	ldr	r2, [pc, #184]	@ (8005334 <TIM_OC1_SetConfig+0x124>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00b      	beq.n	8005298 <TIM_OC1_SetConfig+0x88>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a2d      	ldr	r2, [pc, #180]	@ (8005338 <TIM_OC1_SetConfig+0x128>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d007      	beq.n	8005298 <TIM_OC1_SetConfig+0x88>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a2c      	ldr	r2, [pc, #176]	@ (800533c <TIM_OC1_SetConfig+0x12c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d003      	beq.n	8005298 <TIM_OC1_SetConfig+0x88>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a2b      	ldr	r2, [pc, #172]	@ (8005340 <TIM_OC1_SetConfig+0x130>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d10c      	bne.n	80052b2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f023 0308 	bic.w	r3, r3, #8
 800529e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f023 0304 	bic.w	r3, r3, #4
 80052b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a1d      	ldr	r2, [pc, #116]	@ (800532c <TIM_OC1_SetConfig+0x11c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d013      	beq.n	80052e2 <TIM_OC1_SetConfig+0xd2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005330 <TIM_OC1_SetConfig+0x120>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00f      	beq.n	80052e2 <TIM_OC1_SetConfig+0xd2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005334 <TIM_OC1_SetConfig+0x124>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00b      	beq.n	80052e2 <TIM_OC1_SetConfig+0xd2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005338 <TIM_OC1_SetConfig+0x128>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d007      	beq.n	80052e2 <TIM_OC1_SetConfig+0xd2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a19      	ldr	r2, [pc, #100]	@ (800533c <TIM_OC1_SetConfig+0x12c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d003      	beq.n	80052e2 <TIM_OC1_SetConfig+0xd2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a18      	ldr	r2, [pc, #96]	@ (8005340 <TIM_OC1_SetConfig+0x130>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d111      	bne.n	8005306 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	621a      	str	r2, [r3, #32]
}
 8005320:	bf00      	nop
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	40012c00 	.word	0x40012c00
 8005330:	40013400 	.word	0x40013400
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800
 8005340:	40015000 	.word	0x40015000

08005344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f023 0210 	bic.w	r2, r3, #16
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005372:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800537e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	021b      	lsls	r3, r3, #8
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 0320 	bic.w	r3, r3, #32
 8005392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005454 <TIM_OC2_SetConfig+0x110>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d007      	beq.n	80053b8 <TIM_OC2_SetConfig+0x74>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005458 <TIM_OC2_SetConfig+0x114>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d003      	beq.n	80053b8 <TIM_OC2_SetConfig+0x74>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a2a      	ldr	r2, [pc, #168]	@ (800545c <TIM_OC2_SetConfig+0x118>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d10d      	bne.n	80053d4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005454 <TIM_OC2_SetConfig+0x110>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d013      	beq.n	8005404 <TIM_OC2_SetConfig+0xc0>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a1e      	ldr	r2, [pc, #120]	@ (8005458 <TIM_OC2_SetConfig+0x114>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00f      	beq.n	8005404 <TIM_OC2_SetConfig+0xc0>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005460 <TIM_OC2_SetConfig+0x11c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00b      	beq.n	8005404 <TIM_OC2_SetConfig+0xc0>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005464 <TIM_OC2_SetConfig+0x120>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d007      	beq.n	8005404 <TIM_OC2_SetConfig+0xc0>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005468 <TIM_OC2_SetConfig+0x124>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_OC2_SetConfig+0xc0>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a17      	ldr	r2, [pc, #92]	@ (800545c <TIM_OC2_SetConfig+0x118>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d113      	bne.n	800542c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800540a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40013400 	.word	0x40013400
 800545c:	40015000 	.word	0x40015000
 8005460:	40014000 	.word	0x40014000
 8005464:	40014400 	.word	0x40014400
 8005468:	40014800 	.word	0x40014800

0800546c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800549a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800549e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0303 	bic.w	r3, r3, #3
 80054a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	021b      	lsls	r3, r3, #8
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005578 <TIM_OC3_SetConfig+0x10c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d007      	beq.n	80054de <TIM_OC3_SetConfig+0x72>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a2a      	ldr	r2, [pc, #168]	@ (800557c <TIM_OC3_SetConfig+0x110>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d003      	beq.n	80054de <TIM_OC3_SetConfig+0x72>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a29      	ldr	r2, [pc, #164]	@ (8005580 <TIM_OC3_SetConfig+0x114>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d10d      	bne.n	80054fa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005578 <TIM_OC3_SetConfig+0x10c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d013      	beq.n	800552a <TIM_OC3_SetConfig+0xbe>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a1d      	ldr	r2, [pc, #116]	@ (800557c <TIM_OC3_SetConfig+0x110>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00f      	beq.n	800552a <TIM_OC3_SetConfig+0xbe>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a1d      	ldr	r2, [pc, #116]	@ (8005584 <TIM_OC3_SetConfig+0x118>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00b      	beq.n	800552a <TIM_OC3_SetConfig+0xbe>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a1c      	ldr	r2, [pc, #112]	@ (8005588 <TIM_OC3_SetConfig+0x11c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d007      	beq.n	800552a <TIM_OC3_SetConfig+0xbe>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a1b      	ldr	r2, [pc, #108]	@ (800558c <TIM_OC3_SetConfig+0x120>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <TIM_OC3_SetConfig+0xbe>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a16      	ldr	r2, [pc, #88]	@ (8005580 <TIM_OC3_SetConfig+0x114>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d113      	bne.n	8005552 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	621a      	str	r2, [r3, #32]
}
 800556c:	bf00      	nop
 800556e:	371c      	adds	r7, #28
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40013400 	.word	0x40013400
 8005580:	40015000 	.word	0x40015000
 8005584:	40014000 	.word	0x40014000
 8005588:	40014400 	.word	0x40014400
 800558c:	40014800 	.word	0x40014800

08005590 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	031b      	lsls	r3, r3, #12
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a2c      	ldr	r2, [pc, #176]	@ (80056a0 <TIM_OC4_SetConfig+0x110>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_OC4_SetConfig+0x74>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a2b      	ldr	r2, [pc, #172]	@ (80056a4 <TIM_OC4_SetConfig+0x114>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_OC4_SetConfig+0x74>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a2a      	ldr	r2, [pc, #168]	@ (80056a8 <TIM_OC4_SetConfig+0x118>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d10d      	bne.n	8005620 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800560a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	031b      	lsls	r3, r3, #12
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800561e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a1f      	ldr	r2, [pc, #124]	@ (80056a0 <TIM_OC4_SetConfig+0x110>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d013      	beq.n	8005650 <TIM_OC4_SetConfig+0xc0>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a1e      	ldr	r2, [pc, #120]	@ (80056a4 <TIM_OC4_SetConfig+0x114>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00f      	beq.n	8005650 <TIM_OC4_SetConfig+0xc0>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a1e      	ldr	r2, [pc, #120]	@ (80056ac <TIM_OC4_SetConfig+0x11c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00b      	beq.n	8005650 <TIM_OC4_SetConfig+0xc0>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a1d      	ldr	r2, [pc, #116]	@ (80056b0 <TIM_OC4_SetConfig+0x120>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d007      	beq.n	8005650 <TIM_OC4_SetConfig+0xc0>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a1c      	ldr	r2, [pc, #112]	@ (80056b4 <TIM_OC4_SetConfig+0x124>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_OC4_SetConfig+0xc0>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a17      	ldr	r2, [pc, #92]	@ (80056a8 <TIM_OC4_SetConfig+0x118>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d113      	bne.n	8005678 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005656:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800565e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	019b      	lsls	r3, r3, #6
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	019b      	lsls	r3, r3, #6
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40013400 	.word	0x40013400
 80056a8:	40015000 	.word	0x40015000
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40014400 	.word	0x40014400
 80056b4:	40014800 	.word	0x40014800

080056b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80056fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	041b      	lsls	r3, r3, #16
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a19      	ldr	r2, [pc, #100]	@ (8005774 <TIM_OC5_SetConfig+0xbc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d013      	beq.n	800573a <TIM_OC5_SetConfig+0x82>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a18      	ldr	r2, [pc, #96]	@ (8005778 <TIM_OC5_SetConfig+0xc0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00f      	beq.n	800573a <TIM_OC5_SetConfig+0x82>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a17      	ldr	r2, [pc, #92]	@ (800577c <TIM_OC5_SetConfig+0xc4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00b      	beq.n	800573a <TIM_OC5_SetConfig+0x82>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a16      	ldr	r2, [pc, #88]	@ (8005780 <TIM_OC5_SetConfig+0xc8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <TIM_OC5_SetConfig+0x82>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a15      	ldr	r2, [pc, #84]	@ (8005784 <TIM_OC5_SetConfig+0xcc>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_OC5_SetConfig+0x82>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a14      	ldr	r2, [pc, #80]	@ (8005788 <TIM_OC5_SetConfig+0xd0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d109      	bne.n	800574e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005740:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	621a      	str	r2, [r3, #32]
}
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	40012c00 	.word	0x40012c00
 8005778:	40013400 	.word	0x40013400
 800577c:	40014000 	.word	0x40014000
 8005780:	40014400 	.word	0x40014400
 8005784:	40014800 	.word	0x40014800
 8005788:	40015000 	.word	0x40015000

0800578c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	051b      	lsls	r3, r3, #20
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a1a      	ldr	r2, [pc, #104]	@ (800584c <TIM_OC6_SetConfig+0xc0>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d013      	beq.n	8005810 <TIM_OC6_SetConfig+0x84>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a19      	ldr	r2, [pc, #100]	@ (8005850 <TIM_OC6_SetConfig+0xc4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00f      	beq.n	8005810 <TIM_OC6_SetConfig+0x84>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a18      	ldr	r2, [pc, #96]	@ (8005854 <TIM_OC6_SetConfig+0xc8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00b      	beq.n	8005810 <TIM_OC6_SetConfig+0x84>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a17      	ldr	r2, [pc, #92]	@ (8005858 <TIM_OC6_SetConfig+0xcc>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d007      	beq.n	8005810 <TIM_OC6_SetConfig+0x84>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a16      	ldr	r2, [pc, #88]	@ (800585c <TIM_OC6_SetConfig+0xd0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d003      	beq.n	8005810 <TIM_OC6_SetConfig+0x84>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a15      	ldr	r2, [pc, #84]	@ (8005860 <TIM_OC6_SetConfig+0xd4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d109      	bne.n	8005824 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005816:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	029b      	lsls	r3, r3, #10
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40012c00 	.word	0x40012c00
 8005850:	40013400 	.word	0x40013400
 8005854:	40014000 	.word	0x40014000
 8005858:	40014400 	.word	0x40014400
 800585c:	40014800 	.word	0x40014800
 8005860:	40015000 	.word	0x40015000

08005864 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	f023 0201 	bic.w	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4a28      	ldr	r2, [pc, #160]	@ (8005930 <TIM_TI1_SetConfig+0xcc>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01b      	beq.n	80058ca <TIM_TI1_SetConfig+0x66>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005898:	d017      	beq.n	80058ca <TIM_TI1_SetConfig+0x66>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4a25      	ldr	r2, [pc, #148]	@ (8005934 <TIM_TI1_SetConfig+0xd0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d013      	beq.n	80058ca <TIM_TI1_SetConfig+0x66>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4a24      	ldr	r2, [pc, #144]	@ (8005938 <TIM_TI1_SetConfig+0xd4>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00f      	beq.n	80058ca <TIM_TI1_SetConfig+0x66>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4a23      	ldr	r2, [pc, #140]	@ (800593c <TIM_TI1_SetConfig+0xd8>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00b      	beq.n	80058ca <TIM_TI1_SetConfig+0x66>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4a22      	ldr	r2, [pc, #136]	@ (8005940 <TIM_TI1_SetConfig+0xdc>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d007      	beq.n	80058ca <TIM_TI1_SetConfig+0x66>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4a21      	ldr	r2, [pc, #132]	@ (8005944 <TIM_TI1_SetConfig+0xe0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d003      	beq.n	80058ca <TIM_TI1_SetConfig+0x66>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4a20      	ldr	r2, [pc, #128]	@ (8005948 <TIM_TI1_SetConfig+0xe4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d101      	bne.n	80058ce <TIM_TI1_SetConfig+0x6a>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <TIM_TI1_SetConfig+0x6c>
 80058ce:	2300      	movs	r3, #0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0303 	bic.w	r3, r3, #3
 80058da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	e003      	b.n	80058ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f043 0301 	orr.w	r3, r3, #1
 80058ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f023 030a 	bic.w	r3, r3, #10
 8005908:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f003 030a 	and.w	r3, r3, #10
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	621a      	str	r2, [r3, #32]
}
 8005922:	bf00      	nop
 8005924:	371c      	adds	r7, #28
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	40012c00 	.word	0x40012c00
 8005934:	40000400 	.word	0x40000400
 8005938:	40000800 	.word	0x40000800
 800593c:	40000c00 	.word	0x40000c00
 8005940:	40013400 	.word	0x40013400
 8005944:	40014000 	.word	0x40014000
 8005948:	40015000 	.word	0x40015000

0800594c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f003 031f 	and.w	r3, r3, #31
 800595e:	2201      	movs	r2, #1
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a1a      	ldr	r2, [r3, #32]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	43db      	mvns	r3, r3
 800596e:	401a      	ands	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a1a      	ldr	r2, [r3, #32]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f003 031f 	and.w	r3, r3, #31
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	fa01 f303 	lsl.w	r3, r1, r3
 8005984:	431a      	orrs	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	621a      	str	r2, [r3, #32]
}
 800598a:	bf00      	nop
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b08a      	sub	sp, #40	@ 0x28
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e0a0      	b.n	8005aec <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fb fbfa 	bl	80011b8 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3304      	adds	r3, #4
 80059d4:	4619      	mov	r1, r3
 80059d6:	4610      	mov	r0, r2
 80059d8:	f7ff fb66 	bl	80050a8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	6819      	ldr	r1, [r3, #0]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	2203      	movs	r2, #3
 80059ea:	f7ff ff3b 	bl	8005864 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699a      	ldr	r2, [r3, #24]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 020c 	bic.w	r2, r2, #12
 80059fc:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6999      	ldr	r1, [r3, #24]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a1e:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6812      	ldr	r2, [r2, #0]
 8005a2a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a32:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a42:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6812      	ldr	r2, [r2, #0]
 8005a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a52:	f023 0307 	bic.w	r3, r3, #7
 8005a56:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0204 	orr.w	r2, r2, #4
 8005a66:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005a70:	2370      	movs	r3, #112	@ 0x70
 8005a72:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005a74:	2300      	movs	r3, #0
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f107 020c 	add.w	r2, r7, #12
 8005a8e:	4611      	mov	r1, r2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fc57 	bl	8005344 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6812      	ldr	r2, [r2, #0]
 8005aa0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa8:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8005ab8:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3728      	adds	r7, #40	@ 0x28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d109      	bne.n	8005b18 <HAL_TIMEx_PWMN_Start+0x24>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	bf14      	ite	ne
 8005b10:	2301      	movne	r3, #1
 8005b12:	2300      	moveq	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	e022      	b.n	8005b5e <HAL_TIMEx_PWMN_Start+0x6a>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d109      	bne.n	8005b32 <HAL_TIMEx_PWMN_Start+0x3e>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	bf14      	ite	ne
 8005b2a:	2301      	movne	r3, #1
 8005b2c:	2300      	moveq	r3, #0
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	e015      	b.n	8005b5e <HAL_TIMEx_PWMN_Start+0x6a>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d109      	bne.n	8005b4c <HAL_TIMEx_PWMN_Start+0x58>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	bf14      	ite	ne
 8005b44:	2301      	movne	r3, #1
 8005b46:	2300      	moveq	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	e008      	b.n	8005b5e <HAL_TIMEx_PWMN_Start+0x6a>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	bf14      	ite	ne
 8005b58:	2301      	movne	r3, #1
 8005b5a:	2300      	moveq	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e073      	b.n	8005c4e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <HAL_TIMEx_PWMN_Start+0x82>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b74:	e013      	b.n	8005b9e <HAL_TIMEx_PWMN_Start+0xaa>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	d104      	bne.n	8005b86 <HAL_TIMEx_PWMN_Start+0x92>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b84:	e00b      	b.n	8005b9e <HAL_TIMEx_PWMN_Start+0xaa>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d104      	bne.n	8005b96 <HAL_TIMEx_PWMN_Start+0xa2>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b94:	e003      	b.n	8005b9e <HAL_TIMEx_PWMN_Start+0xaa>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fa34 	bl	8006014 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a25      	ldr	r2, [pc, #148]	@ (8005c58 <HAL_TIMEx_PWMN_Start+0x164>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d022      	beq.n	8005c0c <HAL_TIMEx_PWMN_Start+0x118>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bce:	d01d      	beq.n	8005c0c <HAL_TIMEx_PWMN_Start+0x118>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a21      	ldr	r2, [pc, #132]	@ (8005c5c <HAL_TIMEx_PWMN_Start+0x168>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d018      	beq.n	8005c0c <HAL_TIMEx_PWMN_Start+0x118>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a20      	ldr	r2, [pc, #128]	@ (8005c60 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d013      	beq.n	8005c0c <HAL_TIMEx_PWMN_Start+0x118>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a1e      	ldr	r2, [pc, #120]	@ (8005c64 <HAL_TIMEx_PWMN_Start+0x170>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00e      	beq.n	8005c0c <HAL_TIMEx_PWMN_Start+0x118>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c68 <HAL_TIMEx_PWMN_Start+0x174>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d009      	beq.n	8005c0c <HAL_TIMEx_PWMN_Start+0x118>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8005c6c <HAL_TIMEx_PWMN_Start+0x178>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d004      	beq.n	8005c0c <HAL_TIMEx_PWMN_Start+0x118>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1a      	ldr	r2, [pc, #104]	@ (8005c70 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d115      	bne.n	8005c38 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	4b18      	ldr	r3, [pc, #96]	@ (8005c74 <HAL_TIMEx_PWMN_Start+0x180>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b06      	cmp	r3, #6
 8005c1c:	d015      	beq.n	8005c4a <HAL_TIMEx_PWMN_Start+0x156>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c24:	d011      	beq.n	8005c4a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f042 0201 	orr.w	r2, r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c36:	e008      	b.n	8005c4a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0201 	orr.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	e000      	b.n	8005c4c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40012c00 	.word	0x40012c00
 8005c5c:	40000400 	.word	0x40000400
 8005c60:	40000800 	.word	0x40000800
 8005c64:	40000c00 	.word	0x40000c00
 8005c68:	40013400 	.word	0x40013400
 8005c6c:	40014000 	.word	0x40014000
 8005c70:	40015000 	.word	0x40015000
 8005c74:	00010007 	.word	0x00010007

08005c78 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2200      	movs	r2, #0
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 f9c2 	bl	8006014 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6a1a      	ldr	r2, [r3, #32]
 8005c96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10f      	bne.n	8005cc0 <HAL_TIMEx_PWMN_Stop+0x48>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6a1a      	ldr	r2, [r3, #32]
 8005ca6:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005caa:	4013      	ands	r3, r2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d107      	bne.n	8005cc0 <HAL_TIMEx_PWMN_Stop+0x48>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cbe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6a1a      	ldr	r2, [r3, #32]
 8005cc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005cca:	4013      	ands	r3, r2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10f      	bne.n	8005cf0 <HAL_TIMEx_PWMN_Stop+0x78>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6a1a      	ldr	r2, [r3, #32]
 8005cd6:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d107      	bne.n	8005cf0 <HAL_TIMEx_PWMN_Stop+0x78>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d104      	bne.n	8005d00 <HAL_TIMEx_PWMN_Stop+0x88>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cfe:	e013      	b.n	8005d28 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d104      	bne.n	8005d10 <HAL_TIMEx_PWMN_Stop+0x98>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d0e:	e00b      	b.n	8005d28 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	d104      	bne.n	8005d20 <HAL_TIMEx_PWMN_Stop+0xa8>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d1e:	e003      	b.n	8005d28 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e074      	b.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a34      	ldr	r2, [pc, #208]	@ (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a33      	ldr	r2, [pc, #204]	@ (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a31      	ldr	r2, [pc, #196]	@ (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d108      	bne.n	8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a21      	ldr	r2, [pc, #132]	@ (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d022      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dcc:	d01d      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d018      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d013      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1c      	ldr	r2, [pc, #112]	@ (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00e      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a15      	ldr	r2, [pc, #84]	@ (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d009      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a18      	ldr	r2, [pc, #96]	@ (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d004      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a11      	ldr	r2, [pc, #68]	@ (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d10c      	bne.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40012c00 	.word	0x40012c00
 8005e48:	40013400 	.word	0x40013400
 8005e4c:	40015000 	.word	0x40015000
 8005e50:	40000400 	.word	0x40000400
 8005e54:	40000800 	.word	0x40000800
 8005e58:	40000c00 	.word	0x40000c00
 8005e5c:	40014000 	.word	0x40014000

08005e60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e078      	b.n	8005f6e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	041b      	lsls	r3, r3, #16
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1c      	ldr	r2, [pc, #112]	@ (8005f7c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d009      	beq.n	8005f22 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1b      	ldr	r2, [pc, #108]	@ (8005f80 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d004      	beq.n	8005f22 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a19      	ldr	r2, [pc, #100]	@ (8005f84 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d11c      	bne.n	8005f5c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2c:	051b      	lsls	r3, r3, #20
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40012c00 	.word	0x40012c00
 8005f80:	40013400 	.word	0x40013400
 8005f84:	40015000 	.word	0x40015000

08005f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	2204      	movs	r2, #4
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a1a      	ldr	r2, [r3, #32]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	43db      	mvns	r3, r3
 8006036:	401a      	ands	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a1a      	ldr	r2, [r3, #32]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	fa01 f303 	lsl.w	r3, r1, r3
 800604c:	431a      	orrs	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	621a      	str	r2, [r3, #32]
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b082      	sub	sp, #8
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e042      	b.n	80060f6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fb fa20 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2224      	movs	r2, #36	@ 0x24
 800608c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0201 	bic.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 ff61 	bl	8006f70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fc62 	bl	8006978 <UART_SetConfig>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e01b      	b.n	80060f6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0201 	orr.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 ffe0 	bl	80070b4 <UART_CheckIdleState>
 80060f4:	4603      	mov	r3, r0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b08a      	sub	sp, #40	@ 0x28
 8006102:	af02      	add	r7, sp, #8
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	603b      	str	r3, [r7, #0]
 800610a:	4613      	mov	r3, r2
 800610c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006114:	2b20      	cmp	r3, #32
 8006116:	d17b      	bne.n	8006210 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <HAL_UART_Transmit+0x26>
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e074      	b.n	8006212 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2221      	movs	r2, #33	@ 0x21
 8006134:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006138:	f7fb fd62 	bl	8001c00 <HAL_GetTick>
 800613c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	88fa      	ldrh	r2, [r7, #6]
 8006142:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	88fa      	ldrh	r2, [r7, #6]
 800614a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006156:	d108      	bne.n	800616a <HAL_UART_Transmit+0x6c>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d104      	bne.n	800616a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006160:	2300      	movs	r3, #0
 8006162:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	61bb      	str	r3, [r7, #24]
 8006168:	e003      	b.n	8006172 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006172:	e030      	b.n	80061d6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	2200      	movs	r2, #0
 800617c:	2180      	movs	r1, #128	@ 0x80
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f001 f842 	bl	8007208 <UART_WaitOnFlagUntilTimeout>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d005      	beq.n	8006196 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2220      	movs	r2, #32
 800618e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e03d      	b.n	8006212 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10b      	bne.n	80061b4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	3302      	adds	r3, #2
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	e007      	b.n	80061c4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	781a      	ldrb	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	3301      	adds	r3, #1
 80061c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1c8      	bne.n	8006174 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2200      	movs	r2, #0
 80061ea:	2140      	movs	r1, #64	@ 0x40
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f001 f80b 	bl	8007208 <UART_WaitOnFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e006      	b.n	8006212 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	e000      	b.n	8006212 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006210:	2302      	movs	r3, #2
  }
}
 8006212:	4618      	mov	r0, r3
 8006214:	3720      	adds	r7, #32
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08a      	sub	sp, #40	@ 0x28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	4613      	mov	r3, r2
 8006228:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006230:	2b20      	cmp	r3, #32
 8006232:	d137      	bne.n	80062a4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <HAL_UART_Receive_IT+0x24>
 800623a:	88fb      	ldrh	r3, [r7, #6]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e030      	b.n	80062a6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a18      	ldr	r2, [pc, #96]	@ (80062b0 <HAL_UART_Receive_IT+0x94>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d01f      	beq.n	8006294 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d018      	beq.n	8006294 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	613b      	str	r3, [r7, #16]
   return(result);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006276:	627b      	str	r3, [r7, #36]	@ 0x24
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	461a      	mov	r2, r3
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	623b      	str	r3, [r7, #32]
 8006282:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	69f9      	ldr	r1, [r7, #28]
 8006286:	6a3a      	ldr	r2, [r7, #32]
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	61bb      	str	r3, [r7, #24]
   return(result);
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e6      	bne.n	8006262 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006294:	88fb      	ldrh	r3, [r7, #6]
 8006296:	461a      	mov	r2, r3
 8006298:	68b9      	ldr	r1, [r7, #8]
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f001 f822 	bl	80072e4 <UART_Start_Receive_IT>
 80062a0:	4603      	mov	r3, r0
 80062a2:	e000      	b.n	80062a6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062a4:	2302      	movs	r3, #2
  }
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3728      	adds	r7, #40	@ 0x28
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	40008000 	.word	0x40008000

080062b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b0ba      	sub	sp, #232	@ 0xe8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80062de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80062e2:	4013      	ands	r3, r2
 80062e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80062e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d11b      	bne.n	8006328 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d015      	beq.n	8006328 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006300:	f003 0320 	and.w	r3, r3, #32
 8006304:	2b00      	cmp	r3, #0
 8006306:	d105      	bne.n	8006314 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800630c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d009      	beq.n	8006328 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 8300 	beq.w	800691e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	4798      	blx	r3
      }
      return;
 8006326:	e2fa      	b.n	800691e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006328:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 8123 	beq.w	8006578 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006332:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006336:	4b8d      	ldr	r3, [pc, #564]	@ (800656c <HAL_UART_IRQHandler+0x2b8>)
 8006338:	4013      	ands	r3, r2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d106      	bne.n	800634c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800633e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006342:	4b8b      	ldr	r3, [pc, #556]	@ (8006570 <HAL_UART_IRQHandler+0x2bc>)
 8006344:	4013      	ands	r3, r2
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 8116 	beq.w	8006578 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d011      	beq.n	800637c <HAL_UART_IRQHandler+0xc8>
 8006358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800635c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00b      	beq.n	800637c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2201      	movs	r2, #1
 800636a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006372:	f043 0201 	orr.w	r2, r3, #1
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800637c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d011      	beq.n	80063ac <HAL_UART_IRQHandler+0xf8>
 8006388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2202      	movs	r2, #2
 800639a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a2:	f043 0204 	orr.w	r2, r3, #4
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d011      	beq.n	80063dc <HAL_UART_IRQHandler+0x128>
 80063b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00b      	beq.n	80063dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2204      	movs	r2, #4
 80063ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d2:	f043 0202 	orr.w	r2, r3, #2
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d017      	beq.n	8006418 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80063e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d105      	bne.n	8006400 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80063f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80063f8:	4b5c      	ldr	r3, [pc, #368]	@ (800656c <HAL_UART_IRQHandler+0x2b8>)
 80063fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2208      	movs	r2, #8
 8006406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800640e:	f043 0208 	orr.w	r2, r3, #8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800641c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006420:	2b00      	cmp	r3, #0
 8006422:	d012      	beq.n	800644a <HAL_UART_IRQHandler+0x196>
 8006424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006428:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00c      	beq.n	800644a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006438:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006440:	f043 0220 	orr.w	r2, r3, #32
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8266 	beq.w	8006922 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d013      	beq.n	800648a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b00      	cmp	r3, #0
 800646c:	d105      	bne.n	800647a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800646e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006490:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649e:	2b40      	cmp	r3, #64	@ 0x40
 80064a0:	d005      	beq.n	80064ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d054      	beq.n	8006558 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f001 f83a 	bl	8007528 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064be:	2b40      	cmp	r3, #64	@ 0x40
 80064c0:	d146      	bne.n	8006550 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3308      	adds	r3, #8
 80064c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064d0:	e853 3f00 	ldrex	r3, [r3]
 80064d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3308      	adds	r3, #8
 80064ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064fe:	e841 2300 	strex	r3, r2, [r1]
 8006502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1d9      	bne.n	80064c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006514:	2b00      	cmp	r3, #0
 8006516:	d017      	beq.n	8006548 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800651e:	4a15      	ldr	r2, [pc, #84]	@ (8006574 <HAL_UART_IRQHandler+0x2c0>)
 8006520:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006528:	4618      	mov	r0, r3
 800652a:	f7fc fdae 	bl	800308a <HAL_DMA_Abort_IT>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d019      	beq.n	8006568 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800653a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006542:	4610      	mov	r0, r2
 8006544:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006546:	e00f      	b.n	8006568 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f9ff 	bl	800694c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654e:	e00b      	b.n	8006568 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f9fb 	bl	800694c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006556:	e007      	b.n	8006568 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f9f7 	bl	800694c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006566:	e1dc      	b.n	8006922 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006568:	bf00      	nop
    return;
 800656a:	e1da      	b.n	8006922 <HAL_UART_IRQHandler+0x66e>
 800656c:	10000001 	.word	0x10000001
 8006570:	04000120 	.word	0x04000120
 8006574:	080075f5 	.word	0x080075f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800657c:	2b01      	cmp	r3, #1
 800657e:	f040 8170 	bne.w	8006862 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006586:	f003 0310 	and.w	r3, r3, #16
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8169 	beq.w	8006862 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006594:	f003 0310 	and.w	r3, r3, #16
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 8162 	beq.w	8006862 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2210      	movs	r2, #16
 80065a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b0:	2b40      	cmp	r3, #64	@ 0x40
 80065b2:	f040 80d8 	bne.w	8006766 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 80af 	beq.w	800672c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065d8:	429a      	cmp	r2, r3
 80065da:	f080 80a7 	bcs.w	800672c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f040 8087 	bne.w	800670a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006604:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006610:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006618:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006626:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800662a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006632:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006636:	e841 2300 	strex	r3, r2, [r1]
 800663a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800663e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1da      	bne.n	80065fc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3308      	adds	r3, #8
 800664c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006656:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006658:	f023 0301 	bic.w	r3, r3, #1
 800665c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3308      	adds	r3, #8
 8006666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800666a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800666e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006672:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800667c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e1      	bne.n	8006646 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3308      	adds	r3, #8
 8006688:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006694:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006698:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3308      	adds	r3, #8
 80066a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80066a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066ae:	e841 2300 	strex	r3, r2, [r1]
 80066b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1e3      	bne.n	8006682 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066d8:	f023 0310 	bic.w	r3, r3, #16
 80066dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e4      	bne.n	80066c8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006704:	4618      	mov	r0, r3
 8006706:	f7fc fc67 	bl	8002fd8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2202      	movs	r2, #2
 800670e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800671c:	b29b      	uxth	r3, r3
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	b29b      	uxth	r3, r3
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f91b 	bl	8006960 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800672a:	e0fc      	b.n	8006926 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006736:	429a      	cmp	r2, r3
 8006738:	f040 80f5 	bne.w	8006926 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b20      	cmp	r3, #32
 800674c:	f040 80eb 	bne.w	8006926 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f8fe 	bl	8006960 <HAL_UARTEx_RxEventCallback>
      return;
 8006764:	e0df      	b.n	8006926 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006772:	b29b      	uxth	r3, r3
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 80d1 	beq.w	800692a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 80cc 	beq.w	800692a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80067b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067bc:	e841 2300 	strex	r3, r2, [r1]
 80067c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e4      	bne.n	8006792 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3308      	adds	r3, #8
 80067ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	623b      	str	r3, [r7, #32]
   return(result);
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067de:	f023 0301 	bic.w	r3, r3, #1
 80067e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3308      	adds	r3, #8
 80067ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80067f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80067f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e1      	bne.n	80067c8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	60fb      	str	r3, [r7, #12]
   return(result);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f023 0310 	bic.w	r3, r3, #16
 800682c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800683a:	61fb      	str	r3, [r7, #28]
 800683c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	69b9      	ldr	r1, [r7, #24]
 8006840:	69fa      	ldr	r2, [r7, #28]
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	617b      	str	r3, [r7, #20]
   return(result);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e4      	bne.n	8006818 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2202      	movs	r2, #2
 8006852:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f880 	bl	8006960 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006860:	e063      	b.n	800692a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00e      	beq.n	800688c <HAL_UART_IRQHandler+0x5d8>
 800686e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d008      	beq.n	800688c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006882:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 fc13 	bl	80080b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800688a:	e051      	b.n	8006930 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800688c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006894:	2b00      	cmp	r3, #0
 8006896:	d014      	beq.n	80068c2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800689c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d105      	bne.n	80068b0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80068a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d008      	beq.n	80068c2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d03a      	beq.n	800692e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
    }
    return;
 80068c0:	e035      	b.n	800692e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <HAL_UART_IRQHandler+0x62e>
 80068ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fe9c 	bl	8007618 <UART_EndTransmit_IT>
    return;
 80068e0:	e026      	b.n	8006930 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80068e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <HAL_UART_IRQHandler+0x64e>
 80068ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 fbec 	bl	80080d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006900:	e016      	b.n	8006930 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006906:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d010      	beq.n	8006930 <HAL_UART_IRQHandler+0x67c>
 800690e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006912:	2b00      	cmp	r3, #0
 8006914:	da0c      	bge.n	8006930 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 fbd4 	bl	80080c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800691c:	e008      	b.n	8006930 <HAL_UART_IRQHandler+0x67c>
      return;
 800691e:	bf00      	nop
 8006920:	e006      	b.n	8006930 <HAL_UART_IRQHandler+0x67c>
    return;
 8006922:	bf00      	nop
 8006924:	e004      	b.n	8006930 <HAL_UART_IRQHandler+0x67c>
      return;
 8006926:	bf00      	nop
 8006928:	e002      	b.n	8006930 <HAL_UART_IRQHandler+0x67c>
      return;
 800692a:	bf00      	nop
 800692c:	e000      	b.n	8006930 <HAL_UART_IRQHandler+0x67c>
    return;
 800692e:	bf00      	nop
  }
}
 8006930:	37e8      	adds	r7, #232	@ 0xe8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop

08006938 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800697c:	b08c      	sub	sp, #48	@ 0x30
 800697e:	af00      	add	r7, sp, #0
 8006980:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	431a      	orrs	r2, r3
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	431a      	orrs	r2, r3
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	4313      	orrs	r3, r2
 800699e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	4baa      	ldr	r3, [pc, #680]	@ (8006c50 <UART_SetConfig+0x2d8>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	6812      	ldr	r2, [r2, #0]
 80069ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069b0:	430b      	orrs	r3, r1
 80069b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a9f      	ldr	r2, [pc, #636]	@ (8006c54 <UART_SetConfig+0x2dc>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d004      	beq.n	80069e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069e0:	4313      	orrs	r3, r2
 80069e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80069ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069f8:	430b      	orrs	r3, r1
 80069fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a02:	f023 010f 	bic.w	r1, r3, #15
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a90      	ldr	r2, [pc, #576]	@ (8006c58 <UART_SetConfig+0x2e0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d125      	bne.n	8006a68 <UART_SetConfig+0xf0>
 8006a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8006c5c <UART_SetConfig+0x2e4>)
 8006a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d81a      	bhi.n	8006a60 <UART_SetConfig+0xe8>
 8006a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a30 <UART_SetConfig+0xb8>)
 8006a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a30:	08006a41 	.word	0x08006a41
 8006a34:	08006a51 	.word	0x08006a51
 8006a38:	08006a49 	.word	0x08006a49
 8006a3c:	08006a59 	.word	0x08006a59
 8006a40:	2301      	movs	r3, #1
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a46:	e116      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4e:	e112      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006a50:	2304      	movs	r3, #4
 8006a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a56:	e10e      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006a58:	2308      	movs	r3, #8
 8006a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5e:	e10a      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006a60:	2310      	movs	r3, #16
 8006a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a66:	e106      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a7c      	ldr	r2, [pc, #496]	@ (8006c60 <UART_SetConfig+0x2e8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d138      	bne.n	8006ae4 <UART_SetConfig+0x16c>
 8006a72:	4b7a      	ldr	r3, [pc, #488]	@ (8006c5c <UART_SetConfig+0x2e4>)
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a78:	f003 030c 	and.w	r3, r3, #12
 8006a7c:	2b0c      	cmp	r3, #12
 8006a7e:	d82d      	bhi.n	8006adc <UART_SetConfig+0x164>
 8006a80:	a201      	add	r2, pc, #4	@ (adr r2, 8006a88 <UART_SetConfig+0x110>)
 8006a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a86:	bf00      	nop
 8006a88:	08006abd 	.word	0x08006abd
 8006a8c:	08006add 	.word	0x08006add
 8006a90:	08006add 	.word	0x08006add
 8006a94:	08006add 	.word	0x08006add
 8006a98:	08006acd 	.word	0x08006acd
 8006a9c:	08006add 	.word	0x08006add
 8006aa0:	08006add 	.word	0x08006add
 8006aa4:	08006add 	.word	0x08006add
 8006aa8:	08006ac5 	.word	0x08006ac5
 8006aac:	08006add 	.word	0x08006add
 8006ab0:	08006add 	.word	0x08006add
 8006ab4:	08006add 	.word	0x08006add
 8006ab8:	08006ad5 	.word	0x08006ad5
 8006abc:	2300      	movs	r3, #0
 8006abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac2:	e0d8      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aca:	e0d4      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006acc:	2304      	movs	r3, #4
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad2:	e0d0      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006ad4:	2308      	movs	r3, #8
 8006ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ada:	e0cc      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006adc:	2310      	movs	r3, #16
 8006ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae2:	e0c8      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a5e      	ldr	r2, [pc, #376]	@ (8006c64 <UART_SetConfig+0x2ec>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d125      	bne.n	8006b3a <UART_SetConfig+0x1c2>
 8006aee:	4b5b      	ldr	r3, [pc, #364]	@ (8006c5c <UART_SetConfig+0x2e4>)
 8006af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006af8:	2b30      	cmp	r3, #48	@ 0x30
 8006afa:	d016      	beq.n	8006b2a <UART_SetConfig+0x1b2>
 8006afc:	2b30      	cmp	r3, #48	@ 0x30
 8006afe:	d818      	bhi.n	8006b32 <UART_SetConfig+0x1ba>
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	d00a      	beq.n	8006b1a <UART_SetConfig+0x1a2>
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	d814      	bhi.n	8006b32 <UART_SetConfig+0x1ba>
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <UART_SetConfig+0x19a>
 8006b0c:	2b10      	cmp	r3, #16
 8006b0e:	d008      	beq.n	8006b22 <UART_SetConfig+0x1aa>
 8006b10:	e00f      	b.n	8006b32 <UART_SetConfig+0x1ba>
 8006b12:	2300      	movs	r3, #0
 8006b14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b18:	e0ad      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b20:	e0a9      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b22:	2304      	movs	r3, #4
 8006b24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b28:	e0a5      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b2a:	2308      	movs	r3, #8
 8006b2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b30:	e0a1      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b32:	2310      	movs	r3, #16
 8006b34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b38:	e09d      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a4a      	ldr	r2, [pc, #296]	@ (8006c68 <UART_SetConfig+0x2f0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d125      	bne.n	8006b90 <UART_SetConfig+0x218>
 8006b44:	4b45      	ldr	r3, [pc, #276]	@ (8006c5c <UART_SetConfig+0x2e4>)
 8006b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b50:	d016      	beq.n	8006b80 <UART_SetConfig+0x208>
 8006b52:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b54:	d818      	bhi.n	8006b88 <UART_SetConfig+0x210>
 8006b56:	2b80      	cmp	r3, #128	@ 0x80
 8006b58:	d00a      	beq.n	8006b70 <UART_SetConfig+0x1f8>
 8006b5a:	2b80      	cmp	r3, #128	@ 0x80
 8006b5c:	d814      	bhi.n	8006b88 <UART_SetConfig+0x210>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d002      	beq.n	8006b68 <UART_SetConfig+0x1f0>
 8006b62:	2b40      	cmp	r3, #64	@ 0x40
 8006b64:	d008      	beq.n	8006b78 <UART_SetConfig+0x200>
 8006b66:	e00f      	b.n	8006b88 <UART_SetConfig+0x210>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b6e:	e082      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b70:	2302      	movs	r3, #2
 8006b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b76:	e07e      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b78:	2304      	movs	r3, #4
 8006b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b7e:	e07a      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b80:	2308      	movs	r3, #8
 8006b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b86:	e076      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b88:	2310      	movs	r3, #16
 8006b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b8e:	e072      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a35      	ldr	r2, [pc, #212]	@ (8006c6c <UART_SetConfig+0x2f4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d12a      	bne.n	8006bf0 <UART_SetConfig+0x278>
 8006b9a:	4b30      	ldr	r3, [pc, #192]	@ (8006c5c <UART_SetConfig+0x2e4>)
 8006b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ba4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ba8:	d01a      	beq.n	8006be0 <UART_SetConfig+0x268>
 8006baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bae:	d81b      	bhi.n	8006be8 <UART_SetConfig+0x270>
 8006bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bb4:	d00c      	beq.n	8006bd0 <UART_SetConfig+0x258>
 8006bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bba:	d815      	bhi.n	8006be8 <UART_SetConfig+0x270>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <UART_SetConfig+0x250>
 8006bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bc4:	d008      	beq.n	8006bd8 <UART_SetConfig+0x260>
 8006bc6:	e00f      	b.n	8006be8 <UART_SetConfig+0x270>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bce:	e052      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bd6:	e04e      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bde:	e04a      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006be0:	2308      	movs	r3, #8
 8006be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006be6:	e046      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006be8:	2310      	movs	r3, #16
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bee:	e042      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a17      	ldr	r2, [pc, #92]	@ (8006c54 <UART_SetConfig+0x2dc>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d13a      	bne.n	8006c70 <UART_SetConfig+0x2f8>
 8006bfa:	4b18      	ldr	r3, [pc, #96]	@ (8006c5c <UART_SetConfig+0x2e4>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c08:	d01a      	beq.n	8006c40 <UART_SetConfig+0x2c8>
 8006c0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c0e:	d81b      	bhi.n	8006c48 <UART_SetConfig+0x2d0>
 8006c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c14:	d00c      	beq.n	8006c30 <UART_SetConfig+0x2b8>
 8006c16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c1a:	d815      	bhi.n	8006c48 <UART_SetConfig+0x2d0>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <UART_SetConfig+0x2b0>
 8006c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c24:	d008      	beq.n	8006c38 <UART_SetConfig+0x2c0>
 8006c26:	e00f      	b.n	8006c48 <UART_SetConfig+0x2d0>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c2e:	e022      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006c30:	2302      	movs	r3, #2
 8006c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c36:	e01e      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c3e:	e01a      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006c40:	2308      	movs	r3, #8
 8006c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c46:	e016      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c4e:	e012      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006c50:	cfff69f3 	.word	0xcfff69f3
 8006c54:	40008000 	.word	0x40008000
 8006c58:	40013800 	.word	0x40013800
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	40004400 	.word	0x40004400
 8006c64:	40004800 	.word	0x40004800
 8006c68:	40004c00 	.word	0x40004c00
 8006c6c:	40005000 	.word	0x40005000
 8006c70:	2310      	movs	r3, #16
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4aae      	ldr	r2, [pc, #696]	@ (8006f34 <UART_SetConfig+0x5bc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	f040 8097 	bne.w	8006db0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c86:	2b08      	cmp	r3, #8
 8006c88:	d823      	bhi.n	8006cd2 <UART_SetConfig+0x35a>
 8006c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <UART_SetConfig+0x318>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006cb5 	.word	0x08006cb5
 8006c94:	08006cd3 	.word	0x08006cd3
 8006c98:	08006cbd 	.word	0x08006cbd
 8006c9c:	08006cd3 	.word	0x08006cd3
 8006ca0:	08006cc3 	.word	0x08006cc3
 8006ca4:	08006cd3 	.word	0x08006cd3
 8006ca8:	08006cd3 	.word	0x08006cd3
 8006cac:	08006cd3 	.word	0x08006cd3
 8006cb0:	08006ccb 	.word	0x08006ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb4:	f7fd f97e 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8006cb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cba:	e010      	b.n	8006cde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cbc:	4b9e      	ldr	r3, [pc, #632]	@ (8006f38 <UART_SetConfig+0x5c0>)
 8006cbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cc0:	e00d      	b.n	8006cde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc2:	f7fd f909 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 8006cc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cc8:	e009      	b.n	8006cde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cd0:	e005      	b.n	8006cde <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006cdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8130 	beq.w	8006f46 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cea:	4a94      	ldr	r2, [pc, #592]	@ (8006f3c <UART_SetConfig+0x5c4>)
 8006cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cf8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	4413      	add	r3, r2
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d305      	bcc.n	8006d16 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d903      	bls.n	8006d1e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d1c:	e113      	b.n	8006f46 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d20:	2200      	movs	r2, #0
 8006d22:	60bb      	str	r3, [r7, #8]
 8006d24:	60fa      	str	r2, [r7, #12]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2a:	4a84      	ldr	r2, [pc, #528]	@ (8006f3c <UART_SetConfig+0x5c4>)
 8006d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	2200      	movs	r2, #0
 8006d34:	603b      	str	r3, [r7, #0]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d40:	f7f9 fad6 	bl	80002f0 <__aeabi_uldivmod>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	020b      	lsls	r3, r1, #8
 8006d56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d5a:	0202      	lsls	r2, r0, #8
 8006d5c:	6979      	ldr	r1, [r7, #20]
 8006d5e:	6849      	ldr	r1, [r1, #4]
 8006d60:	0849      	lsrs	r1, r1, #1
 8006d62:	2000      	movs	r0, #0
 8006d64:	460c      	mov	r4, r1
 8006d66:	4605      	mov	r5, r0
 8006d68:	eb12 0804 	adds.w	r8, r2, r4
 8006d6c:	eb43 0905 	adc.w	r9, r3, r5
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	469a      	mov	sl, r3
 8006d78:	4693      	mov	fp, r2
 8006d7a:	4652      	mov	r2, sl
 8006d7c:	465b      	mov	r3, fp
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	f7f9 fab5 	bl	80002f0 <__aeabi_uldivmod>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d94:	d308      	bcc.n	8006da8 <UART_SetConfig+0x430>
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d9c:	d204      	bcs.n	8006da8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6a3a      	ldr	r2, [r7, #32]
 8006da4:	60da      	str	r2, [r3, #12]
 8006da6:	e0ce      	b.n	8006f46 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006dae:	e0ca      	b.n	8006f46 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006db8:	d166      	bne.n	8006e88 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006dba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dbe:	2b08      	cmp	r3, #8
 8006dc0:	d827      	bhi.n	8006e12 <UART_SetConfig+0x49a>
 8006dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc8 <UART_SetConfig+0x450>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006ded 	.word	0x08006ded
 8006dcc:	08006df5 	.word	0x08006df5
 8006dd0:	08006dfd 	.word	0x08006dfd
 8006dd4:	08006e13 	.word	0x08006e13
 8006dd8:	08006e03 	.word	0x08006e03
 8006ddc:	08006e13 	.word	0x08006e13
 8006de0:	08006e13 	.word	0x08006e13
 8006de4:	08006e13 	.word	0x08006e13
 8006de8:	08006e0b 	.word	0x08006e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dec:	f7fd f8e2 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8006df0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006df2:	e014      	b.n	8006e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006df4:	f7fd f8f4 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8006df8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dfa:	e010      	b.n	8006e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dfc:	4b4e      	ldr	r3, [pc, #312]	@ (8006f38 <UART_SetConfig+0x5c0>)
 8006dfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e00:	e00d      	b.n	8006e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e02:	f7fd f869 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 8006e06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e08:	e009      	b.n	8006e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e10:	e005      	b.n	8006e1e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 8090 	beq.w	8006f46 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2a:	4a44      	ldr	r2, [pc, #272]	@ (8006f3c <UART_SetConfig+0x5c4>)
 8006e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e30:	461a      	mov	r2, r3
 8006e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e38:	005a      	lsls	r2, r3, #1
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	085b      	lsrs	r3, r3, #1
 8006e40:	441a      	add	r2, r3
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	2b0f      	cmp	r3, #15
 8006e50:	d916      	bls.n	8006e80 <UART_SetConfig+0x508>
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e58:	d212      	bcs.n	8006e80 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	f023 030f 	bic.w	r3, r3, #15
 8006e62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	085b      	lsrs	r3, r3, #1
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	8bfb      	ldrh	r3, [r7, #30]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	8bfa      	ldrh	r2, [r7, #30]
 8006e7c:	60da      	str	r2, [r3, #12]
 8006e7e:	e062      	b.n	8006f46 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e86:	e05e      	b.n	8006f46 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d828      	bhi.n	8006ee2 <UART_SetConfig+0x56a>
 8006e90:	a201      	add	r2, pc, #4	@ (adr r2, 8006e98 <UART_SetConfig+0x520>)
 8006e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e96:	bf00      	nop
 8006e98:	08006ebd 	.word	0x08006ebd
 8006e9c:	08006ec5 	.word	0x08006ec5
 8006ea0:	08006ecd 	.word	0x08006ecd
 8006ea4:	08006ee3 	.word	0x08006ee3
 8006ea8:	08006ed3 	.word	0x08006ed3
 8006eac:	08006ee3 	.word	0x08006ee3
 8006eb0:	08006ee3 	.word	0x08006ee3
 8006eb4:	08006ee3 	.word	0x08006ee3
 8006eb8:	08006edb 	.word	0x08006edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ebc:	f7fd f87a 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8006ec0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ec2:	e014      	b.n	8006eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ec4:	f7fd f88c 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8006ec8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006eca:	e010      	b.n	8006eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8006f38 <UART_SetConfig+0x5c0>)
 8006ece:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ed0:	e00d      	b.n	8006eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ed2:	f7fd f801 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 8006ed6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ed8:	e009      	b.n	8006eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ee0:	e005      	b.n	8006eee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006eec:	bf00      	nop
    }

    if (pclk != 0U)
 8006eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d028      	beq.n	8006f46 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef8:	4a10      	ldr	r2, [pc, #64]	@ (8006f3c <UART_SetConfig+0x5c4>)
 8006efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006efe:	461a      	mov	r2, r3
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	085b      	lsrs	r3, r3, #1
 8006f0c:	441a      	add	r2, r3
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	2b0f      	cmp	r3, #15
 8006f1c:	d910      	bls.n	8006f40 <UART_SetConfig+0x5c8>
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f24:	d20c      	bcs.n	8006f40 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60da      	str	r2, [r3, #12]
 8006f30:	e009      	b.n	8006f46 <UART_SetConfig+0x5ce>
 8006f32:	bf00      	nop
 8006f34:	40008000 	.word	0x40008000
 8006f38:	00f42400 	.word	0x00f42400
 8006f3c:	080098ec 	.word	0x080098ec
      }
      else
      {
        ret = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f62:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3730      	adds	r7, #48	@ 0x30
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00a      	beq.n	8006f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00a      	beq.n	8006fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe2:	f003 0304 	and.w	r3, r3, #4
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007004:	f003 0310 	and.w	r3, r3, #16
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00a      	beq.n	8007022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00a      	beq.n	8007044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01a      	beq.n	8007086 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800706a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800706e:	d10a      	bne.n	8007086 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	605a      	str	r2, [r3, #4]
  }
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b098      	sub	sp, #96	@ 0x60
 80070b8:	af02      	add	r7, sp, #8
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070c4:	f7fa fd9c 	bl	8001c00 <HAL_GetTick>
 80070c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0308 	and.w	r3, r3, #8
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d12f      	bne.n	8007138 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070e0:	2200      	movs	r2, #0
 80070e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f88e 	bl	8007208 <UART_WaitOnFlagUntilTimeout>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d022      	beq.n	8007138 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fa:	e853 3f00 	ldrex	r3, [r3]
 80070fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007106:	653b      	str	r3, [r7, #80]	@ 0x50
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	461a      	mov	r2, r3
 800710e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007110:	647b      	str	r3, [r7, #68]	@ 0x44
 8007112:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007114:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007118:	e841 2300 	strex	r3, r2, [r1]
 800711c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800711e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e6      	bne.n	80070f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e063      	b.n	8007200 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b04      	cmp	r3, #4
 8007144:	d149      	bne.n	80071da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007146:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800714e:	2200      	movs	r2, #0
 8007150:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f857 	bl	8007208 <UART_WaitOnFlagUntilTimeout>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d03c      	beq.n	80071da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	623b      	str	r3, [r7, #32]
   return(result);
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800717e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007180:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800718c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e6      	bne.n	8007160 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3308      	adds	r3, #8
 8007198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	e853 3f00 	ldrex	r3, [r3]
 80071a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f023 0301 	bic.w	r3, r3, #1
 80071a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3308      	adds	r3, #8
 80071b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071b2:	61fa      	str	r2, [r7, #28]
 80071b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b6:	69b9      	ldr	r1, [r7, #24]
 80071b8:	69fa      	ldr	r2, [r7, #28]
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	617b      	str	r3, [r7, #20]
   return(result);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1e5      	bne.n	8007192 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2220      	movs	r2, #32
 80071ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e012      	b.n	8007200 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3758      	adds	r7, #88	@ 0x58
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	4613      	mov	r3, r2
 8007216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007218:	e04f      	b.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007220:	d04b      	beq.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007222:	f7fa fced 	bl	8001c00 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	429a      	cmp	r2, r3
 8007230:	d302      	bcc.n	8007238 <UART_WaitOnFlagUntilTimeout+0x30>
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e04e      	b.n	80072da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	d037      	beq.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2b80      	cmp	r3, #128	@ 0x80
 800724e:	d034      	beq.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b40      	cmp	r3, #64	@ 0x40
 8007254:	d031      	beq.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	f003 0308 	and.w	r3, r3, #8
 8007260:	2b08      	cmp	r3, #8
 8007262:	d110      	bne.n	8007286 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2208      	movs	r2, #8
 800726a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 f95b 	bl	8007528 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2208      	movs	r2, #8
 8007276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e029      	b.n	80072da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007290:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007294:	d111      	bne.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800729e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f941 	bl	8007528 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e00f      	b.n	80072da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69da      	ldr	r2, [r3, #28]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	4013      	ands	r3, r2
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	bf0c      	ite	eq
 80072ca:	2301      	moveq	r3, #1
 80072cc:	2300      	movne	r3, #0
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	461a      	mov	r2, r3
 80072d2:	79fb      	ldrb	r3, [r7, #7]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d0a0      	beq.n	800721a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b0a3      	sub	sp, #140	@ 0x8c
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	88fa      	ldrh	r2, [r7, #6]
 80072fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	88fa      	ldrh	r2, [r7, #6]
 8007304:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007316:	d10e      	bne.n	8007336 <UART_Start_Receive_IT+0x52>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d105      	bne.n	800732c <UART_Start_Receive_IT+0x48>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007326:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800732a:	e02d      	b.n	8007388 <UART_Start_Receive_IT+0xa4>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	22ff      	movs	r2, #255	@ 0xff
 8007330:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007334:	e028      	b.n	8007388 <UART_Start_Receive_IT+0xa4>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10d      	bne.n	800735a <UART_Start_Receive_IT+0x76>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d104      	bne.n	8007350 <UART_Start_Receive_IT+0x6c>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	22ff      	movs	r2, #255	@ 0xff
 800734a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800734e:	e01b      	b.n	8007388 <UART_Start_Receive_IT+0xa4>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	227f      	movs	r2, #127	@ 0x7f
 8007354:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007358:	e016      	b.n	8007388 <UART_Start_Receive_IT+0xa4>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007362:	d10d      	bne.n	8007380 <UART_Start_Receive_IT+0x9c>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <UART_Start_Receive_IT+0x92>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	227f      	movs	r2, #127	@ 0x7f
 8007370:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007374:	e008      	b.n	8007388 <UART_Start_Receive_IT+0xa4>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	223f      	movs	r2, #63	@ 0x3f
 800737a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800737e:	e003      	b.n	8007388 <UART_Start_Receive_IT+0xa4>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2222      	movs	r2, #34	@ 0x22
 8007394:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3308      	adds	r3, #8
 800739e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80073a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073aa:	f043 0301 	orr.w	r3, r3, #1
 80073ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3308      	adds	r3, #8
 80073b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80073bc:	673a      	str	r2, [r7, #112]	@ 0x70
 80073be:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80073c2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80073ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e3      	bne.n	8007398 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073d8:	d14f      	bne.n	800747a <UART_Start_Receive_IT+0x196>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80073e0:	88fa      	ldrh	r2, [r7, #6]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d349      	bcc.n	800747a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ee:	d107      	bne.n	8007400 <UART_Start_Receive_IT+0x11c>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d103      	bne.n	8007400 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4a47      	ldr	r2, [pc, #284]	@ (8007518 <UART_Start_Receive_IT+0x234>)
 80073fc:	675a      	str	r2, [r3, #116]	@ 0x74
 80073fe:	e002      	b.n	8007406 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4a46      	ldr	r2, [pc, #280]	@ (800751c <UART_Start_Receive_IT+0x238>)
 8007404:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d01a      	beq.n	8007444 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007416:	e853 3f00 	ldrex	r3, [r3]
 800741a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800741c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800741e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007422:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007430:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007432:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007436:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007438:	e841 2300 	strex	r3, r2, [r1]
 800743c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800743e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e4      	bne.n	800740e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3308      	adds	r3, #8
 800744a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800744e:	e853 3f00 	ldrex	r3, [r3]
 8007452:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800745a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3308      	adds	r3, #8
 8007462:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007464:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007466:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007468:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800746a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800746c:	e841 2300 	strex	r3, r2, [r1]
 8007470:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e5      	bne.n	8007444 <UART_Start_Receive_IT+0x160>
 8007478:	e046      	b.n	8007508 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007482:	d107      	bne.n	8007494 <UART_Start_Receive_IT+0x1b0>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4a24      	ldr	r2, [pc, #144]	@ (8007520 <UART_Start_Receive_IT+0x23c>)
 8007490:	675a      	str	r2, [r3, #116]	@ 0x74
 8007492:	e002      	b.n	800749a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4a23      	ldr	r2, [pc, #140]	@ (8007524 <UART_Start_Receive_IT+0x240>)
 8007498:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d019      	beq.n	80074d6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80074b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	461a      	mov	r2, r3
 80074be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80074ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e6      	bne.n	80074a2 <UART_Start_Receive_IT+0x1be>
 80074d4:	e018      	b.n	8007508 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	e853 3f00 	ldrex	r3, [r3]
 80074e2:	613b      	str	r3, [r7, #16]
   return(result);
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	f043 0320 	orr.w	r3, r3, #32
 80074ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	461a      	mov	r2, r3
 80074f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074f4:	623b      	str	r3, [r7, #32]
 80074f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	69f9      	ldr	r1, [r7, #28]
 80074fa:	6a3a      	ldr	r2, [r7, #32]
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	61bb      	str	r3, [r7, #24]
   return(result);
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e6      	bne.n	80074d6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	378c      	adds	r7, #140	@ 0x8c
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	08007d45 	.word	0x08007d45
 800751c:	080079e1 	.word	0x080079e1
 8007520:	08007829 	.word	0x08007829
 8007524:	08007671 	.word	0x08007671

08007528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007528:	b480      	push	{r7}
 800752a:	b095      	sub	sp, #84	@ 0x54
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800753e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007540:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007544:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800754e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007550:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007554:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800755c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e6      	bne.n	8007530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3308      	adds	r3, #8
 8007568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	e853 3f00 	ldrex	r3, [r3]
 8007570:	61fb      	str	r3, [r7, #28]
   return(result);
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007578:	f023 0301 	bic.w	r3, r3, #1
 800757c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3308      	adds	r3, #8
 8007584:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007586:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007588:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800758c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e3      	bne.n	8007562 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d118      	bne.n	80075d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f023 0310 	bic.w	r3, r3, #16
 80075b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075c0:	61bb      	str	r3, [r7, #24]
 80075c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	6979      	ldr	r1, [r7, #20]
 80075c6:	69ba      	ldr	r2, [r7, #24]
 80075c8:	e841 2300 	strex	r3, r2, [r1]
 80075cc:	613b      	str	r3, [r7, #16]
   return(result);
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e6      	bne.n	80075a2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80075e8:	bf00      	nop
 80075ea:	3754      	adds	r7, #84	@ 0x54
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007600:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f7ff f99e 	bl	800694c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007610:	bf00      	nop
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	60bb      	str	r3, [r7, #8]
   return(result);
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007634:	61fb      	str	r3, [r7, #28]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	61bb      	str	r3, [r7, #24]
 8007640:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007642:	6979      	ldr	r1, [r7, #20]
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	613b      	str	r3, [r7, #16]
   return(result);
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e6      	bne.n	8007620 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2220      	movs	r2, #32
 8007656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff f969 	bl	8006938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007666:	bf00      	nop
 8007668:	3720      	adds	r7, #32
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b09c      	sub	sp, #112	@ 0x70
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800767e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007688:	2b22      	cmp	r3, #34	@ 0x22
 800768a:	f040 80be 	bne.w	800780a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007694:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007698:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800769c:	b2d9      	uxtb	r1, r3
 800769e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076a8:	400a      	ands	r2, r1
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f040 80a1 	bne.w	800781a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e6      	bne.n	80076d8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3308      	adds	r3, #8
 8007710:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800771a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800771c:	f023 0301 	bic.w	r3, r3, #1
 8007720:	667b      	str	r3, [r7, #100]	@ 0x64
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3308      	adds	r3, #8
 8007728:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800772a:	647a      	str	r2, [r7, #68]	@ 0x44
 800772c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007730:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007732:	e841 2300 	strex	r3, r2, [r1]
 8007736:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1e5      	bne.n	800770a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a33      	ldr	r2, [pc, #204]	@ (8007824 <UART_RxISR_8BIT+0x1b4>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d01f      	beq.n	800779c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d018      	beq.n	800779c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	623b      	str	r3, [r7, #32]
   return(result);
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800777e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007788:	633b      	str	r3, [r7, #48]	@ 0x30
 800778a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800778e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e6      	bne.n	800776a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d12e      	bne.n	8007802 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f023 0310 	bic.w	r3, r3, #16
 80077be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077c8:	61fb      	str	r3, [r7, #28]
 80077ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	69b9      	ldr	r1, [r7, #24]
 80077ce:	69fa      	ldr	r2, [r7, #28]
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	617b      	str	r3, [r7, #20]
   return(result);
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e6      	bne.n	80077aa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	f003 0310 	and.w	r3, r3, #16
 80077e6:	2b10      	cmp	r3, #16
 80077e8:	d103      	bne.n	80077f2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2210      	movs	r2, #16
 80077f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7ff f8b0 	bl	8006960 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007800:	e00b      	b.n	800781a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7fa f992 	bl	8001b2c <HAL_UART_RxCpltCallback>
}
 8007808:	e007      	b.n	800781a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	699a      	ldr	r2, [r3, #24]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0208 	orr.w	r2, r2, #8
 8007818:	619a      	str	r2, [r3, #24]
}
 800781a:	bf00      	nop
 800781c:	3770      	adds	r7, #112	@ 0x70
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	40008000 	.word	0x40008000

08007828 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b09c      	sub	sp, #112	@ 0x70
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007836:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007840:	2b22      	cmp	r3, #34	@ 0x22
 8007842:	f040 80be 	bne.w	80079c2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007854:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007856:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800785a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800785e:	4013      	ands	r3, r2
 8007860:	b29a      	uxth	r2, r3
 8007862:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007864:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800786a:	1c9a      	adds	r2, r3, #2
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007888:	b29b      	uxth	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	f040 80a1 	bne.w	80079d2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800789e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80078b0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80078b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80078bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e6      	bne.n	8007890 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3308      	adds	r3, #8
 80078c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d4:	f023 0301 	bic.w	r3, r3, #1
 80078d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3308      	adds	r3, #8
 80078e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80078e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80078e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e5      	bne.n	80078c2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2220      	movs	r2, #32
 80078fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a33      	ldr	r2, [pc, #204]	@ (80079dc <UART_RxISR_16BIT+0x1b4>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d01f      	beq.n	8007954 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d018      	beq.n	8007954 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007936:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	461a      	mov	r2, r3
 800793e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007942:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e6      	bne.n	8007922 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007958:	2b01      	cmp	r3, #1
 800795a:	d12e      	bne.n	80079ba <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	e853 3f00 	ldrex	r3, [r3]
 800796e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f023 0310 	bic.w	r3, r3, #16
 8007976:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	461a      	mov	r2, r3
 800797e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007984:	6979      	ldr	r1, [r7, #20]
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	e841 2300 	strex	r3, r2, [r1]
 800798c:	613b      	str	r3, [r7, #16]
   return(result);
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e6      	bne.n	8007962 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	f003 0310 	and.w	r3, r3, #16
 800799e:	2b10      	cmp	r3, #16
 80079a0:	d103      	bne.n	80079aa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2210      	movs	r2, #16
 80079a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fe ffd4 	bl	8006960 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079b8:	e00b      	b.n	80079d2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7fa f8b6 	bl	8001b2c <HAL_UART_RxCpltCallback>
}
 80079c0:	e007      	b.n	80079d2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	699a      	ldr	r2, [r3, #24]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f042 0208 	orr.w	r2, r2, #8
 80079d0:	619a      	str	r2, [r3, #24]
}
 80079d2:	bf00      	nop
 80079d4:	3770      	adds	r7, #112	@ 0x70
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	40008000 	.word	0x40008000

080079e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b0ac      	sub	sp, #176	@ 0xb0
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80079ee:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a16:	2b22      	cmp	r3, #34	@ 0x22
 8007a18:	f040 8183 	bne.w	8007d22 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007a22:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a26:	e126      	b.n	8007c76 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a32:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007a36:	b2d9      	uxtb	r1, r3
 8007a38:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a42:	400a      	ands	r2, r1
 8007a44:	b2d2      	uxtb	r2, r2
 8007a46:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d053      	beq.n	8007b22 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d011      	beq.n	8007aaa <UART_RxISR_8BIT_FIFOEN+0xca>
 8007a86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00b      	beq.n	8007aaa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2201      	movs	r2, #1
 8007a98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aa0:	f043 0201 	orr.w	r2, r3, #1
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d011      	beq.n	8007ada <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007ab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00b      	beq.n	8007ada <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad0:	f043 0204 	orr.w	r2, r3, #4
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ade:	f003 0304 	and.w	r3, r3, #4
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d011      	beq.n	8007b0a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00b      	beq.n	8007b0a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2204      	movs	r2, #4
 8007af8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b00:	f043 0202 	orr.w	r2, r3, #2
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d006      	beq.n	8007b22 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7fe ff19 	bl	800694c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f040 80a3 	bne.w	8007c76 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007b3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b54:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b56:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007b58:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007b5a:	e841 2300 	strex	r3, r2, [r1]
 8007b5e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007b60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1e4      	bne.n	8007b30 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007b76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b7c:	f023 0301 	bic.w	r3, r3, #1
 8007b80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3308      	adds	r3, #8
 8007b8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b8e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007b90:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007b94:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007b9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e1      	bne.n	8007b66 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a60      	ldr	r2, [pc, #384]	@ (8007d3c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d021      	beq.n	8007c04 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d01a      	beq.n	8007c04 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bd6:	e853 3f00 	ldrex	r3, [r3]
 8007bda:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007be2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007bf0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bf2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007bf6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007bf8:	e841 2300 	strex	r3, r2, [r1]
 8007bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1e4      	bne.n	8007bce <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d130      	bne.n	8007c6e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c22:	f023 0310 	bic.w	r3, r3, #16
 8007c26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c34:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c3c:	e841 2300 	strex	r3, r2, [r1]
 8007c40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e4      	bne.n	8007c12 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	f003 0310 	and.w	r3, r3, #16
 8007c52:	2b10      	cmp	r3, #16
 8007c54:	d103      	bne.n	8007c5e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2210      	movs	r2, #16
 8007c5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7fe fe7a 	bl	8006960 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007c6c:	e00e      	b.n	8007c8c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7f9 ff5c 	bl	8001b2c <HAL_UART_RxCpltCallback>
        break;
 8007c74:	e00a      	b.n	8007c8c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c76:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d006      	beq.n	8007c8c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c82:	f003 0320 	and.w	r3, r3, #32
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f47f aece 	bne.w	8007a28 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c92:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d049      	beq.n	8007d32 <UART_RxISR_8BIT_FIFOEN+0x352>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007ca4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d242      	bcs.n	8007d32 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	e853 3f00 	ldrex	r3, [r3]
 8007cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007cd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e3      	bne.n	8007cac <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a16      	ldr	r2, [pc, #88]	@ (8007d40 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007ce8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f043 0320 	orr.w	r3, r3, #32
 8007cfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007d0c:	61bb      	str	r3, [r7, #24]
 8007d0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d10:	6979      	ldr	r1, [r7, #20]
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	e841 2300 	strex	r3, r2, [r1]
 8007d18:	613b      	str	r3, [r7, #16]
   return(result);
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e4      	bne.n	8007cea <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d20:	e007      	b.n	8007d32 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	699a      	ldr	r2, [r3, #24]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f042 0208 	orr.w	r2, r2, #8
 8007d30:	619a      	str	r2, [r3, #24]
}
 8007d32:	bf00      	nop
 8007d34:	37b0      	adds	r7, #176	@ 0xb0
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	40008000 	.word	0x40008000
 8007d40:	08007671 	.word	0x08007671

08007d44 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b0ae      	sub	sp, #184	@ 0xb8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007d52:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d7a:	2b22      	cmp	r3, #34	@ 0x22
 8007d7c:	f040 8187 	bne.w	800808e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d86:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d8a:	e12a      	b.n	8007fe2 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d92:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007d9e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007da2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007da6:	4013      	ands	r3, r2
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007dae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007db4:	1c9a      	adds	r2, r3, #2
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007dd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007dda:	f003 0307 	and.w	r3, r3, #7
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d053      	beq.n	8007e8a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007de2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d011      	beq.n	8007e12 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00b      	beq.n	8007e12 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e08:	f043 0201 	orr.w	r2, r3, #1
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e16:	f003 0302 	and.w	r3, r3, #2
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d011      	beq.n	8007e42 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007e1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00b      	beq.n	8007e42 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e38:	f043 0204 	orr.w	r2, r3, #4
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e46:	f003 0304 	and.w	r3, r3, #4
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d011      	beq.n	8007e72 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007e4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00b      	beq.n	8007e72 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2204      	movs	r2, #4
 8007e60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e68:	f043 0202 	orr.w	r2, r3, #2
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d006      	beq.n	8007e8a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7fe fd65 	bl	800694c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f040 80a5 	bne.w	8007fe2 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ea6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007eac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007eba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ebe:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ecc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e2      	bne.n	8007e98 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3308      	adds	r3, #8
 8007ed8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007edc:	e853 3f00 	ldrex	r3, [r3]
 8007ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ee2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ee4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ee8:	f023 0301 	bic.w	r3, r3, #1
 8007eec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3308      	adds	r3, #8
 8007ef6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007efa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007efc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1e1      	bne.n	8007ed2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2220      	movs	r2, #32
 8007f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a60      	ldr	r2, [pc, #384]	@ (80080a8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d021      	beq.n	8007f70 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d01a      	beq.n	8007f70 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f42:	e853 3f00 	ldrex	r3, [r3]
 8007f46:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f5e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e4      	bne.n	8007f3a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d130      	bne.n	8007fda <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f86:	e853 3f00 	ldrex	r3, [r3]
 8007f8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8e:	f023 0310 	bic.w	r3, r3, #16
 8007f92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fa2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fa8:	e841 2300 	strex	r3, r2, [r1]
 8007fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e4      	bne.n	8007f7e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	f003 0310 	and.w	r3, r3, #16
 8007fbe:	2b10      	cmp	r3, #16
 8007fc0:	d103      	bne.n	8007fca <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2210      	movs	r2, #16
 8007fc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7fe fcc4 	bl	8006960 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007fd8:	e00e      	b.n	8007ff8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7f9 fda6 	bl	8001b2c <HAL_UART_RxCpltCallback>
        break;
 8007fe0:	e00a      	b.n	8007ff8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007fe2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d006      	beq.n	8007ff8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007fea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f47f aeca 	bne.w	8007d8c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ffe:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008002:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008006:	2b00      	cmp	r3, #0
 8008008:	d049      	beq.n	800809e <UART_RxISR_16BIT_FIFOEN+0x35a>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008010:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008014:	429a      	cmp	r2, r3
 8008016:	d242      	bcs.n	800809e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3308      	adds	r3, #8
 800801e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008022:	e853 3f00 	ldrex	r3, [r3]
 8008026:	623b      	str	r3, [r7, #32]
   return(result);
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800802e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3308      	adds	r3, #8
 8008038:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800803c:	633a      	str	r2, [r7, #48]	@ 0x30
 800803e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800804a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e3      	bne.n	8008018 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a16      	ldr	r2, [pc, #88]	@ (80080ac <UART_RxISR_16BIT_FIFOEN+0x368>)
 8008054:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	e853 3f00 	ldrex	r3, [r3]
 8008062:	60fb      	str	r3, [r7, #12]
   return(result);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f043 0320 	orr.w	r3, r3, #32
 800806a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008078:	61fb      	str	r3, [r7, #28]
 800807a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	69b9      	ldr	r1, [r7, #24]
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	617b      	str	r3, [r7, #20]
   return(result);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e4      	bne.n	8008056 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800808c:	e007      	b.n	800809e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	699a      	ldr	r2, [r3, #24]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f042 0208 	orr.w	r2, r2, #8
 800809c:	619a      	str	r2, [r3, #24]
}
 800809e:	bf00      	nop
 80080a0:	37b8      	adds	r7, #184	@ 0xb8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	40008000 	.word	0x40008000
 80080ac:	08007829 	.word	0x08007829

080080b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d101      	bne.n	8008102 <HAL_UARTEx_DisableFifoMode+0x16>
 80080fe:	2302      	movs	r3, #2
 8008100:	e027      	b.n	8008152 <HAL_UARTEx_DisableFifoMode+0x66>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2224      	movs	r2, #36	@ 0x24
 800810e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 0201 	bic.w	r2, r2, #1
 8008128:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008130:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2220      	movs	r2, #32
 8008144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800816e:	2b01      	cmp	r3, #1
 8008170:	d101      	bne.n	8008176 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008172:	2302      	movs	r3, #2
 8008174:	e02d      	b.n	80081d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2224      	movs	r2, #36	@ 0x24
 8008182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 0201 	bic.w	r2, r2, #1
 800819c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f850 	bl	8008258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2220      	movs	r2, #32
 80081c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b084      	sub	sp, #16
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d101      	bne.n	80081f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081ee:	2302      	movs	r3, #2
 80081f0:	e02d      	b.n	800824e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2224      	movs	r2, #36	@ 0x24
 80081fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 0201 	bic.w	r2, r2, #1
 8008218:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f812 	bl	8008258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2220      	movs	r2, #32
 8008240:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
	...

08008258 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008264:	2b00      	cmp	r3, #0
 8008266:	d108      	bne.n	800827a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008278:	e031      	b.n	80082de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800827a:	2308      	movs	r3, #8
 800827c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800827e:	2308      	movs	r3, #8
 8008280:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	0e5b      	lsrs	r3, r3, #25
 800828a:	b2db      	uxtb	r3, r3
 800828c:	f003 0307 	and.w	r3, r3, #7
 8008290:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	0f5b      	lsrs	r3, r3, #29
 800829a:	b2db      	uxtb	r3, r3
 800829c:	f003 0307 	and.w	r3, r3, #7
 80082a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	7b3a      	ldrb	r2, [r7, #12]
 80082a6:	4911      	ldr	r1, [pc, #68]	@ (80082ec <UARTEx_SetNbDataToProcess+0x94>)
 80082a8:	5c8a      	ldrb	r2, [r1, r2]
 80082aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082ae:	7b3a      	ldrb	r2, [r7, #12]
 80082b0:	490f      	ldr	r1, [pc, #60]	@ (80082f0 <UARTEx_SetNbDataToProcess+0x98>)
 80082b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	7b7a      	ldrb	r2, [r7, #13]
 80082c4:	4909      	ldr	r1, [pc, #36]	@ (80082ec <UARTEx_SetNbDataToProcess+0x94>)
 80082c6:	5c8a      	ldrb	r2, [r1, r2]
 80082c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082cc:	7b7a      	ldrb	r2, [r7, #13]
 80082ce:	4908      	ldr	r1, [pc, #32]	@ (80082f0 <UARTEx_SetNbDataToProcess+0x98>)
 80082d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80082de:	bf00      	nop
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	08009904 	.word	0x08009904
 80082f0:	0800990c 	.word	0x0800990c

080082f4 <atoi>:
 80082f4:	220a      	movs	r2, #10
 80082f6:	2100      	movs	r1, #0
 80082f8:	f000 b87a 	b.w	80083f0 <strtol>

080082fc <_strtol_l.constprop.0>:
 80082fc:	2b24      	cmp	r3, #36	@ 0x24
 80082fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008302:	4686      	mov	lr, r0
 8008304:	4690      	mov	r8, r2
 8008306:	d801      	bhi.n	800830c <_strtol_l.constprop.0+0x10>
 8008308:	2b01      	cmp	r3, #1
 800830a:	d106      	bne.n	800831a <_strtol_l.constprop.0+0x1e>
 800830c:	f000 fa5e 	bl	80087cc <__errno>
 8008310:	2316      	movs	r3, #22
 8008312:	6003      	str	r3, [r0, #0]
 8008314:	2000      	movs	r0, #0
 8008316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800831a:	4834      	ldr	r0, [pc, #208]	@ (80083ec <_strtol_l.constprop.0+0xf0>)
 800831c:	460d      	mov	r5, r1
 800831e:	462a      	mov	r2, r5
 8008320:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008324:	5d06      	ldrb	r6, [r0, r4]
 8008326:	f016 0608 	ands.w	r6, r6, #8
 800832a:	d1f8      	bne.n	800831e <_strtol_l.constprop.0+0x22>
 800832c:	2c2d      	cmp	r4, #45	@ 0x2d
 800832e:	d12d      	bne.n	800838c <_strtol_l.constprop.0+0x90>
 8008330:	782c      	ldrb	r4, [r5, #0]
 8008332:	2601      	movs	r6, #1
 8008334:	1c95      	adds	r5, r2, #2
 8008336:	f033 0210 	bics.w	r2, r3, #16
 800833a:	d109      	bne.n	8008350 <_strtol_l.constprop.0+0x54>
 800833c:	2c30      	cmp	r4, #48	@ 0x30
 800833e:	d12a      	bne.n	8008396 <_strtol_l.constprop.0+0x9a>
 8008340:	782a      	ldrb	r2, [r5, #0]
 8008342:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008346:	2a58      	cmp	r2, #88	@ 0x58
 8008348:	d125      	bne.n	8008396 <_strtol_l.constprop.0+0x9a>
 800834a:	786c      	ldrb	r4, [r5, #1]
 800834c:	2310      	movs	r3, #16
 800834e:	3502      	adds	r5, #2
 8008350:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008354:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008358:	2200      	movs	r2, #0
 800835a:	fbbc f9f3 	udiv	r9, ip, r3
 800835e:	4610      	mov	r0, r2
 8008360:	fb03 ca19 	mls	sl, r3, r9, ip
 8008364:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008368:	2f09      	cmp	r7, #9
 800836a:	d81b      	bhi.n	80083a4 <_strtol_l.constprop.0+0xa8>
 800836c:	463c      	mov	r4, r7
 800836e:	42a3      	cmp	r3, r4
 8008370:	dd27      	ble.n	80083c2 <_strtol_l.constprop.0+0xc6>
 8008372:	1c57      	adds	r7, r2, #1
 8008374:	d007      	beq.n	8008386 <_strtol_l.constprop.0+0x8a>
 8008376:	4581      	cmp	r9, r0
 8008378:	d320      	bcc.n	80083bc <_strtol_l.constprop.0+0xc0>
 800837a:	d101      	bne.n	8008380 <_strtol_l.constprop.0+0x84>
 800837c:	45a2      	cmp	sl, r4
 800837e:	db1d      	blt.n	80083bc <_strtol_l.constprop.0+0xc0>
 8008380:	fb00 4003 	mla	r0, r0, r3, r4
 8008384:	2201      	movs	r2, #1
 8008386:	f815 4b01 	ldrb.w	r4, [r5], #1
 800838a:	e7eb      	b.n	8008364 <_strtol_l.constprop.0+0x68>
 800838c:	2c2b      	cmp	r4, #43	@ 0x2b
 800838e:	bf04      	itt	eq
 8008390:	782c      	ldrbeq	r4, [r5, #0]
 8008392:	1c95      	addeq	r5, r2, #2
 8008394:	e7cf      	b.n	8008336 <_strtol_l.constprop.0+0x3a>
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1da      	bne.n	8008350 <_strtol_l.constprop.0+0x54>
 800839a:	2c30      	cmp	r4, #48	@ 0x30
 800839c:	bf0c      	ite	eq
 800839e:	2308      	moveq	r3, #8
 80083a0:	230a      	movne	r3, #10
 80083a2:	e7d5      	b.n	8008350 <_strtol_l.constprop.0+0x54>
 80083a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80083a8:	2f19      	cmp	r7, #25
 80083aa:	d801      	bhi.n	80083b0 <_strtol_l.constprop.0+0xb4>
 80083ac:	3c37      	subs	r4, #55	@ 0x37
 80083ae:	e7de      	b.n	800836e <_strtol_l.constprop.0+0x72>
 80083b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80083b4:	2f19      	cmp	r7, #25
 80083b6:	d804      	bhi.n	80083c2 <_strtol_l.constprop.0+0xc6>
 80083b8:	3c57      	subs	r4, #87	@ 0x57
 80083ba:	e7d8      	b.n	800836e <_strtol_l.constprop.0+0x72>
 80083bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083c0:	e7e1      	b.n	8008386 <_strtol_l.constprop.0+0x8a>
 80083c2:	1c53      	adds	r3, r2, #1
 80083c4:	d108      	bne.n	80083d8 <_strtol_l.constprop.0+0xdc>
 80083c6:	2322      	movs	r3, #34	@ 0x22
 80083c8:	f8ce 3000 	str.w	r3, [lr]
 80083cc:	4660      	mov	r0, ip
 80083ce:	f1b8 0f00 	cmp.w	r8, #0
 80083d2:	d0a0      	beq.n	8008316 <_strtol_l.constprop.0+0x1a>
 80083d4:	1e69      	subs	r1, r5, #1
 80083d6:	e006      	b.n	80083e6 <_strtol_l.constprop.0+0xea>
 80083d8:	b106      	cbz	r6, 80083dc <_strtol_l.constprop.0+0xe0>
 80083da:	4240      	negs	r0, r0
 80083dc:	f1b8 0f00 	cmp.w	r8, #0
 80083e0:	d099      	beq.n	8008316 <_strtol_l.constprop.0+0x1a>
 80083e2:	2a00      	cmp	r2, #0
 80083e4:	d1f6      	bne.n	80083d4 <_strtol_l.constprop.0+0xd8>
 80083e6:	f8c8 1000 	str.w	r1, [r8]
 80083ea:	e794      	b.n	8008316 <_strtol_l.constprop.0+0x1a>
 80083ec:	08009915 	.word	0x08009915

080083f0 <strtol>:
 80083f0:	4613      	mov	r3, r2
 80083f2:	460a      	mov	r2, r1
 80083f4:	4601      	mov	r1, r0
 80083f6:	4802      	ldr	r0, [pc, #8]	@ (8008400 <strtol+0x10>)
 80083f8:	6800      	ldr	r0, [r0, #0]
 80083fa:	f7ff bf7f 	b.w	80082fc <_strtol_l.constprop.0>
 80083fe:	bf00      	nop
 8008400:	200000dc 	.word	0x200000dc

08008404 <std>:
 8008404:	2300      	movs	r3, #0
 8008406:	b510      	push	{r4, lr}
 8008408:	4604      	mov	r4, r0
 800840a:	e9c0 3300 	strd	r3, r3, [r0]
 800840e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008412:	6083      	str	r3, [r0, #8]
 8008414:	8181      	strh	r1, [r0, #12]
 8008416:	6643      	str	r3, [r0, #100]	@ 0x64
 8008418:	81c2      	strh	r2, [r0, #14]
 800841a:	6183      	str	r3, [r0, #24]
 800841c:	4619      	mov	r1, r3
 800841e:	2208      	movs	r2, #8
 8008420:	305c      	adds	r0, #92	@ 0x5c
 8008422:	f000 f928 	bl	8008676 <memset>
 8008426:	4b0d      	ldr	r3, [pc, #52]	@ (800845c <std+0x58>)
 8008428:	6263      	str	r3, [r4, #36]	@ 0x24
 800842a:	4b0d      	ldr	r3, [pc, #52]	@ (8008460 <std+0x5c>)
 800842c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800842e:	4b0d      	ldr	r3, [pc, #52]	@ (8008464 <std+0x60>)
 8008430:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008432:	4b0d      	ldr	r3, [pc, #52]	@ (8008468 <std+0x64>)
 8008434:	6323      	str	r3, [r4, #48]	@ 0x30
 8008436:	4b0d      	ldr	r3, [pc, #52]	@ (800846c <std+0x68>)
 8008438:	6224      	str	r4, [r4, #32]
 800843a:	429c      	cmp	r4, r3
 800843c:	d006      	beq.n	800844c <std+0x48>
 800843e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008442:	4294      	cmp	r4, r2
 8008444:	d002      	beq.n	800844c <std+0x48>
 8008446:	33d0      	adds	r3, #208	@ 0xd0
 8008448:	429c      	cmp	r4, r3
 800844a:	d105      	bne.n	8008458 <std+0x54>
 800844c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008454:	f000 b9e4 	b.w	8008820 <__retarget_lock_init_recursive>
 8008458:	bd10      	pop	{r4, pc}
 800845a:	bf00      	nop
 800845c:	080085f1 	.word	0x080085f1
 8008460:	08008613 	.word	0x08008613
 8008464:	0800864b 	.word	0x0800864b
 8008468:	0800866f 	.word	0x0800866f
 800846c:	2000054c 	.word	0x2000054c

08008470 <stdio_exit_handler>:
 8008470:	4a02      	ldr	r2, [pc, #8]	@ (800847c <stdio_exit_handler+0xc>)
 8008472:	4903      	ldr	r1, [pc, #12]	@ (8008480 <stdio_exit_handler+0x10>)
 8008474:	4803      	ldr	r0, [pc, #12]	@ (8008484 <stdio_exit_handler+0x14>)
 8008476:	f000 b869 	b.w	800854c <_fwalk_sglue>
 800847a:	bf00      	nop
 800847c:	200000d0 	.word	0x200000d0
 8008480:	08009139 	.word	0x08009139
 8008484:	200000e0 	.word	0x200000e0

08008488 <cleanup_stdio>:
 8008488:	6841      	ldr	r1, [r0, #4]
 800848a:	4b0c      	ldr	r3, [pc, #48]	@ (80084bc <cleanup_stdio+0x34>)
 800848c:	4299      	cmp	r1, r3
 800848e:	b510      	push	{r4, lr}
 8008490:	4604      	mov	r4, r0
 8008492:	d001      	beq.n	8008498 <cleanup_stdio+0x10>
 8008494:	f000 fe50 	bl	8009138 <_fflush_r>
 8008498:	68a1      	ldr	r1, [r4, #8]
 800849a:	4b09      	ldr	r3, [pc, #36]	@ (80084c0 <cleanup_stdio+0x38>)
 800849c:	4299      	cmp	r1, r3
 800849e:	d002      	beq.n	80084a6 <cleanup_stdio+0x1e>
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 fe49 	bl	8009138 <_fflush_r>
 80084a6:	68e1      	ldr	r1, [r4, #12]
 80084a8:	4b06      	ldr	r3, [pc, #24]	@ (80084c4 <cleanup_stdio+0x3c>)
 80084aa:	4299      	cmp	r1, r3
 80084ac:	d004      	beq.n	80084b8 <cleanup_stdio+0x30>
 80084ae:	4620      	mov	r0, r4
 80084b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084b4:	f000 be40 	b.w	8009138 <_fflush_r>
 80084b8:	bd10      	pop	{r4, pc}
 80084ba:	bf00      	nop
 80084bc:	2000054c 	.word	0x2000054c
 80084c0:	200005b4 	.word	0x200005b4
 80084c4:	2000061c 	.word	0x2000061c

080084c8 <global_stdio_init.part.0>:
 80084c8:	b510      	push	{r4, lr}
 80084ca:	4b0b      	ldr	r3, [pc, #44]	@ (80084f8 <global_stdio_init.part.0+0x30>)
 80084cc:	4c0b      	ldr	r4, [pc, #44]	@ (80084fc <global_stdio_init.part.0+0x34>)
 80084ce:	4a0c      	ldr	r2, [pc, #48]	@ (8008500 <global_stdio_init.part.0+0x38>)
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	4620      	mov	r0, r4
 80084d4:	2200      	movs	r2, #0
 80084d6:	2104      	movs	r1, #4
 80084d8:	f7ff ff94 	bl	8008404 <std>
 80084dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80084e0:	2201      	movs	r2, #1
 80084e2:	2109      	movs	r1, #9
 80084e4:	f7ff ff8e 	bl	8008404 <std>
 80084e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80084ec:	2202      	movs	r2, #2
 80084ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084f2:	2112      	movs	r1, #18
 80084f4:	f7ff bf86 	b.w	8008404 <std>
 80084f8:	20000684 	.word	0x20000684
 80084fc:	2000054c 	.word	0x2000054c
 8008500:	08008471 	.word	0x08008471

08008504 <__sfp_lock_acquire>:
 8008504:	4801      	ldr	r0, [pc, #4]	@ (800850c <__sfp_lock_acquire+0x8>)
 8008506:	f000 b98c 	b.w	8008822 <__retarget_lock_acquire_recursive>
 800850a:	bf00      	nop
 800850c:	2000068d 	.word	0x2000068d

08008510 <__sfp_lock_release>:
 8008510:	4801      	ldr	r0, [pc, #4]	@ (8008518 <__sfp_lock_release+0x8>)
 8008512:	f000 b987 	b.w	8008824 <__retarget_lock_release_recursive>
 8008516:	bf00      	nop
 8008518:	2000068d 	.word	0x2000068d

0800851c <__sinit>:
 800851c:	b510      	push	{r4, lr}
 800851e:	4604      	mov	r4, r0
 8008520:	f7ff fff0 	bl	8008504 <__sfp_lock_acquire>
 8008524:	6a23      	ldr	r3, [r4, #32]
 8008526:	b11b      	cbz	r3, 8008530 <__sinit+0x14>
 8008528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800852c:	f7ff bff0 	b.w	8008510 <__sfp_lock_release>
 8008530:	4b04      	ldr	r3, [pc, #16]	@ (8008544 <__sinit+0x28>)
 8008532:	6223      	str	r3, [r4, #32]
 8008534:	4b04      	ldr	r3, [pc, #16]	@ (8008548 <__sinit+0x2c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1f5      	bne.n	8008528 <__sinit+0xc>
 800853c:	f7ff ffc4 	bl	80084c8 <global_stdio_init.part.0>
 8008540:	e7f2      	b.n	8008528 <__sinit+0xc>
 8008542:	bf00      	nop
 8008544:	08008489 	.word	0x08008489
 8008548:	20000684 	.word	0x20000684

0800854c <_fwalk_sglue>:
 800854c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008550:	4607      	mov	r7, r0
 8008552:	4688      	mov	r8, r1
 8008554:	4614      	mov	r4, r2
 8008556:	2600      	movs	r6, #0
 8008558:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800855c:	f1b9 0901 	subs.w	r9, r9, #1
 8008560:	d505      	bpl.n	800856e <_fwalk_sglue+0x22>
 8008562:	6824      	ldr	r4, [r4, #0]
 8008564:	2c00      	cmp	r4, #0
 8008566:	d1f7      	bne.n	8008558 <_fwalk_sglue+0xc>
 8008568:	4630      	mov	r0, r6
 800856a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800856e:	89ab      	ldrh	r3, [r5, #12]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d907      	bls.n	8008584 <_fwalk_sglue+0x38>
 8008574:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008578:	3301      	adds	r3, #1
 800857a:	d003      	beq.n	8008584 <_fwalk_sglue+0x38>
 800857c:	4629      	mov	r1, r5
 800857e:	4638      	mov	r0, r7
 8008580:	47c0      	blx	r8
 8008582:	4306      	orrs	r6, r0
 8008584:	3568      	adds	r5, #104	@ 0x68
 8008586:	e7e9      	b.n	800855c <_fwalk_sglue+0x10>

08008588 <sniprintf>:
 8008588:	b40c      	push	{r2, r3}
 800858a:	b530      	push	{r4, r5, lr}
 800858c:	4b17      	ldr	r3, [pc, #92]	@ (80085ec <sniprintf+0x64>)
 800858e:	1e0c      	subs	r4, r1, #0
 8008590:	681d      	ldr	r5, [r3, #0]
 8008592:	b09d      	sub	sp, #116	@ 0x74
 8008594:	da08      	bge.n	80085a8 <sniprintf+0x20>
 8008596:	238b      	movs	r3, #139	@ 0x8b
 8008598:	602b      	str	r3, [r5, #0]
 800859a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800859e:	b01d      	add	sp, #116	@ 0x74
 80085a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085a4:	b002      	add	sp, #8
 80085a6:	4770      	bx	lr
 80085a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80085ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80085b0:	bf14      	ite	ne
 80085b2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80085b6:	4623      	moveq	r3, r4
 80085b8:	9304      	str	r3, [sp, #16]
 80085ba:	9307      	str	r3, [sp, #28]
 80085bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80085c0:	9002      	str	r0, [sp, #8]
 80085c2:	9006      	str	r0, [sp, #24]
 80085c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80085c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80085ca:	ab21      	add	r3, sp, #132	@ 0x84
 80085cc:	a902      	add	r1, sp, #8
 80085ce:	4628      	mov	r0, r5
 80085d0:	9301      	str	r3, [sp, #4]
 80085d2:	f000 faa3 	bl	8008b1c <_svfiprintf_r>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	bfbc      	itt	lt
 80085da:	238b      	movlt	r3, #139	@ 0x8b
 80085dc:	602b      	strlt	r3, [r5, #0]
 80085de:	2c00      	cmp	r4, #0
 80085e0:	d0dd      	beq.n	800859e <sniprintf+0x16>
 80085e2:	9b02      	ldr	r3, [sp, #8]
 80085e4:	2200      	movs	r2, #0
 80085e6:	701a      	strb	r2, [r3, #0]
 80085e8:	e7d9      	b.n	800859e <sniprintf+0x16>
 80085ea:	bf00      	nop
 80085ec:	200000dc 	.word	0x200000dc

080085f0 <__sread>:
 80085f0:	b510      	push	{r4, lr}
 80085f2:	460c      	mov	r4, r1
 80085f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f8:	f000 f8c4 	bl	8008784 <_read_r>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	bfab      	itete	ge
 8008600:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008602:	89a3      	ldrhlt	r3, [r4, #12]
 8008604:	181b      	addge	r3, r3, r0
 8008606:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800860a:	bfac      	ite	ge
 800860c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800860e:	81a3      	strhlt	r3, [r4, #12]
 8008610:	bd10      	pop	{r4, pc}

08008612 <__swrite>:
 8008612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008616:	461f      	mov	r7, r3
 8008618:	898b      	ldrh	r3, [r1, #12]
 800861a:	05db      	lsls	r3, r3, #23
 800861c:	4605      	mov	r5, r0
 800861e:	460c      	mov	r4, r1
 8008620:	4616      	mov	r6, r2
 8008622:	d505      	bpl.n	8008630 <__swrite+0x1e>
 8008624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008628:	2302      	movs	r3, #2
 800862a:	2200      	movs	r2, #0
 800862c:	f000 f898 	bl	8008760 <_lseek_r>
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008636:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800863a:	81a3      	strh	r3, [r4, #12]
 800863c:	4632      	mov	r2, r6
 800863e:	463b      	mov	r3, r7
 8008640:	4628      	mov	r0, r5
 8008642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008646:	f000 b8af 	b.w	80087a8 <_write_r>

0800864a <__sseek>:
 800864a:	b510      	push	{r4, lr}
 800864c:	460c      	mov	r4, r1
 800864e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008652:	f000 f885 	bl	8008760 <_lseek_r>
 8008656:	1c43      	adds	r3, r0, #1
 8008658:	89a3      	ldrh	r3, [r4, #12]
 800865a:	bf15      	itete	ne
 800865c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800865e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008662:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008666:	81a3      	strheq	r3, [r4, #12]
 8008668:	bf18      	it	ne
 800866a:	81a3      	strhne	r3, [r4, #12]
 800866c:	bd10      	pop	{r4, pc}

0800866e <__sclose>:
 800866e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008672:	f000 b865 	b.w	8008740 <_close_r>

08008676 <memset>:
 8008676:	4402      	add	r2, r0
 8008678:	4603      	mov	r3, r0
 800867a:	4293      	cmp	r3, r2
 800867c:	d100      	bne.n	8008680 <memset+0xa>
 800867e:	4770      	bx	lr
 8008680:	f803 1b01 	strb.w	r1, [r3], #1
 8008684:	e7f9      	b.n	800867a <memset+0x4>
	...

08008688 <strtok>:
 8008688:	4b16      	ldr	r3, [pc, #88]	@ (80086e4 <strtok+0x5c>)
 800868a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800868e:	681f      	ldr	r7, [r3, #0]
 8008690:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008692:	4605      	mov	r5, r0
 8008694:	460e      	mov	r6, r1
 8008696:	b9ec      	cbnz	r4, 80086d4 <strtok+0x4c>
 8008698:	2050      	movs	r0, #80	@ 0x50
 800869a:	f000 f92d 	bl	80088f8 <malloc>
 800869e:	4602      	mov	r2, r0
 80086a0:	6478      	str	r0, [r7, #68]	@ 0x44
 80086a2:	b920      	cbnz	r0, 80086ae <strtok+0x26>
 80086a4:	4b10      	ldr	r3, [pc, #64]	@ (80086e8 <strtok+0x60>)
 80086a6:	4811      	ldr	r0, [pc, #68]	@ (80086ec <strtok+0x64>)
 80086a8:	215b      	movs	r1, #91	@ 0x5b
 80086aa:	f000 f8bd 	bl	8008828 <__assert_func>
 80086ae:	e9c0 4400 	strd	r4, r4, [r0]
 80086b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80086b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80086ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80086be:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80086c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80086c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80086ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80086ce:	6184      	str	r4, [r0, #24]
 80086d0:	7704      	strb	r4, [r0, #28]
 80086d2:	6244      	str	r4, [r0, #36]	@ 0x24
 80086d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086d6:	4631      	mov	r1, r6
 80086d8:	4628      	mov	r0, r5
 80086da:	2301      	movs	r3, #1
 80086dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086e0:	f000 b806 	b.w	80086f0 <__strtok_r>
 80086e4:	200000dc 	.word	0x200000dc
 80086e8:	08009a15 	.word	0x08009a15
 80086ec:	08009a2c 	.word	0x08009a2c

080086f0 <__strtok_r>:
 80086f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086f2:	4604      	mov	r4, r0
 80086f4:	b908      	cbnz	r0, 80086fa <__strtok_r+0xa>
 80086f6:	6814      	ldr	r4, [r2, #0]
 80086f8:	b144      	cbz	r4, 800870c <__strtok_r+0x1c>
 80086fa:	4620      	mov	r0, r4
 80086fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008700:	460f      	mov	r7, r1
 8008702:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008706:	b91e      	cbnz	r6, 8008710 <__strtok_r+0x20>
 8008708:	b965      	cbnz	r5, 8008724 <__strtok_r+0x34>
 800870a:	6015      	str	r5, [r2, #0]
 800870c:	2000      	movs	r0, #0
 800870e:	e005      	b.n	800871c <__strtok_r+0x2c>
 8008710:	42b5      	cmp	r5, r6
 8008712:	d1f6      	bne.n	8008702 <__strtok_r+0x12>
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1f0      	bne.n	80086fa <__strtok_r+0xa>
 8008718:	6014      	str	r4, [r2, #0]
 800871a:	7003      	strb	r3, [r0, #0]
 800871c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800871e:	461c      	mov	r4, r3
 8008720:	e00c      	b.n	800873c <__strtok_r+0x4c>
 8008722:	b915      	cbnz	r5, 800872a <__strtok_r+0x3a>
 8008724:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008728:	460e      	mov	r6, r1
 800872a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800872e:	42ab      	cmp	r3, r5
 8008730:	d1f7      	bne.n	8008722 <__strtok_r+0x32>
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0f3      	beq.n	800871e <__strtok_r+0x2e>
 8008736:	2300      	movs	r3, #0
 8008738:	f804 3c01 	strb.w	r3, [r4, #-1]
 800873c:	6014      	str	r4, [r2, #0]
 800873e:	e7ed      	b.n	800871c <__strtok_r+0x2c>

08008740 <_close_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4d06      	ldr	r5, [pc, #24]	@ (800875c <_close_r+0x1c>)
 8008744:	2300      	movs	r3, #0
 8008746:	4604      	mov	r4, r0
 8008748:	4608      	mov	r0, r1
 800874a:	602b      	str	r3, [r5, #0]
 800874c:	f7f8 fb68 	bl	8000e20 <_close>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	d102      	bne.n	800875a <_close_r+0x1a>
 8008754:	682b      	ldr	r3, [r5, #0]
 8008756:	b103      	cbz	r3, 800875a <_close_r+0x1a>
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	20000688 	.word	0x20000688

08008760 <_lseek_r>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	4d07      	ldr	r5, [pc, #28]	@ (8008780 <_lseek_r+0x20>)
 8008764:	4604      	mov	r4, r0
 8008766:	4608      	mov	r0, r1
 8008768:	4611      	mov	r1, r2
 800876a:	2200      	movs	r2, #0
 800876c:	602a      	str	r2, [r5, #0]
 800876e:	461a      	mov	r2, r3
 8008770:	f7f8 fb7d 	bl	8000e6e <_lseek>
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	d102      	bne.n	800877e <_lseek_r+0x1e>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	b103      	cbz	r3, 800877e <_lseek_r+0x1e>
 800877c:	6023      	str	r3, [r4, #0]
 800877e:	bd38      	pop	{r3, r4, r5, pc}
 8008780:	20000688 	.word	0x20000688

08008784 <_read_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4d07      	ldr	r5, [pc, #28]	@ (80087a4 <_read_r+0x20>)
 8008788:	4604      	mov	r4, r0
 800878a:	4608      	mov	r0, r1
 800878c:	4611      	mov	r1, r2
 800878e:	2200      	movs	r2, #0
 8008790:	602a      	str	r2, [r5, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	f7f8 fb0b 	bl	8000dae <_read>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d102      	bne.n	80087a2 <_read_r+0x1e>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b103      	cbz	r3, 80087a2 <_read_r+0x1e>
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	20000688 	.word	0x20000688

080087a8 <_write_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4d07      	ldr	r5, [pc, #28]	@ (80087c8 <_write_r+0x20>)
 80087ac:	4604      	mov	r4, r0
 80087ae:	4608      	mov	r0, r1
 80087b0:	4611      	mov	r1, r2
 80087b2:	2200      	movs	r2, #0
 80087b4:	602a      	str	r2, [r5, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	f7f8 fb16 	bl	8000de8 <_write>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_write_r+0x1e>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_write_r+0x1e>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	20000688 	.word	0x20000688

080087cc <__errno>:
 80087cc:	4b01      	ldr	r3, [pc, #4]	@ (80087d4 <__errno+0x8>)
 80087ce:	6818      	ldr	r0, [r3, #0]
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	200000dc 	.word	0x200000dc

080087d8 <__libc_init_array>:
 80087d8:	b570      	push	{r4, r5, r6, lr}
 80087da:	4d0d      	ldr	r5, [pc, #52]	@ (8008810 <__libc_init_array+0x38>)
 80087dc:	4c0d      	ldr	r4, [pc, #52]	@ (8008814 <__libc_init_array+0x3c>)
 80087de:	1b64      	subs	r4, r4, r5
 80087e0:	10a4      	asrs	r4, r4, #2
 80087e2:	2600      	movs	r6, #0
 80087e4:	42a6      	cmp	r6, r4
 80087e6:	d109      	bne.n	80087fc <__libc_init_array+0x24>
 80087e8:	4d0b      	ldr	r5, [pc, #44]	@ (8008818 <__libc_init_array+0x40>)
 80087ea:	4c0c      	ldr	r4, [pc, #48]	@ (800881c <__libc_init_array+0x44>)
 80087ec:	f000 fff0 	bl	80097d0 <_init>
 80087f0:	1b64      	subs	r4, r4, r5
 80087f2:	10a4      	asrs	r4, r4, #2
 80087f4:	2600      	movs	r6, #0
 80087f6:	42a6      	cmp	r6, r4
 80087f8:	d105      	bne.n	8008806 <__libc_init_array+0x2e>
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
 80087fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008800:	4798      	blx	r3
 8008802:	3601      	adds	r6, #1
 8008804:	e7ee      	b.n	80087e4 <__libc_init_array+0xc>
 8008806:	f855 3b04 	ldr.w	r3, [r5], #4
 800880a:	4798      	blx	r3
 800880c:	3601      	adds	r6, #1
 800880e:	e7f2      	b.n	80087f6 <__libc_init_array+0x1e>
 8008810:	08009b00 	.word	0x08009b00
 8008814:	08009b00 	.word	0x08009b00
 8008818:	08009b00 	.word	0x08009b00
 800881c:	08009b04 	.word	0x08009b04

08008820 <__retarget_lock_init_recursive>:
 8008820:	4770      	bx	lr

08008822 <__retarget_lock_acquire_recursive>:
 8008822:	4770      	bx	lr

08008824 <__retarget_lock_release_recursive>:
 8008824:	4770      	bx	lr
	...

08008828 <__assert_func>:
 8008828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800882a:	4614      	mov	r4, r2
 800882c:	461a      	mov	r2, r3
 800882e:	4b09      	ldr	r3, [pc, #36]	@ (8008854 <__assert_func+0x2c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4605      	mov	r5, r0
 8008834:	68d8      	ldr	r0, [r3, #12]
 8008836:	b954      	cbnz	r4, 800884e <__assert_func+0x26>
 8008838:	4b07      	ldr	r3, [pc, #28]	@ (8008858 <__assert_func+0x30>)
 800883a:	461c      	mov	r4, r3
 800883c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008840:	9100      	str	r1, [sp, #0]
 8008842:	462b      	mov	r3, r5
 8008844:	4905      	ldr	r1, [pc, #20]	@ (800885c <__assert_func+0x34>)
 8008846:	f000 fc9f 	bl	8009188 <fiprintf>
 800884a:	f000 fce7 	bl	800921c <abort>
 800884e:	4b04      	ldr	r3, [pc, #16]	@ (8008860 <__assert_func+0x38>)
 8008850:	e7f4      	b.n	800883c <__assert_func+0x14>
 8008852:	bf00      	nop
 8008854:	200000dc 	.word	0x200000dc
 8008858:	08009ac1 	.word	0x08009ac1
 800885c:	08009a93 	.word	0x08009a93
 8008860:	08009a86 	.word	0x08009a86

08008864 <_free_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4605      	mov	r5, r0
 8008868:	2900      	cmp	r1, #0
 800886a:	d041      	beq.n	80088f0 <_free_r+0x8c>
 800886c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008870:	1f0c      	subs	r4, r1, #4
 8008872:	2b00      	cmp	r3, #0
 8008874:	bfb8      	it	lt
 8008876:	18e4      	addlt	r4, r4, r3
 8008878:	f000 f8e8 	bl	8008a4c <__malloc_lock>
 800887c:	4a1d      	ldr	r2, [pc, #116]	@ (80088f4 <_free_r+0x90>)
 800887e:	6813      	ldr	r3, [r2, #0]
 8008880:	b933      	cbnz	r3, 8008890 <_free_r+0x2c>
 8008882:	6063      	str	r3, [r4, #4]
 8008884:	6014      	str	r4, [r2, #0]
 8008886:	4628      	mov	r0, r5
 8008888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800888c:	f000 b8e4 	b.w	8008a58 <__malloc_unlock>
 8008890:	42a3      	cmp	r3, r4
 8008892:	d908      	bls.n	80088a6 <_free_r+0x42>
 8008894:	6820      	ldr	r0, [r4, #0]
 8008896:	1821      	adds	r1, r4, r0
 8008898:	428b      	cmp	r3, r1
 800889a:	bf01      	itttt	eq
 800889c:	6819      	ldreq	r1, [r3, #0]
 800889e:	685b      	ldreq	r3, [r3, #4]
 80088a0:	1809      	addeq	r1, r1, r0
 80088a2:	6021      	streq	r1, [r4, #0]
 80088a4:	e7ed      	b.n	8008882 <_free_r+0x1e>
 80088a6:	461a      	mov	r2, r3
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	b10b      	cbz	r3, 80088b0 <_free_r+0x4c>
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	d9fa      	bls.n	80088a6 <_free_r+0x42>
 80088b0:	6811      	ldr	r1, [r2, #0]
 80088b2:	1850      	adds	r0, r2, r1
 80088b4:	42a0      	cmp	r0, r4
 80088b6:	d10b      	bne.n	80088d0 <_free_r+0x6c>
 80088b8:	6820      	ldr	r0, [r4, #0]
 80088ba:	4401      	add	r1, r0
 80088bc:	1850      	adds	r0, r2, r1
 80088be:	4283      	cmp	r3, r0
 80088c0:	6011      	str	r1, [r2, #0]
 80088c2:	d1e0      	bne.n	8008886 <_free_r+0x22>
 80088c4:	6818      	ldr	r0, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	6053      	str	r3, [r2, #4]
 80088ca:	4408      	add	r0, r1
 80088cc:	6010      	str	r0, [r2, #0]
 80088ce:	e7da      	b.n	8008886 <_free_r+0x22>
 80088d0:	d902      	bls.n	80088d8 <_free_r+0x74>
 80088d2:	230c      	movs	r3, #12
 80088d4:	602b      	str	r3, [r5, #0]
 80088d6:	e7d6      	b.n	8008886 <_free_r+0x22>
 80088d8:	6820      	ldr	r0, [r4, #0]
 80088da:	1821      	adds	r1, r4, r0
 80088dc:	428b      	cmp	r3, r1
 80088de:	bf04      	itt	eq
 80088e0:	6819      	ldreq	r1, [r3, #0]
 80088e2:	685b      	ldreq	r3, [r3, #4]
 80088e4:	6063      	str	r3, [r4, #4]
 80088e6:	bf04      	itt	eq
 80088e8:	1809      	addeq	r1, r1, r0
 80088ea:	6021      	streq	r1, [r4, #0]
 80088ec:	6054      	str	r4, [r2, #4]
 80088ee:	e7ca      	b.n	8008886 <_free_r+0x22>
 80088f0:	bd38      	pop	{r3, r4, r5, pc}
 80088f2:	bf00      	nop
 80088f4:	20000694 	.word	0x20000694

080088f8 <malloc>:
 80088f8:	4b02      	ldr	r3, [pc, #8]	@ (8008904 <malloc+0xc>)
 80088fa:	4601      	mov	r1, r0
 80088fc:	6818      	ldr	r0, [r3, #0]
 80088fe:	f000 b825 	b.w	800894c <_malloc_r>
 8008902:	bf00      	nop
 8008904:	200000dc 	.word	0x200000dc

08008908 <sbrk_aligned>:
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	4e0f      	ldr	r6, [pc, #60]	@ (8008948 <sbrk_aligned+0x40>)
 800890c:	460c      	mov	r4, r1
 800890e:	6831      	ldr	r1, [r6, #0]
 8008910:	4605      	mov	r5, r0
 8008912:	b911      	cbnz	r1, 800891a <sbrk_aligned+0x12>
 8008914:	f000 fc64 	bl	80091e0 <_sbrk_r>
 8008918:	6030      	str	r0, [r6, #0]
 800891a:	4621      	mov	r1, r4
 800891c:	4628      	mov	r0, r5
 800891e:	f000 fc5f 	bl	80091e0 <_sbrk_r>
 8008922:	1c43      	adds	r3, r0, #1
 8008924:	d103      	bne.n	800892e <sbrk_aligned+0x26>
 8008926:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800892a:	4620      	mov	r0, r4
 800892c:	bd70      	pop	{r4, r5, r6, pc}
 800892e:	1cc4      	adds	r4, r0, #3
 8008930:	f024 0403 	bic.w	r4, r4, #3
 8008934:	42a0      	cmp	r0, r4
 8008936:	d0f8      	beq.n	800892a <sbrk_aligned+0x22>
 8008938:	1a21      	subs	r1, r4, r0
 800893a:	4628      	mov	r0, r5
 800893c:	f000 fc50 	bl	80091e0 <_sbrk_r>
 8008940:	3001      	adds	r0, #1
 8008942:	d1f2      	bne.n	800892a <sbrk_aligned+0x22>
 8008944:	e7ef      	b.n	8008926 <sbrk_aligned+0x1e>
 8008946:	bf00      	nop
 8008948:	20000690 	.word	0x20000690

0800894c <_malloc_r>:
 800894c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008950:	1ccd      	adds	r5, r1, #3
 8008952:	f025 0503 	bic.w	r5, r5, #3
 8008956:	3508      	adds	r5, #8
 8008958:	2d0c      	cmp	r5, #12
 800895a:	bf38      	it	cc
 800895c:	250c      	movcc	r5, #12
 800895e:	2d00      	cmp	r5, #0
 8008960:	4606      	mov	r6, r0
 8008962:	db01      	blt.n	8008968 <_malloc_r+0x1c>
 8008964:	42a9      	cmp	r1, r5
 8008966:	d904      	bls.n	8008972 <_malloc_r+0x26>
 8008968:	230c      	movs	r3, #12
 800896a:	6033      	str	r3, [r6, #0]
 800896c:	2000      	movs	r0, #0
 800896e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008972:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a48 <_malloc_r+0xfc>
 8008976:	f000 f869 	bl	8008a4c <__malloc_lock>
 800897a:	f8d8 3000 	ldr.w	r3, [r8]
 800897e:	461c      	mov	r4, r3
 8008980:	bb44      	cbnz	r4, 80089d4 <_malloc_r+0x88>
 8008982:	4629      	mov	r1, r5
 8008984:	4630      	mov	r0, r6
 8008986:	f7ff ffbf 	bl	8008908 <sbrk_aligned>
 800898a:	1c43      	adds	r3, r0, #1
 800898c:	4604      	mov	r4, r0
 800898e:	d158      	bne.n	8008a42 <_malloc_r+0xf6>
 8008990:	f8d8 4000 	ldr.w	r4, [r8]
 8008994:	4627      	mov	r7, r4
 8008996:	2f00      	cmp	r7, #0
 8008998:	d143      	bne.n	8008a22 <_malloc_r+0xd6>
 800899a:	2c00      	cmp	r4, #0
 800899c:	d04b      	beq.n	8008a36 <_malloc_r+0xea>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	4639      	mov	r1, r7
 80089a2:	4630      	mov	r0, r6
 80089a4:	eb04 0903 	add.w	r9, r4, r3
 80089a8:	f000 fc1a 	bl	80091e0 <_sbrk_r>
 80089ac:	4581      	cmp	r9, r0
 80089ae:	d142      	bne.n	8008a36 <_malloc_r+0xea>
 80089b0:	6821      	ldr	r1, [r4, #0]
 80089b2:	1a6d      	subs	r5, r5, r1
 80089b4:	4629      	mov	r1, r5
 80089b6:	4630      	mov	r0, r6
 80089b8:	f7ff ffa6 	bl	8008908 <sbrk_aligned>
 80089bc:	3001      	adds	r0, #1
 80089be:	d03a      	beq.n	8008a36 <_malloc_r+0xea>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	442b      	add	r3, r5
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	f8d8 3000 	ldr.w	r3, [r8]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	bb62      	cbnz	r2, 8008a28 <_malloc_r+0xdc>
 80089ce:	f8c8 7000 	str.w	r7, [r8]
 80089d2:	e00f      	b.n	80089f4 <_malloc_r+0xa8>
 80089d4:	6822      	ldr	r2, [r4, #0]
 80089d6:	1b52      	subs	r2, r2, r5
 80089d8:	d420      	bmi.n	8008a1c <_malloc_r+0xd0>
 80089da:	2a0b      	cmp	r2, #11
 80089dc:	d917      	bls.n	8008a0e <_malloc_r+0xc2>
 80089de:	1961      	adds	r1, r4, r5
 80089e0:	42a3      	cmp	r3, r4
 80089e2:	6025      	str	r5, [r4, #0]
 80089e4:	bf18      	it	ne
 80089e6:	6059      	strne	r1, [r3, #4]
 80089e8:	6863      	ldr	r3, [r4, #4]
 80089ea:	bf08      	it	eq
 80089ec:	f8c8 1000 	streq.w	r1, [r8]
 80089f0:	5162      	str	r2, [r4, r5]
 80089f2:	604b      	str	r3, [r1, #4]
 80089f4:	4630      	mov	r0, r6
 80089f6:	f000 f82f 	bl	8008a58 <__malloc_unlock>
 80089fa:	f104 000b 	add.w	r0, r4, #11
 80089fe:	1d23      	adds	r3, r4, #4
 8008a00:	f020 0007 	bic.w	r0, r0, #7
 8008a04:	1ac2      	subs	r2, r0, r3
 8008a06:	bf1c      	itt	ne
 8008a08:	1a1b      	subne	r3, r3, r0
 8008a0a:	50a3      	strne	r3, [r4, r2]
 8008a0c:	e7af      	b.n	800896e <_malloc_r+0x22>
 8008a0e:	6862      	ldr	r2, [r4, #4]
 8008a10:	42a3      	cmp	r3, r4
 8008a12:	bf0c      	ite	eq
 8008a14:	f8c8 2000 	streq.w	r2, [r8]
 8008a18:	605a      	strne	r2, [r3, #4]
 8008a1a:	e7eb      	b.n	80089f4 <_malloc_r+0xa8>
 8008a1c:	4623      	mov	r3, r4
 8008a1e:	6864      	ldr	r4, [r4, #4]
 8008a20:	e7ae      	b.n	8008980 <_malloc_r+0x34>
 8008a22:	463c      	mov	r4, r7
 8008a24:	687f      	ldr	r7, [r7, #4]
 8008a26:	e7b6      	b.n	8008996 <_malloc_r+0x4a>
 8008a28:	461a      	mov	r2, r3
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	42a3      	cmp	r3, r4
 8008a2e:	d1fb      	bne.n	8008a28 <_malloc_r+0xdc>
 8008a30:	2300      	movs	r3, #0
 8008a32:	6053      	str	r3, [r2, #4]
 8008a34:	e7de      	b.n	80089f4 <_malloc_r+0xa8>
 8008a36:	230c      	movs	r3, #12
 8008a38:	6033      	str	r3, [r6, #0]
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	f000 f80c 	bl	8008a58 <__malloc_unlock>
 8008a40:	e794      	b.n	800896c <_malloc_r+0x20>
 8008a42:	6005      	str	r5, [r0, #0]
 8008a44:	e7d6      	b.n	80089f4 <_malloc_r+0xa8>
 8008a46:	bf00      	nop
 8008a48:	20000694 	.word	0x20000694

08008a4c <__malloc_lock>:
 8008a4c:	4801      	ldr	r0, [pc, #4]	@ (8008a54 <__malloc_lock+0x8>)
 8008a4e:	f7ff bee8 	b.w	8008822 <__retarget_lock_acquire_recursive>
 8008a52:	bf00      	nop
 8008a54:	2000068c 	.word	0x2000068c

08008a58 <__malloc_unlock>:
 8008a58:	4801      	ldr	r0, [pc, #4]	@ (8008a60 <__malloc_unlock+0x8>)
 8008a5a:	f7ff bee3 	b.w	8008824 <__retarget_lock_release_recursive>
 8008a5e:	bf00      	nop
 8008a60:	2000068c 	.word	0x2000068c

08008a64 <__ssputs_r>:
 8008a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a68:	688e      	ldr	r6, [r1, #8]
 8008a6a:	461f      	mov	r7, r3
 8008a6c:	42be      	cmp	r6, r7
 8008a6e:	680b      	ldr	r3, [r1, #0]
 8008a70:	4682      	mov	sl, r0
 8008a72:	460c      	mov	r4, r1
 8008a74:	4690      	mov	r8, r2
 8008a76:	d82d      	bhi.n	8008ad4 <__ssputs_r+0x70>
 8008a78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008a80:	d026      	beq.n	8008ad0 <__ssputs_r+0x6c>
 8008a82:	6965      	ldr	r5, [r4, #20]
 8008a84:	6909      	ldr	r1, [r1, #16]
 8008a86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a8a:	eba3 0901 	sub.w	r9, r3, r1
 8008a8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a92:	1c7b      	adds	r3, r7, #1
 8008a94:	444b      	add	r3, r9
 8008a96:	106d      	asrs	r5, r5, #1
 8008a98:	429d      	cmp	r5, r3
 8008a9a:	bf38      	it	cc
 8008a9c:	461d      	movcc	r5, r3
 8008a9e:	0553      	lsls	r3, r2, #21
 8008aa0:	d527      	bpl.n	8008af2 <__ssputs_r+0x8e>
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	f7ff ff52 	bl	800894c <_malloc_r>
 8008aa8:	4606      	mov	r6, r0
 8008aaa:	b360      	cbz	r0, 8008b06 <__ssputs_r+0xa2>
 8008aac:	6921      	ldr	r1, [r4, #16]
 8008aae:	464a      	mov	r2, r9
 8008ab0:	f000 fba6 	bl	8009200 <memcpy>
 8008ab4:	89a3      	ldrh	r3, [r4, #12]
 8008ab6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008abe:	81a3      	strh	r3, [r4, #12]
 8008ac0:	6126      	str	r6, [r4, #16]
 8008ac2:	6165      	str	r5, [r4, #20]
 8008ac4:	444e      	add	r6, r9
 8008ac6:	eba5 0509 	sub.w	r5, r5, r9
 8008aca:	6026      	str	r6, [r4, #0]
 8008acc:	60a5      	str	r5, [r4, #8]
 8008ace:	463e      	mov	r6, r7
 8008ad0:	42be      	cmp	r6, r7
 8008ad2:	d900      	bls.n	8008ad6 <__ssputs_r+0x72>
 8008ad4:	463e      	mov	r6, r7
 8008ad6:	6820      	ldr	r0, [r4, #0]
 8008ad8:	4632      	mov	r2, r6
 8008ada:	4641      	mov	r1, r8
 8008adc:	f000 fb66 	bl	80091ac <memmove>
 8008ae0:	68a3      	ldr	r3, [r4, #8]
 8008ae2:	1b9b      	subs	r3, r3, r6
 8008ae4:	60a3      	str	r3, [r4, #8]
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	4433      	add	r3, r6
 8008aea:	6023      	str	r3, [r4, #0]
 8008aec:	2000      	movs	r0, #0
 8008aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af2:	462a      	mov	r2, r5
 8008af4:	f000 fb99 	bl	800922a <_realloc_r>
 8008af8:	4606      	mov	r6, r0
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d1e0      	bne.n	8008ac0 <__ssputs_r+0x5c>
 8008afe:	6921      	ldr	r1, [r4, #16]
 8008b00:	4650      	mov	r0, sl
 8008b02:	f7ff feaf 	bl	8008864 <_free_r>
 8008b06:	230c      	movs	r3, #12
 8008b08:	f8ca 3000 	str.w	r3, [sl]
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b12:	81a3      	strh	r3, [r4, #12]
 8008b14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b18:	e7e9      	b.n	8008aee <__ssputs_r+0x8a>
	...

08008b1c <_svfiprintf_r>:
 8008b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b20:	4698      	mov	r8, r3
 8008b22:	898b      	ldrh	r3, [r1, #12]
 8008b24:	061b      	lsls	r3, r3, #24
 8008b26:	b09d      	sub	sp, #116	@ 0x74
 8008b28:	4607      	mov	r7, r0
 8008b2a:	460d      	mov	r5, r1
 8008b2c:	4614      	mov	r4, r2
 8008b2e:	d510      	bpl.n	8008b52 <_svfiprintf_r+0x36>
 8008b30:	690b      	ldr	r3, [r1, #16]
 8008b32:	b973      	cbnz	r3, 8008b52 <_svfiprintf_r+0x36>
 8008b34:	2140      	movs	r1, #64	@ 0x40
 8008b36:	f7ff ff09 	bl	800894c <_malloc_r>
 8008b3a:	6028      	str	r0, [r5, #0]
 8008b3c:	6128      	str	r0, [r5, #16]
 8008b3e:	b930      	cbnz	r0, 8008b4e <_svfiprintf_r+0x32>
 8008b40:	230c      	movs	r3, #12
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b48:	b01d      	add	sp, #116	@ 0x74
 8008b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4e:	2340      	movs	r3, #64	@ 0x40
 8008b50:	616b      	str	r3, [r5, #20]
 8008b52:	2300      	movs	r3, #0
 8008b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b56:	2320      	movs	r3, #32
 8008b58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b60:	2330      	movs	r3, #48	@ 0x30
 8008b62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008d00 <_svfiprintf_r+0x1e4>
 8008b66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b6a:	f04f 0901 	mov.w	r9, #1
 8008b6e:	4623      	mov	r3, r4
 8008b70:	469a      	mov	sl, r3
 8008b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b76:	b10a      	cbz	r2, 8008b7c <_svfiprintf_r+0x60>
 8008b78:	2a25      	cmp	r2, #37	@ 0x25
 8008b7a:	d1f9      	bne.n	8008b70 <_svfiprintf_r+0x54>
 8008b7c:	ebba 0b04 	subs.w	fp, sl, r4
 8008b80:	d00b      	beq.n	8008b9a <_svfiprintf_r+0x7e>
 8008b82:	465b      	mov	r3, fp
 8008b84:	4622      	mov	r2, r4
 8008b86:	4629      	mov	r1, r5
 8008b88:	4638      	mov	r0, r7
 8008b8a:	f7ff ff6b 	bl	8008a64 <__ssputs_r>
 8008b8e:	3001      	adds	r0, #1
 8008b90:	f000 80a7 	beq.w	8008ce2 <_svfiprintf_r+0x1c6>
 8008b94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b96:	445a      	add	r2, fp
 8008b98:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f000 809f 	beq.w	8008ce2 <_svfiprintf_r+0x1c6>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bae:	f10a 0a01 	add.w	sl, sl, #1
 8008bb2:	9304      	str	r3, [sp, #16]
 8008bb4:	9307      	str	r3, [sp, #28]
 8008bb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008bba:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bbc:	4654      	mov	r4, sl
 8008bbe:	2205      	movs	r2, #5
 8008bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc4:	484e      	ldr	r0, [pc, #312]	@ (8008d00 <_svfiprintf_r+0x1e4>)
 8008bc6:	f7f7 fb43 	bl	8000250 <memchr>
 8008bca:	9a04      	ldr	r2, [sp, #16]
 8008bcc:	b9d8      	cbnz	r0, 8008c06 <_svfiprintf_r+0xea>
 8008bce:	06d0      	lsls	r0, r2, #27
 8008bd0:	bf44      	itt	mi
 8008bd2:	2320      	movmi	r3, #32
 8008bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bd8:	0711      	lsls	r1, r2, #28
 8008bda:	bf44      	itt	mi
 8008bdc:	232b      	movmi	r3, #43	@ 0x2b
 8008bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008be2:	f89a 3000 	ldrb.w	r3, [sl]
 8008be6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008be8:	d015      	beq.n	8008c16 <_svfiprintf_r+0xfa>
 8008bea:	9a07      	ldr	r2, [sp, #28]
 8008bec:	4654      	mov	r4, sl
 8008bee:	2000      	movs	r0, #0
 8008bf0:	f04f 0c0a 	mov.w	ip, #10
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bfa:	3b30      	subs	r3, #48	@ 0x30
 8008bfc:	2b09      	cmp	r3, #9
 8008bfe:	d94b      	bls.n	8008c98 <_svfiprintf_r+0x17c>
 8008c00:	b1b0      	cbz	r0, 8008c30 <_svfiprintf_r+0x114>
 8008c02:	9207      	str	r2, [sp, #28]
 8008c04:	e014      	b.n	8008c30 <_svfiprintf_r+0x114>
 8008c06:	eba0 0308 	sub.w	r3, r0, r8
 8008c0a:	fa09 f303 	lsl.w	r3, r9, r3
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	9304      	str	r3, [sp, #16]
 8008c12:	46a2      	mov	sl, r4
 8008c14:	e7d2      	b.n	8008bbc <_svfiprintf_r+0xa0>
 8008c16:	9b03      	ldr	r3, [sp, #12]
 8008c18:	1d19      	adds	r1, r3, #4
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	9103      	str	r1, [sp, #12]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	bfbb      	ittet	lt
 8008c22:	425b      	neglt	r3, r3
 8008c24:	f042 0202 	orrlt.w	r2, r2, #2
 8008c28:	9307      	strge	r3, [sp, #28]
 8008c2a:	9307      	strlt	r3, [sp, #28]
 8008c2c:	bfb8      	it	lt
 8008c2e:	9204      	strlt	r2, [sp, #16]
 8008c30:	7823      	ldrb	r3, [r4, #0]
 8008c32:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c34:	d10a      	bne.n	8008c4c <_svfiprintf_r+0x130>
 8008c36:	7863      	ldrb	r3, [r4, #1]
 8008c38:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c3a:	d132      	bne.n	8008ca2 <_svfiprintf_r+0x186>
 8008c3c:	9b03      	ldr	r3, [sp, #12]
 8008c3e:	1d1a      	adds	r2, r3, #4
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	9203      	str	r2, [sp, #12]
 8008c44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c48:	3402      	adds	r4, #2
 8008c4a:	9305      	str	r3, [sp, #20]
 8008c4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008d10 <_svfiprintf_r+0x1f4>
 8008c50:	7821      	ldrb	r1, [r4, #0]
 8008c52:	2203      	movs	r2, #3
 8008c54:	4650      	mov	r0, sl
 8008c56:	f7f7 fafb 	bl	8000250 <memchr>
 8008c5a:	b138      	cbz	r0, 8008c6c <_svfiprintf_r+0x150>
 8008c5c:	9b04      	ldr	r3, [sp, #16]
 8008c5e:	eba0 000a 	sub.w	r0, r0, sl
 8008c62:	2240      	movs	r2, #64	@ 0x40
 8008c64:	4082      	lsls	r2, r0
 8008c66:	4313      	orrs	r3, r2
 8008c68:	3401      	adds	r4, #1
 8008c6a:	9304      	str	r3, [sp, #16]
 8008c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c70:	4824      	ldr	r0, [pc, #144]	@ (8008d04 <_svfiprintf_r+0x1e8>)
 8008c72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c76:	2206      	movs	r2, #6
 8008c78:	f7f7 faea 	bl	8000250 <memchr>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	d036      	beq.n	8008cee <_svfiprintf_r+0x1d2>
 8008c80:	4b21      	ldr	r3, [pc, #132]	@ (8008d08 <_svfiprintf_r+0x1ec>)
 8008c82:	bb1b      	cbnz	r3, 8008ccc <_svfiprintf_r+0x1b0>
 8008c84:	9b03      	ldr	r3, [sp, #12]
 8008c86:	3307      	adds	r3, #7
 8008c88:	f023 0307 	bic.w	r3, r3, #7
 8008c8c:	3308      	adds	r3, #8
 8008c8e:	9303      	str	r3, [sp, #12]
 8008c90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c92:	4433      	add	r3, r6
 8008c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c96:	e76a      	b.n	8008b6e <_svfiprintf_r+0x52>
 8008c98:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	2001      	movs	r0, #1
 8008ca0:	e7a8      	b.n	8008bf4 <_svfiprintf_r+0xd8>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	3401      	adds	r4, #1
 8008ca6:	9305      	str	r3, [sp, #20]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	f04f 0c0a 	mov.w	ip, #10
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cb4:	3a30      	subs	r2, #48	@ 0x30
 8008cb6:	2a09      	cmp	r2, #9
 8008cb8:	d903      	bls.n	8008cc2 <_svfiprintf_r+0x1a6>
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d0c6      	beq.n	8008c4c <_svfiprintf_r+0x130>
 8008cbe:	9105      	str	r1, [sp, #20]
 8008cc0:	e7c4      	b.n	8008c4c <_svfiprintf_r+0x130>
 8008cc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e7f0      	b.n	8008cae <_svfiprintf_r+0x192>
 8008ccc:	ab03      	add	r3, sp, #12
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	462a      	mov	r2, r5
 8008cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8008d0c <_svfiprintf_r+0x1f0>)
 8008cd4:	a904      	add	r1, sp, #16
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	f3af 8000 	nop.w
 8008cdc:	1c42      	adds	r2, r0, #1
 8008cde:	4606      	mov	r6, r0
 8008ce0:	d1d6      	bne.n	8008c90 <_svfiprintf_r+0x174>
 8008ce2:	89ab      	ldrh	r3, [r5, #12]
 8008ce4:	065b      	lsls	r3, r3, #25
 8008ce6:	f53f af2d 	bmi.w	8008b44 <_svfiprintf_r+0x28>
 8008cea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008cec:	e72c      	b.n	8008b48 <_svfiprintf_r+0x2c>
 8008cee:	ab03      	add	r3, sp, #12
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	462a      	mov	r2, r5
 8008cf4:	4b05      	ldr	r3, [pc, #20]	@ (8008d0c <_svfiprintf_r+0x1f0>)
 8008cf6:	a904      	add	r1, sp, #16
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	f000 f879 	bl	8008df0 <_printf_i>
 8008cfe:	e7ed      	b.n	8008cdc <_svfiprintf_r+0x1c0>
 8008d00:	08009ac2 	.word	0x08009ac2
 8008d04:	08009acc 	.word	0x08009acc
 8008d08:	00000000 	.word	0x00000000
 8008d0c:	08008a65 	.word	0x08008a65
 8008d10:	08009ac8 	.word	0x08009ac8

08008d14 <_printf_common>:
 8008d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d18:	4616      	mov	r6, r2
 8008d1a:	4698      	mov	r8, r3
 8008d1c:	688a      	ldr	r2, [r1, #8]
 8008d1e:	690b      	ldr	r3, [r1, #16]
 8008d20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d24:	4293      	cmp	r3, r2
 8008d26:	bfb8      	it	lt
 8008d28:	4613      	movlt	r3, r2
 8008d2a:	6033      	str	r3, [r6, #0]
 8008d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d30:	4607      	mov	r7, r0
 8008d32:	460c      	mov	r4, r1
 8008d34:	b10a      	cbz	r2, 8008d3a <_printf_common+0x26>
 8008d36:	3301      	adds	r3, #1
 8008d38:	6033      	str	r3, [r6, #0]
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	0699      	lsls	r1, r3, #26
 8008d3e:	bf42      	ittt	mi
 8008d40:	6833      	ldrmi	r3, [r6, #0]
 8008d42:	3302      	addmi	r3, #2
 8008d44:	6033      	strmi	r3, [r6, #0]
 8008d46:	6825      	ldr	r5, [r4, #0]
 8008d48:	f015 0506 	ands.w	r5, r5, #6
 8008d4c:	d106      	bne.n	8008d5c <_printf_common+0x48>
 8008d4e:	f104 0a19 	add.w	sl, r4, #25
 8008d52:	68e3      	ldr	r3, [r4, #12]
 8008d54:	6832      	ldr	r2, [r6, #0]
 8008d56:	1a9b      	subs	r3, r3, r2
 8008d58:	42ab      	cmp	r3, r5
 8008d5a:	dc26      	bgt.n	8008daa <_printf_common+0x96>
 8008d5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d60:	6822      	ldr	r2, [r4, #0]
 8008d62:	3b00      	subs	r3, #0
 8008d64:	bf18      	it	ne
 8008d66:	2301      	movne	r3, #1
 8008d68:	0692      	lsls	r2, r2, #26
 8008d6a:	d42b      	bmi.n	8008dc4 <_printf_common+0xb0>
 8008d6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d70:	4641      	mov	r1, r8
 8008d72:	4638      	mov	r0, r7
 8008d74:	47c8      	blx	r9
 8008d76:	3001      	adds	r0, #1
 8008d78:	d01e      	beq.n	8008db8 <_printf_common+0xa4>
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	6922      	ldr	r2, [r4, #16]
 8008d7e:	f003 0306 	and.w	r3, r3, #6
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	bf02      	ittt	eq
 8008d86:	68e5      	ldreq	r5, [r4, #12]
 8008d88:	6833      	ldreq	r3, [r6, #0]
 8008d8a:	1aed      	subeq	r5, r5, r3
 8008d8c:	68a3      	ldr	r3, [r4, #8]
 8008d8e:	bf0c      	ite	eq
 8008d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d94:	2500      	movne	r5, #0
 8008d96:	4293      	cmp	r3, r2
 8008d98:	bfc4      	itt	gt
 8008d9a:	1a9b      	subgt	r3, r3, r2
 8008d9c:	18ed      	addgt	r5, r5, r3
 8008d9e:	2600      	movs	r6, #0
 8008da0:	341a      	adds	r4, #26
 8008da2:	42b5      	cmp	r5, r6
 8008da4:	d11a      	bne.n	8008ddc <_printf_common+0xc8>
 8008da6:	2000      	movs	r0, #0
 8008da8:	e008      	b.n	8008dbc <_printf_common+0xa8>
 8008daa:	2301      	movs	r3, #1
 8008dac:	4652      	mov	r2, sl
 8008dae:	4641      	mov	r1, r8
 8008db0:	4638      	mov	r0, r7
 8008db2:	47c8      	blx	r9
 8008db4:	3001      	adds	r0, #1
 8008db6:	d103      	bne.n	8008dc0 <_printf_common+0xac>
 8008db8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc0:	3501      	adds	r5, #1
 8008dc2:	e7c6      	b.n	8008d52 <_printf_common+0x3e>
 8008dc4:	18e1      	adds	r1, r4, r3
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	2030      	movs	r0, #48	@ 0x30
 8008dca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008dce:	4422      	add	r2, r4
 8008dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008dd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008dd8:	3302      	adds	r3, #2
 8008dda:	e7c7      	b.n	8008d6c <_printf_common+0x58>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	4622      	mov	r2, r4
 8008de0:	4641      	mov	r1, r8
 8008de2:	4638      	mov	r0, r7
 8008de4:	47c8      	blx	r9
 8008de6:	3001      	adds	r0, #1
 8008de8:	d0e6      	beq.n	8008db8 <_printf_common+0xa4>
 8008dea:	3601      	adds	r6, #1
 8008dec:	e7d9      	b.n	8008da2 <_printf_common+0x8e>
	...

08008df0 <_printf_i>:
 8008df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008df4:	7e0f      	ldrb	r7, [r1, #24]
 8008df6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008df8:	2f78      	cmp	r7, #120	@ 0x78
 8008dfa:	4691      	mov	r9, r2
 8008dfc:	4680      	mov	r8, r0
 8008dfe:	460c      	mov	r4, r1
 8008e00:	469a      	mov	sl, r3
 8008e02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e06:	d807      	bhi.n	8008e18 <_printf_i+0x28>
 8008e08:	2f62      	cmp	r7, #98	@ 0x62
 8008e0a:	d80a      	bhi.n	8008e22 <_printf_i+0x32>
 8008e0c:	2f00      	cmp	r7, #0
 8008e0e:	f000 80d2 	beq.w	8008fb6 <_printf_i+0x1c6>
 8008e12:	2f58      	cmp	r7, #88	@ 0x58
 8008e14:	f000 80b9 	beq.w	8008f8a <_printf_i+0x19a>
 8008e18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e20:	e03a      	b.n	8008e98 <_printf_i+0xa8>
 8008e22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e26:	2b15      	cmp	r3, #21
 8008e28:	d8f6      	bhi.n	8008e18 <_printf_i+0x28>
 8008e2a:	a101      	add	r1, pc, #4	@ (adr r1, 8008e30 <_printf_i+0x40>)
 8008e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e30:	08008e89 	.word	0x08008e89
 8008e34:	08008e9d 	.word	0x08008e9d
 8008e38:	08008e19 	.word	0x08008e19
 8008e3c:	08008e19 	.word	0x08008e19
 8008e40:	08008e19 	.word	0x08008e19
 8008e44:	08008e19 	.word	0x08008e19
 8008e48:	08008e9d 	.word	0x08008e9d
 8008e4c:	08008e19 	.word	0x08008e19
 8008e50:	08008e19 	.word	0x08008e19
 8008e54:	08008e19 	.word	0x08008e19
 8008e58:	08008e19 	.word	0x08008e19
 8008e5c:	08008f9d 	.word	0x08008f9d
 8008e60:	08008ec7 	.word	0x08008ec7
 8008e64:	08008f57 	.word	0x08008f57
 8008e68:	08008e19 	.word	0x08008e19
 8008e6c:	08008e19 	.word	0x08008e19
 8008e70:	08008fbf 	.word	0x08008fbf
 8008e74:	08008e19 	.word	0x08008e19
 8008e78:	08008ec7 	.word	0x08008ec7
 8008e7c:	08008e19 	.word	0x08008e19
 8008e80:	08008e19 	.word	0x08008e19
 8008e84:	08008f5f 	.word	0x08008f5f
 8008e88:	6833      	ldr	r3, [r6, #0]
 8008e8a:	1d1a      	adds	r2, r3, #4
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6032      	str	r2, [r6, #0]
 8008e90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e09d      	b.n	8008fd8 <_printf_i+0x1e8>
 8008e9c:	6833      	ldr	r3, [r6, #0]
 8008e9e:	6820      	ldr	r0, [r4, #0]
 8008ea0:	1d19      	adds	r1, r3, #4
 8008ea2:	6031      	str	r1, [r6, #0]
 8008ea4:	0606      	lsls	r6, r0, #24
 8008ea6:	d501      	bpl.n	8008eac <_printf_i+0xbc>
 8008ea8:	681d      	ldr	r5, [r3, #0]
 8008eaa:	e003      	b.n	8008eb4 <_printf_i+0xc4>
 8008eac:	0645      	lsls	r5, r0, #25
 8008eae:	d5fb      	bpl.n	8008ea8 <_printf_i+0xb8>
 8008eb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008eb4:	2d00      	cmp	r5, #0
 8008eb6:	da03      	bge.n	8008ec0 <_printf_i+0xd0>
 8008eb8:	232d      	movs	r3, #45	@ 0x2d
 8008eba:	426d      	negs	r5, r5
 8008ebc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ec0:	4859      	ldr	r0, [pc, #356]	@ (8009028 <_printf_i+0x238>)
 8008ec2:	230a      	movs	r3, #10
 8008ec4:	e011      	b.n	8008eea <_printf_i+0xfa>
 8008ec6:	6821      	ldr	r1, [r4, #0]
 8008ec8:	6833      	ldr	r3, [r6, #0]
 8008eca:	0608      	lsls	r0, r1, #24
 8008ecc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ed0:	d402      	bmi.n	8008ed8 <_printf_i+0xe8>
 8008ed2:	0649      	lsls	r1, r1, #25
 8008ed4:	bf48      	it	mi
 8008ed6:	b2ad      	uxthmi	r5, r5
 8008ed8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008eda:	4853      	ldr	r0, [pc, #332]	@ (8009028 <_printf_i+0x238>)
 8008edc:	6033      	str	r3, [r6, #0]
 8008ede:	bf14      	ite	ne
 8008ee0:	230a      	movne	r3, #10
 8008ee2:	2308      	moveq	r3, #8
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008eea:	6866      	ldr	r6, [r4, #4]
 8008eec:	60a6      	str	r6, [r4, #8]
 8008eee:	2e00      	cmp	r6, #0
 8008ef0:	bfa2      	ittt	ge
 8008ef2:	6821      	ldrge	r1, [r4, #0]
 8008ef4:	f021 0104 	bicge.w	r1, r1, #4
 8008ef8:	6021      	strge	r1, [r4, #0]
 8008efa:	b90d      	cbnz	r5, 8008f00 <_printf_i+0x110>
 8008efc:	2e00      	cmp	r6, #0
 8008efe:	d04b      	beq.n	8008f98 <_printf_i+0x1a8>
 8008f00:	4616      	mov	r6, r2
 8008f02:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f06:	fb03 5711 	mls	r7, r3, r1, r5
 8008f0a:	5dc7      	ldrb	r7, [r0, r7]
 8008f0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f10:	462f      	mov	r7, r5
 8008f12:	42bb      	cmp	r3, r7
 8008f14:	460d      	mov	r5, r1
 8008f16:	d9f4      	bls.n	8008f02 <_printf_i+0x112>
 8008f18:	2b08      	cmp	r3, #8
 8008f1a:	d10b      	bne.n	8008f34 <_printf_i+0x144>
 8008f1c:	6823      	ldr	r3, [r4, #0]
 8008f1e:	07df      	lsls	r7, r3, #31
 8008f20:	d508      	bpl.n	8008f34 <_printf_i+0x144>
 8008f22:	6923      	ldr	r3, [r4, #16]
 8008f24:	6861      	ldr	r1, [r4, #4]
 8008f26:	4299      	cmp	r1, r3
 8008f28:	bfde      	ittt	le
 8008f2a:	2330      	movle	r3, #48	@ 0x30
 8008f2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f30:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008f34:	1b92      	subs	r2, r2, r6
 8008f36:	6122      	str	r2, [r4, #16]
 8008f38:	f8cd a000 	str.w	sl, [sp]
 8008f3c:	464b      	mov	r3, r9
 8008f3e:	aa03      	add	r2, sp, #12
 8008f40:	4621      	mov	r1, r4
 8008f42:	4640      	mov	r0, r8
 8008f44:	f7ff fee6 	bl	8008d14 <_printf_common>
 8008f48:	3001      	adds	r0, #1
 8008f4a:	d14a      	bne.n	8008fe2 <_printf_i+0x1f2>
 8008f4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f50:	b004      	add	sp, #16
 8008f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f56:	6823      	ldr	r3, [r4, #0]
 8008f58:	f043 0320 	orr.w	r3, r3, #32
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	4833      	ldr	r0, [pc, #204]	@ (800902c <_printf_i+0x23c>)
 8008f60:	2778      	movs	r7, #120	@ 0x78
 8008f62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	6831      	ldr	r1, [r6, #0]
 8008f6a:	061f      	lsls	r7, r3, #24
 8008f6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f70:	d402      	bmi.n	8008f78 <_printf_i+0x188>
 8008f72:	065f      	lsls	r7, r3, #25
 8008f74:	bf48      	it	mi
 8008f76:	b2ad      	uxthmi	r5, r5
 8008f78:	6031      	str	r1, [r6, #0]
 8008f7a:	07d9      	lsls	r1, r3, #31
 8008f7c:	bf44      	itt	mi
 8008f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8008f82:	6023      	strmi	r3, [r4, #0]
 8008f84:	b11d      	cbz	r5, 8008f8e <_printf_i+0x19e>
 8008f86:	2310      	movs	r3, #16
 8008f88:	e7ac      	b.n	8008ee4 <_printf_i+0xf4>
 8008f8a:	4827      	ldr	r0, [pc, #156]	@ (8009028 <_printf_i+0x238>)
 8008f8c:	e7e9      	b.n	8008f62 <_printf_i+0x172>
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	f023 0320 	bic.w	r3, r3, #32
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	e7f6      	b.n	8008f86 <_printf_i+0x196>
 8008f98:	4616      	mov	r6, r2
 8008f9a:	e7bd      	b.n	8008f18 <_printf_i+0x128>
 8008f9c:	6833      	ldr	r3, [r6, #0]
 8008f9e:	6825      	ldr	r5, [r4, #0]
 8008fa0:	6961      	ldr	r1, [r4, #20]
 8008fa2:	1d18      	adds	r0, r3, #4
 8008fa4:	6030      	str	r0, [r6, #0]
 8008fa6:	062e      	lsls	r6, r5, #24
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	d501      	bpl.n	8008fb0 <_printf_i+0x1c0>
 8008fac:	6019      	str	r1, [r3, #0]
 8008fae:	e002      	b.n	8008fb6 <_printf_i+0x1c6>
 8008fb0:	0668      	lsls	r0, r5, #25
 8008fb2:	d5fb      	bpl.n	8008fac <_printf_i+0x1bc>
 8008fb4:	8019      	strh	r1, [r3, #0]
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	6123      	str	r3, [r4, #16]
 8008fba:	4616      	mov	r6, r2
 8008fbc:	e7bc      	b.n	8008f38 <_printf_i+0x148>
 8008fbe:	6833      	ldr	r3, [r6, #0]
 8008fc0:	1d1a      	adds	r2, r3, #4
 8008fc2:	6032      	str	r2, [r6, #0]
 8008fc4:	681e      	ldr	r6, [r3, #0]
 8008fc6:	6862      	ldr	r2, [r4, #4]
 8008fc8:	2100      	movs	r1, #0
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f7f7 f940 	bl	8000250 <memchr>
 8008fd0:	b108      	cbz	r0, 8008fd6 <_printf_i+0x1e6>
 8008fd2:	1b80      	subs	r0, r0, r6
 8008fd4:	6060      	str	r0, [r4, #4]
 8008fd6:	6863      	ldr	r3, [r4, #4]
 8008fd8:	6123      	str	r3, [r4, #16]
 8008fda:	2300      	movs	r3, #0
 8008fdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fe0:	e7aa      	b.n	8008f38 <_printf_i+0x148>
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	4632      	mov	r2, r6
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	4640      	mov	r0, r8
 8008fea:	47d0      	blx	sl
 8008fec:	3001      	adds	r0, #1
 8008fee:	d0ad      	beq.n	8008f4c <_printf_i+0x15c>
 8008ff0:	6823      	ldr	r3, [r4, #0]
 8008ff2:	079b      	lsls	r3, r3, #30
 8008ff4:	d413      	bmi.n	800901e <_printf_i+0x22e>
 8008ff6:	68e0      	ldr	r0, [r4, #12]
 8008ff8:	9b03      	ldr	r3, [sp, #12]
 8008ffa:	4298      	cmp	r0, r3
 8008ffc:	bfb8      	it	lt
 8008ffe:	4618      	movlt	r0, r3
 8009000:	e7a6      	b.n	8008f50 <_printf_i+0x160>
 8009002:	2301      	movs	r3, #1
 8009004:	4632      	mov	r2, r6
 8009006:	4649      	mov	r1, r9
 8009008:	4640      	mov	r0, r8
 800900a:	47d0      	blx	sl
 800900c:	3001      	adds	r0, #1
 800900e:	d09d      	beq.n	8008f4c <_printf_i+0x15c>
 8009010:	3501      	adds	r5, #1
 8009012:	68e3      	ldr	r3, [r4, #12]
 8009014:	9903      	ldr	r1, [sp, #12]
 8009016:	1a5b      	subs	r3, r3, r1
 8009018:	42ab      	cmp	r3, r5
 800901a:	dcf2      	bgt.n	8009002 <_printf_i+0x212>
 800901c:	e7eb      	b.n	8008ff6 <_printf_i+0x206>
 800901e:	2500      	movs	r5, #0
 8009020:	f104 0619 	add.w	r6, r4, #25
 8009024:	e7f5      	b.n	8009012 <_printf_i+0x222>
 8009026:	bf00      	nop
 8009028:	08009ad3 	.word	0x08009ad3
 800902c:	08009ae4 	.word	0x08009ae4

08009030 <__sflush_r>:
 8009030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009038:	0716      	lsls	r6, r2, #28
 800903a:	4605      	mov	r5, r0
 800903c:	460c      	mov	r4, r1
 800903e:	d454      	bmi.n	80090ea <__sflush_r+0xba>
 8009040:	684b      	ldr	r3, [r1, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	dc02      	bgt.n	800904c <__sflush_r+0x1c>
 8009046:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009048:	2b00      	cmp	r3, #0
 800904a:	dd48      	ble.n	80090de <__sflush_r+0xae>
 800904c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800904e:	2e00      	cmp	r6, #0
 8009050:	d045      	beq.n	80090de <__sflush_r+0xae>
 8009052:	2300      	movs	r3, #0
 8009054:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009058:	682f      	ldr	r7, [r5, #0]
 800905a:	6a21      	ldr	r1, [r4, #32]
 800905c:	602b      	str	r3, [r5, #0]
 800905e:	d030      	beq.n	80090c2 <__sflush_r+0x92>
 8009060:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	0759      	lsls	r1, r3, #29
 8009066:	d505      	bpl.n	8009074 <__sflush_r+0x44>
 8009068:	6863      	ldr	r3, [r4, #4]
 800906a:	1ad2      	subs	r2, r2, r3
 800906c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800906e:	b10b      	cbz	r3, 8009074 <__sflush_r+0x44>
 8009070:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009072:	1ad2      	subs	r2, r2, r3
 8009074:	2300      	movs	r3, #0
 8009076:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009078:	6a21      	ldr	r1, [r4, #32]
 800907a:	4628      	mov	r0, r5
 800907c:	47b0      	blx	r6
 800907e:	1c43      	adds	r3, r0, #1
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	d106      	bne.n	8009092 <__sflush_r+0x62>
 8009084:	6829      	ldr	r1, [r5, #0]
 8009086:	291d      	cmp	r1, #29
 8009088:	d82b      	bhi.n	80090e2 <__sflush_r+0xb2>
 800908a:	4a2a      	ldr	r2, [pc, #168]	@ (8009134 <__sflush_r+0x104>)
 800908c:	410a      	asrs	r2, r1
 800908e:	07d6      	lsls	r6, r2, #31
 8009090:	d427      	bmi.n	80090e2 <__sflush_r+0xb2>
 8009092:	2200      	movs	r2, #0
 8009094:	6062      	str	r2, [r4, #4]
 8009096:	04d9      	lsls	r1, r3, #19
 8009098:	6922      	ldr	r2, [r4, #16]
 800909a:	6022      	str	r2, [r4, #0]
 800909c:	d504      	bpl.n	80090a8 <__sflush_r+0x78>
 800909e:	1c42      	adds	r2, r0, #1
 80090a0:	d101      	bne.n	80090a6 <__sflush_r+0x76>
 80090a2:	682b      	ldr	r3, [r5, #0]
 80090a4:	b903      	cbnz	r3, 80090a8 <__sflush_r+0x78>
 80090a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80090a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090aa:	602f      	str	r7, [r5, #0]
 80090ac:	b1b9      	cbz	r1, 80090de <__sflush_r+0xae>
 80090ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090b2:	4299      	cmp	r1, r3
 80090b4:	d002      	beq.n	80090bc <__sflush_r+0x8c>
 80090b6:	4628      	mov	r0, r5
 80090b8:	f7ff fbd4 	bl	8008864 <_free_r>
 80090bc:	2300      	movs	r3, #0
 80090be:	6363      	str	r3, [r4, #52]	@ 0x34
 80090c0:	e00d      	b.n	80090de <__sflush_r+0xae>
 80090c2:	2301      	movs	r3, #1
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b0      	blx	r6
 80090c8:	4602      	mov	r2, r0
 80090ca:	1c50      	adds	r0, r2, #1
 80090cc:	d1c9      	bne.n	8009062 <__sflush_r+0x32>
 80090ce:	682b      	ldr	r3, [r5, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d0c6      	beq.n	8009062 <__sflush_r+0x32>
 80090d4:	2b1d      	cmp	r3, #29
 80090d6:	d001      	beq.n	80090dc <__sflush_r+0xac>
 80090d8:	2b16      	cmp	r3, #22
 80090da:	d11e      	bne.n	800911a <__sflush_r+0xea>
 80090dc:	602f      	str	r7, [r5, #0]
 80090de:	2000      	movs	r0, #0
 80090e0:	e022      	b.n	8009128 <__sflush_r+0xf8>
 80090e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090e6:	b21b      	sxth	r3, r3
 80090e8:	e01b      	b.n	8009122 <__sflush_r+0xf2>
 80090ea:	690f      	ldr	r7, [r1, #16]
 80090ec:	2f00      	cmp	r7, #0
 80090ee:	d0f6      	beq.n	80090de <__sflush_r+0xae>
 80090f0:	0793      	lsls	r3, r2, #30
 80090f2:	680e      	ldr	r6, [r1, #0]
 80090f4:	bf08      	it	eq
 80090f6:	694b      	ldreq	r3, [r1, #20]
 80090f8:	600f      	str	r7, [r1, #0]
 80090fa:	bf18      	it	ne
 80090fc:	2300      	movne	r3, #0
 80090fe:	eba6 0807 	sub.w	r8, r6, r7
 8009102:	608b      	str	r3, [r1, #8]
 8009104:	f1b8 0f00 	cmp.w	r8, #0
 8009108:	dde9      	ble.n	80090de <__sflush_r+0xae>
 800910a:	6a21      	ldr	r1, [r4, #32]
 800910c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800910e:	4643      	mov	r3, r8
 8009110:	463a      	mov	r2, r7
 8009112:	4628      	mov	r0, r5
 8009114:	47b0      	blx	r6
 8009116:	2800      	cmp	r0, #0
 8009118:	dc08      	bgt.n	800912c <__sflush_r+0xfc>
 800911a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800911e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009122:	81a3      	strh	r3, [r4, #12]
 8009124:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800912c:	4407      	add	r7, r0
 800912e:	eba8 0800 	sub.w	r8, r8, r0
 8009132:	e7e7      	b.n	8009104 <__sflush_r+0xd4>
 8009134:	dfbffffe 	.word	0xdfbffffe

08009138 <_fflush_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	690b      	ldr	r3, [r1, #16]
 800913c:	4605      	mov	r5, r0
 800913e:	460c      	mov	r4, r1
 8009140:	b913      	cbnz	r3, 8009148 <_fflush_r+0x10>
 8009142:	2500      	movs	r5, #0
 8009144:	4628      	mov	r0, r5
 8009146:	bd38      	pop	{r3, r4, r5, pc}
 8009148:	b118      	cbz	r0, 8009152 <_fflush_r+0x1a>
 800914a:	6a03      	ldr	r3, [r0, #32]
 800914c:	b90b      	cbnz	r3, 8009152 <_fflush_r+0x1a>
 800914e:	f7ff f9e5 	bl	800851c <__sinit>
 8009152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0f3      	beq.n	8009142 <_fflush_r+0xa>
 800915a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800915c:	07d0      	lsls	r0, r2, #31
 800915e:	d404      	bmi.n	800916a <_fflush_r+0x32>
 8009160:	0599      	lsls	r1, r3, #22
 8009162:	d402      	bmi.n	800916a <_fflush_r+0x32>
 8009164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009166:	f7ff fb5c 	bl	8008822 <__retarget_lock_acquire_recursive>
 800916a:	4628      	mov	r0, r5
 800916c:	4621      	mov	r1, r4
 800916e:	f7ff ff5f 	bl	8009030 <__sflush_r>
 8009172:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009174:	07da      	lsls	r2, r3, #31
 8009176:	4605      	mov	r5, r0
 8009178:	d4e4      	bmi.n	8009144 <_fflush_r+0xc>
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	059b      	lsls	r3, r3, #22
 800917e:	d4e1      	bmi.n	8009144 <_fflush_r+0xc>
 8009180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009182:	f7ff fb4f 	bl	8008824 <__retarget_lock_release_recursive>
 8009186:	e7dd      	b.n	8009144 <_fflush_r+0xc>

08009188 <fiprintf>:
 8009188:	b40e      	push	{r1, r2, r3}
 800918a:	b503      	push	{r0, r1, lr}
 800918c:	4601      	mov	r1, r0
 800918e:	ab03      	add	r3, sp, #12
 8009190:	4805      	ldr	r0, [pc, #20]	@ (80091a8 <fiprintf+0x20>)
 8009192:	f853 2b04 	ldr.w	r2, [r3], #4
 8009196:	6800      	ldr	r0, [r0, #0]
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	f000 f89d 	bl	80092d8 <_vfiprintf_r>
 800919e:	b002      	add	sp, #8
 80091a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091a4:	b003      	add	sp, #12
 80091a6:	4770      	bx	lr
 80091a8:	200000dc 	.word	0x200000dc

080091ac <memmove>:
 80091ac:	4288      	cmp	r0, r1
 80091ae:	b510      	push	{r4, lr}
 80091b0:	eb01 0402 	add.w	r4, r1, r2
 80091b4:	d902      	bls.n	80091bc <memmove+0x10>
 80091b6:	4284      	cmp	r4, r0
 80091b8:	4623      	mov	r3, r4
 80091ba:	d807      	bhi.n	80091cc <memmove+0x20>
 80091bc:	1e43      	subs	r3, r0, #1
 80091be:	42a1      	cmp	r1, r4
 80091c0:	d008      	beq.n	80091d4 <memmove+0x28>
 80091c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091ca:	e7f8      	b.n	80091be <memmove+0x12>
 80091cc:	4402      	add	r2, r0
 80091ce:	4601      	mov	r1, r0
 80091d0:	428a      	cmp	r2, r1
 80091d2:	d100      	bne.n	80091d6 <memmove+0x2a>
 80091d4:	bd10      	pop	{r4, pc}
 80091d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091de:	e7f7      	b.n	80091d0 <memmove+0x24>

080091e0 <_sbrk_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4d06      	ldr	r5, [pc, #24]	@ (80091fc <_sbrk_r+0x1c>)
 80091e4:	2300      	movs	r3, #0
 80091e6:	4604      	mov	r4, r0
 80091e8:	4608      	mov	r0, r1
 80091ea:	602b      	str	r3, [r5, #0]
 80091ec:	f7f7 fe4c 	bl	8000e88 <_sbrk>
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	d102      	bne.n	80091fa <_sbrk_r+0x1a>
 80091f4:	682b      	ldr	r3, [r5, #0]
 80091f6:	b103      	cbz	r3, 80091fa <_sbrk_r+0x1a>
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
 80091fc:	20000688 	.word	0x20000688

08009200 <memcpy>:
 8009200:	440a      	add	r2, r1
 8009202:	4291      	cmp	r1, r2
 8009204:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009208:	d100      	bne.n	800920c <memcpy+0xc>
 800920a:	4770      	bx	lr
 800920c:	b510      	push	{r4, lr}
 800920e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009212:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009216:	4291      	cmp	r1, r2
 8009218:	d1f9      	bne.n	800920e <memcpy+0xe>
 800921a:	bd10      	pop	{r4, pc}

0800921c <abort>:
 800921c:	b508      	push	{r3, lr}
 800921e:	2006      	movs	r0, #6
 8009220:	f000 fa2e 	bl	8009680 <raise>
 8009224:	2001      	movs	r0, #1
 8009226:	f7f7 fdb7 	bl	8000d98 <_exit>

0800922a <_realloc_r>:
 800922a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800922e:	4680      	mov	r8, r0
 8009230:	4615      	mov	r5, r2
 8009232:	460c      	mov	r4, r1
 8009234:	b921      	cbnz	r1, 8009240 <_realloc_r+0x16>
 8009236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800923a:	4611      	mov	r1, r2
 800923c:	f7ff bb86 	b.w	800894c <_malloc_r>
 8009240:	b92a      	cbnz	r2, 800924e <_realloc_r+0x24>
 8009242:	f7ff fb0f 	bl	8008864 <_free_r>
 8009246:	2400      	movs	r4, #0
 8009248:	4620      	mov	r0, r4
 800924a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800924e:	f000 fa33 	bl	80096b8 <_malloc_usable_size_r>
 8009252:	4285      	cmp	r5, r0
 8009254:	4606      	mov	r6, r0
 8009256:	d802      	bhi.n	800925e <_realloc_r+0x34>
 8009258:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800925c:	d8f4      	bhi.n	8009248 <_realloc_r+0x1e>
 800925e:	4629      	mov	r1, r5
 8009260:	4640      	mov	r0, r8
 8009262:	f7ff fb73 	bl	800894c <_malloc_r>
 8009266:	4607      	mov	r7, r0
 8009268:	2800      	cmp	r0, #0
 800926a:	d0ec      	beq.n	8009246 <_realloc_r+0x1c>
 800926c:	42b5      	cmp	r5, r6
 800926e:	462a      	mov	r2, r5
 8009270:	4621      	mov	r1, r4
 8009272:	bf28      	it	cs
 8009274:	4632      	movcs	r2, r6
 8009276:	f7ff ffc3 	bl	8009200 <memcpy>
 800927a:	4621      	mov	r1, r4
 800927c:	4640      	mov	r0, r8
 800927e:	f7ff faf1 	bl	8008864 <_free_r>
 8009282:	463c      	mov	r4, r7
 8009284:	e7e0      	b.n	8009248 <_realloc_r+0x1e>

08009286 <__sfputc_r>:
 8009286:	6893      	ldr	r3, [r2, #8]
 8009288:	3b01      	subs	r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	b410      	push	{r4}
 800928e:	6093      	str	r3, [r2, #8]
 8009290:	da08      	bge.n	80092a4 <__sfputc_r+0x1e>
 8009292:	6994      	ldr	r4, [r2, #24]
 8009294:	42a3      	cmp	r3, r4
 8009296:	db01      	blt.n	800929c <__sfputc_r+0x16>
 8009298:	290a      	cmp	r1, #10
 800929a:	d103      	bne.n	80092a4 <__sfputc_r+0x1e>
 800929c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092a0:	f000 b932 	b.w	8009508 <__swbuf_r>
 80092a4:	6813      	ldr	r3, [r2, #0]
 80092a6:	1c58      	adds	r0, r3, #1
 80092a8:	6010      	str	r0, [r2, #0]
 80092aa:	7019      	strb	r1, [r3, #0]
 80092ac:	4608      	mov	r0, r1
 80092ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <__sfputs_r>:
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	4606      	mov	r6, r0
 80092b8:	460f      	mov	r7, r1
 80092ba:	4614      	mov	r4, r2
 80092bc:	18d5      	adds	r5, r2, r3
 80092be:	42ac      	cmp	r4, r5
 80092c0:	d101      	bne.n	80092c6 <__sfputs_r+0x12>
 80092c2:	2000      	movs	r0, #0
 80092c4:	e007      	b.n	80092d6 <__sfputs_r+0x22>
 80092c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ca:	463a      	mov	r2, r7
 80092cc:	4630      	mov	r0, r6
 80092ce:	f7ff ffda 	bl	8009286 <__sfputc_r>
 80092d2:	1c43      	adds	r3, r0, #1
 80092d4:	d1f3      	bne.n	80092be <__sfputs_r+0xa>
 80092d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092d8 <_vfiprintf_r>:
 80092d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092dc:	460d      	mov	r5, r1
 80092de:	b09d      	sub	sp, #116	@ 0x74
 80092e0:	4614      	mov	r4, r2
 80092e2:	4698      	mov	r8, r3
 80092e4:	4606      	mov	r6, r0
 80092e6:	b118      	cbz	r0, 80092f0 <_vfiprintf_r+0x18>
 80092e8:	6a03      	ldr	r3, [r0, #32]
 80092ea:	b90b      	cbnz	r3, 80092f0 <_vfiprintf_r+0x18>
 80092ec:	f7ff f916 	bl	800851c <__sinit>
 80092f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092f2:	07d9      	lsls	r1, r3, #31
 80092f4:	d405      	bmi.n	8009302 <_vfiprintf_r+0x2a>
 80092f6:	89ab      	ldrh	r3, [r5, #12]
 80092f8:	059a      	lsls	r2, r3, #22
 80092fa:	d402      	bmi.n	8009302 <_vfiprintf_r+0x2a>
 80092fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092fe:	f7ff fa90 	bl	8008822 <__retarget_lock_acquire_recursive>
 8009302:	89ab      	ldrh	r3, [r5, #12]
 8009304:	071b      	lsls	r3, r3, #28
 8009306:	d501      	bpl.n	800930c <_vfiprintf_r+0x34>
 8009308:	692b      	ldr	r3, [r5, #16]
 800930a:	b99b      	cbnz	r3, 8009334 <_vfiprintf_r+0x5c>
 800930c:	4629      	mov	r1, r5
 800930e:	4630      	mov	r0, r6
 8009310:	f000 f938 	bl	8009584 <__swsetup_r>
 8009314:	b170      	cbz	r0, 8009334 <_vfiprintf_r+0x5c>
 8009316:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009318:	07dc      	lsls	r4, r3, #31
 800931a:	d504      	bpl.n	8009326 <_vfiprintf_r+0x4e>
 800931c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009320:	b01d      	add	sp, #116	@ 0x74
 8009322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009326:	89ab      	ldrh	r3, [r5, #12]
 8009328:	0598      	lsls	r0, r3, #22
 800932a:	d4f7      	bmi.n	800931c <_vfiprintf_r+0x44>
 800932c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800932e:	f7ff fa79 	bl	8008824 <__retarget_lock_release_recursive>
 8009332:	e7f3      	b.n	800931c <_vfiprintf_r+0x44>
 8009334:	2300      	movs	r3, #0
 8009336:	9309      	str	r3, [sp, #36]	@ 0x24
 8009338:	2320      	movs	r3, #32
 800933a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800933e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009342:	2330      	movs	r3, #48	@ 0x30
 8009344:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80094f4 <_vfiprintf_r+0x21c>
 8009348:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800934c:	f04f 0901 	mov.w	r9, #1
 8009350:	4623      	mov	r3, r4
 8009352:	469a      	mov	sl, r3
 8009354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009358:	b10a      	cbz	r2, 800935e <_vfiprintf_r+0x86>
 800935a:	2a25      	cmp	r2, #37	@ 0x25
 800935c:	d1f9      	bne.n	8009352 <_vfiprintf_r+0x7a>
 800935e:	ebba 0b04 	subs.w	fp, sl, r4
 8009362:	d00b      	beq.n	800937c <_vfiprintf_r+0xa4>
 8009364:	465b      	mov	r3, fp
 8009366:	4622      	mov	r2, r4
 8009368:	4629      	mov	r1, r5
 800936a:	4630      	mov	r0, r6
 800936c:	f7ff ffa2 	bl	80092b4 <__sfputs_r>
 8009370:	3001      	adds	r0, #1
 8009372:	f000 80a7 	beq.w	80094c4 <_vfiprintf_r+0x1ec>
 8009376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009378:	445a      	add	r2, fp
 800937a:	9209      	str	r2, [sp, #36]	@ 0x24
 800937c:	f89a 3000 	ldrb.w	r3, [sl]
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 809f 	beq.w	80094c4 <_vfiprintf_r+0x1ec>
 8009386:	2300      	movs	r3, #0
 8009388:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800938c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009390:	f10a 0a01 	add.w	sl, sl, #1
 8009394:	9304      	str	r3, [sp, #16]
 8009396:	9307      	str	r3, [sp, #28]
 8009398:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800939c:	931a      	str	r3, [sp, #104]	@ 0x68
 800939e:	4654      	mov	r4, sl
 80093a0:	2205      	movs	r2, #5
 80093a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a6:	4853      	ldr	r0, [pc, #332]	@ (80094f4 <_vfiprintf_r+0x21c>)
 80093a8:	f7f6 ff52 	bl	8000250 <memchr>
 80093ac:	9a04      	ldr	r2, [sp, #16]
 80093ae:	b9d8      	cbnz	r0, 80093e8 <_vfiprintf_r+0x110>
 80093b0:	06d1      	lsls	r1, r2, #27
 80093b2:	bf44      	itt	mi
 80093b4:	2320      	movmi	r3, #32
 80093b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093ba:	0713      	lsls	r3, r2, #28
 80093bc:	bf44      	itt	mi
 80093be:	232b      	movmi	r3, #43	@ 0x2b
 80093c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093c4:	f89a 3000 	ldrb.w	r3, [sl]
 80093c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80093ca:	d015      	beq.n	80093f8 <_vfiprintf_r+0x120>
 80093cc:	9a07      	ldr	r2, [sp, #28]
 80093ce:	4654      	mov	r4, sl
 80093d0:	2000      	movs	r0, #0
 80093d2:	f04f 0c0a 	mov.w	ip, #10
 80093d6:	4621      	mov	r1, r4
 80093d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093dc:	3b30      	subs	r3, #48	@ 0x30
 80093de:	2b09      	cmp	r3, #9
 80093e0:	d94b      	bls.n	800947a <_vfiprintf_r+0x1a2>
 80093e2:	b1b0      	cbz	r0, 8009412 <_vfiprintf_r+0x13a>
 80093e4:	9207      	str	r2, [sp, #28]
 80093e6:	e014      	b.n	8009412 <_vfiprintf_r+0x13a>
 80093e8:	eba0 0308 	sub.w	r3, r0, r8
 80093ec:	fa09 f303 	lsl.w	r3, r9, r3
 80093f0:	4313      	orrs	r3, r2
 80093f2:	9304      	str	r3, [sp, #16]
 80093f4:	46a2      	mov	sl, r4
 80093f6:	e7d2      	b.n	800939e <_vfiprintf_r+0xc6>
 80093f8:	9b03      	ldr	r3, [sp, #12]
 80093fa:	1d19      	adds	r1, r3, #4
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	9103      	str	r1, [sp, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	bfbb      	ittet	lt
 8009404:	425b      	neglt	r3, r3
 8009406:	f042 0202 	orrlt.w	r2, r2, #2
 800940a:	9307      	strge	r3, [sp, #28]
 800940c:	9307      	strlt	r3, [sp, #28]
 800940e:	bfb8      	it	lt
 8009410:	9204      	strlt	r2, [sp, #16]
 8009412:	7823      	ldrb	r3, [r4, #0]
 8009414:	2b2e      	cmp	r3, #46	@ 0x2e
 8009416:	d10a      	bne.n	800942e <_vfiprintf_r+0x156>
 8009418:	7863      	ldrb	r3, [r4, #1]
 800941a:	2b2a      	cmp	r3, #42	@ 0x2a
 800941c:	d132      	bne.n	8009484 <_vfiprintf_r+0x1ac>
 800941e:	9b03      	ldr	r3, [sp, #12]
 8009420:	1d1a      	adds	r2, r3, #4
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	9203      	str	r2, [sp, #12]
 8009426:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800942a:	3402      	adds	r4, #2
 800942c:	9305      	str	r3, [sp, #20]
 800942e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009504 <_vfiprintf_r+0x22c>
 8009432:	7821      	ldrb	r1, [r4, #0]
 8009434:	2203      	movs	r2, #3
 8009436:	4650      	mov	r0, sl
 8009438:	f7f6 ff0a 	bl	8000250 <memchr>
 800943c:	b138      	cbz	r0, 800944e <_vfiprintf_r+0x176>
 800943e:	9b04      	ldr	r3, [sp, #16]
 8009440:	eba0 000a 	sub.w	r0, r0, sl
 8009444:	2240      	movs	r2, #64	@ 0x40
 8009446:	4082      	lsls	r2, r0
 8009448:	4313      	orrs	r3, r2
 800944a:	3401      	adds	r4, #1
 800944c:	9304      	str	r3, [sp, #16]
 800944e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009452:	4829      	ldr	r0, [pc, #164]	@ (80094f8 <_vfiprintf_r+0x220>)
 8009454:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009458:	2206      	movs	r2, #6
 800945a:	f7f6 fef9 	bl	8000250 <memchr>
 800945e:	2800      	cmp	r0, #0
 8009460:	d03f      	beq.n	80094e2 <_vfiprintf_r+0x20a>
 8009462:	4b26      	ldr	r3, [pc, #152]	@ (80094fc <_vfiprintf_r+0x224>)
 8009464:	bb1b      	cbnz	r3, 80094ae <_vfiprintf_r+0x1d6>
 8009466:	9b03      	ldr	r3, [sp, #12]
 8009468:	3307      	adds	r3, #7
 800946a:	f023 0307 	bic.w	r3, r3, #7
 800946e:	3308      	adds	r3, #8
 8009470:	9303      	str	r3, [sp, #12]
 8009472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009474:	443b      	add	r3, r7
 8009476:	9309      	str	r3, [sp, #36]	@ 0x24
 8009478:	e76a      	b.n	8009350 <_vfiprintf_r+0x78>
 800947a:	fb0c 3202 	mla	r2, ip, r2, r3
 800947e:	460c      	mov	r4, r1
 8009480:	2001      	movs	r0, #1
 8009482:	e7a8      	b.n	80093d6 <_vfiprintf_r+0xfe>
 8009484:	2300      	movs	r3, #0
 8009486:	3401      	adds	r4, #1
 8009488:	9305      	str	r3, [sp, #20]
 800948a:	4619      	mov	r1, r3
 800948c:	f04f 0c0a 	mov.w	ip, #10
 8009490:	4620      	mov	r0, r4
 8009492:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009496:	3a30      	subs	r2, #48	@ 0x30
 8009498:	2a09      	cmp	r2, #9
 800949a:	d903      	bls.n	80094a4 <_vfiprintf_r+0x1cc>
 800949c:	2b00      	cmp	r3, #0
 800949e:	d0c6      	beq.n	800942e <_vfiprintf_r+0x156>
 80094a0:	9105      	str	r1, [sp, #20]
 80094a2:	e7c4      	b.n	800942e <_vfiprintf_r+0x156>
 80094a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80094a8:	4604      	mov	r4, r0
 80094aa:	2301      	movs	r3, #1
 80094ac:	e7f0      	b.n	8009490 <_vfiprintf_r+0x1b8>
 80094ae:	ab03      	add	r3, sp, #12
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	462a      	mov	r2, r5
 80094b4:	4b12      	ldr	r3, [pc, #72]	@ (8009500 <_vfiprintf_r+0x228>)
 80094b6:	a904      	add	r1, sp, #16
 80094b8:	4630      	mov	r0, r6
 80094ba:	f3af 8000 	nop.w
 80094be:	4607      	mov	r7, r0
 80094c0:	1c78      	adds	r0, r7, #1
 80094c2:	d1d6      	bne.n	8009472 <_vfiprintf_r+0x19a>
 80094c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094c6:	07d9      	lsls	r1, r3, #31
 80094c8:	d405      	bmi.n	80094d6 <_vfiprintf_r+0x1fe>
 80094ca:	89ab      	ldrh	r3, [r5, #12]
 80094cc:	059a      	lsls	r2, r3, #22
 80094ce:	d402      	bmi.n	80094d6 <_vfiprintf_r+0x1fe>
 80094d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094d2:	f7ff f9a7 	bl	8008824 <__retarget_lock_release_recursive>
 80094d6:	89ab      	ldrh	r3, [r5, #12]
 80094d8:	065b      	lsls	r3, r3, #25
 80094da:	f53f af1f 	bmi.w	800931c <_vfiprintf_r+0x44>
 80094de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094e0:	e71e      	b.n	8009320 <_vfiprintf_r+0x48>
 80094e2:	ab03      	add	r3, sp, #12
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	462a      	mov	r2, r5
 80094e8:	4b05      	ldr	r3, [pc, #20]	@ (8009500 <_vfiprintf_r+0x228>)
 80094ea:	a904      	add	r1, sp, #16
 80094ec:	4630      	mov	r0, r6
 80094ee:	f7ff fc7f 	bl	8008df0 <_printf_i>
 80094f2:	e7e4      	b.n	80094be <_vfiprintf_r+0x1e6>
 80094f4:	08009ac2 	.word	0x08009ac2
 80094f8:	08009acc 	.word	0x08009acc
 80094fc:	00000000 	.word	0x00000000
 8009500:	080092b5 	.word	0x080092b5
 8009504:	08009ac8 	.word	0x08009ac8

08009508 <__swbuf_r>:
 8009508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950a:	460e      	mov	r6, r1
 800950c:	4614      	mov	r4, r2
 800950e:	4605      	mov	r5, r0
 8009510:	b118      	cbz	r0, 800951a <__swbuf_r+0x12>
 8009512:	6a03      	ldr	r3, [r0, #32]
 8009514:	b90b      	cbnz	r3, 800951a <__swbuf_r+0x12>
 8009516:	f7ff f801 	bl	800851c <__sinit>
 800951a:	69a3      	ldr	r3, [r4, #24]
 800951c:	60a3      	str	r3, [r4, #8]
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	071a      	lsls	r2, r3, #28
 8009522:	d501      	bpl.n	8009528 <__swbuf_r+0x20>
 8009524:	6923      	ldr	r3, [r4, #16]
 8009526:	b943      	cbnz	r3, 800953a <__swbuf_r+0x32>
 8009528:	4621      	mov	r1, r4
 800952a:	4628      	mov	r0, r5
 800952c:	f000 f82a 	bl	8009584 <__swsetup_r>
 8009530:	b118      	cbz	r0, 800953a <__swbuf_r+0x32>
 8009532:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009536:	4638      	mov	r0, r7
 8009538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	6922      	ldr	r2, [r4, #16]
 800953e:	1a98      	subs	r0, r3, r2
 8009540:	6963      	ldr	r3, [r4, #20]
 8009542:	b2f6      	uxtb	r6, r6
 8009544:	4283      	cmp	r3, r0
 8009546:	4637      	mov	r7, r6
 8009548:	dc05      	bgt.n	8009556 <__swbuf_r+0x4e>
 800954a:	4621      	mov	r1, r4
 800954c:	4628      	mov	r0, r5
 800954e:	f7ff fdf3 	bl	8009138 <_fflush_r>
 8009552:	2800      	cmp	r0, #0
 8009554:	d1ed      	bne.n	8009532 <__swbuf_r+0x2a>
 8009556:	68a3      	ldr	r3, [r4, #8]
 8009558:	3b01      	subs	r3, #1
 800955a:	60a3      	str	r3, [r4, #8]
 800955c:	6823      	ldr	r3, [r4, #0]
 800955e:	1c5a      	adds	r2, r3, #1
 8009560:	6022      	str	r2, [r4, #0]
 8009562:	701e      	strb	r6, [r3, #0]
 8009564:	6962      	ldr	r2, [r4, #20]
 8009566:	1c43      	adds	r3, r0, #1
 8009568:	429a      	cmp	r2, r3
 800956a:	d004      	beq.n	8009576 <__swbuf_r+0x6e>
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	07db      	lsls	r3, r3, #31
 8009570:	d5e1      	bpl.n	8009536 <__swbuf_r+0x2e>
 8009572:	2e0a      	cmp	r6, #10
 8009574:	d1df      	bne.n	8009536 <__swbuf_r+0x2e>
 8009576:	4621      	mov	r1, r4
 8009578:	4628      	mov	r0, r5
 800957a:	f7ff fddd 	bl	8009138 <_fflush_r>
 800957e:	2800      	cmp	r0, #0
 8009580:	d0d9      	beq.n	8009536 <__swbuf_r+0x2e>
 8009582:	e7d6      	b.n	8009532 <__swbuf_r+0x2a>

08009584 <__swsetup_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	4b29      	ldr	r3, [pc, #164]	@ (800962c <__swsetup_r+0xa8>)
 8009588:	4605      	mov	r5, r0
 800958a:	6818      	ldr	r0, [r3, #0]
 800958c:	460c      	mov	r4, r1
 800958e:	b118      	cbz	r0, 8009598 <__swsetup_r+0x14>
 8009590:	6a03      	ldr	r3, [r0, #32]
 8009592:	b90b      	cbnz	r3, 8009598 <__swsetup_r+0x14>
 8009594:	f7fe ffc2 	bl	800851c <__sinit>
 8009598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800959c:	0719      	lsls	r1, r3, #28
 800959e:	d422      	bmi.n	80095e6 <__swsetup_r+0x62>
 80095a0:	06da      	lsls	r2, r3, #27
 80095a2:	d407      	bmi.n	80095b4 <__swsetup_r+0x30>
 80095a4:	2209      	movs	r2, #9
 80095a6:	602a      	str	r2, [r5, #0]
 80095a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095ac:	81a3      	strh	r3, [r4, #12]
 80095ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095b2:	e033      	b.n	800961c <__swsetup_r+0x98>
 80095b4:	0758      	lsls	r0, r3, #29
 80095b6:	d512      	bpl.n	80095de <__swsetup_r+0x5a>
 80095b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095ba:	b141      	cbz	r1, 80095ce <__swsetup_r+0x4a>
 80095bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095c0:	4299      	cmp	r1, r3
 80095c2:	d002      	beq.n	80095ca <__swsetup_r+0x46>
 80095c4:	4628      	mov	r0, r5
 80095c6:	f7ff f94d 	bl	8008864 <_free_r>
 80095ca:	2300      	movs	r3, #0
 80095cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80095ce:	89a3      	ldrh	r3, [r4, #12]
 80095d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80095d4:	81a3      	strh	r3, [r4, #12]
 80095d6:	2300      	movs	r3, #0
 80095d8:	6063      	str	r3, [r4, #4]
 80095da:	6923      	ldr	r3, [r4, #16]
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	89a3      	ldrh	r3, [r4, #12]
 80095e0:	f043 0308 	orr.w	r3, r3, #8
 80095e4:	81a3      	strh	r3, [r4, #12]
 80095e6:	6923      	ldr	r3, [r4, #16]
 80095e8:	b94b      	cbnz	r3, 80095fe <__swsetup_r+0x7a>
 80095ea:	89a3      	ldrh	r3, [r4, #12]
 80095ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095f4:	d003      	beq.n	80095fe <__swsetup_r+0x7a>
 80095f6:	4621      	mov	r1, r4
 80095f8:	4628      	mov	r0, r5
 80095fa:	f000 f88b 	bl	8009714 <__smakebuf_r>
 80095fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009602:	f013 0201 	ands.w	r2, r3, #1
 8009606:	d00a      	beq.n	800961e <__swsetup_r+0x9a>
 8009608:	2200      	movs	r2, #0
 800960a:	60a2      	str	r2, [r4, #8]
 800960c:	6962      	ldr	r2, [r4, #20]
 800960e:	4252      	negs	r2, r2
 8009610:	61a2      	str	r2, [r4, #24]
 8009612:	6922      	ldr	r2, [r4, #16]
 8009614:	b942      	cbnz	r2, 8009628 <__swsetup_r+0xa4>
 8009616:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800961a:	d1c5      	bne.n	80095a8 <__swsetup_r+0x24>
 800961c:	bd38      	pop	{r3, r4, r5, pc}
 800961e:	0799      	lsls	r1, r3, #30
 8009620:	bf58      	it	pl
 8009622:	6962      	ldrpl	r2, [r4, #20]
 8009624:	60a2      	str	r2, [r4, #8]
 8009626:	e7f4      	b.n	8009612 <__swsetup_r+0x8e>
 8009628:	2000      	movs	r0, #0
 800962a:	e7f7      	b.n	800961c <__swsetup_r+0x98>
 800962c:	200000dc 	.word	0x200000dc

08009630 <_raise_r>:
 8009630:	291f      	cmp	r1, #31
 8009632:	b538      	push	{r3, r4, r5, lr}
 8009634:	4605      	mov	r5, r0
 8009636:	460c      	mov	r4, r1
 8009638:	d904      	bls.n	8009644 <_raise_r+0x14>
 800963a:	2316      	movs	r3, #22
 800963c:	6003      	str	r3, [r0, #0]
 800963e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009642:	bd38      	pop	{r3, r4, r5, pc}
 8009644:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009646:	b112      	cbz	r2, 800964e <_raise_r+0x1e>
 8009648:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800964c:	b94b      	cbnz	r3, 8009662 <_raise_r+0x32>
 800964e:	4628      	mov	r0, r5
 8009650:	f000 f830 	bl	80096b4 <_getpid_r>
 8009654:	4622      	mov	r2, r4
 8009656:	4601      	mov	r1, r0
 8009658:	4628      	mov	r0, r5
 800965a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800965e:	f000 b817 	b.w	8009690 <_kill_r>
 8009662:	2b01      	cmp	r3, #1
 8009664:	d00a      	beq.n	800967c <_raise_r+0x4c>
 8009666:	1c59      	adds	r1, r3, #1
 8009668:	d103      	bne.n	8009672 <_raise_r+0x42>
 800966a:	2316      	movs	r3, #22
 800966c:	6003      	str	r3, [r0, #0]
 800966e:	2001      	movs	r0, #1
 8009670:	e7e7      	b.n	8009642 <_raise_r+0x12>
 8009672:	2100      	movs	r1, #0
 8009674:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009678:	4620      	mov	r0, r4
 800967a:	4798      	blx	r3
 800967c:	2000      	movs	r0, #0
 800967e:	e7e0      	b.n	8009642 <_raise_r+0x12>

08009680 <raise>:
 8009680:	4b02      	ldr	r3, [pc, #8]	@ (800968c <raise+0xc>)
 8009682:	4601      	mov	r1, r0
 8009684:	6818      	ldr	r0, [r3, #0]
 8009686:	f7ff bfd3 	b.w	8009630 <_raise_r>
 800968a:	bf00      	nop
 800968c:	200000dc 	.word	0x200000dc

08009690 <_kill_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4d07      	ldr	r5, [pc, #28]	@ (80096b0 <_kill_r+0x20>)
 8009694:	2300      	movs	r3, #0
 8009696:	4604      	mov	r4, r0
 8009698:	4608      	mov	r0, r1
 800969a:	4611      	mov	r1, r2
 800969c:	602b      	str	r3, [r5, #0]
 800969e:	f7f7 fb6b 	bl	8000d78 <_kill>
 80096a2:	1c43      	adds	r3, r0, #1
 80096a4:	d102      	bne.n	80096ac <_kill_r+0x1c>
 80096a6:	682b      	ldr	r3, [r5, #0]
 80096a8:	b103      	cbz	r3, 80096ac <_kill_r+0x1c>
 80096aa:	6023      	str	r3, [r4, #0]
 80096ac:	bd38      	pop	{r3, r4, r5, pc}
 80096ae:	bf00      	nop
 80096b0:	20000688 	.word	0x20000688

080096b4 <_getpid_r>:
 80096b4:	f7f7 bb58 	b.w	8000d68 <_getpid>

080096b8 <_malloc_usable_size_r>:
 80096b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096bc:	1f18      	subs	r0, r3, #4
 80096be:	2b00      	cmp	r3, #0
 80096c0:	bfbc      	itt	lt
 80096c2:	580b      	ldrlt	r3, [r1, r0]
 80096c4:	18c0      	addlt	r0, r0, r3
 80096c6:	4770      	bx	lr

080096c8 <__swhatbuf_r>:
 80096c8:	b570      	push	{r4, r5, r6, lr}
 80096ca:	460c      	mov	r4, r1
 80096cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096d0:	2900      	cmp	r1, #0
 80096d2:	b096      	sub	sp, #88	@ 0x58
 80096d4:	4615      	mov	r5, r2
 80096d6:	461e      	mov	r6, r3
 80096d8:	da0d      	bge.n	80096f6 <__swhatbuf_r+0x2e>
 80096da:	89a3      	ldrh	r3, [r4, #12]
 80096dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80096e0:	f04f 0100 	mov.w	r1, #0
 80096e4:	bf14      	ite	ne
 80096e6:	2340      	movne	r3, #64	@ 0x40
 80096e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80096ec:	2000      	movs	r0, #0
 80096ee:	6031      	str	r1, [r6, #0]
 80096f0:	602b      	str	r3, [r5, #0]
 80096f2:	b016      	add	sp, #88	@ 0x58
 80096f4:	bd70      	pop	{r4, r5, r6, pc}
 80096f6:	466a      	mov	r2, sp
 80096f8:	f000 f848 	bl	800978c <_fstat_r>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	dbec      	blt.n	80096da <__swhatbuf_r+0x12>
 8009700:	9901      	ldr	r1, [sp, #4]
 8009702:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009706:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800970a:	4259      	negs	r1, r3
 800970c:	4159      	adcs	r1, r3
 800970e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009712:	e7eb      	b.n	80096ec <__swhatbuf_r+0x24>

08009714 <__smakebuf_r>:
 8009714:	898b      	ldrh	r3, [r1, #12]
 8009716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009718:	079d      	lsls	r5, r3, #30
 800971a:	4606      	mov	r6, r0
 800971c:	460c      	mov	r4, r1
 800971e:	d507      	bpl.n	8009730 <__smakebuf_r+0x1c>
 8009720:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	6123      	str	r3, [r4, #16]
 8009728:	2301      	movs	r3, #1
 800972a:	6163      	str	r3, [r4, #20]
 800972c:	b003      	add	sp, #12
 800972e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009730:	ab01      	add	r3, sp, #4
 8009732:	466a      	mov	r2, sp
 8009734:	f7ff ffc8 	bl	80096c8 <__swhatbuf_r>
 8009738:	9f00      	ldr	r7, [sp, #0]
 800973a:	4605      	mov	r5, r0
 800973c:	4639      	mov	r1, r7
 800973e:	4630      	mov	r0, r6
 8009740:	f7ff f904 	bl	800894c <_malloc_r>
 8009744:	b948      	cbnz	r0, 800975a <__smakebuf_r+0x46>
 8009746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800974a:	059a      	lsls	r2, r3, #22
 800974c:	d4ee      	bmi.n	800972c <__smakebuf_r+0x18>
 800974e:	f023 0303 	bic.w	r3, r3, #3
 8009752:	f043 0302 	orr.w	r3, r3, #2
 8009756:	81a3      	strh	r3, [r4, #12]
 8009758:	e7e2      	b.n	8009720 <__smakebuf_r+0xc>
 800975a:	89a3      	ldrh	r3, [r4, #12]
 800975c:	6020      	str	r0, [r4, #0]
 800975e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009762:	81a3      	strh	r3, [r4, #12]
 8009764:	9b01      	ldr	r3, [sp, #4]
 8009766:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800976a:	b15b      	cbz	r3, 8009784 <__smakebuf_r+0x70>
 800976c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009770:	4630      	mov	r0, r6
 8009772:	f000 f81d 	bl	80097b0 <_isatty_r>
 8009776:	b128      	cbz	r0, 8009784 <__smakebuf_r+0x70>
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	f023 0303 	bic.w	r3, r3, #3
 800977e:	f043 0301 	orr.w	r3, r3, #1
 8009782:	81a3      	strh	r3, [r4, #12]
 8009784:	89a3      	ldrh	r3, [r4, #12]
 8009786:	431d      	orrs	r5, r3
 8009788:	81a5      	strh	r5, [r4, #12]
 800978a:	e7cf      	b.n	800972c <__smakebuf_r+0x18>

0800978c <_fstat_r>:
 800978c:	b538      	push	{r3, r4, r5, lr}
 800978e:	4d07      	ldr	r5, [pc, #28]	@ (80097ac <_fstat_r+0x20>)
 8009790:	2300      	movs	r3, #0
 8009792:	4604      	mov	r4, r0
 8009794:	4608      	mov	r0, r1
 8009796:	4611      	mov	r1, r2
 8009798:	602b      	str	r3, [r5, #0]
 800979a:	f7f7 fb4d 	bl	8000e38 <_fstat>
 800979e:	1c43      	adds	r3, r0, #1
 80097a0:	d102      	bne.n	80097a8 <_fstat_r+0x1c>
 80097a2:	682b      	ldr	r3, [r5, #0]
 80097a4:	b103      	cbz	r3, 80097a8 <_fstat_r+0x1c>
 80097a6:	6023      	str	r3, [r4, #0]
 80097a8:	bd38      	pop	{r3, r4, r5, pc}
 80097aa:	bf00      	nop
 80097ac:	20000688 	.word	0x20000688

080097b0 <_isatty_r>:
 80097b0:	b538      	push	{r3, r4, r5, lr}
 80097b2:	4d06      	ldr	r5, [pc, #24]	@ (80097cc <_isatty_r+0x1c>)
 80097b4:	2300      	movs	r3, #0
 80097b6:	4604      	mov	r4, r0
 80097b8:	4608      	mov	r0, r1
 80097ba:	602b      	str	r3, [r5, #0]
 80097bc:	f7f7 fb4c 	bl	8000e58 <_isatty>
 80097c0:	1c43      	adds	r3, r0, #1
 80097c2:	d102      	bne.n	80097ca <_isatty_r+0x1a>
 80097c4:	682b      	ldr	r3, [r5, #0]
 80097c6:	b103      	cbz	r3, 80097ca <_isatty_r+0x1a>
 80097c8:	6023      	str	r3, [r4, #0]
 80097ca:	bd38      	pop	{r3, r4, r5, pc}
 80097cc:	20000688 	.word	0x20000688

080097d0 <_init>:
 80097d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d2:	bf00      	nop
 80097d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097d6:	bc08      	pop	{r3}
 80097d8:	469e      	mov	lr, r3
 80097da:	4770      	bx	lr

080097dc <_fini>:
 80097dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097de:	bf00      	nop
 80097e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097e2:	bc08      	pop	{r3}
 80097e4:	469e      	mov	lr, r3
 80097e6:	4770      	bx	lr
