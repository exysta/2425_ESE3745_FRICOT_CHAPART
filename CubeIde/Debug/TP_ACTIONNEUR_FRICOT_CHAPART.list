
TP_ACTIONNEUR_FRICOT_CHAPART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009190  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08009370  08009370  0000a370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009694  08009694  0000b12c  2**0
                  CONTENTS
  4 .ARM          00000008  08009694  08009694  0000a694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800969c  0800969c  0000b12c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800969c  0800969c  0000a69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096a0  080096a0  0000a6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  080096a4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  2000012c  080097d0  0000b12c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  080097d0  0000b640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b12c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad52  00000000  00000000  0000b15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003833  00000000  00000000  00025eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  000296e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000113c  00000000  00000000  0002ad38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a947  00000000  00000000  0002be74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001acfb  00000000  00000000  000567bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115281  00000000  00000000  000714b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00186737  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a18  00000000  00000000  0018677c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018d194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000012c 	.word	0x2000012c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009358 	.word	0x08009358

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000130 	.word	0x20000130
 800021c:	08009358 	.word	0x08009358

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f007 fe00 	bl	80081fe <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000620:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000632:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800063a:	2201      	movs	r2, #1
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800066a:	f001 fb85 	bl	8001d78 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000674:	f000 faa4 	bl	8000bc0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000680:	4619      	mov	r1, r3
 8000682:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000684:	f002 f99a 	bl	80029bc <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800068e:	f000 fa97 	bl	8000bc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_ADC1_Init+0xec>)
 8000694:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	237f      	movs	r3, #127	@ 0x7f
 80006a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a2:	2304      	movs	r3, #4
 80006a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 80006b0:	f001 fd1e 	bl	80020f0 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ba:	f000 fa81 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	@ 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000148 	.word	0x20000148
 80006cc:	21800100 	.word	0x21800100

080006d0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2220      	movs	r2, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f007 fd8e 	bl	80081fe <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000794 <MX_ADC2_Init+0xc4>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000708:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800070a:	2204      	movs	r2, #4
 800070c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000716:	2200      	movs	r2, #0
 8000718:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800071c:	2201      	movs	r2, #1
 800071e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800074a:	4811      	ldr	r0, [pc, #68]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800074c:	f001 fb14 	bl	8001d78 <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000756:	f000 fa33 	bl	8000bc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_ADC2_Init+0xc8>)
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075e:	2306      	movs	r3, #6
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000766:	237f      	movs	r3, #127	@ 0x7f
 8000768:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076a:	2304      	movs	r3, #4
 800076c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000778:	f001 fcba 	bl	80020f0 <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000782:	f000 fa1d 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200001b4 	.word	0x200001b4
 8000794:	50000100 	.word	0x50000100
 8000798:	19200040 	.word	0x19200040

0800079c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0a4      	sub	sp, #144	@ 0x90
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b8:	2254      	movs	r2, #84	@ 0x54
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 fd1e 	bl	80081fe <memset>
  if(adcHandle->Instance==ADC1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ca:	d174      	bne.n	80008b6 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fb67 	bl	8003eb0 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007e8:	f000 f9ea 	bl	8000bc0 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007ec:	4b63      	ldr	r3, [pc, #396]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a62      	ldr	r2, [pc, #392]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007f6:	4b61      	ldr	r3, [pc, #388]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10b      	bne.n	8000816 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007fe:	4b60      	ldr	r3, [pc, #384]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a5f      	ldr	r2, [pc, #380]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000804:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b5d      	ldr	r3, [pc, #372]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b5a      	ldr	r3, [pc, #360]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a59      	ldr	r2, [pc, #356]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b57      	ldr	r3, [pc, #348]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b54      	ldr	r3, [pc, #336]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a53      	ldr	r2, [pc, #332]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b4e      	ldr	r3, [pc, #312]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a4d      	ldr	r2, [pc, #308]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b4b      	ldr	r3, [pc, #300]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800085e:	2304      	movs	r3, #4
 8000860:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000872:	4619      	mov	r1, r3
 8000874:	4843      	ldr	r0, [pc, #268]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000876:	f002 fb49 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800087a:	2302      	movs	r3, #2
 800087c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000894:	f002 fb3a 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000898:	2303      	movs	r3, #3
 800089a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089c:	2303      	movs	r3, #3
 800089e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008ac:	4619      	mov	r1, r3
 80008ae:	4836      	ldr	r0, [pc, #216]	@ (8000988 <HAL_ADC_MspInit+0x1ec>)
 80008b0:	f002 fb2c 	bl	8002f0c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008b4:	e05e      	b.n	8000974 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a34      	ldr	r2, [pc, #208]	@ (800098c <HAL_ADC_MspInit+0x1f0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d159      	bne.n	8000974 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008c6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 faed 	bl	8003eb0 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008dc:	f000 f970 	bl	8000bc0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008e0:	4b26      	ldr	r3, [pc, #152]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a25      	ldr	r2, [pc, #148]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ea:	4b24      	ldr	r3, [pc, #144]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10b      	bne.n	800090a <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a16      	ldr	r2, [pc, #88]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800093a:	230b      	movs	r3, #11
 800093c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093e:	2303      	movs	r3, #3
 8000940:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000952:	f002 fadb 	bl	8002f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000956:	2301      	movs	r3, #1
 8000958:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095a:	2303      	movs	r3, #3
 800095c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f002 facc 	bl	8002f0c <HAL_GPIO_Init>
}
 8000974:	bf00      	nop
 8000976:	3790      	adds	r7, #144	@ 0x90
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000220 	.word	0x20000220
 8000980:	40021000 	.word	0x40021000
 8000984:	48000800 	.word	0x48000800
 8000988:	48000400 	.word	0x48000400
 800098c:	50000100 	.word	0x50000100

08000990 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b3f      	ldr	r3, [pc, #252]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a3e      	ldr	r2, [pc, #248]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b3c      	ldr	r3, [pc, #240]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009be:	4b39      	ldr	r3, [pc, #228]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	4a38      	ldr	r2, [pc, #224]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009c4:	f043 0320 	orr.w	r3, r3, #32
 80009c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ca:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	f003 0320 	and.w	r3, r3, #32
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b33      	ldr	r3, [pc, #204]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a32      	ldr	r2, [pc, #200]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b30      	ldr	r3, [pc, #192]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4a2c      	ldr	r2, [pc, #176]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	4a26      	ldr	r2, [pc, #152]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a12:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a26:	f002 fbf3 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	481e      	ldr	r0, [pc, #120]	@ (8000aa8 <MX_GPIO_Init+0x118>)
 8000a30:	f002 fbee 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4818      	ldr	r0, [pc, #96]	@ (8000aac <MX_GPIO_Init+0x11c>)
 8000a4c:	f002 fa5e 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a50:	2320      	movs	r3, #32
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f002 fa4f 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4808      	ldr	r0, [pc, #32]	@ (8000aa8 <MX_GPIO_Init+0x118>)
 8000a86:	f002 fa41 	bl	8002f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2028      	movs	r0, #40	@ 0x28
 8000a90:	f002 f954 	bl	8002d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a94:	2028      	movs	r0, #40	@ 0x28
 8000a96:	f002 f96b 	bl	8002d70 <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	@ 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48000c00 	.word	0x48000c00
 8000aac:	48000800 	.word	0x48000800

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab4:	f000 ff53 	bl	800195e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab8:	f000 f826 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abc:	f7ff ff68 	bl	8000990 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000ac0:	f7ff fe06 	bl	80006d0 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000ac4:	f7ff fd8c 	bl	80005e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ac8:	f000 fa3e 	bl	8000f48 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000acc:	f000 faee 	bl	80010ac <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ad0:	f000 fc22 	bl	8001318 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ad4:	f000 fc6c 	bl	80013b0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8000ad8:	f000 fde4 	bl	80016a4 <Shell_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000adc:	2100      	movs	r1, #0
 8000ade:	4809      	ldr	r0, [pc, #36]	@ (8000b04 <main+0x54>)
 8000ae0:	f003 fd66 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <main+0x54>)
 8000ae8:	f004 fe26 	bl	8005738 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000aec:	2104      	movs	r1, #4
 8000aee:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <main+0x54>)
 8000af0:	f003 fd5e 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000af4:	2104      	movs	r1, #4
 8000af6:	4803      	ldr	r0, [pc, #12]	@ (8000b04 <main+0x54>)
 8000af8:	f004 fe1e 	bl	8005738 <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000afc:	f000 fe12 	bl	8001724 <Shell_Loop>
	{
 8000b00:	bf00      	nop
 8000b02:	e7fb      	b.n	8000afc <main+0x4c>
 8000b04:	20000274 	.word	0x20000274

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b094      	sub	sp, #80	@ 0x50
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0318 	add.w	r3, r7, #24
 8000b12:	2238      	movs	r2, #56	@ 0x38
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f007 fb71 	bl	80081fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f002 fbac 	bl	8003288 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b38:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000b42:	2306      	movs	r3, #6
 8000b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b46:	2355      	movs	r3, #85	@ 0x55
 8000b48:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b56:	f107 0318 	add.w	r3, r7, #24
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f002 fc48 	bl	80033f0 <HAL_RCC_OscConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b66:	f000 f82b 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2104      	movs	r1, #4
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 ff46 	bl	8003a14 <HAL_RCC_ClockConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b8e:	f000 f817 	bl	8000bc0 <Error_Handler>
  }
}
 8000b92:	bf00      	nop
 8000b94:	3750      	adds	r7, #80	@ 0x50
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d101      	bne.n	8000bb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bae:	f000 feef 	bl	8001990 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40001000 	.word	0x40001000

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <Error_Handler+0x8>

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <HAL_MspInit+0x44>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c02:	f002 fbe5 	bl	80033d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000

08000c14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	@ 0x30
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd8 <HAL_InitTick+0xc4>)
 8000c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c28:	4a2b      	ldr	r2, [pc, #172]	@ (8000cd8 <HAL_InitTick+0xc4>)
 8000c2a:	f043 0310 	orr.w	r3, r3, #16
 8000c2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c30:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <HAL_InitTick+0xc4>)
 8000c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c34:	f003 0310 	and.w	r3, r3, #16
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c3c:	f107 020c 	add.w	r2, r7, #12
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	4611      	mov	r1, r2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 f8ba 	bl	8003dc0 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c4c:	f003 f88c 	bl	8003d68 <HAL_RCC_GetPCLK1Freq>
 8000c50:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c54:	4a21      	ldr	r2, [pc, #132]	@ (8000cdc <HAL_InitTick+0xc8>)
 8000c56:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5a:	0c9b      	lsrs	r3, r3, #18
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce0 <HAL_InitTick+0xcc>)
 8000c62:	4a20      	ldr	r2, [pc, #128]	@ (8000ce4 <HAL_InitTick+0xd0>)
 8000c64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <HAL_InitTick+0xcc>)
 8000c68:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c6c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce0 <HAL_InitTick+0xcc>)
 8000c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c72:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <HAL_InitTick+0xcc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <HAL_InitTick+0xcc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000c80:	4817      	ldr	r0, [pc, #92]	@ (8000ce0 <HAL_InitTick+0xcc>)
 8000c82:	f003 fb63 	bl	800434c <HAL_TIM_Base_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d11b      	bne.n	8000ccc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c94:	4812      	ldr	r0, [pc, #72]	@ (8000ce0 <HAL_InitTick+0xcc>)
 8000c96:	f003 fbbb 	bl	8004410 <HAL_TIM_Base_Start_IT>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ca0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d111      	bne.n	8000ccc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ca8:	2036      	movs	r0, #54	@ 0x36
 8000caa:	f002 f861 	bl	8002d70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d808      	bhi.n	8000cc6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	2036      	movs	r0, #54	@ 0x36
 8000cba:	f002 f83f 	bl	8002d3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <HAL_InitTick+0xd4>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	e002      	b.n	8000ccc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3730      	adds	r7, #48	@ 0x30
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	431bde83 	.word	0x431bde83
 8000ce0:	20000224 	.word	0x20000224
 8000ce4:	40001000 	.word	0x40001000
 8000ce8:	200000c8 	.word	0x200000c8

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <MemManage_Handler+0x4>

08000d04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d50:	4802      	ldr	r0, [pc, #8]	@ (8000d5c <USART2_IRQHandler+0x10>)
 8000d52:	f005 f873 	bl	8005e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000030c 	.word	0x2000030c

08000d60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <USART3_IRQHandler+0x10>)
 8000d66:	f005 f869 	bl	8005e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200003a0 	.word	0x200003a0

08000d74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000d78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d7c:	f002 fa60 	bl	8003240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d88:	4802      	ldr	r0, [pc, #8]	@ (8000d94 <TIM6_DAC_IRQHandler+0x10>)
 8000d8a:	f003 fd23 	bl	80047d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000224 	.word	0x20000224

08000d98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return 1;
 8000d9c:	2301      	movs	r3, #1
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <_kill>:

int _kill(int pid, int sig)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000db2:	f007 facf 	bl	8008354 <__errno>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2216      	movs	r2, #22
 8000dba:	601a      	str	r2, [r3, #0]
  return -1;
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <_exit>:

void _exit (int status)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ffe7 	bl	8000da8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dda:	bf00      	nop
 8000ddc:	e7fd      	b.n	8000dda <_exit+0x12>

08000dde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e00a      	b.n	8000e06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df0:	f3af 8000 	nop.w
 8000df4:	4601      	mov	r1, r0
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	60ba      	str	r2, [r7, #8]
 8000dfc:	b2ca      	uxtb	r2, r1
 8000dfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dbf0      	blt.n	8000df0 <_read+0x12>
  }

  return len;
 8000e0e:	687b      	ldr	r3, [r7, #4]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	e009      	b.n	8000e3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	60ba      	str	r2, [r7, #8]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	dbf1      	blt.n	8000e2a <_write+0x12>
  }
  return len;
 8000e46:	687b      	ldr	r3, [r7, #4]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_close>:

int _close(int file)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e78:	605a      	str	r2, [r3, #4]
  return 0;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_isatty>:

int _isatty(int file)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e90:	2301      	movs	r3, #1
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b085      	sub	sp, #20
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	@ (8000f14 <_sbrk+0x5c>)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <_sbrk+0x60>)
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <_sbrk+0x64>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <_sbrk+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d207      	bcs.n	8000ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee8:	f007 fa34 	bl	8008354 <__errno>
 8000eec:	4603      	mov	r3, r0
 8000eee:	220c      	movs	r2, #12
 8000ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ef6:	e009      	b.n	8000f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efe:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <_sbrk+0x64>)
 8000f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20020000 	.word	0x20020000
 8000f18:	00000400 	.word	0x00000400
 8000f1c:	20000270 	.word	0x20000270
 8000f20:	20000640 	.word	0x20000640

08000f24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b098      	sub	sp, #96	@ 0x60
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]
 8000f6a:	615a      	str	r2, [r3, #20]
 8000f6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2234      	movs	r2, #52	@ 0x34
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f007 f942 	bl	80081fe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000f7c:	4a4a      	ldr	r2, [pc, #296]	@ (80010a8 <MX_TIM1_Init+0x160>)
 8000f7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f80:	4b48      	ldr	r3, [pc, #288]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f86:	4b47      	ldr	r3, [pc, #284]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000f88:	2220      	movs	r2, #32
 8000f8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8000f8c:	4b45      	ldr	r3, [pc, #276]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000f8e:	f242 1233 	movw	r2, #8499	@ 0x2133
 8000f92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f94:	4b43      	ldr	r3, [pc, #268]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f9a:	4b42      	ldr	r3, [pc, #264]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa0:	4b40      	ldr	r3, [pc, #256]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fa6:	483f      	ldr	r0, [pc, #252]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000fa8:	f003 faaa 	bl	8004500 <HAL_TIM_PWM_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000fb2:	f7ff fe05 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fc2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4836      	ldr	r0, [pc, #216]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000fca:	f004 fc77 	bl	80058bc <HAL_TIMEx_MasterConfigSynchronization>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fd4:	f7ff fdf4 	bl	8000bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd8:	2360      	movs	r3, #96	@ 0x60
 8000fda:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5099;
 8000fdc:	f241 33eb 	movw	r3, #5099	@ 0x13eb
 8000fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4829      	ldr	r0, [pc, #164]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8001000:	f003 fd38 	bl	8004a74 <HAL_TIM_PWM_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800100a:	f7ff fdd9 	bl	8000bc0 <Error_Handler>
  }
  sConfigOC.Pulse = 3399;
 800100e:	f640 5347 	movw	r3, #3399	@ 0xd47
 8001012:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001014:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001018:	2204      	movs	r2, #4
 800101a:	4619      	mov	r1, r3
 800101c:	4821      	ldr	r0, [pc, #132]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 800101e:	f003 fd29 	bl	8004a74 <HAL_TIM_PWM_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001028:	f7ff fdca 	bl	8000bc0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001030:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001034:	2208      	movs	r2, #8
 8001036:	4619      	mov	r1, r3
 8001038:	481a      	ldr	r0, [pc, #104]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 800103a:	f003 fd1b 	bl	8004a74 <HAL_TIM_PWM_ConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001044:	f7ff fdbc 	bl	8000bc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8001054:	2314      	movs	r3, #20
 8001056:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800105c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001060:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800106e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001072:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001078:	2300      	movs	r3, #0
 800107a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	4619      	mov	r1, r3
 8001084:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8001086:	f004 fcaf 	bl	80059e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001090:	f7ff fd96 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001094:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8001096:	f000 f8d7 	bl	8001248 <HAL_TIM_MspPostInit>

}
 800109a:	bf00      	nop
 800109c:	3760      	adds	r7, #96	@ 0x60
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000274 	.word	0x20000274
 80010a8:	40012c00 	.word	0x40012c00

080010ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <MX_TIM3_Init+0x90>)
 80010cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001140 <MX_TIM3_Init+0x94>)
 80010ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <MX_TIM3_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_TIM3_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MX_TIM3_Init+0x90>)
 80010de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b15      	ldr	r3, [pc, #84]	@ (800113c <MX_TIM3_Init+0x90>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ea:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_TIM3_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4619      	mov	r1, r3
 8001106:	480d      	ldr	r0, [pc, #52]	@ (800113c <MX_TIM3_Init+0x90>)
 8001108:	f004 fa67 	bl	80055da <HAL_TIMEx_HallSensor_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001112:	f7ff fd55 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001116:	2350      	movs	r3, #80	@ 0x50
 8001118:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <MX_TIM3_Init+0x90>)
 8001124:	f004 fbca 	bl	80058bc <HAL_TIMEx_MasterConfigSynchronization>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800112e:	f7ff fd47 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3720      	adds	r7, #32
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200002c0 	.word	0x200002c0
 8001140:	40000400 	.word	0x40000400

08001144 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <HAL_TIM_PWM_MspInit+0x38>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d10b      	bne.n	800116e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_TIM_PWM_MspInit+0x3c>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115a:	4a09      	ldr	r2, [pc, #36]	@ (8001180 <HAL_TIM_PWM_MspInit+0x3c>)
 800115c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001160:	6613      	str	r3, [r2, #96]	@ 0x60
 8001162:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <HAL_TIM_PWM_MspInit+0x3c>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001166:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40012c00 	.word	0x40012c00
 8001180:	40021000 	.word	0x40021000

08001184 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a26      	ldr	r2, [pc, #152]	@ (800123c <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d145      	bne.n	8001232 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011aa:	4a25      	ldr	r2, [pc, #148]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b2:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b20      	ldr	r3, [pc, #128]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	4a19      	ldr	r2, [pc, #100]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e2:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80011ee:	2350      	movs	r3, #80	@ 0x50
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011fe:	2302      	movs	r3, #2
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120c:	f001 fe7e 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001210:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001222:	2302      	movs	r3, #2
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800122e:	f001 fe6d 	bl	8002f0c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	@ 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40000400 	.word	0x40000400
 8001240:	40021000 	.word	0x40021000
 8001244:	48000800 	.word	0x48000800

08001248 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	@ 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a29      	ldr	r2, [pc, #164]	@ (800130c <HAL_TIM_MspPostInit+0xc4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d14b      	bne.n	8001302 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b29      	ldr	r3, [pc, #164]	@ (8001310 <HAL_TIM_MspPostInit+0xc8>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	4a28      	ldr	r2, [pc, #160]	@ (8001310 <HAL_TIM_MspPostInit+0xc8>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001276:	4b26      	ldr	r3, [pc, #152]	@ (8001310 <HAL_TIM_MspPostInit+0xc8>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b23      	ldr	r3, [pc, #140]	@ (8001310 <HAL_TIM_MspPostInit+0xc8>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	4a22      	ldr	r2, [pc, #136]	@ (8001310 <HAL_TIM_MspPostInit+0xc8>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128e:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <HAL_TIM_MspPostInit+0xc8>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800129a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012ac:	2306      	movs	r3, #6
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	4817      	ldr	r0, [pc, #92]	@ (8001314 <HAL_TIM_MspPostInit+0xcc>)
 80012b8:	f001 fe28 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80012bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80012ce:	2304      	movs	r3, #4
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	480e      	ldr	r0, [pc, #56]	@ (8001314 <HAL_TIM_MspPostInit+0xcc>)
 80012da:	f001 fe17 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80012de:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012f0:	2306      	movs	r3, #6
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fe:	f001 fe05 	bl	8002f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	@ 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40012c00 	.word	0x40012c00
 8001310:	40021000 	.word	0x40021000
 8001314:	48000400 	.word	0x48000400

08001318 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800131c:	4b22      	ldr	r3, [pc, #136]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 800131e:	4a23      	ldr	r2, [pc, #140]	@ (80013ac <MX_USART2_UART_Init+0x94>)
 8001320:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001322:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001324:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001328:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001336:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800135a:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001360:	4811      	ldr	r0, [pc, #68]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001362:	f004 fc40 	bl	8005be6 <HAL_UART_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800136c:	f7ff fc28 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001370:	2100      	movs	r1, #0
 8001372:	480d      	ldr	r0, [pc, #52]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001374:	f006 fcb7 	bl	8007ce6 <HAL_UARTEx_SetTxFifoThreshold>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800137e:	f7ff fc1f 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001382:	2100      	movs	r1, #0
 8001384:	4808      	ldr	r0, [pc, #32]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001386:	f006 fcec 	bl	8007d62 <HAL_UARTEx_SetRxFifoThreshold>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001390:	f7ff fc16 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001394:	4804      	ldr	r0, [pc, #16]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001396:	f006 fc6d 	bl	8007c74 <HAL_UARTEx_DisableFifoMode>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013a0:	f7ff fc0e 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000030c 	.word	0x2000030c
 80013ac:	40004400 	.word	0x40004400

080013b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013b4:	4b22      	ldr	r3, [pc, #136]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013b6:	4a23      	ldr	r2, [pc, #140]	@ (8001444 <MX_USART3_UART_Init+0x94>)
 80013b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ba:	4b21      	ldr	r3, [pc, #132]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013d6:	220c      	movs	r2, #12
 80013d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013da:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e0:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013ec:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f2:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013f8:	4811      	ldr	r0, [pc, #68]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013fa:	f004 fbf4 	bl	8005be6 <HAL_UART_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001404:	f7ff fbdc 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001408:	2100      	movs	r1, #0
 800140a:	480d      	ldr	r0, [pc, #52]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 800140c:	f006 fc6b 	bl	8007ce6 <HAL_UARTEx_SetTxFifoThreshold>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001416:	f7ff fbd3 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141a:	2100      	movs	r1, #0
 800141c:	4808      	ldr	r0, [pc, #32]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 800141e:	f006 fca0 	bl	8007d62 <HAL_UARTEx_SetRxFifoThreshold>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001428:	f7ff fbca 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800142c:	4804      	ldr	r0, [pc, #16]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 800142e:	f006 fc21 	bl	8007c74 <HAL_UARTEx_DisableFifoMode>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001438:	f7ff fbc2 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200003a0 	.word	0x200003a0
 8001444:	40004800 	.word	0x40004800

08001448 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b0a0      	sub	sp, #128	@ 0x80
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001460:	f107 0318 	add.w	r3, r7, #24
 8001464:	2254      	movs	r2, #84	@ 0x54
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f006 fec8 	bl	80081fe <memset>
  if(uartHandle->Instance==USART2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a45      	ldr	r2, [pc, #276]	@ (8001588 <HAL_UART_MspInit+0x140>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d13f      	bne.n	80014f8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001478:	2302      	movs	r3, #2
 800147a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fd13 	bl	8003eb0 <HAL_RCCEx_PeriphCLKConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001490:	f7ff fb96 	bl	8000bc0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001494:	4b3d      	ldr	r3, [pc, #244]	@ (800158c <HAL_UART_MspInit+0x144>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001498:	4a3c      	ldr	r2, [pc, #240]	@ (800158c <HAL_UART_MspInit+0x144>)
 800149a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800149e:	6593      	str	r3, [r2, #88]	@ 0x58
 80014a0:	4b3a      	ldr	r3, [pc, #232]	@ (800158c <HAL_UART_MspInit+0x144>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b37      	ldr	r3, [pc, #220]	@ (800158c <HAL_UART_MspInit+0x144>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b0:	4a36      	ldr	r2, [pc, #216]	@ (800158c <HAL_UART_MspInit+0x144>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b8:	4b34      	ldr	r3, [pc, #208]	@ (800158c <HAL_UART_MspInit+0x144>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014c4:	230c      	movs	r3, #12
 80014c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014d4:	2307      	movs	r3, #7
 80014d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e2:	f001 fd13 	bl	8002f0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2026      	movs	r0, #38	@ 0x26
 80014ec:	f001 fc26 	bl	8002d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014f0:	2026      	movs	r0, #38	@ 0x26
 80014f2:	f001 fc3d 	bl	8002d70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014f6:	e043      	b.n	8001580 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a24      	ldr	r2, [pc, #144]	@ (8001590 <HAL_UART_MspInit+0x148>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d13e      	bne.n	8001580 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001502:	2304      	movs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800150a:	f107 0318 	add.w	r3, r7, #24
 800150e:	4618      	mov	r0, r3
 8001510:	f002 fcce 	bl	8003eb0 <HAL_RCCEx_PeriphCLKConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800151a:	f7ff fb51 	bl	8000bc0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800151e:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <HAL_UART_MspInit+0x144>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	4a1a      	ldr	r2, [pc, #104]	@ (800158c <HAL_UART_MspInit+0x144>)
 8001524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001528:	6593      	str	r3, [r2, #88]	@ 0x58
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <HAL_UART_MspInit+0x144>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <HAL_UART_MspInit+0x144>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153a:	4a14      	ldr	r2, [pc, #80]	@ (800158c <HAL_UART_MspInit+0x144>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001542:	4b12      	ldr	r3, [pc, #72]	@ (800158c <HAL_UART_MspInit+0x144>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800154e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001552:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001560:	2307      	movs	r3, #7
 8001562:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001564:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001568:	4619      	mov	r1, r3
 800156a:	480a      	ldr	r0, [pc, #40]	@ (8001594 <HAL_UART_MspInit+0x14c>)
 800156c:	f001 fcce 	bl	8002f0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	2027      	movs	r0, #39	@ 0x27
 8001576:	f001 fbe1 	bl	8002d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800157a:	2027      	movs	r0, #39	@ 0x27
 800157c:	f001 fbf8 	bl	8002d70 <HAL_NVIC_EnableIRQ>
}
 8001580:	bf00      	nop
 8001582:	3780      	adds	r7, #128	@ 0x80
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40004400 	.word	0x40004400
 800158c:	40021000 	.word	0x40021000
 8001590:	40004800 	.word	0x40004800
 8001594:	48000800 	.word	0x48000800

08001598 <set_pulse>:
#include <ctype.h>
#include <stdbool.h>
#include <stdlib.h>

void set_pulse(uint32_t speed)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	uint16_t pulse1 = MAX_PULSE* speed/100;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f242 1233 	movw	r2, #8499	@ 0x2133
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	4a0c      	ldr	r2, [pc, #48]	@ (80015dc <set_pulse+0x44>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	095b      	lsrs	r3, r3, #5
 80015b2:	81fb      	strh	r3, [r7, #14]
	uint16_t pulse2 = MAX_PULSE - pulse1;
 80015b4:	89fb      	ldrh	r3, [r7, #14]
 80015b6:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 80015ba:	3333      	adds	r3, #51	@ 0x33
 80015bc:	81bb      	strh	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse1);
 80015be:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <set_pulse+0x48>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	89fa      	ldrh	r2, [r7, #14]
 80015c4:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse2);
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <set_pulse+0x48>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	89ba      	ldrh	r2, [r7, #12]
 80015cc:	639a      	str	r2, [r3, #56]	@ 0x38


}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	51eb851f 	.word	0x51eb851f
 80015e0:	20000274 	.word	0x20000274

080015e4 <speed>:
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

int speed(char **argv,int argc)
{
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	b092      	sub	sp, #72	@ 0x48
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
	uint32_t speed = atoi(argv[1]);//speed in expected in % of max speed
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3304      	adds	r3, #4
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f006 fc41 	bl	8007e7c <atoi>
 80015fa:	4603      	mov	r3, r0
 80015fc:	647b      	str	r3, [r7, #68]	@ 0x44
	if(argc != 2)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d018      	beq.n	8001636 <speed+0x52>
	{
		uint8_t error_message[] = "Error : speed function expect exactly 1 parameter \r\n";
 8001604:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <speed+0xac>)
 8001606:	f107 0408 	add.w	r4, r7, #8
 800160a:	461d      	mov	r5, r3
 800160c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001618:	e895 0003 	ldmia.w	r5, {r0, r1}
 800161c:	6020      	str	r0, [r4, #0]
 800161e:	3404      	adds	r4, #4
 8001620:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, error_message, sizeof(error_message), HAL_MAX_DELAY);
 8001622:	f107 0108 	add.w	r1, r7, #8
 8001626:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800162a:	2235      	movs	r2, #53	@ 0x35
 800162c:	4819      	ldr	r0, [pc, #100]	@ (8001694 <speed+0xb0>)
 800162e:	f004 fb2a 	bl	8005c86 <HAL_UART_Transmit>
		return 1;
 8001632:	2301      	movs	r3, #1
 8001634:	e028      	b.n	8001688 <speed+0xa4>
//	{
//		uint8_t error_message[] = " Error : speed function expect a parameter that is an int represention \r\n";
//		HAL_UART_Transmit(&huart2, error_message, sizeof(error_message), HAL_MAX_DELAY);
//		return 1;
//	}
	else if(speed > 95)//on vérifie qu'on met pas la vitesse ne soit pas au dessus de 95% de la max par sécurité
 8001636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001638:	2b5f      	cmp	r3, #95	@ 0x5f
 800163a:	d913      	bls.n	8001664 <speed+0x80>
	{
		uint8_t error_message[] = "speed function must not exceed 95% of max value  \r\n";
 800163c:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <speed+0xb4>)
 800163e:	f107 0408 	add.w	r4, r7, #8
 8001642:	461d      	mov	r5, r3
 8001644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800164a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800164c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800164e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001650:	682b      	ldr	r3, [r5, #0]
 8001652:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, error_message, sizeof(error_message), HAL_MAX_DELAY);
 8001654:	f107 0108 	add.w	r1, r7, #8
 8001658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800165c:	2234      	movs	r2, #52	@ 0x34
 800165e:	480d      	ldr	r0, [pc, #52]	@ (8001694 <speed+0xb0>)
 8001660:	f004 fb11 	bl	8005c86 <HAL_UART_Transmit>
	}
	set_pulse(speed);
 8001664:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001666:	f7ff ff97 	bl	8001598 <set_pulse>
	uint8_t * success_message = "speed set to %lu of max value  \r\n";
 800166a:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <speed+0xb8>)
 800166c:	643b      	str	r3, [r7, #64]	@ 0x40
	snprintf((char *)success_message, sizeof(success_message), "speed set to %lu of max value \r\n", (unsigned long)speed);
 800166e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001670:	4a0b      	ldr	r2, [pc, #44]	@ (80016a0 <speed+0xbc>)
 8001672:	2104      	movs	r1, #4
 8001674:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001676:	f006 fd4b 	bl	8008110 <sniprintf>
	HAL_UART_Transmit(&huart2, success_message, sizeof(success_message), HAL_MAX_DELAY);
 800167a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800167e:	2204      	movs	r2, #4
 8001680:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001682:	4804      	ldr	r0, [pc, #16]	@ (8001694 <speed+0xb0>)
 8001684:	f004 faff 	bl	8005c86 <HAL_UART_Transmit>

}
 8001688:	4618      	mov	r0, r3
 800168a:	3748      	adds	r7, #72	@ 0x48
 800168c:	46bd      	mov	sp, r7
 800168e:	bdb0      	pop	{r4, r5, r7, pc}
 8001690:	080093b8 	.word	0x080093b8
 8001694:	2000030c 	.word	0x2000030c
 8001698:	080093f0 	.word	0x080093f0
 800169c:	08009370 	.word	0x08009370
 80016a0:	08009394 	.word	0x08009394

080016a4 <Shell_Init>:

void Shell_Init(void){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 80016a8:	2224      	movs	r2, #36	@ 0x24
 80016aa:	2100      	movs	r1, #0
 80016ac:	4816      	ldr	r0, [pc, #88]	@ (8001708 <Shell_Init+0x64>)
 80016ae:	f006 fda6 	bl	80081fe <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 80016b2:	2240      	movs	r2, #64	@ 0x40
 80016b4:	2100      	movs	r1, #0
 80016b6:	4815      	ldr	r0, [pc, #84]	@ (800170c <Shell_Init+0x68>)
 80016b8:	f006 fda1 	bl	80081fe <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 80016bc:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <Shell_Init+0x6c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 80016c2:	2240      	movs	r2, #64	@ 0x40
 80016c4:	2100      	movs	r1, #0
 80016c6:	4813      	ldr	r0, [pc, #76]	@ (8001714 <Shell_Init+0x70>)
 80016c8:	f006 fd99 	bl	80081fe <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80016cc:	2201      	movs	r2, #1
 80016ce:	4910      	ldr	r1, [pc, #64]	@ (8001710 <Shell_Init+0x6c>)
 80016d0:	4811      	ldr	r0, [pc, #68]	@ (8001718 <Shell_Init+0x74>)
 80016d2:	f004 fb67 	bl	8005da4 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 80016d6:	4811      	ldr	r0, [pc, #68]	@ (800171c <Shell_Init+0x78>)
 80016d8:	f7fe fdac 	bl	8000234 <strlen>
 80016dc:	4603      	mov	r3, r0
 80016de:	b29a      	uxth	r2, r3
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016e4:	490d      	ldr	r1, [pc, #52]	@ (800171c <Shell_Init+0x78>)
 80016e6:	480c      	ldr	r0, [pc, #48]	@ (8001718 <Shell_Init+0x74>)
 80016e8:	f004 facd 	bl	8005c86 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80016ec:	480c      	ldr	r0, [pc, #48]	@ (8001720 <Shell_Init+0x7c>)
 80016ee:	f7fe fda1 	bl	8000234 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016fa:	4909      	ldr	r1, [pc, #36]	@ (8001720 <Shell_Init+0x7c>)
 80016fc:	4806      	ldr	r0, [pc, #24]	@ (8001718 <Shell_Init+0x74>)
 80016fe:	f004 fac2 	bl	8005c86 <HAL_UART_Transmit>
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200004c0 	.word	0x200004c0
 800170c:	2000047c 	.word	0x2000047c
 8001710:	20000438 	.word	0x20000438
 8001714:	2000043c 	.word	0x2000043c
 8001718:	2000030c 	.word	0x2000030c
 800171c:	20000028 	.word	0x20000028
 8001720:	20000004 	.word	0x20000004

08001724 <Shell_Loop>:


void Shell_Loop(void){
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 800172a:	4b59      	ldr	r3, [pc, #356]	@ (8001890 <Shell_Loop+0x16c>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d05b      	beq.n	80017ea <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8001732:	4b58      	ldr	r3, [pc, #352]	@ (8001894 <Shell_Loop+0x170>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b08      	cmp	r3, #8
 8001738:	d034      	beq.n	80017a4 <Shell_Loop+0x80>
 800173a:	2b0d      	cmp	r3, #13
 800173c:	d142      	bne.n	80017c4 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800173e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001742:	2203      	movs	r2, #3
 8001744:	4954      	ldr	r1, [pc, #336]	@ (8001898 <Shell_Loop+0x174>)
 8001746:	4855      	ldr	r0, [pc, #340]	@ (800189c <Shell_Loop+0x178>)
 8001748:	f004 fa9d 	bl	8005c86 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 800174c:	4b54      	ldr	r3, [pc, #336]	@ (80018a0 <Shell_Loop+0x17c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a54      	ldr	r2, [pc, #336]	@ (80018a4 <Shell_Loop+0x180>)
 8001752:	2100      	movs	r1, #0
 8001754:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8001756:	4b54      	ldr	r3, [pc, #336]	@ (80018a8 <Shell_Loop+0x184>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 800175c:	4953      	ldr	r1, [pc, #332]	@ (80018ac <Shell_Loop+0x188>)
 800175e:	4851      	ldr	r0, [pc, #324]	@ (80018a4 <Shell_Loop+0x180>)
 8001760:	f006 fd56 	bl	8008210 <strtok>
 8001764:	4603      	mov	r3, r0
 8001766:	4a52      	ldr	r2, [pc, #328]	@ (80018b0 <Shell_Loop+0x18c>)
 8001768:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800176a:	e010      	b.n	800178e <Shell_Loop+0x6a>
				argv[argc++] = token;
 800176c:	4b4e      	ldr	r3, [pc, #312]	@ (80018a8 <Shell_Loop+0x184>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	494d      	ldr	r1, [pc, #308]	@ (80018a8 <Shell_Loop+0x184>)
 8001774:	600a      	str	r2, [r1, #0]
 8001776:	4a4e      	ldr	r2, [pc, #312]	@ (80018b0 <Shell_Loop+0x18c>)
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	494e      	ldr	r1, [pc, #312]	@ (80018b4 <Shell_Loop+0x190>)
 800177c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001780:	494a      	ldr	r1, [pc, #296]	@ (80018ac <Shell_Loop+0x188>)
 8001782:	2000      	movs	r0, #0
 8001784:	f006 fd44 	bl	8008210 <strtok>
 8001788:	4603      	mov	r3, r0
 800178a:	4a49      	ldr	r2, [pc, #292]	@ (80018b0 <Shell_Loop+0x18c>)
 800178c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800178e:	4b48      	ldr	r3, [pc, #288]	@ (80018b0 <Shell_Loop+0x18c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ea      	bne.n	800176c <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8001796:	4b42      	ldr	r3, [pc, #264]	@ (80018a0 <Shell_Loop+0x17c>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 800179c:	4b46      	ldr	r3, [pc, #280]	@ (80018b8 <Shell_Loop+0x194>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
			break;
 80017a2:	e01f      	b.n	80017e4 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 80017a4:	4b3e      	ldr	r3, [pc, #248]	@ (80018a0 <Shell_Loop+0x17c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	1e5a      	subs	r2, r3, #1
 80017aa:	493d      	ldr	r1, [pc, #244]	@ (80018a0 <Shell_Loop+0x17c>)
 80017ac:	600a      	str	r2, [r1, #0]
 80017ae:	4a3d      	ldr	r2, [pc, #244]	@ (80018a4 <Shell_Loop+0x180>)
 80017b0:	2100      	movs	r1, #0
 80017b2:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017b8:	2204      	movs	r2, #4
 80017ba:	4940      	ldr	r1, [pc, #256]	@ (80018bc <Shell_Loop+0x198>)
 80017bc:	4837      	ldr	r0, [pc, #220]	@ (800189c <Shell_Loop+0x178>)
 80017be:	f004 fa62 	bl	8005c86 <HAL_UART_Transmit>
			break;
 80017c2:	e00f      	b.n	80017e4 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80017c4:	4b36      	ldr	r3, [pc, #216]	@ (80018a0 <Shell_Loop+0x17c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	4935      	ldr	r1, [pc, #212]	@ (80018a0 <Shell_Loop+0x17c>)
 80017cc:	600a      	str	r2, [r1, #0]
 80017ce:	4a31      	ldr	r2, [pc, #196]	@ (8001894 <Shell_Loop+0x170>)
 80017d0:	7811      	ldrb	r1, [r2, #0]
 80017d2:	4a34      	ldr	r2, [pc, #208]	@ (80018a4 <Shell_Loop+0x180>)
 80017d4:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017da:	2201      	movs	r2, #1
 80017dc:	492d      	ldr	r1, [pc, #180]	@ (8001894 <Shell_Loop+0x170>)
 80017de:	482f      	ldr	r0, [pc, #188]	@ (800189c <Shell_Loop+0x178>)
 80017e0:	f004 fa51 	bl	8005c86 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80017e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001890 <Shell_Loop+0x16c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 80017ea:	4b33      	ldr	r3, [pc, #204]	@ (80018b8 <Shell_Loop+0x194>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d049      	beq.n	8001886 <Shell_Loop+0x162>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 80017f2:	4b30      	ldr	r3, [pc, #192]	@ (80018b4 <Shell_Loop+0x190>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4932      	ldr	r1, [pc, #200]	@ (80018c0 <Shell_Loop+0x19c>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fd11 	bl	8000220 <strcmp>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d107      	bne.n	8001814 <Shell_Loop+0xf0>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8001804:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001808:	221a      	movs	r2, #26
 800180a:	492e      	ldr	r1, [pc, #184]	@ (80018c4 <Shell_Loop+0x1a0>)
 800180c:	4823      	ldr	r0, [pc, #140]	@ (800189c <Shell_Loop+0x178>)
 800180e:	f004 fa3a 	bl	8005c86 <HAL_UART_Transmit>
 8001812:	e02e      	b.n	8001872 <Shell_Loop+0x14e>
		}
		else if(strcmp(argv[0],"help")==0){
 8001814:	4b27      	ldr	r3, [pc, #156]	@ (80018b4 <Shell_Loop+0x190>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	492b      	ldr	r1, [pc, #172]	@ (80018c8 <Shell_Loop+0x1a4>)
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fd00 	bl	8000220 <strcmp>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10e      	bne.n	8001844 <Shell_Loop+0x120>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8001826:	4a29      	ldr	r2, [pc, #164]	@ (80018cc <Shell_Loop+0x1a8>)
 8001828:	2140      	movs	r1, #64	@ 0x40
 800182a:	4829      	ldr	r0, [pc, #164]	@ (80018d0 <Shell_Loop+0x1ac>)
 800182c:	f006 fc70 	bl	8008110 <sniprintf>
 8001830:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	b29a      	uxth	r2, r3
 8001836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800183a:	4925      	ldr	r1, [pc, #148]	@ (80018d0 <Shell_Loop+0x1ac>)
 800183c:	4817      	ldr	r0, [pc, #92]	@ (800189c <Shell_Loop+0x178>)
 800183e:	f004 fa22 	bl	8005c86 <HAL_UART_Transmit>
 8001842:	e016      	b.n	8001872 <Shell_Loop+0x14e>
		}
		else if(strcmp(argv[0],"speed")==0){
 8001844:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <Shell_Loop+0x190>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4922      	ldr	r1, [pc, #136]	@ (80018d4 <Shell_Loop+0x1b0>)
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fce8 	bl	8000220 <strcmp>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d106      	bne.n	8001864 <Shell_Loop+0x140>
			speed(argv,argc);
 8001856:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <Shell_Loop+0x184>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4619      	mov	r1, r3
 800185c:	4815      	ldr	r0, [pc, #84]	@ (80018b4 <Shell_Loop+0x190>)
 800185e:	f7ff fec1 	bl	80015e4 <speed>
 8001862:	e006      	b.n	8001872 <Shell_Loop+0x14e>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001864:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001868:	2214      	movs	r2, #20
 800186a:	491b      	ldr	r1, [pc, #108]	@ (80018d8 <Shell_Loop+0x1b4>)
 800186c:	480b      	ldr	r0, [pc, #44]	@ (800189c <Shell_Loop+0x178>)
 800186e:	f004 fa0a 	bl	8005c86 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001876:	2222      	movs	r2, #34	@ 0x22
 8001878:	4918      	ldr	r1, [pc, #96]	@ (80018dc <Shell_Loop+0x1b8>)
 800187a:	4808      	ldr	r0, [pc, #32]	@ (800189c <Shell_Loop+0x178>)
 800187c:	f004 fa03 	bl	8005c86 <HAL_UART_Transmit>
		newCmdReady = 0;
 8001880:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <Shell_Loop+0x194>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
	}
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000434 	.word	0x20000434
 8001894:	20000438 	.word	0x20000438
 8001898:	20000090 	.word	0x20000090
 800189c:	2000030c 	.word	0x2000030c
 80018a0:	200004bc 	.word	0x200004bc
 80018a4:	2000047c 	.word	0x2000047c
 80018a8:	200004e4 	.word	0x200004e4
 80018ac:	08009424 	.word	0x08009424
 80018b0:	200004e8 	.word	0x200004e8
 80018b4:	200004c0 	.word	0x200004c0
 80018b8:	200004ec 	.word	0x200004ec
 80018bc:	20000094 	.word	0x20000094
 80018c0:	08009428 	.word	0x08009428
 80018c4:	200000ac 	.word	0x200000ac
 80018c8:	08009438 	.word	0x08009438
 80018cc:	08009440 	.word	0x08009440
 80018d0:	2000043c 	.word	0x2000043c
 80018d4:	08009468 	.word	0x08009468
 80018d8:	20000098 	.word	0x20000098
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <HAL_UART_RxCpltCallback+0x20>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80018ee:	2201      	movs	r2, #1
 80018f0:	4904      	ldr	r1, [pc, #16]	@ (8001904 <HAL_UART_RxCpltCallback+0x24>)
 80018f2:	4805      	ldr	r0, [pc, #20]	@ (8001908 <HAL_UART_RxCpltCallback+0x28>)
 80018f4:	f004 fa56 	bl	8005da4 <HAL_UART_Receive_IT>
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000434 	.word	0x20000434
 8001904:	20000438 	.word	0x20000438
 8001908:	2000030c 	.word	0x2000030c

0800190c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800190c:	480d      	ldr	r0, [pc, #52]	@ (8001944 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800190e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001910:	480d      	ldr	r0, [pc, #52]	@ (8001948 <LoopForever+0x6>)
  ldr r1, =_edata
 8001912:	490e      	ldr	r1, [pc, #56]	@ (800194c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001914:	4a0e      	ldr	r2, [pc, #56]	@ (8001950 <LoopForever+0xe>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800191c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001926:	4a0b      	ldr	r2, [pc, #44]	@ (8001954 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001928:	4c0b      	ldr	r4, [pc, #44]	@ (8001958 <LoopForever+0x16>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001936:	f7ff faf5 	bl	8000f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193a:	f006 fd11 	bl	8008360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800193e:	f7ff f8b7 	bl	8000ab0 <main>

08001942 <LoopForever>:

LoopForever:
    b LoopForever
 8001942:	e7fe      	b.n	8001942 <LoopForever>
  ldr   r0, =_estack
 8001944:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800194c:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8001950:	080096a4 	.word	0x080096a4
  ldr r2, =_sbss
 8001954:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8001958:	20000640 	.word	0x20000640

0800195c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC1_2_IRQHandler>

0800195e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001968:	2003      	movs	r0, #3
 800196a:	f001 f9dc 	bl	8002d26 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800196e:	200f      	movs	r0, #15
 8001970:	f7ff f950 	bl	8000c14 <HAL_InitTick>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	71fb      	strb	r3, [r7, #7]
 800197e:	e001      	b.n	8001984 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001980:	f7ff f924 	bl	8000bcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001984:	79fb      	ldrb	r3, [r7, #7]

}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <HAL_IncTick+0x1c>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <HAL_IncTick+0x20>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4413      	add	r3, r2
 800199e:	4a03      	ldr	r2, [pc, #12]	@ (80019ac <HAL_IncTick+0x1c>)
 80019a0:	6013      	str	r3, [r2, #0]
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	200004f0 	.word	0x200004f0
 80019b0:	200000cc 	.word	0x200000cc

080019b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <HAL_GetTick+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	200004f0 	.word	0x200004f0

080019cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	609a      	str	r2, [r3, #8]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3360      	adds	r3, #96	@ 0x60
 8001a46:	461a      	mov	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <LL_ADC_SetOffset+0x44>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	4313      	orrs	r3, r2
 8001a64:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a6c:	bf00      	nop
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	03fff000 	.word	0x03fff000

08001a7c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3360      	adds	r3, #96	@ 0x60
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	3360      	adds	r3, #96	@ 0x60
 8001ab8:	461a      	mov	r2, r3
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	431a      	orrs	r2, r3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ad2:	bf00      	nop
 8001ad4:	371c      	adds	r7, #28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b087      	sub	sp, #28
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3360      	adds	r3, #96	@ 0x60
 8001aee:	461a      	mov	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	431a      	orrs	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001b08:	bf00      	nop
 8001b0a:	371c      	adds	r7, #28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3360      	adds	r3, #96	@ 0x60
 8001b24:	461a      	mov	r2, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b3e:	bf00      	nop
 8001b40:	371c      	adds	r7, #28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	615a      	str	r2, [r3, #20]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3330      	adds	r3, #48	@ 0x30
 8001b80:	461a      	mov	r2, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	4413      	add	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	211f      	movs	r1, #31
 8001b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	0e9b      	lsrs	r3, r3, #26
 8001ba8:	f003 011f 	and.w	r1, r3, #31
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f003 031f 	and.w	r3, r3, #31
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bbc:	bf00      	nop
 8001bbe:	371c      	adds	r7, #28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3314      	adds	r3, #20
 8001bd8:	461a      	mov	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	0e5b      	lsrs	r3, r3, #25
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	4413      	add	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	0d1b      	lsrs	r3, r3, #20
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	2107      	movs	r1, #7
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	0d1b      	lsrs	r3, r3, #20
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c12:	bf00      	nop
 8001c14:	371c      	adds	r7, #28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0318 	and.w	r3, r3, #24
 8001c42:	4908      	ldr	r1, [pc, #32]	@ (8001c64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c44:	40d9      	lsrs	r1, r3
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	400b      	ands	r3, r1
 8001c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	0007ffff 	.word	0x0007ffff

08001c68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6093      	str	r3, [r2, #8]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ca0:	d101      	bne.n	8001ca6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001cc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cc8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cf0:	d101      	bne.n	8001cf6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <LL_ADC_IsEnabled+0x18>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <LL_ADC_IsEnabled+0x1a>
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d101      	bne.n	8001d42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d101      	bne.n	8001d68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b089      	sub	sp, #36	@ 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1a9      	b.n	80020e6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d109      	bne.n	8001db4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7fe fcfb 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff67 	bl	8001c8c <LL_ADC_IsDeepPowerDownEnabled>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d004      	beq.n	8001dce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff4d 	bl	8001c68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff82 	bl	8001cdc <LL_ADC_IsInternalRegulatorEnabled>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d115      	bne.n	8001e0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff66 	bl	8001cb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001de8:	4b9c      	ldr	r3, [pc, #624]	@ (800205c <HAL_ADC_Init+0x2e4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	099b      	lsrs	r3, r3, #6
 8001dee:	4a9c      	ldr	r2, [pc, #624]	@ (8002060 <HAL_ADC_Init+0x2e8>)
 8001df0:	fba2 2303 	umull	r2, r3, r2, r3
 8001df4:	099b      	lsrs	r3, r3, #6
 8001df6:	3301      	adds	r3, #1
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001dfc:	e002      	b.n	8001e04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f9      	bne.n	8001dfe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff64 	bl	8001cdc <LL_ADC_IsInternalRegulatorEnabled>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10d      	bne.n	8001e36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1e:	f043 0210 	orr.w	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2a:	f043 0201 	orr.w	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ff75 	bl	8001d2a <LL_ADC_REG_IsConversionOngoing>
 8001e40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f040 8142 	bne.w	80020d4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 813e 	bne.w	80020d4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e60:	f043 0202 	orr.w	r2, r3, #2
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff49 	bl	8001d04 <LL_ADC_IsEnabled>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d141      	bne.n	8001efc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e80:	d004      	beq.n	8001e8c <HAL_ADC_Init+0x114>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a77      	ldr	r2, [pc, #476]	@ (8002064 <HAL_ADC_Init+0x2ec>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d10f      	bne.n	8001eac <HAL_ADC_Init+0x134>
 8001e8c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001e90:	f7ff ff38 	bl	8001d04 <LL_ADC_IsEnabled>
 8001e94:	4604      	mov	r4, r0
 8001e96:	4873      	ldr	r0, [pc, #460]	@ (8002064 <HAL_ADC_Init+0x2ec>)
 8001e98:	f7ff ff34 	bl	8001d04 <LL_ADC_IsEnabled>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4323      	orrs	r3, r4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	e012      	b.n	8001ed2 <HAL_ADC_Init+0x15a>
 8001eac:	486e      	ldr	r0, [pc, #440]	@ (8002068 <HAL_ADC_Init+0x2f0>)
 8001eae:	f7ff ff29 	bl	8001d04 <LL_ADC_IsEnabled>
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	486d      	ldr	r0, [pc, #436]	@ (800206c <HAL_ADC_Init+0x2f4>)
 8001eb6:	f7ff ff25 	bl	8001d04 <LL_ADC_IsEnabled>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	431c      	orrs	r4, r3
 8001ebe:	486c      	ldr	r0, [pc, #432]	@ (8002070 <HAL_ADC_Init+0x2f8>)
 8001ec0:	f7ff ff20 	bl	8001d04 <LL_ADC_IsEnabled>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4323      	orrs	r3, r4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bf0c      	ite	eq
 8001ecc:	2301      	moveq	r3, #1
 8001ece:	2300      	movne	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d012      	beq.n	8001efc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ede:	d004      	beq.n	8001eea <HAL_ADC_Init+0x172>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a5f      	ldr	r2, [pc, #380]	@ (8002064 <HAL_ADC_Init+0x2ec>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d101      	bne.n	8001eee <HAL_ADC_Init+0x176>
 8001eea:	4a62      	ldr	r2, [pc, #392]	@ (8002074 <HAL_ADC_Init+0x2fc>)
 8001eec:	e000      	b.n	8001ef0 <HAL_ADC_Init+0x178>
 8001eee:	4a62      	ldr	r2, [pc, #392]	@ (8002078 <HAL_ADC_Init+0x300>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	f7ff fd68 	bl	80019cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7f5b      	ldrb	r3, [r3, #29]
 8001f00:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f06:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f0c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f12:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f1a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d106      	bne.n	8001f38 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	045b      	lsls	r3, r3, #17
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d009      	beq.n	8001f54 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f44:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	4b48      	ldr	r3, [pc, #288]	@ (800207c <HAL_ADC_Init+0x304>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	69b9      	ldr	r1, [r7, #24]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fee4 	bl	8001d50 <LL_ADC_INJ_IsConversionOngoing>
 8001f88:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d17f      	bne.n	8002090 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d17c      	bne.n	8002090 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f9a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fa2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fb2:	f023 0302 	bic.w	r3, r3, #2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d017      	beq.n	8001ff8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001fd6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001fe0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001fe4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6911      	ldr	r1, [r2, #16]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001ff6:	e013      	b.n	8002020 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002006:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002018:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800201c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002026:	2b01      	cmp	r3, #1
 8002028:	d12a      	bne.n	8002080 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002040:	4311      	orrs	r1, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002046:	4311      	orrs	r1, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800204c:	430a      	orrs	r2, r1
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0201 	orr.w	r2, r2, #1
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	e019      	b.n	8002090 <HAL_ADC_Init+0x318>
 800205c:	20000000 	.word	0x20000000
 8002060:	053e2d63 	.word	0x053e2d63
 8002064:	50000100 	.word	0x50000100
 8002068:	50000400 	.word	0x50000400
 800206c:	50000500 	.word	0x50000500
 8002070:	50000600 	.word	0x50000600
 8002074:	50000300 	.word	0x50000300
 8002078:	50000700 	.word	0x50000700
 800207c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d10c      	bne.n	80020b2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	f023 010f 	bic.w	r1, r3, #15
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	1e5a      	subs	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80020b0:	e007      	b.n	80020c2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 020f 	bic.w	r2, r2, #15
 80020c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c6:	f023 0303 	bic.w	r3, r3, #3
 80020ca:	f043 0201 	orr.w	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020d2:	e007      	b.n	80020e4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d8:	f043 0210 	orr.w	r2, r3, #16
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	@ 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd90      	pop	{r4, r7, pc}
 80020ee:	bf00      	nop

080020f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b0b6      	sub	sp, #216	@ 0xd8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800210a:	2b01      	cmp	r3, #1
 800210c:	d102      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x24>
 800210e:	2302      	movs	r3, #2
 8002110:	f000 bc13 	b.w	800293a <HAL_ADC_ConfigChannel+0x84a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fe02 	bl	8001d2a <LL_ADC_REG_IsConversionOngoing>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	f040 83f3 	bne.w	8002914 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	f7ff fd18 	bl	8001b70 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fdf0 	bl	8001d2a <LL_ADC_REG_IsConversionOngoing>
 800214a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fdfc 	bl	8001d50 <LL_ADC_INJ_IsConversionOngoing>
 8002158:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800215c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 81d9 	bne.w	8002518 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002166:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800216a:	2b00      	cmp	r3, #0
 800216c:	f040 81d4 	bne.w	8002518 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002178:	d10f      	bne.n	800219a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2200      	movs	r2, #0
 8002184:	4619      	mov	r1, r3
 8002186:	f7ff fd1f 	bl	8001bc8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fcd9 	bl	8001b4a <LL_ADC_SetSamplingTimeCommonConfig>
 8002198:	e00e      	b.n	80021b8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	6819      	ldr	r1, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	461a      	mov	r2, r3
 80021a8:	f7ff fd0e 	bl	8001bc8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fcc9 	bl	8001b4a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	08db      	lsrs	r3, r3, #3
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d022      	beq.n	8002220 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6919      	ldr	r1, [r3, #16]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80021ea:	f7ff fc23 	bl	8001a34 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	6919      	ldr	r1, [r3, #16]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	461a      	mov	r2, r3
 80021fc:	f7ff fc6f 	bl	8001ade <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800220c:	2b01      	cmp	r3, #1
 800220e:	d102      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x126>
 8002210:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002214:	e000      	b.n	8002218 <HAL_ADC_ConfigChannel+0x128>
 8002216:	2300      	movs	r3, #0
 8002218:	461a      	mov	r2, r3
 800221a:	f7ff fc7b 	bl	8001b14 <LL_ADC_SetOffsetSaturation>
 800221e:	e17b      	b.n	8002518 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fc28 	bl	8001a7c <LL_ADC_GetOffsetChannel>
 800222c:	4603      	mov	r3, r0
 800222e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10a      	bne.n	800224c <HAL_ADC_ConfigChannel+0x15c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fc1d 	bl	8001a7c <LL_ADC_GetOffsetChannel>
 8002242:	4603      	mov	r3, r0
 8002244:	0e9b      	lsrs	r3, r3, #26
 8002246:	f003 021f 	and.w	r2, r3, #31
 800224a:	e01e      	b.n	800228a <HAL_ADC_ConfigChannel+0x19a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fc12 	bl	8001a7c <LL_ADC_GetOffsetChannel>
 8002258:	4603      	mov	r3, r0
 800225a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800226a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800226e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002272:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800227a:	2320      	movs	r3, #32
 800227c:	e004      	b.n	8002288 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800227e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002292:	2b00      	cmp	r3, #0
 8002294:	d105      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x1b2>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	0e9b      	lsrs	r3, r3, #26
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	e018      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x1e4>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80022b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80022be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80022c6:	2320      	movs	r3, #32
 80022c8:	e004      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80022ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d106      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2200      	movs	r2, #0
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fbe1 	bl	8001aa8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2101      	movs	r1, #1
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fbc5 	bl	8001a7c <LL_ADC_GetOffsetChannel>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10a      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x222>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2101      	movs	r1, #1
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fbba 	bl	8001a7c <LL_ADC_GetOffsetChannel>
 8002308:	4603      	mov	r3, r0
 800230a:	0e9b      	lsrs	r3, r3, #26
 800230c:	f003 021f 	and.w	r2, r3, #31
 8002310:	e01e      	b.n	8002350 <HAL_ADC_ConfigChannel+0x260>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2101      	movs	r1, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fbaf 	bl	8001a7c <LL_ADC_GetOffsetChannel>
 800231e:	4603      	mov	r3, r0
 8002320:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002330:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002334:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002338:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002340:	2320      	movs	r3, #32
 8002342:	e004      	b.n	800234e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002344:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002348:	fab3 f383 	clz	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002358:	2b00      	cmp	r3, #0
 800235a:	d105      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x278>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0e9b      	lsrs	r3, r3, #26
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	e018      	b.n	800239a <HAL_ADC_ConfigChannel+0x2aa>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800237c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002384:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800238c:	2320      	movs	r3, #32
 800238e:	e004      	b.n	800239a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002390:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800239a:	429a      	cmp	r2, r3
 800239c:	d106      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2200      	movs	r2, #0
 80023a4:	2101      	movs	r1, #1
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fb7e 	bl	8001aa8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2102      	movs	r1, #2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fb62 	bl	8001a7c <LL_ADC_GetOffsetChannel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10a      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x2e8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2102      	movs	r1, #2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fb57 	bl	8001a7c <LL_ADC_GetOffsetChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	0e9b      	lsrs	r3, r3, #26
 80023d2:	f003 021f 	and.w	r2, r3, #31
 80023d6:	e01e      	b.n	8002416 <HAL_ADC_ConfigChannel+0x326>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2102      	movs	r1, #2
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fb4c 	bl	8001a7c <LL_ADC_GetOffsetChannel>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80023f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80023fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002406:	2320      	movs	r3, #32
 8002408:	e004      	b.n	8002414 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800240a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241e:	2b00      	cmp	r3, #0
 8002420:	d105      	bne.n	800242e <HAL_ADC_ConfigChannel+0x33e>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	0e9b      	lsrs	r3, r3, #26
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	e016      	b.n	800245c <HAL_ADC_ConfigChannel+0x36c>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002440:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002442:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002446:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800244e:	2320      	movs	r3, #32
 8002450:	e004      	b.n	800245c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002452:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800245c:	429a      	cmp	r2, r3
 800245e:	d106      	bne.n	800246e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2200      	movs	r2, #0
 8002466:	2102      	movs	r1, #2
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fb1d 	bl	8001aa8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2103      	movs	r1, #3
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fb01 	bl	8001a7c <LL_ADC_GetOffsetChannel>
 800247a:	4603      	mov	r3, r0
 800247c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10a      	bne.n	800249a <HAL_ADC_ConfigChannel+0x3aa>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2103      	movs	r1, #3
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff faf6 	bl	8001a7c <LL_ADC_GetOffsetChannel>
 8002490:	4603      	mov	r3, r0
 8002492:	0e9b      	lsrs	r3, r3, #26
 8002494:	f003 021f 	and.w	r2, r3, #31
 8002498:	e017      	b.n	80024ca <HAL_ADC_ConfigChannel+0x3da>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2103      	movs	r1, #3
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff faeb 	bl	8001a7c <LL_ADC_GetOffsetChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80024b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024b4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80024b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80024bc:	2320      	movs	r3, #32
 80024be:	e003      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80024c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d105      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x3f2>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	0e9b      	lsrs	r3, r3, #26
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	e011      	b.n	8002506 <HAL_ADC_ConfigChannel+0x416>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80024f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80024f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80024fa:	2320      	movs	r3, #32
 80024fc:	e003      	b.n	8002506 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80024fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002506:	429a      	cmp	r2, r3
 8002508:	d106      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2200      	movs	r2, #0
 8002510:	2103      	movs	r1, #3
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fac8 	bl	8001aa8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fbf1 	bl	8001d04 <LL_ADC_IsEnabled>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	f040 813d 	bne.w	80027a4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6819      	ldr	r1, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	461a      	mov	r2, r3
 8002538:	f7ff fb72 	bl	8001c20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4aa2      	ldr	r2, [pc, #648]	@ (80027cc <HAL_ADC_ConfigChannel+0x6dc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	f040 812e 	bne.w	80027a4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10b      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x480>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0e9b      	lsrs	r3, r3, #26
 800255e:	3301      	adds	r3, #1
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	2b09      	cmp	r3, #9
 8002566:	bf94      	ite	ls
 8002568:	2301      	movls	r3, #1
 800256a:	2300      	movhi	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	e019      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x4b4>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800257e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002580:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002582:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002588:	2320      	movs	r3, #32
 800258a:	e003      	b.n	8002594 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800258c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	3301      	adds	r3, #1
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2b09      	cmp	r3, #9
 800259c:	bf94      	ite	ls
 800259e:	2301      	movls	r3, #1
 80025a0:	2300      	movhi	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d079      	beq.n	800269c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d107      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x4d4>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0e9b      	lsrs	r3, r3, #26
 80025ba:	3301      	adds	r3, #1
 80025bc:	069b      	lsls	r3, r3, #26
 80025be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025c2:	e015      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x500>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80025d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80025d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80025dc:	2320      	movs	r3, #32
 80025de:	e003      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80025e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	3301      	adds	r3, #1
 80025ea:	069b      	lsls	r3, r3, #26
 80025ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d109      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x520>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	3301      	adds	r3, #1
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	2101      	movs	r1, #1
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	e017      	b.n	8002640 <HAL_ADC_ConfigChannel+0x550>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800261e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002620:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002628:	2320      	movs	r3, #32
 800262a:	e003      	b.n	8002634 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800262c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	3301      	adds	r3, #1
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	2101      	movs	r1, #1
 800263c:	fa01 f303 	lsl.w	r3, r1, r3
 8002640:	ea42 0103 	orr.w	r1, r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10a      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x576>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	3301      	adds	r3, #1
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	051b      	lsls	r3, r3, #20
 8002664:	e018      	b.n	8002698 <HAL_ADC_ConfigChannel+0x5a8>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800267e:	2320      	movs	r3, #32
 8002680:	e003      	b.n	800268a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	3301      	adds	r3, #1
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002698:	430b      	orrs	r3, r1
 800269a:	e07e      	b.n	800279a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d107      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x5c8>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0e9b      	lsrs	r3, r3, #26
 80026ae:	3301      	adds	r3, #1
 80026b0:	069b      	lsls	r3, r3, #26
 80026b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026b6:	e015      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x5f4>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80026c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80026ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80026d0:	2320      	movs	r3, #32
 80026d2:	e003      	b.n	80026dc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80026d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	3301      	adds	r3, #1
 80026de:	069b      	lsls	r3, r3, #26
 80026e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d109      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x614>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	0e9b      	lsrs	r3, r3, #26
 80026f6:	3301      	adds	r3, #1
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	2101      	movs	r1, #1
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	e017      	b.n	8002734 <HAL_ADC_ConfigChannel+0x644>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	61fb      	str	r3, [r7, #28]
  return result;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800271c:	2320      	movs	r3, #32
 800271e:	e003      	b.n	8002728 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	3301      	adds	r3, #1
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	2101      	movs	r1, #1
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	ea42 0103 	orr.w	r1, r2, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10d      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x670>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	0e9b      	lsrs	r3, r3, #26
 800274a:	3301      	adds	r3, #1
 800274c:	f003 021f 	and.w	r2, r3, #31
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	3b1e      	subs	r3, #30
 8002758:	051b      	lsls	r3, r3, #20
 800275a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800275e:	e01b      	b.n	8002798 <HAL_ADC_ConfigChannel+0x6a8>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	613b      	str	r3, [r7, #16]
  return result;
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002778:	2320      	movs	r3, #32
 800277a:	e003      	b.n	8002784 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3301      	adds	r3, #1
 8002786:	f003 021f 	and.w	r2, r3, #31
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	3b1e      	subs	r3, #30
 8002792:	051b      	lsls	r3, r3, #20
 8002794:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002798:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800279e:	4619      	mov	r1, r3
 80027a0:	f7ff fa12 	bl	8001bc8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <HAL_ADC_ConfigChannel+0x6e0>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80be 	beq.w	800292e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027ba:	d004      	beq.n	80027c6 <HAL_ADC_ConfigChannel+0x6d6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a04      	ldr	r2, [pc, #16]	@ (80027d4 <HAL_ADC_ConfigChannel+0x6e4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d10a      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x6ec>
 80027c6:	4b04      	ldr	r3, [pc, #16]	@ (80027d8 <HAL_ADC_ConfigChannel+0x6e8>)
 80027c8:	e009      	b.n	80027de <HAL_ADC_ConfigChannel+0x6ee>
 80027ca:	bf00      	nop
 80027cc:	407f0000 	.word	0x407f0000
 80027d0:	80080000 	.word	0x80080000
 80027d4:	50000100 	.word	0x50000100
 80027d8:	50000300 	.word	0x50000300
 80027dc:	4b59      	ldr	r3, [pc, #356]	@ (8002944 <HAL_ADC_ConfigChannel+0x854>)
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff f91a 	bl	8001a18 <LL_ADC_GetCommonPathInternalCh>
 80027e4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a56      	ldr	r2, [pc, #344]	@ (8002948 <HAL_ADC_ConfigChannel+0x858>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d004      	beq.n	80027fc <HAL_ADC_ConfigChannel+0x70c>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a55      	ldr	r2, [pc, #340]	@ (800294c <HAL_ADC_ConfigChannel+0x85c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d13a      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002800:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d134      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002810:	d005      	beq.n	800281e <HAL_ADC_ConfigChannel+0x72e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a4e      	ldr	r2, [pc, #312]	@ (8002950 <HAL_ADC_ConfigChannel+0x860>)
 8002818:	4293      	cmp	r3, r2
 800281a:	f040 8085 	bne.w	8002928 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002826:	d004      	beq.n	8002832 <HAL_ADC_ConfigChannel+0x742>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a49      	ldr	r2, [pc, #292]	@ (8002954 <HAL_ADC_ConfigChannel+0x864>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x746>
 8002832:	4a49      	ldr	r2, [pc, #292]	@ (8002958 <HAL_ADC_ConfigChannel+0x868>)
 8002834:	e000      	b.n	8002838 <HAL_ADC_ConfigChannel+0x748>
 8002836:	4a43      	ldr	r2, [pc, #268]	@ (8002944 <HAL_ADC_ConfigChannel+0x854>)
 8002838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800283c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002840:	4619      	mov	r1, r3
 8002842:	4610      	mov	r0, r2
 8002844:	f7ff f8d5 	bl	80019f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002848:	4b44      	ldr	r3, [pc, #272]	@ (800295c <HAL_ADC_ConfigChannel+0x86c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	099b      	lsrs	r3, r3, #6
 800284e:	4a44      	ldr	r2, [pc, #272]	@ (8002960 <HAL_ADC_ConfigChannel+0x870>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	099b      	lsrs	r3, r3, #6
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002862:	e002      	b.n	800286a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3b01      	subs	r3, #1
 8002868:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f9      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002870:	e05a      	b.n	8002928 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a3b      	ldr	r2, [pc, #236]	@ (8002964 <HAL_ADC_ConfigChannel+0x874>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d125      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800287c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002880:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d11f      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a31      	ldr	r2, [pc, #196]	@ (8002954 <HAL_ADC_ConfigChannel+0x864>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d104      	bne.n	800289c <HAL_ADC_ConfigChannel+0x7ac>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a34      	ldr	r2, [pc, #208]	@ (8002968 <HAL_ADC_ConfigChannel+0x878>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d047      	beq.n	800292c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028a4:	d004      	beq.n	80028b0 <HAL_ADC_ConfigChannel+0x7c0>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002954 <HAL_ADC_ConfigChannel+0x864>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x7c4>
 80028b0:	4a29      	ldr	r2, [pc, #164]	@ (8002958 <HAL_ADC_ConfigChannel+0x868>)
 80028b2:	e000      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x7c6>
 80028b4:	4a23      	ldr	r2, [pc, #140]	@ (8002944 <HAL_ADC_ConfigChannel+0x854>)
 80028b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028be:	4619      	mov	r1, r3
 80028c0:	4610      	mov	r0, r2
 80028c2:	f7ff f896 	bl	80019f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028c6:	e031      	b.n	800292c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a27      	ldr	r2, [pc, #156]	@ (800296c <HAL_ADC_ConfigChannel+0x87c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d12d      	bne.n	800292e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d127      	bne.n	800292e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002954 <HAL_ADC_ConfigChannel+0x864>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d022      	beq.n	800292e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028f0:	d004      	beq.n	80028fc <HAL_ADC_ConfigChannel+0x80c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a17      	ldr	r2, [pc, #92]	@ (8002954 <HAL_ADC_ConfigChannel+0x864>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d101      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x810>
 80028fc:	4a16      	ldr	r2, [pc, #88]	@ (8002958 <HAL_ADC_ConfigChannel+0x868>)
 80028fe:	e000      	b.n	8002902 <HAL_ADC_ConfigChannel+0x812>
 8002900:	4a10      	ldr	r2, [pc, #64]	@ (8002944 <HAL_ADC_ConfigChannel+0x854>)
 8002902:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002906:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f7ff f870 	bl	80019f2 <LL_ADC_SetCommonPathInternalCh>
 8002912:	e00c      	b.n	800292e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002918:	f043 0220 	orr.w	r2, r3, #32
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002926:	e002      	b.n	800292e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002928:	bf00      	nop
 800292a:	e000      	b.n	800292e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800292c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002936:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800293a:	4618      	mov	r0, r3
 800293c:	37d8      	adds	r7, #216	@ 0xd8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	50000700 	.word	0x50000700
 8002948:	c3210000 	.word	0xc3210000
 800294c:	90c00010 	.word	0x90c00010
 8002950:	50000600 	.word	0x50000600
 8002954:	50000100 	.word	0x50000100
 8002958:	50000300 	.word	0x50000300
 800295c:	20000000 	.word	0x20000000
 8002960:	053e2d63 	.word	0x053e2d63
 8002964:	c7520000 	.word	0xc7520000
 8002968:	50000500 	.word	0x50000500
 800296c:	cb840000 	.word	0xcb840000

08002970 <LL_ADC_IsEnabled>:
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <LL_ADC_IsEnabled+0x18>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <LL_ADC_IsEnabled+0x1a>
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_ADC_REG_IsConversionOngoing>:
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d101      	bne.n	80029ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b0a1      	sub	sp, #132	@ 0x84
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e0e7      	b.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80029e2:	2300      	movs	r3, #0
 80029e4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80029e6:	2300      	movs	r3, #0
 80029e8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029f2:	d102      	bne.n	80029fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029f4:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	e009      	b.n	8002a0e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a6e      	ldr	r2, [pc, #440]	@ (8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d102      	bne.n	8002a0a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002a04:	4b6d      	ldr	r3, [pc, #436]	@ (8002bbc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	e001      	b.n	8002a0e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a18:	f043 0220 	orr.w	r2, r3, #32
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0be      	b.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ffb1 	bl	8002996 <LL_ADC_REG_IsConversionOngoing>
 8002a34:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ffab 	bl	8002996 <LL_ADC_REG_IsConversionOngoing>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f040 80a0 	bne.w	8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002a48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 809c 	bne.w	8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a58:	d004      	beq.n	8002a64 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a55      	ldr	r2, [pc, #340]	@ (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d101      	bne.n	8002a68 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002a64:	4b56      	ldr	r3, [pc, #344]	@ (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002a66:	e000      	b.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002a68:	4b56      	ldr	r3, [pc, #344]	@ (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002a6a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d04b      	beq.n	8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a86:	035b      	lsls	r3, r3, #13
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a98:	d004      	beq.n	8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a45      	ldr	r2, [pc, #276]	@ (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10f      	bne.n	8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002aa4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002aa8:	f7ff ff62 	bl	8002970 <LL_ADC_IsEnabled>
 8002aac:	4604      	mov	r4, r0
 8002aae:	4841      	ldr	r0, [pc, #260]	@ (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ab0:	f7ff ff5e 	bl	8002970 <LL_ADC_IsEnabled>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4323      	orrs	r3, r4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e012      	b.n	8002aea <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002ac4:	483c      	ldr	r0, [pc, #240]	@ (8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ac6:	f7ff ff53 	bl	8002970 <LL_ADC_IsEnabled>
 8002aca:	4604      	mov	r4, r0
 8002acc:	483b      	ldr	r0, [pc, #236]	@ (8002bbc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ace:	f7ff ff4f 	bl	8002970 <LL_ADC_IsEnabled>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	431c      	orrs	r4, r3
 8002ad6:	483c      	ldr	r0, [pc, #240]	@ (8002bc8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002ad8:	f7ff ff4a 	bl	8002970 <LL_ADC_IsEnabled>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4323      	orrs	r3, r4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d056      	beq.n	8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002aee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002af6:	f023 030f 	bic.w	r3, r3, #15
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	6811      	ldr	r1, [r2, #0]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	6892      	ldr	r2, [r2, #8]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	431a      	orrs	r2, r3
 8002b06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b08:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b0a:	e047      	b.n	8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b16:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b20:	d004      	beq.n	8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a23      	ldr	r2, [pc, #140]	@ (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d10f      	bne.n	8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002b2c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b30:	f7ff ff1e 	bl	8002970 <LL_ADC_IsEnabled>
 8002b34:	4604      	mov	r4, r0
 8002b36:	481f      	ldr	r0, [pc, #124]	@ (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b38:	f7ff ff1a 	bl	8002970 <LL_ADC_IsEnabled>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4323      	orrs	r3, r4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf0c      	ite	eq
 8002b44:	2301      	moveq	r3, #1
 8002b46:	2300      	movne	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	e012      	b.n	8002b72 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002b4c:	481a      	ldr	r0, [pc, #104]	@ (8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b4e:	f7ff ff0f 	bl	8002970 <LL_ADC_IsEnabled>
 8002b52:	4604      	mov	r4, r0
 8002b54:	4819      	ldr	r0, [pc, #100]	@ (8002bbc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b56:	f7ff ff0b 	bl	8002970 <LL_ADC_IsEnabled>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	431c      	orrs	r4, r3
 8002b5e:	481a      	ldr	r0, [pc, #104]	@ (8002bc8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002b60:	f7ff ff06 	bl	8002970 <LL_ADC_IsEnabled>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4323      	orrs	r3, r4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf0c      	ite	eq
 8002b6c:	2301      	moveq	r3, #1
 8002b6e:	2300      	movne	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d012      	beq.n	8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b7e:	f023 030f 	bic.w	r3, r3, #15
 8002b82:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002b84:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b86:	e009      	b.n	8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002b9a:	e000      	b.n	8002b9e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ba6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3784      	adds	r7, #132	@ 0x84
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd90      	pop	{r4, r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	50000100 	.word	0x50000100
 8002bb8:	50000400 	.word	0x50000400
 8002bbc:	50000500 	.word	0x50000500
 8002bc0:	50000300 	.word	0x50000300
 8002bc4:	50000700 	.word	0x50000700
 8002bc8:	50000600 	.word	0x50000600

08002bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c10 <__NVIC_SetPriorityGrouping+0x44>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002be8:	4013      	ands	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bfe:	4a04      	ldr	r2, [pc, #16]	@ (8002c10 <__NVIC_SetPriorityGrouping+0x44>)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	60d3      	str	r3, [r2, #12]
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c18:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <__NVIC_GetPriorityGrouping+0x18>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	f003 0307 	and.w	r3, r3, #7
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	db0b      	blt.n	8002c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	f003 021f 	and.w	r2, r3, #31
 8002c48:	4907      	ldr	r1, [pc, #28]	@ (8002c68 <__NVIC_EnableIRQ+0x38>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2001      	movs	r0, #1
 8002c52:	fa00 f202 	lsl.w	r2, r0, r2
 8002c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000e100 	.word	0xe000e100

08002c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	6039      	str	r1, [r7, #0]
 8002c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	db0a      	blt.n	8002c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	490c      	ldr	r1, [pc, #48]	@ (8002cb8 <__NVIC_SetPriority+0x4c>)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	0112      	lsls	r2, r2, #4
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c94:	e00a      	b.n	8002cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	4908      	ldr	r1, [pc, #32]	@ (8002cbc <__NVIC_SetPriority+0x50>)
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	3b04      	subs	r3, #4
 8002ca4:	0112      	lsls	r2, r2, #4
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	440b      	add	r3, r1
 8002caa:	761a      	strb	r2, [r3, #24]
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000e100 	.word	0xe000e100
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	@ 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f1c3 0307 	rsb	r3, r3, #7
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	bf28      	it	cs
 8002cde:	2304      	movcs	r3, #4
 8002ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d902      	bls.n	8002cf0 <NVIC_EncodePriority+0x30>
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3b03      	subs	r3, #3
 8002cee:	e000      	b.n	8002cf2 <NVIC_EncodePriority+0x32>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	401a      	ands	r2, r3
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	43d9      	mvns	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	4313      	orrs	r3, r2
         );
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3724      	adds	r7, #36	@ 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff ff4c 	bl	8002bcc <__NVIC_SetPriorityGrouping>
}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d4a:	f7ff ff63 	bl	8002c14 <__NVIC_GetPriorityGrouping>
 8002d4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	6978      	ldr	r0, [r7, #20]
 8002d56:	f7ff ffb3 	bl	8002cc0 <NVIC_EncodePriority>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ff82 	bl	8002c6c <__NVIC_SetPriority>
}
 8002d68:	bf00      	nop
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ff56 	bl	8002c30 <__NVIC_EnableIRQ>
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d005      	beq.n	8002db0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2204      	movs	r2, #4
 8002da8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	e037      	b.n	8002e20 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 020e 	bic.w	r2, r2, #14
 8002dbe:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dce:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de4:	f003 021f 	and.w	r2, r3, #31
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	2101      	movs	r1, #1
 8002dee:	fa01 f202 	lsl.w	r2, r1, r2
 8002df2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002dfc:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e14:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e1e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d00d      	beq.n	8002e72 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2204      	movs	r2, #4
 8002e5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
 8002e70:	e047      	b.n	8002f02 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 020e 	bic.w	r2, r2, #14
 8002e80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ea0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	f003 021f 	and.w	r2, r3, #31
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	2101      	movs	r1, #1
 8002eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ebe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00c      	beq.n	8002ee2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ee0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
    }
  }
  return status;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f1a:	e15a      	b.n	80031d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	2101      	movs	r1, #1
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	fa01 f303 	lsl.w	r3, r1, r3
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 814c 	beq.w	80031cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d005      	beq.n	8002f4c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d130      	bne.n	8002fae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	2203      	movs	r2, #3
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4013      	ands	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f82:	2201      	movs	r2, #1
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	f003 0201 	and.w	r2, r3, #1
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d017      	beq.n	8002fea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d123      	bne.n	800303e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	08da      	lsrs	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3208      	adds	r2, #8
 8002ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003002:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	220f      	movs	r2, #15
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4013      	ands	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	08da      	lsrs	r2, r3, #3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3208      	adds	r2, #8
 8003038:	6939      	ldr	r1, [r7, #16]
 800303a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	2203      	movs	r2, #3
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 0203 	and.w	r2, r3, #3
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80a6 	beq.w	80031cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003080:	4b5b      	ldr	r3, [pc, #364]	@ (80031f0 <HAL_GPIO_Init+0x2e4>)
 8003082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003084:	4a5a      	ldr	r2, [pc, #360]	@ (80031f0 <HAL_GPIO_Init+0x2e4>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6613      	str	r3, [r2, #96]	@ 0x60
 800308c:	4b58      	ldr	r3, [pc, #352]	@ (80031f0 <HAL_GPIO_Init+0x2e4>)
 800308e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003098:	4a56      	ldr	r2, [pc, #344]	@ (80031f4 <HAL_GPIO_Init+0x2e8>)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	089b      	lsrs	r3, r3, #2
 800309e:	3302      	adds	r3, #2
 80030a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	220f      	movs	r2, #15
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4013      	ands	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030c2:	d01f      	beq.n	8003104 <HAL_GPIO_Init+0x1f8>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a4c      	ldr	r2, [pc, #304]	@ (80031f8 <HAL_GPIO_Init+0x2ec>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d019      	beq.n	8003100 <HAL_GPIO_Init+0x1f4>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a4b      	ldr	r2, [pc, #300]	@ (80031fc <HAL_GPIO_Init+0x2f0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d013      	beq.n	80030fc <HAL_GPIO_Init+0x1f0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003200 <HAL_GPIO_Init+0x2f4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00d      	beq.n	80030f8 <HAL_GPIO_Init+0x1ec>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a49      	ldr	r2, [pc, #292]	@ (8003204 <HAL_GPIO_Init+0x2f8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d007      	beq.n	80030f4 <HAL_GPIO_Init+0x1e8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a48      	ldr	r2, [pc, #288]	@ (8003208 <HAL_GPIO_Init+0x2fc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d101      	bne.n	80030f0 <HAL_GPIO_Init+0x1e4>
 80030ec:	2305      	movs	r3, #5
 80030ee:	e00a      	b.n	8003106 <HAL_GPIO_Init+0x1fa>
 80030f0:	2306      	movs	r3, #6
 80030f2:	e008      	b.n	8003106 <HAL_GPIO_Init+0x1fa>
 80030f4:	2304      	movs	r3, #4
 80030f6:	e006      	b.n	8003106 <HAL_GPIO_Init+0x1fa>
 80030f8:	2303      	movs	r3, #3
 80030fa:	e004      	b.n	8003106 <HAL_GPIO_Init+0x1fa>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e002      	b.n	8003106 <HAL_GPIO_Init+0x1fa>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_GPIO_Init+0x1fa>
 8003104:	2300      	movs	r3, #0
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	f002 0203 	and.w	r2, r2, #3
 800310c:	0092      	lsls	r2, r2, #2
 800310e:	4093      	lsls	r3, r2
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003116:	4937      	ldr	r1, [pc, #220]	@ (80031f4 <HAL_GPIO_Init+0x2e8>)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	3302      	adds	r3, #2
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003124:	4b39      	ldr	r3, [pc, #228]	@ (800320c <HAL_GPIO_Init+0x300>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	43db      	mvns	r3, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003148:	4a30      	ldr	r2, [pc, #192]	@ (800320c <HAL_GPIO_Init+0x300>)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800314e:	4b2f      	ldr	r3, [pc, #188]	@ (800320c <HAL_GPIO_Init+0x300>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	43db      	mvns	r3, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003172:	4a26      	ldr	r2, [pc, #152]	@ (800320c <HAL_GPIO_Init+0x300>)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003178:	4b24      	ldr	r3, [pc, #144]	@ (800320c <HAL_GPIO_Init+0x300>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	43db      	mvns	r3, r3
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800319c:	4a1b      	ldr	r2, [pc, #108]	@ (800320c <HAL_GPIO_Init+0x300>)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031a2:	4b1a      	ldr	r3, [pc, #104]	@ (800320c <HAL_GPIO_Init+0x300>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4013      	ands	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031c6:	4a11      	ldr	r2, [pc, #68]	@ (800320c <HAL_GPIO_Init+0x300>)
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	3301      	adds	r3, #1
 80031d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f47f ae9d 	bne.w	8002f1c <HAL_GPIO_Init+0x10>
  }
}
 80031e2:	bf00      	nop
 80031e4:	bf00      	nop
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40010000 	.word	0x40010000
 80031f8:	48000400 	.word	0x48000400
 80031fc:	48000800 	.word	0x48000800
 8003200:	48000c00 	.word	0x48000c00
 8003204:	48001000 	.word	0x48001000
 8003208:	48001400 	.word	0x48001400
 800320c:	40010400 	.word	0x40010400

08003210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	807b      	strh	r3, [r7, #2]
 800321c:	4613      	mov	r3, r2
 800321e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003220:	787b      	ldrb	r3, [r7, #1]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800322c:	e002      	b.n	8003234 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800324a:	4b08      	ldr	r3, [pc, #32]	@ (800326c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	4013      	ands	r3, r2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d006      	beq.n	8003264 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003256:	4a05      	ldr	r2, [pc, #20]	@ (800326c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	4618      	mov	r0, r3
 8003260:	f000 f806 	bl	8003270 <HAL_GPIO_EXTI_Callback>
  }
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40010400 	.word	0x40010400

08003270 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d141      	bne.n	800331a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003296:	4b4b      	ldr	r3, [pc, #300]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800329e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a2:	d131      	bne.n	8003308 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032a4:	4b47      	ldr	r3, [pc, #284]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032aa:	4a46      	ldr	r2, [pc, #280]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032b4:	4b43      	ldr	r3, [pc, #268]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032bc:	4a41      	ldr	r2, [pc, #260]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032c4:	4b40      	ldr	r3, [pc, #256]	@ (80033c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2232      	movs	r2, #50	@ 0x32
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	4a3f      	ldr	r2, [pc, #252]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032d0:	fba2 2303 	umull	r2, r3, r2, r3
 80032d4:	0c9b      	lsrs	r3, r3, #18
 80032d6:	3301      	adds	r3, #1
 80032d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032da:	e002      	b.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	3b01      	subs	r3, #1
 80032e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032e2:	4b38      	ldr	r3, [pc, #224]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ee:	d102      	bne.n	80032f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f2      	bne.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032f6:	4b33      	ldr	r3, [pc, #204]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003302:	d158      	bne.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e057      	b.n	80033b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003308:	4b2e      	ldr	r3, [pc, #184]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800330e:	4a2d      	ldr	r2, [pc, #180]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003314:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003318:	e04d      	b.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003320:	d141      	bne.n	80033a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003322:	4b28      	ldr	r3, [pc, #160]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800332a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800332e:	d131      	bne.n	8003394 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003330:	4b24      	ldr	r3, [pc, #144]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003336:	4a23      	ldr	r2, [pc, #140]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800333c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003340:	4b20      	ldr	r3, [pc, #128]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003348:	4a1e      	ldr	r2, [pc, #120]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800334e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003350:	4b1d      	ldr	r3, [pc, #116]	@ (80033c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2232      	movs	r2, #50	@ 0x32
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	4a1c      	ldr	r2, [pc, #112]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	0c9b      	lsrs	r3, r3, #18
 8003362:	3301      	adds	r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003366:	e002      	b.n	800336e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3b01      	subs	r3, #1
 800336c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800336e:	4b15      	ldr	r3, [pc, #84]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800337a:	d102      	bne.n	8003382 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f2      	bne.n	8003368 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003382:	4b10      	ldr	r3, [pc, #64]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800338a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800338e:	d112      	bne.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e011      	b.n	80033b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003394:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800339a:	4a0a      	ldr	r2, [pc, #40]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033a4:	e007      	b.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033a6:	4b07      	ldr	r3, [pc, #28]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033ae:	4a05      	ldr	r2, [pc, #20]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	40007000 	.word	0x40007000
 80033c8:	20000000 	.word	0x20000000
 80033cc:	431bde83 	.word	0x431bde83

080033d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80033d4:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4a04      	ldr	r2, [pc, #16]	@ (80033ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033de:	6093      	str	r3, [r2, #8]
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40007000 	.word	0x40007000

080033f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e2fe      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d075      	beq.n	80034fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800340e:	4b97      	ldr	r3, [pc, #604]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003418:	4b94      	ldr	r3, [pc, #592]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	2b0c      	cmp	r3, #12
 8003426:	d102      	bne.n	800342e <HAL_RCC_OscConfig+0x3e>
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2b03      	cmp	r3, #3
 800342c:	d002      	beq.n	8003434 <HAL_RCC_OscConfig+0x44>
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2b08      	cmp	r3, #8
 8003432:	d10b      	bne.n	800344c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003434:	4b8d      	ldr	r3, [pc, #564]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d05b      	beq.n	80034f8 <HAL_RCC_OscConfig+0x108>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d157      	bne.n	80034f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e2d9      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003454:	d106      	bne.n	8003464 <HAL_RCC_OscConfig+0x74>
 8003456:	4b85      	ldr	r3, [pc, #532]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a84      	ldr	r2, [pc, #528]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 800345c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e01d      	b.n	80034a0 <HAL_RCC_OscConfig+0xb0>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800346c:	d10c      	bne.n	8003488 <HAL_RCC_OscConfig+0x98>
 800346e:	4b7f      	ldr	r3, [pc, #508]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a7e      	ldr	r2, [pc, #504]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 8003474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	4b7c      	ldr	r3, [pc, #496]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a7b      	ldr	r2, [pc, #492]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	e00b      	b.n	80034a0 <HAL_RCC_OscConfig+0xb0>
 8003488:	4b78      	ldr	r3, [pc, #480]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a77      	ldr	r2, [pc, #476]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 800348e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b75      	ldr	r3, [pc, #468]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a74      	ldr	r2, [pc, #464]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 800349a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800349e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d013      	beq.n	80034d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fe fa84 	bl	80019b4 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b0:	f7fe fa80 	bl	80019b4 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b64      	cmp	r3, #100	@ 0x64
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e29e      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034c2:	4b6a      	ldr	r3, [pc, #424]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0xc0>
 80034ce:	e014      	b.n	80034fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe fa70 	bl	80019b4 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d8:	f7fe fa6c 	bl	80019b4 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b64      	cmp	r3, #100	@ 0x64
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e28a      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ea:	4b60      	ldr	r3, [pc, #384]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0xe8>
 80034f6:	e000      	b.n	80034fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d075      	beq.n	80035f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003506:	4b59      	ldr	r3, [pc, #356]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003510:	4b56      	ldr	r3, [pc, #344]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d102      	bne.n	8003526 <HAL_RCC_OscConfig+0x136>
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d002      	beq.n	800352c <HAL_RCC_OscConfig+0x13c>
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b04      	cmp	r3, #4
 800352a:	d11f      	bne.n	800356c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800352c:	4b4f      	ldr	r3, [pc, #316]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_OscConfig+0x154>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e25d      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003544:	4b49      	ldr	r3, [pc, #292]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	061b      	lsls	r3, r3, #24
 8003552:	4946      	ldr	r1, [pc, #280]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 8003554:	4313      	orrs	r3, r2
 8003556:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003558:	4b45      	ldr	r3, [pc, #276]	@ (8003670 <HAL_RCC_OscConfig+0x280>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f7fd fb59 	bl	8000c14 <HAL_InitTick>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d043      	beq.n	80035f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e249      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d023      	beq.n	80035bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003574:	4b3d      	ldr	r3, [pc, #244]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a3c      	ldr	r2, [pc, #240]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 800357a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800357e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fe fa18 	bl	80019b4 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003588:	f7fe fa14 	bl	80019b4 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e232      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800359a:	4b34      	ldr	r3, [pc, #208]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a6:	4b31      	ldr	r3, [pc, #196]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	061b      	lsls	r3, r3, #24
 80035b4:	492d      	ldr	r1, [pc, #180]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	604b      	str	r3, [r1, #4]
 80035ba:	e01a      	b.n	80035f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035bc:	4b2b      	ldr	r3, [pc, #172]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a2a      	ldr	r2, [pc, #168]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 80035c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe f9f4 	bl	80019b4 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d0:	f7fe f9f0 	bl	80019b4 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e20e      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035e2:	4b22      	ldr	r3, [pc, #136]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x1e0>
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d041      	beq.n	8003682 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01c      	beq.n	8003640 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003606:	4b19      	ldr	r3, [pc, #100]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 8003608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800360c:	4a17      	ldr	r2, [pc, #92]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003616:	f7fe f9cd 	bl	80019b4 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361e:	f7fe f9c9 	bl	80019b4 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e1e7      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003630:	4b0e      	ldr	r3, [pc, #56]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 8003632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0ef      	beq.n	800361e <HAL_RCC_OscConfig+0x22e>
 800363e:	e020      	b.n	8003682 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003640:	4b0a      	ldr	r3, [pc, #40]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 8003642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003646:	4a09      	ldr	r2, [pc, #36]	@ (800366c <HAL_RCC_OscConfig+0x27c>)
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003650:	f7fe f9b0 	bl	80019b4 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003656:	e00d      	b.n	8003674 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003658:	f7fe f9ac 	bl	80019b4 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d906      	bls.n	8003674 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e1ca      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000
 8003670:	200000c8 	.word	0x200000c8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003674:	4b8c      	ldr	r3, [pc, #560]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 8003676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1ea      	bne.n	8003658 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80a6 	beq.w	80037dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003690:	2300      	movs	r3, #0
 8003692:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003694:	4b84      	ldr	r3, [pc, #528]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_OscConfig+0x2b4>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <HAL_RCC_OscConfig+0x2b6>
 80036a4:	2300      	movs	r3, #0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036aa:	4b7f      	ldr	r3, [pc, #508]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 80036ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ae:	4a7e      	ldr	r2, [pc, #504]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 80036b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036b6:	4b7c      	ldr	r3, [pc, #496]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 80036b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036c2:	2301      	movs	r3, #1
 80036c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c6:	4b79      	ldr	r3, [pc, #484]	@ (80038ac <HAL_RCC_OscConfig+0x4bc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d118      	bne.n	8003704 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036d2:	4b76      	ldr	r3, [pc, #472]	@ (80038ac <HAL_RCC_OscConfig+0x4bc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a75      	ldr	r2, [pc, #468]	@ (80038ac <HAL_RCC_OscConfig+0x4bc>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036de:	f7fe f969 	bl	80019b4 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e6:	f7fe f965 	bl	80019b4 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e183      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f8:	4b6c      	ldr	r3, [pc, #432]	@ (80038ac <HAL_RCC_OscConfig+0x4bc>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d108      	bne.n	800371e <HAL_RCC_OscConfig+0x32e>
 800370c:	4b66      	ldr	r3, [pc, #408]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003712:	4a65      	ldr	r2, [pc, #404]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800371c:	e024      	b.n	8003768 <HAL_RCC_OscConfig+0x378>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b05      	cmp	r3, #5
 8003724:	d110      	bne.n	8003748 <HAL_RCC_OscConfig+0x358>
 8003726:	4b60      	ldr	r3, [pc, #384]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372c:	4a5e      	ldr	r2, [pc, #376]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 800372e:	f043 0304 	orr.w	r3, r3, #4
 8003732:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003736:	4b5c      	ldr	r3, [pc, #368]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373c:	4a5a      	ldr	r2, [pc, #360]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003746:	e00f      	b.n	8003768 <HAL_RCC_OscConfig+0x378>
 8003748:	4b57      	ldr	r3, [pc, #348]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374e:	4a56      	ldr	r2, [pc, #344]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 8003750:	f023 0301 	bic.w	r3, r3, #1
 8003754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003758:	4b53      	ldr	r3, [pc, #332]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375e:	4a52      	ldr	r2, [pc, #328]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 8003760:	f023 0304 	bic.w	r3, r3, #4
 8003764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d016      	beq.n	800379e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003770:	f7fe f920 	bl	80019b4 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003776:	e00a      	b.n	800378e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003778:	f7fe f91c 	bl	80019b4 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e138      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378e:	4b46      	ldr	r3, [pc, #280]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ed      	beq.n	8003778 <HAL_RCC_OscConfig+0x388>
 800379c:	e015      	b.n	80037ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379e:	f7fe f909 	bl	80019b4 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037a4:	e00a      	b.n	80037bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a6:	f7fe f905 	bl	80019b4 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e121      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037bc:	4b3a      	ldr	r3, [pc, #232]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1ed      	bne.n	80037a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037ca:	7ffb      	ldrb	r3, [r7, #31]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d105      	bne.n	80037dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d0:	4b35      	ldr	r3, [pc, #212]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 80037d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d4:	4a34      	ldr	r2, [pc, #208]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 80037d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d03c      	beq.n	8003862 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01c      	beq.n	800382a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037f0:	4b2d      	ldr	r3, [pc, #180]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 80037f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037f6:	4a2c      	ldr	r2, [pc, #176]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fe f8d8 	bl	80019b4 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003808:	f7fe f8d4 	bl	80019b4 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e0f2      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800381a:	4b23      	ldr	r3, [pc, #140]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 800381c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0ef      	beq.n	8003808 <HAL_RCC_OscConfig+0x418>
 8003828:	e01b      	b.n	8003862 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800382a:	4b1f      	ldr	r3, [pc, #124]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 800382c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003830:	4a1d      	ldr	r2, [pc, #116]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383a:	f7fe f8bb 	bl	80019b4 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003842:	f7fe f8b7 	bl	80019b4 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e0d5      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003854:	4b14      	ldr	r3, [pc, #80]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 8003856:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1ef      	bne.n	8003842 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 80c9 	beq.w	80039fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800386c:	4b0e      	ldr	r3, [pc, #56]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	2b0c      	cmp	r3, #12
 8003876:	f000 8083 	beq.w	8003980 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d15e      	bne.n	8003940 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003882:	4b09      	ldr	r3, [pc, #36]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a08      	ldr	r2, [pc, #32]	@ (80038a8 <HAL_RCC_OscConfig+0x4b8>)
 8003888:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800388c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388e:	f7fe f891 	bl	80019b4 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003894:	e00c      	b.n	80038b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003896:	f7fe f88d 	bl	80019b4 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d905      	bls.n	80038b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e0ab      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b0:	4b55      	ldr	r3, [pc, #340]	@ (8003a08 <HAL_RCC_OscConfig+0x618>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1ec      	bne.n	8003896 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038bc:	4b52      	ldr	r3, [pc, #328]	@ (8003a08 <HAL_RCC_OscConfig+0x618>)
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	4b52      	ldr	r3, [pc, #328]	@ (8003a0c <HAL_RCC_OscConfig+0x61c>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6a11      	ldr	r1, [r2, #32]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038cc:	3a01      	subs	r2, #1
 80038ce:	0112      	lsls	r2, r2, #4
 80038d0:	4311      	orrs	r1, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80038d6:	0212      	lsls	r2, r2, #8
 80038d8:	4311      	orrs	r1, r2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038de:	0852      	lsrs	r2, r2, #1
 80038e0:	3a01      	subs	r2, #1
 80038e2:	0552      	lsls	r2, r2, #21
 80038e4:	4311      	orrs	r1, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038ea:	0852      	lsrs	r2, r2, #1
 80038ec:	3a01      	subs	r2, #1
 80038ee:	0652      	lsls	r2, r2, #25
 80038f0:	4311      	orrs	r1, r2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80038f6:	06d2      	lsls	r2, r2, #27
 80038f8:	430a      	orrs	r2, r1
 80038fa:	4943      	ldr	r1, [pc, #268]	@ (8003a08 <HAL_RCC_OscConfig+0x618>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003900:	4b41      	ldr	r3, [pc, #260]	@ (8003a08 <HAL_RCC_OscConfig+0x618>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a40      	ldr	r2, [pc, #256]	@ (8003a08 <HAL_RCC_OscConfig+0x618>)
 8003906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800390a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800390c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a08 <HAL_RCC_OscConfig+0x618>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4a3d      	ldr	r2, [pc, #244]	@ (8003a08 <HAL_RCC_OscConfig+0x618>)
 8003912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003916:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fe f84c 	bl	80019b4 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003920:	f7fe f848 	bl	80019b4 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e066      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003932:	4b35      	ldr	r3, [pc, #212]	@ (8003a08 <HAL_RCC_OscConfig+0x618>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCC_OscConfig+0x530>
 800393e:	e05e      	b.n	80039fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003940:	4b31      	ldr	r3, [pc, #196]	@ (8003a08 <HAL_RCC_OscConfig+0x618>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a30      	ldr	r2, [pc, #192]	@ (8003a08 <HAL_RCC_OscConfig+0x618>)
 8003946:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800394a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7fe f832 	bl	80019b4 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003954:	f7fe f82e 	bl	80019b4 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e04c      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003966:	4b28      	ldr	r3, [pc, #160]	@ (8003a08 <HAL_RCC_OscConfig+0x618>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003972:	4b25      	ldr	r3, [pc, #148]	@ (8003a08 <HAL_RCC_OscConfig+0x618>)
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	4924      	ldr	r1, [pc, #144]	@ (8003a08 <HAL_RCC_OscConfig+0x618>)
 8003978:	4b25      	ldr	r3, [pc, #148]	@ (8003a10 <HAL_RCC_OscConfig+0x620>)
 800397a:	4013      	ands	r3, r2
 800397c:	60cb      	str	r3, [r1, #12]
 800397e:	e03e      	b.n	80039fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e039      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800398c:	4b1e      	ldr	r3, [pc, #120]	@ (8003a08 <HAL_RCC_OscConfig+0x618>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 0203 	and.w	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	429a      	cmp	r2, r3
 800399e:	d12c      	bne.n	80039fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	3b01      	subs	r3, #1
 80039ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d123      	bne.n	80039fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d11b      	bne.n	80039fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d113      	bne.n	80039fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039dc:	085b      	lsrs	r3, r3, #1
 80039de:	3b01      	subs	r3, #1
 80039e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d109      	bne.n	80039fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f0:	085b      	lsrs	r3, r3, #1
 80039f2:	3b01      	subs	r3, #1
 80039f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d001      	beq.n	80039fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3720      	adds	r7, #32
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	019f800c 	.word	0x019f800c
 8003a10:	feeefffc 	.word	0xfeeefffc

08003a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e11e      	b.n	8003c6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b91      	ldr	r3, [pc, #580]	@ (8003c74 <HAL_RCC_ClockConfig+0x260>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d910      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b8e      	ldr	r3, [pc, #568]	@ (8003c74 <HAL_RCC_ClockConfig+0x260>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 020f 	bic.w	r2, r3, #15
 8003a42:	498c      	ldr	r1, [pc, #560]	@ (8003c74 <HAL_RCC_ClockConfig+0x260>)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b8a      	ldr	r3, [pc, #552]	@ (8003c74 <HAL_RCC_ClockConfig+0x260>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e106      	b.n	8003c6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d073      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d129      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a70:	4b81      	ldr	r3, [pc, #516]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0f4      	b.n	8003c6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a80:	f000 f9d0 	bl	8003e24 <RCC_GetSysClockFreqFromPLLSource>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4a7c      	ldr	r2, [pc, #496]	@ (8003c7c <HAL_RCC_ClockConfig+0x268>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d93f      	bls.n	8003b0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a8e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d033      	beq.n	8003b0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d12f      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003aae:	4b72      	ldr	r3, [pc, #456]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ab6:	4a70      	ldr	r2, [pc, #448]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003abc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003abe:	2380      	movs	r3, #128	@ 0x80
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	e024      	b.n	8003b0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d107      	bne.n	8003adc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003acc:	4b6a      	ldr	r3, [pc, #424]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0c6      	b.n	8003c6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003adc:	4b66      	ldr	r3, [pc, #408]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0be      	b.n	8003c6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003aec:	f000 f8ce 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4a61      	ldr	r2, [pc, #388]	@ (8003c7c <HAL_RCC_ClockConfig+0x268>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d909      	bls.n	8003b0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003afa:	4b5f      	ldr	r3, [pc, #380]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b02:	4a5d      	ldr	r2, [pc, #372]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b0a:	2380      	movs	r3, #128	@ 0x80
 8003b0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b0e:	4b5a      	ldr	r3, [pc, #360]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f023 0203 	bic.w	r2, r3, #3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4957      	ldr	r1, [pc, #348]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b20:	f7fd ff48 	bl	80019b4 <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b28:	f7fd ff44 	bl	80019b4 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e095      	b.n	8003c6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3e:	4b4e      	ldr	r3, [pc, #312]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 020c 	and.w	r2, r3, #12
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d1eb      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d023      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b68:	4b43      	ldr	r3, [pc, #268]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4a42      	ldr	r2, [pc, #264]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003b6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d007      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b80:	4b3d      	ldr	r3, [pc, #244]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b88:	4a3b      	ldr	r2, [pc, #236]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003b8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b90:	4b39      	ldr	r3, [pc, #228]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4936      	ldr	r1, [pc, #216]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2b80      	cmp	r3, #128	@ 0x80
 8003ba8:	d105      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003baa:	4b33      	ldr	r3, [pc, #204]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	4a32      	ldr	r2, [pc, #200]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003bb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bb4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8003c74 <HAL_RCC_ClockConfig+0x260>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d21d      	bcs.n	8003c00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003c74 <HAL_RCC_ClockConfig+0x260>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 020f 	bic.w	r2, r3, #15
 8003bcc:	4929      	ldr	r1, [pc, #164]	@ (8003c74 <HAL_RCC_ClockConfig+0x260>)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bd4:	f7fd feee 	bl	80019b4 <HAL_GetTick>
 8003bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	e00a      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bdc:	f7fd feea 	bl	80019b4 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e03b      	b.n	8003c6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b20      	ldr	r3, [pc, #128]	@ (8003c74 <HAL_RCC_ClockConfig+0x260>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d1ed      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	4917      	ldr	r1, [pc, #92]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c2a:	4b13      	ldr	r3, [pc, #76]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	490f      	ldr	r1, [pc, #60]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c3e:	f000 f825 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 8003c42:	4602      	mov	r2, r0
 8003c44:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <HAL_RCC_ClockConfig+0x264>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	091b      	lsrs	r3, r3, #4
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	490c      	ldr	r1, [pc, #48]	@ (8003c80 <HAL_RCC_ClockConfig+0x26c>)
 8003c50:	5ccb      	ldrb	r3, [r1, r3]
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c84 <HAL_RCC_ClockConfig+0x270>)
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c88 <HAL_RCC_ClockConfig+0x274>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fc ffd6 	bl	8000c14 <HAL_InitTick>
 8003c68:	4603      	mov	r3, r0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40022000 	.word	0x40022000
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	04c4b400 	.word	0x04c4b400
 8003c80:	08009470 	.word	0x08009470
 8003c84:	20000000 	.word	0x20000000
 8003c88:	200000c8 	.word	0x200000c8

08003c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c92:	4b2c      	ldr	r3, [pc, #176]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d102      	bne.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	e047      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ca4:	4b27      	ldr	r3, [pc, #156]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d102      	bne.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cb0:	4b26      	ldr	r3, [pc, #152]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	e03e      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003cb6:	4b23      	ldr	r3, [pc, #140]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b0c      	cmp	r3, #12
 8003cc0:	d136      	bne.n	8003d30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cc2:	4b20      	ldr	r3, [pc, #128]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d10c      	bne.n	8003cfa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce8:	4a16      	ldr	r2, [pc, #88]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cea:	68d2      	ldr	r2, [r2, #12]
 8003cec:	0a12      	lsrs	r2, r2, #8
 8003cee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	617b      	str	r3, [r7, #20]
      break;
 8003cf8:	e00c      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cfa:	4a13      	ldr	r2, [pc, #76]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d02:	4a10      	ldr	r2, [pc, #64]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d04:	68d2      	ldr	r2, [r2, #12]
 8003d06:	0a12      	lsrs	r2, r2, #8
 8003d08:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d0c:	fb02 f303 	mul.w	r3, r2, r3
 8003d10:	617b      	str	r3, [r7, #20]
      break;
 8003d12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d14:	4b0b      	ldr	r3, [pc, #44]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	0e5b      	lsrs	r3, r3, #25
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	3301      	adds	r3, #1
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	e001      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d34:	693b      	ldr	r3, [r7, #16]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
 8003d48:	00f42400 	.word	0x00f42400
 8003d4c:	016e3600 	.word	0x016e3600

08003d50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d54:	4b03      	ldr	r3, [pc, #12]	@ (8003d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000000 	.word	0x20000000

08003d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d6c:	f7ff fff0 	bl	8003d50 <HAL_RCC_GetHCLKFreq>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b06      	ldr	r3, [pc, #24]	@ (8003d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	4904      	ldr	r1, [pc, #16]	@ (8003d90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d7e:	5ccb      	ldrb	r3, [r1, r3]
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	08009480 	.word	0x08009480

08003d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d98:	f7ff ffda 	bl	8003d50 <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b06      	ldr	r3, [pc, #24]	@ (8003db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	0adb      	lsrs	r3, r3, #11
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4904      	ldr	r1, [pc, #16]	@ (8003dbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	08009480 	.word	0x08009480

08003dc0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	220f      	movs	r2, #15
 8003dce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003dd0:	4b12      	ldr	r3, [pc, #72]	@ (8003e1c <HAL_RCC_GetClockConfig+0x5c>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0203 	and.w	r2, r3, #3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8003e1c <HAL_RCC_GetClockConfig+0x5c>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003de8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e1c <HAL_RCC_GetClockConfig+0x5c>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003df4:	4b09      	ldr	r3, [pc, #36]	@ (8003e1c <HAL_RCC_GetClockConfig+0x5c>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	08db      	lsrs	r3, r3, #3
 8003dfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e02:	4b07      	ldr	r3, [pc, #28]	@ (8003e20 <HAL_RCC_GetClockConfig+0x60>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 020f 	and.w	r2, r3, #15
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	601a      	str	r2, [r3, #0]
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40022000 	.word	0x40022000

08003e24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	3301      	adds	r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d10c      	bne.n	8003e62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e48:	4a17      	ldr	r2, [pc, #92]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	4a14      	ldr	r2, [pc, #80]	@ (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e52:	68d2      	ldr	r2, [r2, #12]
 8003e54:	0a12      	lsrs	r2, r2, #8
 8003e56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	617b      	str	r3, [r7, #20]
    break;
 8003e60:	e00c      	b.n	8003e7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e62:	4a12      	ldr	r2, [pc, #72]	@ (8003eac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e6c:	68d2      	ldr	r2, [r2, #12]
 8003e6e:	0a12      	lsrs	r2, r2, #8
 8003e70:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e74:	fb02 f303 	mul.w	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]
    break;
 8003e7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e7c:	4b09      	ldr	r3, [pc, #36]	@ (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	0e5b      	lsrs	r3, r3, #25
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	3301      	adds	r3, #1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e96:	687b      	ldr	r3, [r7, #4]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	016e3600 	.word	0x016e3600
 8003eac:	00f42400 	.word	0x00f42400

08003eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003eb8:	2300      	movs	r3, #0
 8003eba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8098 	beq.w	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed2:	4b43      	ldr	r3, [pc, #268]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10d      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ede:	4b40      	ldr	r3, [pc, #256]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee2:	4a3f      	ldr	r2, [pc, #252]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eea:	4b3d      	ldr	r3, [pc, #244]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003efa:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a39      	ldr	r2, [pc, #228]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f06:	f7fd fd55 	bl	80019b4 <HAL_GetTick>
 8003f0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f0c:	e009      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0e:	f7fd fd51 	bl	80019b4 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d902      	bls.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	74fb      	strb	r3, [r7, #19]
        break;
 8003f20:	e005      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f22:	4b30      	ldr	r3, [pc, #192]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0ef      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f2e:	7cfb      	ldrb	r3, [r7, #19]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d159      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f34:	4b2a      	ldr	r3, [pc, #168]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01e      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d019      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f50:	4b23      	ldr	r3, [pc, #140]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f5c:	4b20      	ldr	r3, [pc, #128]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f62:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f72:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f7c:	4a18      	ldr	r2, [pc, #96]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8e:	f7fd fd11 	bl	80019b4 <HAL_GetTick>
 8003f92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f94:	e00b      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f96:	f7fd fd0d 	bl	80019b4 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d902      	bls.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	74fb      	strb	r3, [r7, #19]
            break;
 8003fac:	e006      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fae:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0ec      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10b      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fc2:	4b07      	ldr	r3, [pc, #28]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd0:	4903      	ldr	r1, [pc, #12]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003fd8:	e008      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	74bb      	strb	r3, [r7, #18]
 8003fde:	e005      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fec:	7c7b      	ldrb	r3, [r7, #17]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d105      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff2:	4ba7      	ldr	r3, [pc, #668]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff6:	4aa6      	ldr	r2, [pc, #664]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ffc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800400a:	4ba1      	ldr	r3, [pc, #644]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004010:	f023 0203 	bic.w	r2, r3, #3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	499d      	ldr	r1, [pc, #628]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800402c:	4b98      	ldr	r3, [pc, #608]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004032:	f023 020c 	bic.w	r2, r3, #12
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	4995      	ldr	r1, [pc, #596]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800404e:	4b90      	ldr	r3, [pc, #576]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004054:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	498c      	ldr	r1, [pc, #560]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004070:	4b87      	ldr	r3, [pc, #540]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004076:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	4984      	ldr	r1, [pc, #528]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004092:	4b7f      	ldr	r3, [pc, #508]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004098:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	497b      	ldr	r1, [pc, #492]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040b4:	4b76      	ldr	r3, [pc, #472]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	4973      	ldr	r1, [pc, #460]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040d6:	4b6e      	ldr	r3, [pc, #440]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	496a      	ldr	r1, [pc, #424]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040f8:	4b65      	ldr	r3, [pc, #404]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	4962      	ldr	r1, [pc, #392]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800411a:	4b5d      	ldr	r3, [pc, #372]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004120:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	4959      	ldr	r1, [pc, #356]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800413c:	4b54      	ldr	r3, [pc, #336]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004142:	f023 0203 	bic.w	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414a:	4951      	ldr	r1, [pc, #324]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800415e:	4b4c      	ldr	r3, [pc, #304]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004164:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416c:	4948      	ldr	r1, [pc, #288]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800417c:	2b00      	cmp	r3, #0
 800417e:	d015      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004180:	4b43      	ldr	r3, [pc, #268]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004186:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418e:	4940      	ldr	r1, [pc, #256]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800419e:	d105      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4a3a      	ldr	r2, [pc, #232]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041aa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041b8:	4b35      	ldr	r3, [pc, #212]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c6:	4932      	ldr	r1, [pc, #200]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041d6:	d105      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041e2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041f0:	4b27      	ldr	r3, [pc, #156]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fe:	4924      	ldr	r1, [pc, #144]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800420e:	d105      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004210:	4b1f      	ldr	r3, [pc, #124]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a1e      	ldr	r2, [pc, #120]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800421a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d015      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004228:	4b19      	ldr	r3, [pc, #100]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004236:	4916      	ldr	r1, [pc, #88]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004242:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004246:	d105      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004248:	4b11      	ldr	r3, [pc, #68]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a10      	ldr	r2, [pc, #64]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004252:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d019      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004260:	4b0b      	ldr	r3, [pc, #44]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004266:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426e:	4908      	ldr	r1, [pc, #32]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800427e:	d109      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004280:	4b03      	ldr	r3, [pc, #12]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a02      	ldr	r2, [pc, #8]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004286:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800428a:	60d3      	str	r3, [r2, #12]
 800428c:	e002      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d015      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042a0:	4b29      	ldr	r3, [pc, #164]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ae:	4926      	ldr	r1, [pc, #152]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042be:	d105      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042c0:	4b21      	ldr	r3, [pc, #132]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4a20      	ldr	r2, [pc, #128]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d015      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80042d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042de:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e6:	4918      	ldr	r1, [pc, #96]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f6:	d105      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042f8:	4b13      	ldr	r3, [pc, #76]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a12      	ldr	r2, [pc, #72]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004302:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d015      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004310:	4b0d      	ldr	r3, [pc, #52]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004312:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004316:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431e:	490a      	ldr	r1, [pc, #40]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800432a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800432e:	d105      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004330:	4b05      	ldr	r3, [pc, #20]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a04      	ldr	r2, [pc, #16]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800433a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800433c:	7cbb      	ldrb	r3, [r7, #18]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000

0800434c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e049      	b.n	80043f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f841 	bl	80043fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4610      	mov	r0, r2
 800438c:	f000 fcae 	bl	8004cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b01      	cmp	r3, #1
 8004422:	d001      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e054      	b.n	80044d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a26      	ldr	r2, [pc, #152]	@ (80044e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d022      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0x80>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004452:	d01d      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0x80>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a22      	ldr	r2, [pc, #136]	@ (80044e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d018      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0x80>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a21      	ldr	r2, [pc, #132]	@ (80044e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d013      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0x80>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1f      	ldr	r2, [pc, #124]	@ (80044ec <HAL_TIM_Base_Start_IT+0xdc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00e      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0x80>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1e      	ldr	r2, [pc, #120]	@ (80044f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d009      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0x80>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1c      	ldr	r2, [pc, #112]	@ (80044f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0x80>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1b      	ldr	r2, [pc, #108]	@ (80044f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d115      	bne.n	80044bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	4b19      	ldr	r3, [pc, #100]	@ (80044fc <HAL_TIM_Base_Start_IT+0xec>)
 8004498:	4013      	ands	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b06      	cmp	r3, #6
 80044a0:	d015      	beq.n	80044ce <HAL_TIM_Base_Start_IT+0xbe>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a8:	d011      	beq.n	80044ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0201 	orr.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ba:	e008      	b.n	80044ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e000      	b.n	80044d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40000800 	.word	0x40000800
 80044ec:	40000c00 	.word	0x40000c00
 80044f0:	40013400 	.word	0x40013400
 80044f4:	40014000 	.word	0x40014000
 80044f8:	40015000 	.word	0x40015000
 80044fc:	00010007 	.word	0x00010007

08004500 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e049      	b.n	80045a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fc fe0c 	bl	8001144 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3304      	adds	r3, #4
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f000 fbd4 	bl	8004cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <HAL_TIM_PWM_Start+0x24>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	e03c      	b.n	800464e <HAL_TIM_PWM_Start+0x9e>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d109      	bne.n	80045ee <HAL_TIM_PWM_Start+0x3e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	bf14      	ite	ne
 80045e6:	2301      	movne	r3, #1
 80045e8:	2300      	moveq	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	e02f      	b.n	800464e <HAL_TIM_PWM_Start+0x9e>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d109      	bne.n	8004608 <HAL_TIM_PWM_Start+0x58>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	bf14      	ite	ne
 8004600:	2301      	movne	r3, #1
 8004602:	2300      	moveq	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	e022      	b.n	800464e <HAL_TIM_PWM_Start+0x9e>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b0c      	cmp	r3, #12
 800460c:	d109      	bne.n	8004622 <HAL_TIM_PWM_Start+0x72>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b01      	cmp	r3, #1
 8004618:	bf14      	ite	ne
 800461a:	2301      	movne	r3, #1
 800461c:	2300      	moveq	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	e015      	b.n	800464e <HAL_TIM_PWM_Start+0x9e>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b10      	cmp	r3, #16
 8004626:	d109      	bne.n	800463c <HAL_TIM_PWM_Start+0x8c>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b01      	cmp	r3, #1
 8004632:	bf14      	ite	ne
 8004634:	2301      	movne	r3, #1
 8004636:	2300      	moveq	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	e008      	b.n	800464e <HAL_TIM_PWM_Start+0x9e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	bf14      	ite	ne
 8004648:	2301      	movne	r3, #1
 800464a:	2300      	moveq	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e0a6      	b.n	80047a4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d104      	bne.n	8004666 <HAL_TIM_PWM_Start+0xb6>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004664:	e023      	b.n	80046ae <HAL_TIM_PWM_Start+0xfe>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b04      	cmp	r3, #4
 800466a:	d104      	bne.n	8004676 <HAL_TIM_PWM_Start+0xc6>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004674:	e01b      	b.n	80046ae <HAL_TIM_PWM_Start+0xfe>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b08      	cmp	r3, #8
 800467a:	d104      	bne.n	8004686 <HAL_TIM_PWM_Start+0xd6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004684:	e013      	b.n	80046ae <HAL_TIM_PWM_Start+0xfe>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b0c      	cmp	r3, #12
 800468a:	d104      	bne.n	8004696 <HAL_TIM_PWM_Start+0xe6>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004694:	e00b      	b.n	80046ae <HAL_TIM_PWM_Start+0xfe>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b10      	cmp	r3, #16
 800469a:	d104      	bne.n	80046a6 <HAL_TIM_PWM_Start+0xf6>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046a4:	e003      	b.n	80046ae <HAL_TIM_PWM_Start+0xfe>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2202      	movs	r2, #2
 80046aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2201      	movs	r2, #1
 80046b4:	6839      	ldr	r1, [r7, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 ff6a 	bl	8005590 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a3a      	ldr	r2, [pc, #232]	@ (80047ac <HAL_TIM_PWM_Start+0x1fc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d018      	beq.n	80046f8 <HAL_TIM_PWM_Start+0x148>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a39      	ldr	r2, [pc, #228]	@ (80047b0 <HAL_TIM_PWM_Start+0x200>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d013      	beq.n	80046f8 <HAL_TIM_PWM_Start+0x148>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a37      	ldr	r2, [pc, #220]	@ (80047b4 <HAL_TIM_PWM_Start+0x204>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00e      	beq.n	80046f8 <HAL_TIM_PWM_Start+0x148>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a36      	ldr	r2, [pc, #216]	@ (80047b8 <HAL_TIM_PWM_Start+0x208>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_TIM_PWM_Start+0x148>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a34      	ldr	r2, [pc, #208]	@ (80047bc <HAL_TIM_PWM_Start+0x20c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_TIM_PWM_Start+0x148>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a33      	ldr	r2, [pc, #204]	@ (80047c0 <HAL_TIM_PWM_Start+0x210>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d101      	bne.n	80046fc <HAL_TIM_PWM_Start+0x14c>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <HAL_TIM_PWM_Start+0x14e>
 80046fc:	2300      	movs	r3, #0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004710:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a25      	ldr	r2, [pc, #148]	@ (80047ac <HAL_TIM_PWM_Start+0x1fc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d022      	beq.n	8004762 <HAL_TIM_PWM_Start+0x1b2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004724:	d01d      	beq.n	8004762 <HAL_TIM_PWM_Start+0x1b2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a26      	ldr	r2, [pc, #152]	@ (80047c4 <HAL_TIM_PWM_Start+0x214>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d018      	beq.n	8004762 <HAL_TIM_PWM_Start+0x1b2>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a24      	ldr	r2, [pc, #144]	@ (80047c8 <HAL_TIM_PWM_Start+0x218>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <HAL_TIM_PWM_Start+0x1b2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a23      	ldr	r2, [pc, #140]	@ (80047cc <HAL_TIM_PWM_Start+0x21c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00e      	beq.n	8004762 <HAL_TIM_PWM_Start+0x1b2>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a19      	ldr	r2, [pc, #100]	@ (80047b0 <HAL_TIM_PWM_Start+0x200>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d009      	beq.n	8004762 <HAL_TIM_PWM_Start+0x1b2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a18      	ldr	r2, [pc, #96]	@ (80047b4 <HAL_TIM_PWM_Start+0x204>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_TIM_PWM_Start+0x1b2>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a18      	ldr	r2, [pc, #96]	@ (80047c0 <HAL_TIM_PWM_Start+0x210>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d115      	bne.n	800478e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	4b19      	ldr	r3, [pc, #100]	@ (80047d0 <HAL_TIM_PWM_Start+0x220>)
 800476a:	4013      	ands	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b06      	cmp	r3, #6
 8004772:	d015      	beq.n	80047a0 <HAL_TIM_PWM_Start+0x1f0>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800477a:	d011      	beq.n	80047a0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478c:	e008      	b.n	80047a0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	e000      	b.n	80047a2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40013400 	.word	0x40013400
 80047b4:	40014000 	.word	0x40014000
 80047b8:	40014400 	.word	0x40014400
 80047bc:	40014800 	.word	0x40014800
 80047c0:	40015000 	.word	0x40015000
 80047c4:	40000400 	.word	0x40000400
 80047c8:	40000800 	.word	0x40000800
 80047cc:	40000c00 	.word	0x40000c00
 80047d0:	00010007 	.word	0x00010007

080047d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d020      	beq.n	8004838 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01b      	beq.n	8004838 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0202 	mvn.w	r2, #2
 8004808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa46 	bl	8004cb0 <HAL_TIM_IC_CaptureCallback>
 8004824:	e005      	b.n	8004832 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fa38 	bl	8004c9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fa49 	bl	8004cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d020      	beq.n	8004884 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01b      	beq.n	8004884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0204 	mvn.w	r2, #4
 8004854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fa20 	bl	8004cb0 <HAL_TIM_IC_CaptureCallback>
 8004870:	e005      	b.n	800487e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fa12 	bl	8004c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fa23 	bl	8004cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d020      	beq.n	80048d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01b      	beq.n	80048d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0208 	mvn.w	r2, #8
 80048a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2204      	movs	r2, #4
 80048a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f9fa 	bl	8004cb0 <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f9ec 	bl	8004c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f9fd 	bl	8004cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d020      	beq.n	800491c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01b      	beq.n	800491c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0210 	mvn.w	r2, #16
 80048ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2208      	movs	r2, #8
 80048f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f9d4 	bl	8004cb0 <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f9c6 	bl	8004c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f9d7 	bl	8004cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00c      	beq.n	8004940 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0201 	mvn.w	r2, #1
 8004938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fc f92e 	bl	8000b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004946:	2b00      	cmp	r3, #0
 8004948:	d104      	bne.n	8004954 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00c      	beq.n	800496e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f001 f8db 	bl	8005b24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00c      	beq.n	8004992 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800498a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f001 f8d3 	bl	8005b38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00c      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f991 	bl	8004cd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00c      	beq.n	80049da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d007      	beq.n	80049da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f06f 0220 	mvn.w	r2, #32
 80049d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f001 f89b 	bl	8005b10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00c      	beq.n	80049fe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80049f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f001 f8a7 	bl	8005b4c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00c      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f001 f89f 	bl	8005b60 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00c      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d007      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f001 f897 	bl	8005b74 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00c      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f001 f88f 	bl	8005b88 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e0ff      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b14      	cmp	r3, #20
 8004a9e:	f200 80f0 	bhi.w	8004c82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa8:	08004afd 	.word	0x08004afd
 8004aac:	08004c83 	.word	0x08004c83
 8004ab0:	08004c83 	.word	0x08004c83
 8004ab4:	08004c83 	.word	0x08004c83
 8004ab8:	08004b3d 	.word	0x08004b3d
 8004abc:	08004c83 	.word	0x08004c83
 8004ac0:	08004c83 	.word	0x08004c83
 8004ac4:	08004c83 	.word	0x08004c83
 8004ac8:	08004b7f 	.word	0x08004b7f
 8004acc:	08004c83 	.word	0x08004c83
 8004ad0:	08004c83 	.word	0x08004c83
 8004ad4:	08004c83 	.word	0x08004c83
 8004ad8:	08004bbf 	.word	0x08004bbf
 8004adc:	08004c83 	.word	0x08004c83
 8004ae0:	08004c83 	.word	0x08004c83
 8004ae4:	08004c83 	.word	0x08004c83
 8004ae8:	08004c01 	.word	0x08004c01
 8004aec:	08004c83 	.word	0x08004c83
 8004af0:	08004c83 	.word	0x08004c83
 8004af4:	08004c83 	.word	0x08004c83
 8004af8:	08004c41 	.word	0x08004c41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f9a6 	bl	8004e54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0208 	orr.w	r2, r2, #8
 8004b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0204 	bic.w	r2, r2, #4
 8004b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6999      	ldr	r1, [r3, #24]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	619a      	str	r2, [r3, #24]
      break;
 8004b3a:	e0a5      	b.n	8004c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fa20 	bl	8004f88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6999      	ldr	r1, [r3, #24]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	021a      	lsls	r2, r3, #8
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	619a      	str	r2, [r3, #24]
      break;
 8004b7c:	e084      	b.n	8004c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fa93 	bl	80050b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0208 	orr.w	r2, r2, #8
 8004b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0204 	bic.w	r2, r2, #4
 8004ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69d9      	ldr	r1, [r3, #28]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	61da      	str	r2, [r3, #28]
      break;
 8004bbc:	e064      	b.n	8004c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fb05 	bl	80051d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69d9      	ldr	r1, [r3, #28]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	021a      	lsls	r2, r3, #8
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	61da      	str	r2, [r3, #28]
      break;
 8004bfe:	e043      	b.n	8004c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fb78 	bl	80052fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0208 	orr.w	r2, r2, #8
 8004c1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0204 	bic.w	r2, r2, #4
 8004c2a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c3e:	e023      	b.n	8004c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fbc2 	bl	80053d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c6a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	021a      	lsls	r2, r3, #8
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c80:	e002      	b.n	8004c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	75fb      	strb	r3, [r7, #23]
      break;
 8004c86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop

08004c9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a4c      	ldr	r2, [pc, #304]	@ (8004e30 <TIM_Base_SetConfig+0x144>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d017      	beq.n	8004d34 <TIM_Base_SetConfig+0x48>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d0a:	d013      	beq.n	8004d34 <TIM_Base_SetConfig+0x48>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a49      	ldr	r2, [pc, #292]	@ (8004e34 <TIM_Base_SetConfig+0x148>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00f      	beq.n	8004d34 <TIM_Base_SetConfig+0x48>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a48      	ldr	r2, [pc, #288]	@ (8004e38 <TIM_Base_SetConfig+0x14c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00b      	beq.n	8004d34 <TIM_Base_SetConfig+0x48>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a47      	ldr	r2, [pc, #284]	@ (8004e3c <TIM_Base_SetConfig+0x150>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d007      	beq.n	8004d34 <TIM_Base_SetConfig+0x48>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a46      	ldr	r2, [pc, #280]	@ (8004e40 <TIM_Base_SetConfig+0x154>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_Base_SetConfig+0x48>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a45      	ldr	r2, [pc, #276]	@ (8004e44 <TIM_Base_SetConfig+0x158>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d108      	bne.n	8004d46 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a39      	ldr	r2, [pc, #228]	@ (8004e30 <TIM_Base_SetConfig+0x144>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d023      	beq.n	8004d96 <TIM_Base_SetConfig+0xaa>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d54:	d01f      	beq.n	8004d96 <TIM_Base_SetConfig+0xaa>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a36      	ldr	r2, [pc, #216]	@ (8004e34 <TIM_Base_SetConfig+0x148>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01b      	beq.n	8004d96 <TIM_Base_SetConfig+0xaa>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a35      	ldr	r2, [pc, #212]	@ (8004e38 <TIM_Base_SetConfig+0x14c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d017      	beq.n	8004d96 <TIM_Base_SetConfig+0xaa>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a34      	ldr	r2, [pc, #208]	@ (8004e3c <TIM_Base_SetConfig+0x150>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <TIM_Base_SetConfig+0xaa>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a33      	ldr	r2, [pc, #204]	@ (8004e40 <TIM_Base_SetConfig+0x154>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00f      	beq.n	8004d96 <TIM_Base_SetConfig+0xaa>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a33      	ldr	r2, [pc, #204]	@ (8004e48 <TIM_Base_SetConfig+0x15c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00b      	beq.n	8004d96 <TIM_Base_SetConfig+0xaa>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a32      	ldr	r2, [pc, #200]	@ (8004e4c <TIM_Base_SetConfig+0x160>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d007      	beq.n	8004d96 <TIM_Base_SetConfig+0xaa>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a31      	ldr	r2, [pc, #196]	@ (8004e50 <TIM_Base_SetConfig+0x164>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d003      	beq.n	8004d96 <TIM_Base_SetConfig+0xaa>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2c      	ldr	r2, [pc, #176]	@ (8004e44 <TIM_Base_SetConfig+0x158>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d108      	bne.n	8004da8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a18      	ldr	r2, [pc, #96]	@ (8004e30 <TIM_Base_SetConfig+0x144>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <TIM_Base_SetConfig+0x110>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8004e40 <TIM_Base_SetConfig+0x154>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00f      	beq.n	8004dfc <TIM_Base_SetConfig+0x110>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a1a      	ldr	r2, [pc, #104]	@ (8004e48 <TIM_Base_SetConfig+0x15c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00b      	beq.n	8004dfc <TIM_Base_SetConfig+0x110>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a19      	ldr	r2, [pc, #100]	@ (8004e4c <TIM_Base_SetConfig+0x160>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <TIM_Base_SetConfig+0x110>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a18      	ldr	r2, [pc, #96]	@ (8004e50 <TIM_Base_SetConfig+0x164>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_Base_SetConfig+0x110>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a13      	ldr	r2, [pc, #76]	@ (8004e44 <TIM_Base_SetConfig+0x158>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d103      	bne.n	8004e04 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d105      	bne.n	8004e22 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f023 0201 	bic.w	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	611a      	str	r2, [r3, #16]
  }
}
 8004e22:	bf00      	nop
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40012c00 	.word	0x40012c00
 8004e34:	40000400 	.word	0x40000400
 8004e38:	40000800 	.word	0x40000800
 8004e3c:	40000c00 	.word	0x40000c00
 8004e40:	40013400 	.word	0x40013400
 8004e44:	40015000 	.word	0x40015000
 8004e48:	40014000 	.word	0x40014000
 8004e4c:	40014400 	.word	0x40014400
 8004e50:	40014800 	.word	0x40014800

08004e54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f023 0201 	bic.w	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0303 	bic.w	r3, r3, #3
 8004e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f023 0302 	bic.w	r3, r3, #2
 8004ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a30      	ldr	r2, [pc, #192]	@ (8004f70 <TIM_OC1_SetConfig+0x11c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d013      	beq.n	8004edc <TIM_OC1_SetConfig+0x88>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a2f      	ldr	r2, [pc, #188]	@ (8004f74 <TIM_OC1_SetConfig+0x120>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00f      	beq.n	8004edc <TIM_OC1_SetConfig+0x88>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a2e      	ldr	r2, [pc, #184]	@ (8004f78 <TIM_OC1_SetConfig+0x124>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00b      	beq.n	8004edc <TIM_OC1_SetConfig+0x88>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a2d      	ldr	r2, [pc, #180]	@ (8004f7c <TIM_OC1_SetConfig+0x128>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d007      	beq.n	8004edc <TIM_OC1_SetConfig+0x88>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a2c      	ldr	r2, [pc, #176]	@ (8004f80 <TIM_OC1_SetConfig+0x12c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_OC1_SetConfig+0x88>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a2b      	ldr	r2, [pc, #172]	@ (8004f84 <TIM_OC1_SetConfig+0x130>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d10c      	bne.n	8004ef6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0308 	bic.w	r3, r3, #8
 8004ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f023 0304 	bic.w	r3, r3, #4
 8004ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f70 <TIM_OC1_SetConfig+0x11c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d013      	beq.n	8004f26 <TIM_OC1_SetConfig+0xd2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a1c      	ldr	r2, [pc, #112]	@ (8004f74 <TIM_OC1_SetConfig+0x120>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00f      	beq.n	8004f26 <TIM_OC1_SetConfig+0xd2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a1b      	ldr	r2, [pc, #108]	@ (8004f78 <TIM_OC1_SetConfig+0x124>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00b      	beq.n	8004f26 <TIM_OC1_SetConfig+0xd2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a1a      	ldr	r2, [pc, #104]	@ (8004f7c <TIM_OC1_SetConfig+0x128>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d007      	beq.n	8004f26 <TIM_OC1_SetConfig+0xd2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a19      	ldr	r2, [pc, #100]	@ (8004f80 <TIM_OC1_SetConfig+0x12c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d003      	beq.n	8004f26 <TIM_OC1_SetConfig+0xd2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a18      	ldr	r2, [pc, #96]	@ (8004f84 <TIM_OC1_SetConfig+0x130>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d111      	bne.n	8004f4a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	621a      	str	r2, [r3, #32]
}
 8004f64:	bf00      	nop
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	40013400 	.word	0x40013400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800
 8004f84:	40015000 	.word	0x40015000

08004f88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	f023 0210 	bic.w	r2, r3, #16
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f023 0320 	bic.w	r3, r3, #32
 8004fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a2c      	ldr	r2, [pc, #176]	@ (8005098 <TIM_OC2_SetConfig+0x110>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d007      	beq.n	8004ffc <TIM_OC2_SetConfig+0x74>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a2b      	ldr	r2, [pc, #172]	@ (800509c <TIM_OC2_SetConfig+0x114>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_OC2_SetConfig+0x74>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80050a0 <TIM_OC2_SetConfig+0x118>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d10d      	bne.n	8005018 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005016:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a1f      	ldr	r2, [pc, #124]	@ (8005098 <TIM_OC2_SetConfig+0x110>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d013      	beq.n	8005048 <TIM_OC2_SetConfig+0xc0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a1e      	ldr	r2, [pc, #120]	@ (800509c <TIM_OC2_SetConfig+0x114>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00f      	beq.n	8005048 <TIM_OC2_SetConfig+0xc0>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a1e      	ldr	r2, [pc, #120]	@ (80050a4 <TIM_OC2_SetConfig+0x11c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d00b      	beq.n	8005048 <TIM_OC2_SetConfig+0xc0>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a1d      	ldr	r2, [pc, #116]	@ (80050a8 <TIM_OC2_SetConfig+0x120>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d007      	beq.n	8005048 <TIM_OC2_SetConfig+0xc0>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a1c      	ldr	r2, [pc, #112]	@ (80050ac <TIM_OC2_SetConfig+0x124>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d003      	beq.n	8005048 <TIM_OC2_SetConfig+0xc0>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a17      	ldr	r2, [pc, #92]	@ (80050a0 <TIM_OC2_SetConfig+0x118>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d113      	bne.n	8005070 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800504e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005056:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	621a      	str	r2, [r3, #32]
}
 800508a:	bf00      	nop
 800508c:	371c      	adds	r7, #28
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40013400 	.word	0x40013400
 80050a0:	40015000 	.word	0x40015000
 80050a4:	40014000 	.word	0x40014000
 80050a8:	40014400 	.word	0x40014400
 80050ac:	40014800 	.word	0x40014800

080050b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0303 	bic.w	r3, r3, #3
 80050ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a2b      	ldr	r2, [pc, #172]	@ (80051bc <TIM_OC3_SetConfig+0x10c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d007      	beq.n	8005122 <TIM_OC3_SetConfig+0x72>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a2a      	ldr	r2, [pc, #168]	@ (80051c0 <TIM_OC3_SetConfig+0x110>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d003      	beq.n	8005122 <TIM_OC3_SetConfig+0x72>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a29      	ldr	r2, [pc, #164]	@ (80051c4 <TIM_OC3_SetConfig+0x114>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d10d      	bne.n	800513e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800513c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a1e      	ldr	r2, [pc, #120]	@ (80051bc <TIM_OC3_SetConfig+0x10c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d013      	beq.n	800516e <TIM_OC3_SetConfig+0xbe>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1d      	ldr	r2, [pc, #116]	@ (80051c0 <TIM_OC3_SetConfig+0x110>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00f      	beq.n	800516e <TIM_OC3_SetConfig+0xbe>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a1d      	ldr	r2, [pc, #116]	@ (80051c8 <TIM_OC3_SetConfig+0x118>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00b      	beq.n	800516e <TIM_OC3_SetConfig+0xbe>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a1c      	ldr	r2, [pc, #112]	@ (80051cc <TIM_OC3_SetConfig+0x11c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d007      	beq.n	800516e <TIM_OC3_SetConfig+0xbe>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a1b      	ldr	r2, [pc, #108]	@ (80051d0 <TIM_OC3_SetConfig+0x120>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <TIM_OC3_SetConfig+0xbe>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a16      	ldr	r2, [pc, #88]	@ (80051c4 <TIM_OC3_SetConfig+0x114>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d113      	bne.n	8005196 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800517c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	621a      	str	r2, [r3, #32]
}
 80051b0:	bf00      	nop
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	40013400 	.word	0x40013400
 80051c4:	40015000 	.word	0x40015000
 80051c8:	40014000 	.word	0x40014000
 80051cc:	40014400 	.word	0x40014400
 80051d0:	40014800 	.word	0x40014800

080051d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800520e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	031b      	lsls	r3, r3, #12
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a2c      	ldr	r2, [pc, #176]	@ (80052e4 <TIM_OC4_SetConfig+0x110>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d007      	beq.n	8005248 <TIM_OC4_SetConfig+0x74>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a2b      	ldr	r2, [pc, #172]	@ (80052e8 <TIM_OC4_SetConfig+0x114>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC4_SetConfig+0x74>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a2a      	ldr	r2, [pc, #168]	@ (80052ec <TIM_OC4_SetConfig+0x118>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d10d      	bne.n	8005264 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800524e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	031b      	lsls	r3, r3, #12
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005262:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a1f      	ldr	r2, [pc, #124]	@ (80052e4 <TIM_OC4_SetConfig+0x110>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d013      	beq.n	8005294 <TIM_OC4_SetConfig+0xc0>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a1e      	ldr	r2, [pc, #120]	@ (80052e8 <TIM_OC4_SetConfig+0x114>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00f      	beq.n	8005294 <TIM_OC4_SetConfig+0xc0>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a1e      	ldr	r2, [pc, #120]	@ (80052f0 <TIM_OC4_SetConfig+0x11c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00b      	beq.n	8005294 <TIM_OC4_SetConfig+0xc0>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a1d      	ldr	r2, [pc, #116]	@ (80052f4 <TIM_OC4_SetConfig+0x120>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d007      	beq.n	8005294 <TIM_OC4_SetConfig+0xc0>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a1c      	ldr	r2, [pc, #112]	@ (80052f8 <TIM_OC4_SetConfig+0x124>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d003      	beq.n	8005294 <TIM_OC4_SetConfig+0xc0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a17      	ldr	r2, [pc, #92]	@ (80052ec <TIM_OC4_SetConfig+0x118>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d113      	bne.n	80052bc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800529a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80052a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	019b      	lsls	r3, r3, #6
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	019b      	lsls	r3, r3, #6
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	621a      	str	r2, [r3, #32]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40013400 	.word	0x40013400
 80052ec:	40015000 	.word	0x40015000
 80052f0:	40014000 	.word	0x40014000
 80052f4:	40014400 	.word	0x40014400
 80052f8:	40014800 	.word	0x40014800

080052fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800532a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005340:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	041b      	lsls	r3, r3, #16
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a19      	ldr	r2, [pc, #100]	@ (80053b8 <TIM_OC5_SetConfig+0xbc>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <TIM_OC5_SetConfig+0x82>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a18      	ldr	r2, [pc, #96]	@ (80053bc <TIM_OC5_SetConfig+0xc0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00f      	beq.n	800537e <TIM_OC5_SetConfig+0x82>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a17      	ldr	r2, [pc, #92]	@ (80053c0 <TIM_OC5_SetConfig+0xc4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00b      	beq.n	800537e <TIM_OC5_SetConfig+0x82>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a16      	ldr	r2, [pc, #88]	@ (80053c4 <TIM_OC5_SetConfig+0xc8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <TIM_OC5_SetConfig+0x82>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a15      	ldr	r2, [pc, #84]	@ (80053c8 <TIM_OC5_SetConfig+0xcc>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_OC5_SetConfig+0x82>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a14      	ldr	r2, [pc, #80]	@ (80053cc <TIM_OC5_SetConfig+0xd0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d109      	bne.n	8005392 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005384:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	621a      	str	r2, [r3, #32]
}
 80053ac:	bf00      	nop
 80053ae:	371c      	adds	r7, #28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	40012c00 	.word	0x40012c00
 80053bc:	40013400 	.word	0x40013400
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40014400 	.word	0x40014400
 80053c8:	40014800 	.word	0x40014800
 80053cc:	40015000 	.word	0x40015000

080053d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	051b      	lsls	r3, r3, #20
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a1a      	ldr	r2, [pc, #104]	@ (8005490 <TIM_OC6_SetConfig+0xc0>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d013      	beq.n	8005454 <TIM_OC6_SetConfig+0x84>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a19      	ldr	r2, [pc, #100]	@ (8005494 <TIM_OC6_SetConfig+0xc4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00f      	beq.n	8005454 <TIM_OC6_SetConfig+0x84>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a18      	ldr	r2, [pc, #96]	@ (8005498 <TIM_OC6_SetConfig+0xc8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00b      	beq.n	8005454 <TIM_OC6_SetConfig+0x84>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a17      	ldr	r2, [pc, #92]	@ (800549c <TIM_OC6_SetConfig+0xcc>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d007      	beq.n	8005454 <TIM_OC6_SetConfig+0x84>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a16      	ldr	r2, [pc, #88]	@ (80054a0 <TIM_OC6_SetConfig+0xd0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <TIM_OC6_SetConfig+0x84>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a15      	ldr	r2, [pc, #84]	@ (80054a4 <TIM_OC6_SetConfig+0xd4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d109      	bne.n	8005468 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800545a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	029b      	lsls	r3, r3, #10
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	621a      	str	r2, [r3, #32]
}
 8005482:	bf00      	nop
 8005484:	371c      	adds	r7, #28
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	40012c00 	.word	0x40012c00
 8005494:	40013400 	.word	0x40013400
 8005498:	40014000 	.word	0x40014000
 800549c:	40014400 	.word	0x40014400
 80054a0:	40014800 	.word	0x40014800
 80054a4:	40015000 	.word	0x40015000

080054a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	f023 0201 	bic.w	r2, r3, #1
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4a28      	ldr	r2, [pc, #160]	@ (8005574 <TIM_TI1_SetConfig+0xcc>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d01b      	beq.n	800550e <TIM_TI1_SetConfig+0x66>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054dc:	d017      	beq.n	800550e <TIM_TI1_SetConfig+0x66>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4a25      	ldr	r2, [pc, #148]	@ (8005578 <TIM_TI1_SetConfig+0xd0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d013      	beq.n	800550e <TIM_TI1_SetConfig+0x66>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4a24      	ldr	r2, [pc, #144]	@ (800557c <TIM_TI1_SetConfig+0xd4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00f      	beq.n	800550e <TIM_TI1_SetConfig+0x66>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4a23      	ldr	r2, [pc, #140]	@ (8005580 <TIM_TI1_SetConfig+0xd8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00b      	beq.n	800550e <TIM_TI1_SetConfig+0x66>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4a22      	ldr	r2, [pc, #136]	@ (8005584 <TIM_TI1_SetConfig+0xdc>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d007      	beq.n	800550e <TIM_TI1_SetConfig+0x66>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4a21      	ldr	r2, [pc, #132]	@ (8005588 <TIM_TI1_SetConfig+0xe0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d003      	beq.n	800550e <TIM_TI1_SetConfig+0x66>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4a20      	ldr	r2, [pc, #128]	@ (800558c <TIM_TI1_SetConfig+0xe4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d101      	bne.n	8005512 <TIM_TI1_SetConfig+0x6a>
 800550e:	2301      	movs	r3, #1
 8005510:	e000      	b.n	8005514 <TIM_TI1_SetConfig+0x6c>
 8005512:	2300      	movs	r3, #0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d008      	beq.n	800552a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f023 0303 	bic.w	r3, r3, #3
 800551e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e003      	b.n	8005532 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f043 0301 	orr.w	r3, r3, #1
 8005530:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005538:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	b2db      	uxtb	r3, r3
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f023 030a 	bic.w	r3, r3, #10
 800554c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f003 030a 	and.w	r3, r3, #10
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40012c00 	.word	0x40012c00
 8005578:	40000400 	.word	0x40000400
 800557c:	40000800 	.word	0x40000800
 8005580:	40000c00 	.word	0x40000c00
 8005584:	40013400 	.word	0x40013400
 8005588:	40014000 	.word	0x40014000
 800558c:	40015000 	.word	0x40015000

08005590 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 031f 	and.w	r3, r3, #31
 80055a2:	2201      	movs	r2, #1
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a1a      	ldr	r2, [r3, #32]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	43db      	mvns	r3, r3
 80055b2:	401a      	ands	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a1a      	ldr	r2, [r3, #32]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	fa01 f303 	lsl.w	r3, r1, r3
 80055c8:	431a      	orrs	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b08a      	sub	sp, #40	@ 0x28
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e0a0      	b.n	8005730 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fb fdbe 	bl	8001184 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3304      	adds	r3, #4
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f7ff fb66 	bl	8004cec <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	6819      	ldr	r1, [r3, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2203      	movs	r2, #3
 800562e:	f7ff ff3b 	bl	80054a8 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699a      	ldr	r2, [r3, #24]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 020c 	bic.w	r2, r2, #12
 8005640:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6999      	ldr	r1, [r3, #24]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005662:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6812      	ldr	r2, [r2, #0]
 800566e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005676:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005686:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005696:	f023 0307 	bic.w	r3, r3, #7
 800569a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0204 	orr.w	r2, r2, #4
 80056aa:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80056b0:	2300      	movs	r3, #0
 80056b2:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80056b4:	2370      	movs	r3, #112	@ 0x70
 80056b6:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80056b8:	2300      	movs	r3, #0
 80056ba:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80056bc:	2300      	movs	r3, #0
 80056be:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f107 020c 	add.w	r2, r7, #12
 80056d2:	4611      	mov	r1, r2
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff fc57 	bl	8004f88 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80056e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ec:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80056fc:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3728      	adds	r7, #40	@ 0x28
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d109      	bne.n	800575c <HAL_TIMEx_PWMN_Start+0x24>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	bf14      	ite	ne
 8005754:	2301      	movne	r3, #1
 8005756:	2300      	moveq	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	e022      	b.n	80057a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b04      	cmp	r3, #4
 8005760:	d109      	bne.n	8005776 <HAL_TIMEx_PWMN_Start+0x3e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b01      	cmp	r3, #1
 800576c:	bf14      	ite	ne
 800576e:	2301      	movne	r3, #1
 8005770:	2300      	moveq	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	e015      	b.n	80057a2 <HAL_TIMEx_PWMN_Start+0x6a>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b08      	cmp	r3, #8
 800577a:	d109      	bne.n	8005790 <HAL_TIMEx_PWMN_Start+0x58>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	bf14      	ite	ne
 8005788:	2301      	movne	r3, #1
 800578a:	2300      	moveq	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	e008      	b.n	80057a2 <HAL_TIMEx_PWMN_Start+0x6a>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b01      	cmp	r3, #1
 800579a:	bf14      	ite	ne
 800579c:	2301      	movne	r3, #1
 800579e:	2300      	moveq	r3, #0
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e073      	b.n	8005892 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <HAL_TIMEx_PWMN_Start+0x82>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057b8:	e013      	b.n	80057e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d104      	bne.n	80057ca <HAL_TIMEx_PWMN_Start+0x92>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057c8:	e00b      	b.n	80057e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d104      	bne.n	80057da <HAL_TIMEx_PWMN_Start+0xa2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057d8:	e003      	b.n	80057e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2202      	movs	r2, #2
 80057de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2204      	movs	r2, #4
 80057e8:	6839      	ldr	r1, [r7, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 f9d6 	bl	8005b9c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a25      	ldr	r2, [pc, #148]	@ (800589c <HAL_TIMEx_PWMN_Start+0x164>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d022      	beq.n	8005850 <HAL_TIMEx_PWMN_Start+0x118>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005812:	d01d      	beq.n	8005850 <HAL_TIMEx_PWMN_Start+0x118>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a21      	ldr	r2, [pc, #132]	@ (80058a0 <HAL_TIMEx_PWMN_Start+0x168>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d018      	beq.n	8005850 <HAL_TIMEx_PWMN_Start+0x118>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a20      	ldr	r2, [pc, #128]	@ (80058a4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d013      	beq.n	8005850 <HAL_TIMEx_PWMN_Start+0x118>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a1e      	ldr	r2, [pc, #120]	@ (80058a8 <HAL_TIMEx_PWMN_Start+0x170>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00e      	beq.n	8005850 <HAL_TIMEx_PWMN_Start+0x118>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a1d      	ldr	r2, [pc, #116]	@ (80058ac <HAL_TIMEx_PWMN_Start+0x174>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d009      	beq.n	8005850 <HAL_TIMEx_PWMN_Start+0x118>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1b      	ldr	r2, [pc, #108]	@ (80058b0 <HAL_TIMEx_PWMN_Start+0x178>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <HAL_TIMEx_PWMN_Start+0x118>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a1a      	ldr	r2, [pc, #104]	@ (80058b4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d115      	bne.n	800587c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	4b18      	ldr	r3, [pc, #96]	@ (80058b8 <HAL_TIMEx_PWMN_Start+0x180>)
 8005858:	4013      	ands	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b06      	cmp	r3, #6
 8005860:	d015      	beq.n	800588e <HAL_TIMEx_PWMN_Start+0x156>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005868:	d011      	beq.n	800588e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0201 	orr.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587a:	e008      	b.n	800588e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	e000      	b.n	8005890 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40012c00 	.word	0x40012c00
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800
 80058a8:	40000c00 	.word	0x40000c00
 80058ac:	40013400 	.word	0x40013400
 80058b0:	40014000 	.word	0x40014000
 80058b4:	40015000 	.word	0x40015000
 80058b8:	00010007 	.word	0x00010007

080058bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e074      	b.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a34      	ldr	r2, [pc, #208]	@ (80059cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d009      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a33      	ldr	r2, [pc, #204]	@ (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d004      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a31      	ldr	r2, [pc, #196]	@ (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d108      	bne.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005918:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800592a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a21      	ldr	r2, [pc, #132]	@ (80059cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d022      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005954:	d01d      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1f      	ldr	r2, [pc, #124]	@ (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d018      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a1d      	ldr	r2, [pc, #116]	@ (80059dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d013      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1c      	ldr	r2, [pc, #112]	@ (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00e      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a15      	ldr	r2, [pc, #84]	@ (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d009      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a18      	ldr	r2, [pc, #96]	@ (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d004      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a11      	ldr	r2, [pc, #68]	@ (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d10c      	bne.n	80059ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005998:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40012c00 	.word	0x40012c00
 80059d0:	40013400 	.word	0x40013400
 80059d4:	40015000 	.word	0x40015000
 80059d8:	40000400 	.word	0x40000400
 80059dc:	40000800 	.word	0x40000800
 80059e0:	40000c00 	.word	0x40000c00
 80059e4:	40014000 	.word	0x40014000

080059e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e078      	b.n	8005af6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	041b      	lsls	r3, r3, #16
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1c      	ldr	r2, [pc, #112]	@ (8005b04 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d009      	beq.n	8005aaa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005b08 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a19      	ldr	r2, [pc, #100]	@ (8005b0c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d11c      	bne.n	8005ae4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab4:	051b      	lsls	r3, r3, #20
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40012c00 	.word	0x40012c00
 8005b08:	40013400 	.word	0x40013400
 8005b0c:	40015000 	.word	0x40015000

08005b10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	2204      	movs	r2, #4
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1a      	ldr	r2, [r3, #32]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	401a      	ands	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a1a      	ldr	r2, [r3, #32]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	621a      	str	r2, [r3, #32]
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e042      	b.n	8005c7e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fb fc1c 	bl	8001448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2224      	movs	r2, #36	@ 0x24
 8005c14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0201 	bic.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 ff61 	bl	8006af8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fc62 	bl	8006500 <UART_SetConfig>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d101      	bne.n	8005c46 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e01b      	b.n	8005c7e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0201 	orr.w	r2, r2, #1
 8005c74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 ffe0 	bl	8006c3c <UART_CheckIdleState>
 8005c7c:	4603      	mov	r3, r0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b08a      	sub	sp, #40	@ 0x28
 8005c8a:	af02      	add	r7, sp, #8
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	603b      	str	r3, [r7, #0]
 8005c92:	4613      	mov	r3, r2
 8005c94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d17b      	bne.n	8005d98 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <HAL_UART_Transmit+0x26>
 8005ca6:	88fb      	ldrh	r3, [r7, #6]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e074      	b.n	8005d9a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2221      	movs	r2, #33	@ 0x21
 8005cbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cc0:	f7fb fe78 	bl	80019b4 <HAL_GetTick>
 8005cc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	88fa      	ldrh	r2, [r7, #6]
 8005cca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	88fa      	ldrh	r2, [r7, #6]
 8005cd2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cde:	d108      	bne.n	8005cf2 <HAL_UART_Transmit+0x6c>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	61bb      	str	r3, [r7, #24]
 8005cf0:	e003      	b.n	8005cfa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005cfa:	e030      	b.n	8005d5e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2200      	movs	r2, #0
 8005d04:	2180      	movs	r1, #128	@ 0x80
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f001 f842 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d005      	beq.n	8005d1e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e03d      	b.n	8005d9a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10b      	bne.n	8005d3c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d32:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	3302      	adds	r3, #2
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	e007      	b.n	8005d4c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	781a      	ldrb	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1c8      	bne.n	8005cfc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2200      	movs	r2, #0
 8005d72:	2140      	movs	r1, #64	@ 0x40
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f001 f80b 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e006      	b.n	8005d9a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	e000      	b.n	8005d9a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005d98:	2302      	movs	r3, #2
  }
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3720      	adds	r7, #32
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08a      	sub	sp, #40	@ 0x28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	4613      	mov	r3, r2
 8005db0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005db8:	2b20      	cmp	r3, #32
 8005dba:	d137      	bne.n	8005e2c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <HAL_UART_Receive_IT+0x24>
 8005dc2:	88fb      	ldrh	r3, [r7, #6]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e030      	b.n	8005e2e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a18      	ldr	r2, [pc, #96]	@ (8005e38 <HAL_UART_Receive_IT+0x94>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d01f      	beq.n	8005e1c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d018      	beq.n	8005e1c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	e853 3f00 	ldrex	r3, [r3]
 8005df6:	613b      	str	r3, [r7, #16]
   return(result);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e08:	623b      	str	r3, [r7, #32]
 8005e0a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	69f9      	ldr	r1, [r7, #28]
 8005e0e:	6a3a      	ldr	r2, [r7, #32]
 8005e10:	e841 2300 	strex	r3, r2, [r1]
 8005e14:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e6      	bne.n	8005dea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e1c:	88fb      	ldrh	r3, [r7, #6]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f001 f822 	bl	8006e6c <UART_Start_Receive_IT>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	e000      	b.n	8005e2e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e2c:	2302      	movs	r3, #2
  }
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3728      	adds	r7, #40	@ 0x28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40008000 	.word	0x40008000

08005e3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b0ba      	sub	sp, #232	@ 0xe8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005e66:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005e70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d11b      	bne.n	8005eb0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d015      	beq.n	8005eb0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d105      	bne.n	8005e9c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d009      	beq.n	8005eb0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 8300 	beq.w	80064a6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	4798      	blx	r3
      }
      return;
 8005eae:	e2fa      	b.n	80064a6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005eb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 8123 	beq.w	8006100 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005eba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005ebe:	4b8d      	ldr	r3, [pc, #564]	@ (80060f4 <HAL_UART_IRQHandler+0x2b8>)
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005ec6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005eca:	4b8b      	ldr	r3, [pc, #556]	@ (80060f8 <HAL_UART_IRQHandler+0x2bc>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 8116 	beq.w	8006100 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d011      	beq.n	8005f04 <HAL_UART_IRQHandler+0xc8>
 8005ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00b      	beq.n	8005f04 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005efa:	f043 0201 	orr.w	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d011      	beq.n	8005f34 <HAL_UART_IRQHandler+0xf8>
 8005f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00b      	beq.n	8005f34 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2202      	movs	r2, #2
 8005f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f2a:	f043 0204 	orr.w	r2, r3, #4
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d011      	beq.n	8005f64 <HAL_UART_IRQHandler+0x128>
 8005f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00b      	beq.n	8005f64 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2204      	movs	r2, #4
 8005f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f5a:	f043 0202 	orr.w	r2, r3, #2
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d017      	beq.n	8005fa0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f74:	f003 0320 	and.w	r3, r3, #32
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d105      	bne.n	8005f88 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005f80:	4b5c      	ldr	r3, [pc, #368]	@ (80060f4 <HAL_UART_IRQHandler+0x2b8>)
 8005f82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00b      	beq.n	8005fa0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2208      	movs	r2, #8
 8005f8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f96:	f043 0208 	orr.w	r2, r3, #8
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d012      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x196>
 8005fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00c      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc8:	f043 0220 	orr.w	r2, r3, #32
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 8266 	beq.w	80064aa <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fe2:	f003 0320 	and.w	r3, r3, #32
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d013      	beq.n	8006012 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d105      	bne.n	8006002 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d007      	beq.n	8006012 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006018:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006026:	2b40      	cmp	r3, #64	@ 0x40
 8006028:	d005      	beq.n	8006036 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800602a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800602e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006032:	2b00      	cmp	r3, #0
 8006034:	d054      	beq.n	80060e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f001 f83a 	bl	80070b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006046:	2b40      	cmp	r3, #64	@ 0x40
 8006048:	d146      	bne.n	80060d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3308      	adds	r3, #8
 8006050:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006060:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006064:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006068:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3308      	adds	r3, #8
 8006072:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006076:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800607a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006082:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800608e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1d9      	bne.n	800604a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800609c:	2b00      	cmp	r3, #0
 800609e:	d017      	beq.n	80060d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060a6:	4a15      	ldr	r2, [pc, #84]	@ (80060fc <HAL_UART_IRQHandler+0x2c0>)
 80060a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fc fec4 	bl	8002e3e <HAL_DMA_Abort_IT>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d019      	beq.n	80060f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80060ca:	4610      	mov	r0, r2
 80060cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ce:	e00f      	b.n	80060f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f9ff 	bl	80064d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d6:	e00b      	b.n	80060f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f9fb 	bl	80064d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060de:	e007      	b.n	80060f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f9f7 	bl	80064d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80060ee:	e1dc      	b.n	80064aa <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f0:	bf00      	nop
    return;
 80060f2:	e1da      	b.n	80064aa <HAL_UART_IRQHandler+0x66e>
 80060f4:	10000001 	.word	0x10000001
 80060f8:	04000120 	.word	0x04000120
 80060fc:	0800717d 	.word	0x0800717d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006104:	2b01      	cmp	r3, #1
 8006106:	f040 8170 	bne.w	80063ea <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800610a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 8169 	beq.w	80063ea <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 8162 	beq.w	80063ea <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2210      	movs	r2, #16
 800612c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006138:	2b40      	cmp	r3, #64	@ 0x40
 800613a:	f040 80d8 	bne.w	80062ee <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800614c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80af 	beq.w	80062b4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800615c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006160:	429a      	cmp	r2, r3
 8006162:	f080 80a7 	bcs.w	80062b4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800616c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	f040 8087 	bne.w	8006292 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006198:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800619c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80061c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1da      	bne.n	8006184 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3308      	adds	r3, #8
 80061d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80061de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061e0:	f023 0301 	bic.w	r3, r3, #1
 80061e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3308      	adds	r3, #8
 80061ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80061f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006204:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e1      	bne.n	80061ce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800621a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800621c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006220:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3308      	adds	r3, #8
 800622a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800622e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006230:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006234:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800623c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e3      	bne.n	800620a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800625e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006260:	f023 0310 	bic.w	r3, r3, #16
 8006264:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006272:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006274:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006278:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e4      	bne.n	8006250 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800628c:	4618      	mov	r0, r3
 800628e:	f7fc fd7d 	bl	8002d8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f91b 	bl	80064e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80062b2:	e0fc      	b.n	80064ae <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062be:	429a      	cmp	r2, r3
 80062c0:	f040 80f5 	bne.w	80064ae <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	f040 80eb 	bne.w	80064ae <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f8fe 	bl	80064e8 <HAL_UARTEx_RxEventCallback>
      return;
 80062ec:	e0df      	b.n	80064ae <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 80d1 	beq.w	80064b2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 80cc 	beq.w	80064b2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006322:	e853 3f00 	ldrex	r3, [r3]
 8006326:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800632a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800632e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800633c:	647b      	str	r3, [r7, #68]	@ 0x44
 800633e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006342:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800634a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e4      	bne.n	800631a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3308      	adds	r3, #8
 8006356:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	623b      	str	r3, [r7, #32]
   return(result);
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3308      	adds	r3, #8
 8006374:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006378:	633a      	str	r2, [r7, #48]	@ 0x30
 800637a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800637e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006380:	e841 2300 	strex	r3, r2, [r1]
 8006384:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e1      	bne.n	8006350 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2220      	movs	r2, #32
 8006390:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f023 0310 	bic.w	r3, r3, #16
 80063b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	69b9      	ldr	r1, [r7, #24]
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	617b      	str	r3, [r7, #20]
   return(result);
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e4      	bne.n	80063a0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2202      	movs	r2, #2
 80063da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f880 	bl	80064e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063e8:	e063      	b.n	80064b2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00e      	beq.n	8006414 <HAL_UART_IRQHandler+0x5d8>
 80063f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d008      	beq.n	8006414 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800640a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f001 fc13 	bl	8007c38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006412:	e051      	b.n	80064b8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800641c:	2b00      	cmp	r3, #0
 800641e:	d014      	beq.n	800644a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006428:	2b00      	cmp	r3, #0
 800642a:	d105      	bne.n	8006438 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800642c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006430:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800643c:	2b00      	cmp	r3, #0
 800643e:	d03a      	beq.n	80064b6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	4798      	blx	r3
    }
    return;
 8006448:	e035      	b.n	80064b6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800644a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800644e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006452:	2b00      	cmp	r3, #0
 8006454:	d009      	beq.n	800646a <HAL_UART_IRQHandler+0x62e>
 8006456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800645a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fe9c 	bl	80071a0 <UART_EndTransmit_IT>
    return;
 8006468:	e026      	b.n	80064b8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800646a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800646e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d009      	beq.n	800648a <HAL_UART_IRQHandler+0x64e>
 8006476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800647a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 fbec 	bl	8007c60 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006488:	e016      	b.n	80064b8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800648a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800648e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d010      	beq.n	80064b8 <HAL_UART_IRQHandler+0x67c>
 8006496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800649a:	2b00      	cmp	r3, #0
 800649c:	da0c      	bge.n	80064b8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fbd4 	bl	8007c4c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064a4:	e008      	b.n	80064b8 <HAL_UART_IRQHandler+0x67c>
      return;
 80064a6:	bf00      	nop
 80064a8:	e006      	b.n	80064b8 <HAL_UART_IRQHandler+0x67c>
    return;
 80064aa:	bf00      	nop
 80064ac:	e004      	b.n	80064b8 <HAL_UART_IRQHandler+0x67c>
      return;
 80064ae:	bf00      	nop
 80064b0:	e002      	b.n	80064b8 <HAL_UART_IRQHandler+0x67c>
      return;
 80064b2:	bf00      	nop
 80064b4:	e000      	b.n	80064b8 <HAL_UART_IRQHandler+0x67c>
    return;
 80064b6:	bf00      	nop
  }
}
 80064b8:	37e8      	adds	r7, #232	@ 0xe8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop

080064c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	460b      	mov	r3, r1
 80064f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006504:	b08c      	sub	sp, #48	@ 0x30
 8006506:	af00      	add	r7, sp, #0
 8006508:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	431a      	orrs	r2, r3
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	431a      	orrs	r2, r3
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	4313      	orrs	r3, r2
 8006526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4baa      	ldr	r3, [pc, #680]	@ (80067d8 <UART_SetConfig+0x2d8>)
 8006530:	4013      	ands	r3, r2
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006538:	430b      	orrs	r3, r1
 800653a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a9f      	ldr	r2, [pc, #636]	@ (80067dc <UART_SetConfig+0x2dc>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d004      	beq.n	800656c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006568:	4313      	orrs	r3, r2
 800656a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006576:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	6812      	ldr	r2, [r2, #0]
 800657e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006580:	430b      	orrs	r3, r1
 8006582:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658a:	f023 010f 	bic.w	r1, r3, #15
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a90      	ldr	r2, [pc, #576]	@ (80067e0 <UART_SetConfig+0x2e0>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d125      	bne.n	80065f0 <UART_SetConfig+0xf0>
 80065a4:	4b8f      	ldr	r3, [pc, #572]	@ (80067e4 <UART_SetConfig+0x2e4>)
 80065a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d81a      	bhi.n	80065e8 <UART_SetConfig+0xe8>
 80065b2:	a201      	add	r2, pc, #4	@ (adr r2, 80065b8 <UART_SetConfig+0xb8>)
 80065b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b8:	080065c9 	.word	0x080065c9
 80065bc:	080065d9 	.word	0x080065d9
 80065c0:	080065d1 	.word	0x080065d1
 80065c4:	080065e1 	.word	0x080065e1
 80065c8:	2301      	movs	r3, #1
 80065ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ce:	e116      	b.n	80067fe <UART_SetConfig+0x2fe>
 80065d0:	2302      	movs	r3, #2
 80065d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065d6:	e112      	b.n	80067fe <UART_SetConfig+0x2fe>
 80065d8:	2304      	movs	r3, #4
 80065da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065de:	e10e      	b.n	80067fe <UART_SetConfig+0x2fe>
 80065e0:	2308      	movs	r3, #8
 80065e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065e6:	e10a      	b.n	80067fe <UART_SetConfig+0x2fe>
 80065e8:	2310      	movs	r3, #16
 80065ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ee:	e106      	b.n	80067fe <UART_SetConfig+0x2fe>
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a7c      	ldr	r2, [pc, #496]	@ (80067e8 <UART_SetConfig+0x2e8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d138      	bne.n	800666c <UART_SetConfig+0x16c>
 80065fa:	4b7a      	ldr	r3, [pc, #488]	@ (80067e4 <UART_SetConfig+0x2e4>)
 80065fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006600:	f003 030c 	and.w	r3, r3, #12
 8006604:	2b0c      	cmp	r3, #12
 8006606:	d82d      	bhi.n	8006664 <UART_SetConfig+0x164>
 8006608:	a201      	add	r2, pc, #4	@ (adr r2, 8006610 <UART_SetConfig+0x110>)
 800660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660e:	bf00      	nop
 8006610:	08006645 	.word	0x08006645
 8006614:	08006665 	.word	0x08006665
 8006618:	08006665 	.word	0x08006665
 800661c:	08006665 	.word	0x08006665
 8006620:	08006655 	.word	0x08006655
 8006624:	08006665 	.word	0x08006665
 8006628:	08006665 	.word	0x08006665
 800662c:	08006665 	.word	0x08006665
 8006630:	0800664d 	.word	0x0800664d
 8006634:	08006665 	.word	0x08006665
 8006638:	08006665 	.word	0x08006665
 800663c:	08006665 	.word	0x08006665
 8006640:	0800665d 	.word	0x0800665d
 8006644:	2300      	movs	r3, #0
 8006646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800664a:	e0d8      	b.n	80067fe <UART_SetConfig+0x2fe>
 800664c:	2302      	movs	r3, #2
 800664e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006652:	e0d4      	b.n	80067fe <UART_SetConfig+0x2fe>
 8006654:	2304      	movs	r3, #4
 8006656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800665a:	e0d0      	b.n	80067fe <UART_SetConfig+0x2fe>
 800665c:	2308      	movs	r3, #8
 800665e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006662:	e0cc      	b.n	80067fe <UART_SetConfig+0x2fe>
 8006664:	2310      	movs	r3, #16
 8006666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800666a:	e0c8      	b.n	80067fe <UART_SetConfig+0x2fe>
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a5e      	ldr	r2, [pc, #376]	@ (80067ec <UART_SetConfig+0x2ec>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d125      	bne.n	80066c2 <UART_SetConfig+0x1c2>
 8006676:	4b5b      	ldr	r3, [pc, #364]	@ (80067e4 <UART_SetConfig+0x2e4>)
 8006678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800667c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006680:	2b30      	cmp	r3, #48	@ 0x30
 8006682:	d016      	beq.n	80066b2 <UART_SetConfig+0x1b2>
 8006684:	2b30      	cmp	r3, #48	@ 0x30
 8006686:	d818      	bhi.n	80066ba <UART_SetConfig+0x1ba>
 8006688:	2b20      	cmp	r3, #32
 800668a:	d00a      	beq.n	80066a2 <UART_SetConfig+0x1a2>
 800668c:	2b20      	cmp	r3, #32
 800668e:	d814      	bhi.n	80066ba <UART_SetConfig+0x1ba>
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <UART_SetConfig+0x19a>
 8006694:	2b10      	cmp	r3, #16
 8006696:	d008      	beq.n	80066aa <UART_SetConfig+0x1aa>
 8006698:	e00f      	b.n	80066ba <UART_SetConfig+0x1ba>
 800669a:	2300      	movs	r3, #0
 800669c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066a0:	e0ad      	b.n	80067fe <UART_SetConfig+0x2fe>
 80066a2:	2302      	movs	r3, #2
 80066a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066a8:	e0a9      	b.n	80067fe <UART_SetConfig+0x2fe>
 80066aa:	2304      	movs	r3, #4
 80066ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b0:	e0a5      	b.n	80067fe <UART_SetConfig+0x2fe>
 80066b2:	2308      	movs	r3, #8
 80066b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b8:	e0a1      	b.n	80067fe <UART_SetConfig+0x2fe>
 80066ba:	2310      	movs	r3, #16
 80066bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c0:	e09d      	b.n	80067fe <UART_SetConfig+0x2fe>
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a4a      	ldr	r2, [pc, #296]	@ (80067f0 <UART_SetConfig+0x2f0>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d125      	bne.n	8006718 <UART_SetConfig+0x218>
 80066cc:	4b45      	ldr	r3, [pc, #276]	@ (80067e4 <UART_SetConfig+0x2e4>)
 80066ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80066d8:	d016      	beq.n	8006708 <UART_SetConfig+0x208>
 80066da:	2bc0      	cmp	r3, #192	@ 0xc0
 80066dc:	d818      	bhi.n	8006710 <UART_SetConfig+0x210>
 80066de:	2b80      	cmp	r3, #128	@ 0x80
 80066e0:	d00a      	beq.n	80066f8 <UART_SetConfig+0x1f8>
 80066e2:	2b80      	cmp	r3, #128	@ 0x80
 80066e4:	d814      	bhi.n	8006710 <UART_SetConfig+0x210>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <UART_SetConfig+0x1f0>
 80066ea:	2b40      	cmp	r3, #64	@ 0x40
 80066ec:	d008      	beq.n	8006700 <UART_SetConfig+0x200>
 80066ee:	e00f      	b.n	8006710 <UART_SetConfig+0x210>
 80066f0:	2300      	movs	r3, #0
 80066f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066f6:	e082      	b.n	80067fe <UART_SetConfig+0x2fe>
 80066f8:	2302      	movs	r3, #2
 80066fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066fe:	e07e      	b.n	80067fe <UART_SetConfig+0x2fe>
 8006700:	2304      	movs	r3, #4
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006706:	e07a      	b.n	80067fe <UART_SetConfig+0x2fe>
 8006708:	2308      	movs	r3, #8
 800670a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800670e:	e076      	b.n	80067fe <UART_SetConfig+0x2fe>
 8006710:	2310      	movs	r3, #16
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006716:	e072      	b.n	80067fe <UART_SetConfig+0x2fe>
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a35      	ldr	r2, [pc, #212]	@ (80067f4 <UART_SetConfig+0x2f4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d12a      	bne.n	8006778 <UART_SetConfig+0x278>
 8006722:	4b30      	ldr	r3, [pc, #192]	@ (80067e4 <UART_SetConfig+0x2e4>)
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006728:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800672c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006730:	d01a      	beq.n	8006768 <UART_SetConfig+0x268>
 8006732:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006736:	d81b      	bhi.n	8006770 <UART_SetConfig+0x270>
 8006738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800673c:	d00c      	beq.n	8006758 <UART_SetConfig+0x258>
 800673e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006742:	d815      	bhi.n	8006770 <UART_SetConfig+0x270>
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <UART_SetConfig+0x250>
 8006748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800674c:	d008      	beq.n	8006760 <UART_SetConfig+0x260>
 800674e:	e00f      	b.n	8006770 <UART_SetConfig+0x270>
 8006750:	2300      	movs	r3, #0
 8006752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006756:	e052      	b.n	80067fe <UART_SetConfig+0x2fe>
 8006758:	2302      	movs	r3, #2
 800675a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800675e:	e04e      	b.n	80067fe <UART_SetConfig+0x2fe>
 8006760:	2304      	movs	r3, #4
 8006762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006766:	e04a      	b.n	80067fe <UART_SetConfig+0x2fe>
 8006768:	2308      	movs	r3, #8
 800676a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800676e:	e046      	b.n	80067fe <UART_SetConfig+0x2fe>
 8006770:	2310      	movs	r3, #16
 8006772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006776:	e042      	b.n	80067fe <UART_SetConfig+0x2fe>
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a17      	ldr	r2, [pc, #92]	@ (80067dc <UART_SetConfig+0x2dc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d13a      	bne.n	80067f8 <UART_SetConfig+0x2f8>
 8006782:	4b18      	ldr	r3, [pc, #96]	@ (80067e4 <UART_SetConfig+0x2e4>)
 8006784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006788:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800678c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006790:	d01a      	beq.n	80067c8 <UART_SetConfig+0x2c8>
 8006792:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006796:	d81b      	bhi.n	80067d0 <UART_SetConfig+0x2d0>
 8006798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800679c:	d00c      	beq.n	80067b8 <UART_SetConfig+0x2b8>
 800679e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067a2:	d815      	bhi.n	80067d0 <UART_SetConfig+0x2d0>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <UART_SetConfig+0x2b0>
 80067a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ac:	d008      	beq.n	80067c0 <UART_SetConfig+0x2c0>
 80067ae:	e00f      	b.n	80067d0 <UART_SetConfig+0x2d0>
 80067b0:	2300      	movs	r3, #0
 80067b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067b6:	e022      	b.n	80067fe <UART_SetConfig+0x2fe>
 80067b8:	2302      	movs	r3, #2
 80067ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067be:	e01e      	b.n	80067fe <UART_SetConfig+0x2fe>
 80067c0:	2304      	movs	r3, #4
 80067c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c6:	e01a      	b.n	80067fe <UART_SetConfig+0x2fe>
 80067c8:	2308      	movs	r3, #8
 80067ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ce:	e016      	b.n	80067fe <UART_SetConfig+0x2fe>
 80067d0:	2310      	movs	r3, #16
 80067d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067d6:	e012      	b.n	80067fe <UART_SetConfig+0x2fe>
 80067d8:	cfff69f3 	.word	0xcfff69f3
 80067dc:	40008000 	.word	0x40008000
 80067e0:	40013800 	.word	0x40013800
 80067e4:	40021000 	.word	0x40021000
 80067e8:	40004400 	.word	0x40004400
 80067ec:	40004800 	.word	0x40004800
 80067f0:	40004c00 	.word	0x40004c00
 80067f4:	40005000 	.word	0x40005000
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4aae      	ldr	r2, [pc, #696]	@ (8006abc <UART_SetConfig+0x5bc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	f040 8097 	bne.w	8006938 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800680a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800680e:	2b08      	cmp	r3, #8
 8006810:	d823      	bhi.n	800685a <UART_SetConfig+0x35a>
 8006812:	a201      	add	r2, pc, #4	@ (adr r2, 8006818 <UART_SetConfig+0x318>)
 8006814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006818:	0800683d 	.word	0x0800683d
 800681c:	0800685b 	.word	0x0800685b
 8006820:	08006845 	.word	0x08006845
 8006824:	0800685b 	.word	0x0800685b
 8006828:	0800684b 	.word	0x0800684b
 800682c:	0800685b 	.word	0x0800685b
 8006830:	0800685b 	.word	0x0800685b
 8006834:	0800685b 	.word	0x0800685b
 8006838:	08006853 	.word	0x08006853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800683c:	f7fd fa94 	bl	8003d68 <HAL_RCC_GetPCLK1Freq>
 8006840:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006842:	e010      	b.n	8006866 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006844:	4b9e      	ldr	r3, [pc, #632]	@ (8006ac0 <UART_SetConfig+0x5c0>)
 8006846:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006848:	e00d      	b.n	8006866 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800684a:	f7fd fa1f 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 800684e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006850:	e009      	b.n	8006866 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006858:	e005      	b.n	8006866 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006864:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 8130 	beq.w	8006ace <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006872:	4a94      	ldr	r2, [pc, #592]	@ (8006ac4 <UART_SetConfig+0x5c4>)
 8006874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006878:	461a      	mov	r2, r3
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006880:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	4413      	add	r3, r2
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	429a      	cmp	r2, r3
 8006890:	d305      	bcc.n	800689e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	429a      	cmp	r2, r3
 800689c:	d903      	bls.n	80068a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80068a4:	e113      	b.n	8006ace <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	2200      	movs	r2, #0
 80068aa:	60bb      	str	r3, [r7, #8]
 80068ac:	60fa      	str	r2, [r7, #12]
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b2:	4a84      	ldr	r2, [pc, #528]	@ (8006ac4 <UART_SetConfig+0x5c4>)
 80068b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2200      	movs	r2, #0
 80068bc:	603b      	str	r3, [r7, #0]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068c8:	f7f9 fd12 	bl	80002f0 <__aeabi_uldivmod>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4610      	mov	r0, r2
 80068d2:	4619      	mov	r1, r3
 80068d4:	f04f 0200 	mov.w	r2, #0
 80068d8:	f04f 0300 	mov.w	r3, #0
 80068dc:	020b      	lsls	r3, r1, #8
 80068de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068e2:	0202      	lsls	r2, r0, #8
 80068e4:	6979      	ldr	r1, [r7, #20]
 80068e6:	6849      	ldr	r1, [r1, #4]
 80068e8:	0849      	lsrs	r1, r1, #1
 80068ea:	2000      	movs	r0, #0
 80068ec:	460c      	mov	r4, r1
 80068ee:	4605      	mov	r5, r0
 80068f0:	eb12 0804 	adds.w	r8, r2, r4
 80068f4:	eb43 0905 	adc.w	r9, r3, r5
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	469a      	mov	sl, r3
 8006900:	4693      	mov	fp, r2
 8006902:	4652      	mov	r2, sl
 8006904:	465b      	mov	r3, fp
 8006906:	4640      	mov	r0, r8
 8006908:	4649      	mov	r1, r9
 800690a:	f7f9 fcf1 	bl	80002f0 <__aeabi_uldivmod>
 800690e:	4602      	mov	r2, r0
 8006910:	460b      	mov	r3, r1
 8006912:	4613      	mov	r3, r2
 8006914:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800691c:	d308      	bcc.n	8006930 <UART_SetConfig+0x430>
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006924:	d204      	bcs.n	8006930 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6a3a      	ldr	r2, [r7, #32]
 800692c:	60da      	str	r2, [r3, #12]
 800692e:	e0ce      	b.n	8006ace <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006936:	e0ca      	b.n	8006ace <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006940:	d166      	bne.n	8006a10 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006942:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006946:	2b08      	cmp	r3, #8
 8006948:	d827      	bhi.n	800699a <UART_SetConfig+0x49a>
 800694a:	a201      	add	r2, pc, #4	@ (adr r2, 8006950 <UART_SetConfig+0x450>)
 800694c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006950:	08006975 	.word	0x08006975
 8006954:	0800697d 	.word	0x0800697d
 8006958:	08006985 	.word	0x08006985
 800695c:	0800699b 	.word	0x0800699b
 8006960:	0800698b 	.word	0x0800698b
 8006964:	0800699b 	.word	0x0800699b
 8006968:	0800699b 	.word	0x0800699b
 800696c:	0800699b 	.word	0x0800699b
 8006970:	08006993 	.word	0x08006993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006974:	f7fd f9f8 	bl	8003d68 <HAL_RCC_GetPCLK1Freq>
 8006978:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800697a:	e014      	b.n	80069a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800697c:	f7fd fa0a 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8006980:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006982:	e010      	b.n	80069a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006984:	4b4e      	ldr	r3, [pc, #312]	@ (8006ac0 <UART_SetConfig+0x5c0>)
 8006986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006988:	e00d      	b.n	80069a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800698a:	f7fd f97f 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 800698e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006990:	e009      	b.n	80069a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006996:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006998:	e005      	b.n	80069a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80069a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 8090 	beq.w	8006ace <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b2:	4a44      	ldr	r2, [pc, #272]	@ (8006ac4 <UART_SetConfig+0x5c4>)
 80069b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b8:	461a      	mov	r2, r3
 80069ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80069c0:	005a      	lsls	r2, r3, #1
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	085b      	lsrs	r3, r3, #1
 80069c8:	441a      	add	r2, r3
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	2b0f      	cmp	r3, #15
 80069d8:	d916      	bls.n	8006a08 <UART_SetConfig+0x508>
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069e0:	d212      	bcs.n	8006a08 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f023 030f 	bic.w	r3, r3, #15
 80069ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	085b      	lsrs	r3, r3, #1
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	8bfb      	ldrh	r3, [r7, #30]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	8bfa      	ldrh	r2, [r7, #30]
 8006a04:	60da      	str	r2, [r3, #12]
 8006a06:	e062      	b.n	8006ace <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a0e:	e05e      	b.n	8006ace <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d828      	bhi.n	8006a6a <UART_SetConfig+0x56a>
 8006a18:	a201      	add	r2, pc, #4	@ (adr r2, 8006a20 <UART_SetConfig+0x520>)
 8006a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1e:	bf00      	nop
 8006a20:	08006a45 	.word	0x08006a45
 8006a24:	08006a4d 	.word	0x08006a4d
 8006a28:	08006a55 	.word	0x08006a55
 8006a2c:	08006a6b 	.word	0x08006a6b
 8006a30:	08006a5b 	.word	0x08006a5b
 8006a34:	08006a6b 	.word	0x08006a6b
 8006a38:	08006a6b 	.word	0x08006a6b
 8006a3c:	08006a6b 	.word	0x08006a6b
 8006a40:	08006a63 	.word	0x08006a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a44:	f7fd f990 	bl	8003d68 <HAL_RCC_GetPCLK1Freq>
 8006a48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a4a:	e014      	b.n	8006a76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a4c:	f7fd f9a2 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8006a50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a52:	e010      	b.n	8006a76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a54:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac0 <UART_SetConfig+0x5c0>)
 8006a56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a58:	e00d      	b.n	8006a76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a5a:	f7fd f917 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 8006a5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a60:	e009      	b.n	8006a76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a68:	e005      	b.n	8006a76 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a74:	bf00      	nop
    }

    if (pclk != 0U)
 8006a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d028      	beq.n	8006ace <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a80:	4a10      	ldr	r2, [pc, #64]	@ (8006ac4 <UART_SetConfig+0x5c4>)
 8006a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a86:	461a      	mov	r2, r3
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	085b      	lsrs	r3, r3, #1
 8006a94:	441a      	add	r2, r3
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	2b0f      	cmp	r3, #15
 8006aa4:	d910      	bls.n	8006ac8 <UART_SetConfig+0x5c8>
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aac:	d20c      	bcs.n	8006ac8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60da      	str	r2, [r3, #12]
 8006ab8:	e009      	b.n	8006ace <UART_SetConfig+0x5ce>
 8006aba:	bf00      	nop
 8006abc:	40008000 	.word	0x40008000
 8006ac0:	00f42400 	.word	0x00f42400
 8006ac4:	08009488 	.word	0x08009488
      }
      else
      {
        ret = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006aea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3730      	adds	r7, #48	@ 0x30
 8006af2:	46bd      	mov	sp, r7
 8006af4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b04:	f003 0308 	and.w	r3, r3, #8
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00a      	beq.n	8006b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00a      	beq.n	8006b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b48:	f003 0302 	and.w	r3, r3, #2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00a      	beq.n	8006b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00a      	beq.n	8006b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00a      	beq.n	8006baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01a      	beq.n	8006c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bf6:	d10a      	bne.n	8006c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	605a      	str	r2, [r3, #4]
  }
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b098      	sub	sp, #96	@ 0x60
 8006c40:	af02      	add	r7, sp, #8
 8006c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c4c:	f7fa feb2 	bl	80019b4 <HAL_GetTick>
 8006c50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d12f      	bne.n	8006cc0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f88e 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d022      	beq.n	8006cc0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e6      	bne.n	8006c7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e063      	b.n	8006d88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d149      	bne.n	8006d62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f857 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d03c      	beq.n	8006d62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	623b      	str	r3, [r7, #32]
   return(result);
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d06:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e6      	bne.n	8006ce8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3308      	adds	r3, #8
 8006d20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	e853 3f00 	ldrex	r3, [r3]
 8006d28:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f023 0301 	bic.w	r3, r3, #1
 8006d30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3308      	adds	r3, #8
 8006d38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d3a:	61fa      	str	r2, [r7, #28]
 8006d3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3e:	69b9      	ldr	r1, [r7, #24]
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	617b      	str	r3, [r7, #20]
   return(result);
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1e5      	bne.n	8006d1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e012      	b.n	8006d88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3758      	adds	r7, #88	@ 0x58
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da0:	e04f      	b.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006da8:	d04b      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006daa:	f7fa fe03 	bl	80019b4 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d302      	bcc.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e04e      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d037      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b80      	cmp	r3, #128	@ 0x80
 8006dd6:	d034      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b40      	cmp	r3, #64	@ 0x40
 8006ddc:	d031      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d110      	bne.n	8006e0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2208      	movs	r2, #8
 8006df2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 f95b 	bl	80070b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e029      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e1c:	d111      	bne.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 f941 	bl	80070b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e00f      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69da      	ldr	r2, [r3, #28]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	bf0c      	ite	eq
 8006e52:	2301      	moveq	r3, #1
 8006e54:	2300      	movne	r3, #0
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d0a0      	beq.n	8006da2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b0a3      	sub	sp, #140	@ 0x8c
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	4613      	mov	r3, r2
 8006e78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	88fa      	ldrh	r2, [r7, #6]
 8006e84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	88fa      	ldrh	r2, [r7, #6]
 8006e8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e9e:	d10e      	bne.n	8006ebe <UART_Start_Receive_IT+0x52>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d105      	bne.n	8006eb4 <UART_Start_Receive_IT+0x48>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006eae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006eb2:	e02d      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	22ff      	movs	r2, #255	@ 0xff
 8006eb8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ebc:	e028      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10d      	bne.n	8006ee2 <UART_Start_Receive_IT+0x76>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d104      	bne.n	8006ed8 <UART_Start_Receive_IT+0x6c>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	22ff      	movs	r2, #255	@ 0xff
 8006ed2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ed6:	e01b      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	227f      	movs	r2, #127	@ 0x7f
 8006edc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ee0:	e016      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eea:	d10d      	bne.n	8006f08 <UART_Start_Receive_IT+0x9c>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d104      	bne.n	8006efe <UART_Start_Receive_IT+0x92>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	227f      	movs	r2, #127	@ 0x7f
 8006ef8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006efc:	e008      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	223f      	movs	r2, #63	@ 0x3f
 8006f02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f06:	e003      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2222      	movs	r2, #34	@ 0x22
 8006f1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006f30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f32:	f043 0301 	orr.w	r3, r3, #1
 8006f36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3308      	adds	r3, #8
 8006f40:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006f44:	673a      	str	r2, [r7, #112]	@ 0x70
 8006f46:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006f4a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006f52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e3      	bne.n	8006f20 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f60:	d14f      	bne.n	8007002 <UART_Start_Receive_IT+0x196>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006f68:	88fa      	ldrh	r2, [r7, #6]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d349      	bcc.n	8007002 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f76:	d107      	bne.n	8006f88 <UART_Start_Receive_IT+0x11c>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d103      	bne.n	8006f88 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4a47      	ldr	r2, [pc, #284]	@ (80070a0 <UART_Start_Receive_IT+0x234>)
 8006f84:	675a      	str	r2, [r3, #116]	@ 0x74
 8006f86:	e002      	b.n	8006f8e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4a46      	ldr	r2, [pc, #280]	@ (80070a4 <UART_Start_Receive_IT+0x238>)
 8006f8c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d01a      	beq.n	8006fcc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006fa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006faa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fba:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006fbe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006fc0:	e841 2300 	strex	r3, r2, [r1]
 8006fc4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e4      	bne.n	8006f96 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fd6:	e853 3f00 	ldrex	r3, [r3]
 8006fda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fe2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3308      	adds	r3, #8
 8006fea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006fec:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006fee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ff2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e5      	bne.n	8006fcc <UART_Start_Receive_IT+0x160>
 8007000:	e046      	b.n	8007090 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800700a:	d107      	bne.n	800701c <UART_Start_Receive_IT+0x1b0>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d103      	bne.n	800701c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4a24      	ldr	r2, [pc, #144]	@ (80070a8 <UART_Start_Receive_IT+0x23c>)
 8007018:	675a      	str	r2, [r3, #116]	@ 0x74
 800701a:	e002      	b.n	8007022 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4a23      	ldr	r2, [pc, #140]	@ (80070ac <UART_Start_Receive_IT+0x240>)
 8007020:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d019      	beq.n	800705e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800703e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007048:	637b      	str	r3, [r7, #52]	@ 0x34
 800704a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800704e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007050:	e841 2300 	strex	r3, r2, [r1]
 8007054:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e6      	bne.n	800702a <UART_Start_Receive_IT+0x1be>
 800705c:	e018      	b.n	8007090 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	e853 3f00 	ldrex	r3, [r3]
 800706a:	613b      	str	r3, [r7, #16]
   return(result);
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f043 0320 	orr.w	r3, r3, #32
 8007072:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800707c:	623b      	str	r3, [r7, #32]
 800707e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	69f9      	ldr	r1, [r7, #28]
 8007082:	6a3a      	ldr	r2, [r7, #32]
 8007084:	e841 2300 	strex	r3, r2, [r1]
 8007088:	61bb      	str	r3, [r7, #24]
   return(result);
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e6      	bne.n	800705e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	378c      	adds	r7, #140	@ 0x8c
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	080078cd 	.word	0x080078cd
 80070a4:	08007569 	.word	0x08007569
 80070a8:	080073b1 	.word	0x080073b1
 80070ac:	080071f9 	.word	0x080071f9

080070b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b095      	sub	sp, #84	@ 0x54
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80070d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e6      	bne.n	80070b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3308      	adds	r3, #8
 80070f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007100:	f023 0301 	bic.w	r3, r3, #1
 8007104:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3308      	adds	r3, #8
 800710c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800710e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007110:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800711c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e3      	bne.n	80070ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007126:	2b01      	cmp	r3, #1
 8007128:	d118      	bne.n	800715c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	e853 3f00 	ldrex	r3, [r3]
 8007136:	60bb      	str	r3, [r7, #8]
   return(result);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f023 0310 	bic.w	r3, r3, #16
 800713e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	461a      	mov	r2, r3
 8007146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007148:	61bb      	str	r3, [r7, #24]
 800714a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714c:	6979      	ldr	r1, [r7, #20]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	e841 2300 	strex	r3, r2, [r1]
 8007154:	613b      	str	r3, [r7, #16]
   return(result);
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1e6      	bne.n	800712a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007170:	bf00      	nop
 8007172:	3754      	adds	r7, #84	@ 0x54
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007188:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f7ff f99e 	bl	80064d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007198:	bf00      	nop
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071bc:	61fb      	str	r3, [r7, #28]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	61bb      	str	r3, [r7, #24]
 80071c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6979      	ldr	r1, [r7, #20]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	613b      	str	r3, [r7, #16]
   return(result);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e6      	bne.n	80071a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff f969 	bl	80064c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ee:	bf00      	nop
 80071f0:	3720      	adds	r7, #32
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b09c      	sub	sp, #112	@ 0x70
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007206:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007210:	2b22      	cmp	r3, #34	@ 0x22
 8007212:	f040 80be 	bne.w	8007392 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007220:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007224:	b2d9      	uxtb	r1, r3
 8007226:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800722a:	b2da      	uxtb	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007230:	400a      	ands	r2, r1
 8007232:	b2d2      	uxtb	r2, r2
 8007234:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007246:	b29b      	uxth	r3, r3
 8007248:	3b01      	subs	r3, #1
 800724a:	b29a      	uxth	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	f040 80a1 	bne.w	80073a2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007268:	e853 3f00 	ldrex	r3, [r3]
 800726c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800726e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007270:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007274:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800727e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007280:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007282:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007284:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007286:	e841 2300 	strex	r3, r2, [r1]
 800728a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800728c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1e6      	bne.n	8007260 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3308      	adds	r3, #8
 8007298:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a4:	f023 0301 	bic.w	r3, r3, #1
 80072a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80072b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80072b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e5      	bne.n	8007292 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a33      	ldr	r2, [pc, #204]	@ (80073ac <UART_RxISR_8BIT+0x1b4>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d01f      	beq.n	8007324 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d018      	beq.n	8007324 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fa:	e853 3f00 	ldrex	r3, [r3]
 80072fe:	623b      	str	r3, [r7, #32]
   return(result);
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007306:	663b      	str	r3, [r7, #96]	@ 0x60
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	461a      	mov	r2, r3
 800730e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007310:	633b      	str	r3, [r7, #48]	@ 0x30
 8007312:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007314:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007318:	e841 2300 	strex	r3, r2, [r1]
 800731c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800731e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e6      	bne.n	80072f2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007328:	2b01      	cmp	r3, #1
 800732a:	d12e      	bne.n	800738a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	e853 3f00 	ldrex	r3, [r3]
 800733e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0310 	bic.w	r3, r3, #16
 8007346:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	461a      	mov	r2, r3
 800734e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007350:	61fb      	str	r3, [r7, #28]
 8007352:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007354:	69b9      	ldr	r1, [r7, #24]
 8007356:	69fa      	ldr	r2, [r7, #28]
 8007358:	e841 2300 	strex	r3, r2, [r1]
 800735c:	617b      	str	r3, [r7, #20]
   return(result);
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e6      	bne.n	8007332 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f003 0310 	and.w	r3, r3, #16
 800736e:	2b10      	cmp	r3, #16
 8007370:	d103      	bne.n	800737a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2210      	movs	r2, #16
 8007378:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7ff f8b0 	bl	80064e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007388:	e00b      	b.n	80073a2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fa faa8 	bl	80018e0 <HAL_UART_RxCpltCallback>
}
 8007390:	e007      	b.n	80073a2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	699a      	ldr	r2, [r3, #24]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 0208 	orr.w	r2, r2, #8
 80073a0:	619a      	str	r2, [r3, #24]
}
 80073a2:	bf00      	nop
 80073a4:	3770      	adds	r7, #112	@ 0x70
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	40008000 	.word	0x40008000

080073b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b09c      	sub	sp, #112	@ 0x70
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80073be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073c8:	2b22      	cmp	r3, #34	@ 0x22
 80073ca:	f040 80be 	bne.w	800754a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80073de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80073e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80073e6:	4013      	ands	r3, r2
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073f2:	1c9a      	adds	r2, r3, #2
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073fe:	b29b      	uxth	r3, r3
 8007400:	3b01      	subs	r3, #1
 8007402:	b29a      	uxth	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	f040 80a1 	bne.w	800755a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007428:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800742c:	667b      	str	r3, [r7, #100]	@ 0x64
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007436:	657b      	str	r3, [r7, #84]	@ 0x54
 8007438:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800743c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e6      	bne.n	8007418 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3308      	adds	r3, #8
 8007450:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800745a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745c:	f023 0301 	bic.w	r3, r3, #1
 8007460:	663b      	str	r3, [r7, #96]	@ 0x60
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3308      	adds	r3, #8
 8007468:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800746a:	643a      	str	r2, [r7, #64]	@ 0x40
 800746c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007470:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1e5      	bne.n	800744a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2220      	movs	r2, #32
 8007482:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a33      	ldr	r2, [pc, #204]	@ (8007564 <UART_RxISR_16BIT+0x1b4>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d01f      	beq.n	80074dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d018      	beq.n	80074dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	e853 3f00 	ldrex	r3, [r3]
 80074b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	461a      	mov	r2, r3
 80074c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074d0:	e841 2300 	strex	r3, r2, [r1]
 80074d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e6      	bne.n	80074aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d12e      	bne.n	8007542 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f023 0310 	bic.w	r3, r3, #16
 80074fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	461a      	mov	r2, r3
 8007506:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007508:	61bb      	str	r3, [r7, #24]
 800750a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	6979      	ldr	r1, [r7, #20]
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	613b      	str	r3, [r7, #16]
   return(result);
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e6      	bne.n	80074ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	f003 0310 	and.w	r3, r3, #16
 8007526:	2b10      	cmp	r3, #16
 8007528:	d103      	bne.n	8007532 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2210      	movs	r2, #16
 8007530:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7fe ffd4 	bl	80064e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007540:	e00b      	b.n	800755a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fa f9cc 	bl	80018e0 <HAL_UART_RxCpltCallback>
}
 8007548:	e007      	b.n	800755a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	699a      	ldr	r2, [r3, #24]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f042 0208 	orr.w	r2, r2, #8
 8007558:	619a      	str	r2, [r3, #24]
}
 800755a:	bf00      	nop
 800755c:	3770      	adds	r7, #112	@ 0x70
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	40008000 	.word	0x40008000

08007568 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b0ac      	sub	sp, #176	@ 0xb0
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007576:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800759e:	2b22      	cmp	r3, #34	@ 0x22
 80075a0:	f040 8183 	bne.w	80078aa <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80075aa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80075ae:	e126      	b.n	80077fe <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80075ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80075be:	b2d9      	uxtb	r1, r3
 80075c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ca:	400a      	ands	r2, r1
 80075cc:	b2d2      	uxtb	r2, r2
 80075ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d4:	1c5a      	adds	r2, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80075f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075fa:	f003 0307 	and.w	r3, r3, #7
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d053      	beq.n	80076aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d011      	beq.n	8007632 <UART_RxISR_8BIT_FIFOEN+0xca>
 800760e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00b      	beq.n	8007632 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2201      	movs	r2, #1
 8007620:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007628:	f043 0201 	orr.w	r2, r3, #1
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d011      	beq.n	8007662 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800763e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00b      	beq.n	8007662 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2202      	movs	r2, #2
 8007650:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007658:	f043 0204 	orr.w	r2, r3, #4
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007666:	f003 0304 	and.w	r3, r3, #4
 800766a:	2b00      	cmp	r3, #0
 800766c:	d011      	beq.n	8007692 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800766e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00b      	beq.n	8007692 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2204      	movs	r2, #4
 8007680:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007688:	f043 0202 	orr.w	r2, r3, #2
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007698:	2b00      	cmp	r3, #0
 800769a:	d006      	beq.n	80076aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7fe ff19 	bl	80064d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f040 80a3 	bne.w	80077fe <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80076c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076dc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80076e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80076e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e4      	bne.n	80076b8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3308      	adds	r3, #8
 80076f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80076fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007700:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007704:	f023 0301 	bic.w	r3, r3, #1
 8007708:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3308      	adds	r3, #8
 8007712:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007716:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007718:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800771c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007724:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e1      	bne.n	80076ee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a60      	ldr	r2, [pc, #384]	@ (80078c4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d021      	beq.n	800778c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d01a      	beq.n	800778c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007766:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800776a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007778:	657b      	str	r3, [r7, #84]	@ 0x54
 800777a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800777e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007780:	e841 2300 	strex	r3, r2, [r1]
 8007784:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1e4      	bne.n	8007756 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007790:	2b01      	cmp	r3, #1
 8007792:	d130      	bne.n	80077f6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077aa:	f023 0310 	bic.w	r3, r3, #16
 80077ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80077be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e4      	bne.n	800779a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	f003 0310 	and.w	r3, r3, #16
 80077da:	2b10      	cmp	r3, #16
 80077dc:	d103      	bne.n	80077e6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2210      	movs	r2, #16
 80077e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7fe fe7a 	bl	80064e8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80077f4:	e00e      	b.n	8007814 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7fa f872 	bl	80018e0 <HAL_UART_RxCpltCallback>
        break;
 80077fc:	e00a      	b.n	8007814 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077fe:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007802:	2b00      	cmp	r3, #0
 8007804:	d006      	beq.n	8007814 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800780a:	f003 0320 	and.w	r3, r3, #32
 800780e:	2b00      	cmp	r3, #0
 8007810:	f47f aece 	bne.w	80075b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800781a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800781e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007822:	2b00      	cmp	r3, #0
 8007824:	d049      	beq.n	80078ba <UART_RxISR_8BIT_FIFOEN+0x352>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800782c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007830:	429a      	cmp	r2, r3
 8007832:	d242      	bcs.n	80078ba <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3308      	adds	r3, #8
 800783a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	61fb      	str	r3, [r7, #28]
   return(result);
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800784a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3308      	adds	r3, #8
 8007854:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007858:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800785a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800785e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e3      	bne.n	8007834 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a16      	ldr	r2, [pc, #88]	@ (80078c8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007870:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	e853 3f00 	ldrex	r3, [r3]
 800787e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f043 0320 	orr.w	r3, r3, #32
 8007886:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007894:	61bb      	str	r3, [r7, #24]
 8007896:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6979      	ldr	r1, [r7, #20]
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	613b      	str	r3, [r7, #16]
   return(result);
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e4      	bne.n	8007872 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078a8:	e007      	b.n	80078ba <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	699a      	ldr	r2, [r3, #24]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f042 0208 	orr.w	r2, r2, #8
 80078b8:	619a      	str	r2, [r3, #24]
}
 80078ba:	bf00      	nop
 80078bc:	37b0      	adds	r7, #176	@ 0xb0
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	40008000 	.word	0x40008000
 80078c8:	080071f9 	.word	0x080071f9

080078cc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b0ae      	sub	sp, #184	@ 0xb8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80078da:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007902:	2b22      	cmp	r3, #34	@ 0x22
 8007904:	f040 8187 	bne.w	8007c16 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800790e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007912:	e12a      	b.n	8007b6a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800791a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007922:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007926:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800792a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800792e:	4013      	ands	r3, r2
 8007930:	b29a      	uxth	r2, r3
 8007932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007936:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800793c:	1c9a      	adds	r2, r3, #2
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007948:	b29b      	uxth	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b29a      	uxth	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800795e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	2b00      	cmp	r3, #0
 8007968:	d053      	beq.n	8007a12 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800796a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d011      	beq.n	800799a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800797a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00b      	beq.n	800799a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2201      	movs	r2, #1
 8007988:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007990:	f043 0201 	orr.w	r2, r3, #1
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800799a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d011      	beq.n	80079ca <UART_RxISR_16BIT_FIFOEN+0xfe>
 80079a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00b      	beq.n	80079ca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2202      	movs	r2, #2
 80079b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079c0:	f043 0204 	orr.w	r2, r3, #4
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80079ce:	f003 0304 	and.w	r3, r3, #4
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d011      	beq.n	80079fa <UART_RxISR_16BIT_FIFOEN+0x12e>
 80079d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00b      	beq.n	80079fa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2204      	movs	r2, #4
 80079e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079f0:	f043 0202 	orr.w	r2, r3, #2
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d006      	beq.n	8007a12 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7fe fd65 	bl	80064d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f040 80a5 	bne.w	8007b6a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a46:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e2      	bne.n	8007a20 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3308      	adds	r3, #8
 8007a60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a70:	f023 0301 	bic.w	r3, r3, #1
 8007a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007a82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e1      	bne.n	8007a5a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a60      	ldr	r2, [pc, #384]	@ (8007c30 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d021      	beq.n	8007af8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d01a      	beq.n	8007af8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ad2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ad6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ae4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ae6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007aea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007aec:	e841 2300 	strex	r3, r2, [r1]
 8007af0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e4      	bne.n	8007ac2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d130      	bne.n	8007b62 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0e:	e853 3f00 	ldrex	r3, [r3]
 8007b12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b16:	f023 0310 	bic.w	r3, r3, #16
 8007b1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b28:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b30:	e841 2300 	strex	r3, r2, [r1]
 8007b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1e4      	bne.n	8007b06 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	f003 0310 	and.w	r3, r3, #16
 8007b46:	2b10      	cmp	r3, #16
 8007b48:	d103      	bne.n	8007b52 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2210      	movs	r2, #16
 8007b50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7fe fcc4 	bl	80064e8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007b60:	e00e      	b.n	8007b80 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7f9 febc 	bl	80018e0 <HAL_UART_RxCpltCallback>
        break;
 8007b68:	e00a      	b.n	8007b80 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b6a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d006      	beq.n	8007b80 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007b72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b76:	f003 0320 	and.w	r3, r3, #32
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f47f aeca 	bne.w	8007914 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b86:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b8a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d049      	beq.n	8007c26 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b98:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d242      	bcs.n	8007c26 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007baa:	e853 3f00 	ldrex	r3, [r3]
 8007bae:	623b      	str	r3, [r7, #32]
   return(result);
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3308      	adds	r3, #8
 8007bc0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007bc4:	633a      	str	r2, [r7, #48]	@ 0x30
 8007bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bcc:	e841 2300 	strex	r3, r2, [r1]
 8007bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e3      	bne.n	8007ba0 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a16      	ldr	r2, [pc, #88]	@ (8007c34 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007bdc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	e853 3f00 	ldrex	r3, [r3]
 8007bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f043 0320 	orr.w	r3, r3, #32
 8007bf2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c00:	61fb      	str	r3, [r7, #28]
 8007c02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c04:	69b9      	ldr	r1, [r7, #24]
 8007c06:	69fa      	ldr	r2, [r7, #28]
 8007c08:	e841 2300 	strex	r3, r2, [r1]
 8007c0c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e4      	bne.n	8007bde <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c14:	e007      	b.n	8007c26 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	699a      	ldr	r2, [r3, #24]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f042 0208 	orr.w	r2, r2, #8
 8007c24:	619a      	str	r2, [r3, #24]
}
 8007c26:	bf00      	nop
 8007c28:	37b8      	adds	r7, #184	@ 0xb8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	40008000 	.word	0x40008000
 8007c34:	080073b1 	.word	0x080073b1

08007c38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d101      	bne.n	8007c8a <HAL_UARTEx_DisableFifoMode+0x16>
 8007c86:	2302      	movs	r3, #2
 8007c88:	e027      	b.n	8007cda <HAL_UARTEx_DisableFifoMode+0x66>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2224      	movs	r2, #36	@ 0x24
 8007c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 0201 	bic.w	r2, r2, #1
 8007cb0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007cb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b084      	sub	sp, #16
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d101      	bne.n	8007cfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	e02d      	b.n	8007d5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2224      	movs	r2, #36	@ 0x24
 8007d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 0201 	bic.w	r2, r2, #1
 8007d24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f850 	bl	8007de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d101      	bne.n	8007d7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d76:	2302      	movs	r3, #2
 8007d78:	e02d      	b.n	8007dd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2224      	movs	r2, #36	@ 0x24
 8007d86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0201 	bic.w	r2, r2, #1
 8007da0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f812 	bl	8007de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
	...

08007de0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d108      	bne.n	8007e02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e00:	e031      	b.n	8007e66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e02:	2308      	movs	r3, #8
 8007e04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e06:	2308      	movs	r3, #8
 8007e08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	0e5b      	lsrs	r3, r3, #25
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	f003 0307 	and.w	r3, r3, #7
 8007e18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	0f5b      	lsrs	r3, r3, #29
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	7b3a      	ldrb	r2, [r7, #12]
 8007e2e:	4911      	ldr	r1, [pc, #68]	@ (8007e74 <UARTEx_SetNbDataToProcess+0x94>)
 8007e30:	5c8a      	ldrb	r2, [r1, r2]
 8007e32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e36:	7b3a      	ldrb	r2, [r7, #12]
 8007e38:	490f      	ldr	r1, [pc, #60]	@ (8007e78 <UARTEx_SetNbDataToProcess+0x98>)
 8007e3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	7b7a      	ldrb	r2, [r7, #13]
 8007e4c:	4909      	ldr	r1, [pc, #36]	@ (8007e74 <UARTEx_SetNbDataToProcess+0x94>)
 8007e4e:	5c8a      	ldrb	r2, [r1, r2]
 8007e50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e54:	7b7a      	ldrb	r2, [r7, #13]
 8007e56:	4908      	ldr	r1, [pc, #32]	@ (8007e78 <UARTEx_SetNbDataToProcess+0x98>)
 8007e58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007e66:	bf00      	nop
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	080094a0 	.word	0x080094a0
 8007e78:	080094a8 	.word	0x080094a8

08007e7c <atoi>:
 8007e7c:	220a      	movs	r2, #10
 8007e7e:	2100      	movs	r1, #0
 8007e80:	f000 b87a 	b.w	8007f78 <strtol>

08007e84 <_strtol_l.constprop.0>:
 8007e84:	2b24      	cmp	r3, #36	@ 0x24
 8007e86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e8a:	4686      	mov	lr, r0
 8007e8c:	4690      	mov	r8, r2
 8007e8e:	d801      	bhi.n	8007e94 <_strtol_l.constprop.0+0x10>
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d106      	bne.n	8007ea2 <_strtol_l.constprop.0+0x1e>
 8007e94:	f000 fa5e 	bl	8008354 <__errno>
 8007e98:	2316      	movs	r3, #22
 8007e9a:	6003      	str	r3, [r0, #0]
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea2:	4834      	ldr	r0, [pc, #208]	@ (8007f74 <_strtol_l.constprop.0+0xf0>)
 8007ea4:	460d      	mov	r5, r1
 8007ea6:	462a      	mov	r2, r5
 8007ea8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007eac:	5d06      	ldrb	r6, [r0, r4]
 8007eae:	f016 0608 	ands.w	r6, r6, #8
 8007eb2:	d1f8      	bne.n	8007ea6 <_strtol_l.constprop.0+0x22>
 8007eb4:	2c2d      	cmp	r4, #45	@ 0x2d
 8007eb6:	d12d      	bne.n	8007f14 <_strtol_l.constprop.0+0x90>
 8007eb8:	782c      	ldrb	r4, [r5, #0]
 8007eba:	2601      	movs	r6, #1
 8007ebc:	1c95      	adds	r5, r2, #2
 8007ebe:	f033 0210 	bics.w	r2, r3, #16
 8007ec2:	d109      	bne.n	8007ed8 <_strtol_l.constprop.0+0x54>
 8007ec4:	2c30      	cmp	r4, #48	@ 0x30
 8007ec6:	d12a      	bne.n	8007f1e <_strtol_l.constprop.0+0x9a>
 8007ec8:	782a      	ldrb	r2, [r5, #0]
 8007eca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ece:	2a58      	cmp	r2, #88	@ 0x58
 8007ed0:	d125      	bne.n	8007f1e <_strtol_l.constprop.0+0x9a>
 8007ed2:	786c      	ldrb	r4, [r5, #1]
 8007ed4:	2310      	movs	r3, #16
 8007ed6:	3502      	adds	r5, #2
 8007ed8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007edc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	fbbc f9f3 	udiv	r9, ip, r3
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	fb03 ca19 	mls	sl, r3, r9, ip
 8007eec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007ef0:	2f09      	cmp	r7, #9
 8007ef2:	d81b      	bhi.n	8007f2c <_strtol_l.constprop.0+0xa8>
 8007ef4:	463c      	mov	r4, r7
 8007ef6:	42a3      	cmp	r3, r4
 8007ef8:	dd27      	ble.n	8007f4a <_strtol_l.constprop.0+0xc6>
 8007efa:	1c57      	adds	r7, r2, #1
 8007efc:	d007      	beq.n	8007f0e <_strtol_l.constprop.0+0x8a>
 8007efe:	4581      	cmp	r9, r0
 8007f00:	d320      	bcc.n	8007f44 <_strtol_l.constprop.0+0xc0>
 8007f02:	d101      	bne.n	8007f08 <_strtol_l.constprop.0+0x84>
 8007f04:	45a2      	cmp	sl, r4
 8007f06:	db1d      	blt.n	8007f44 <_strtol_l.constprop.0+0xc0>
 8007f08:	fb00 4003 	mla	r0, r0, r3, r4
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f12:	e7eb      	b.n	8007eec <_strtol_l.constprop.0+0x68>
 8007f14:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f16:	bf04      	itt	eq
 8007f18:	782c      	ldrbeq	r4, [r5, #0]
 8007f1a:	1c95      	addeq	r5, r2, #2
 8007f1c:	e7cf      	b.n	8007ebe <_strtol_l.constprop.0+0x3a>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1da      	bne.n	8007ed8 <_strtol_l.constprop.0+0x54>
 8007f22:	2c30      	cmp	r4, #48	@ 0x30
 8007f24:	bf0c      	ite	eq
 8007f26:	2308      	moveq	r3, #8
 8007f28:	230a      	movne	r3, #10
 8007f2a:	e7d5      	b.n	8007ed8 <_strtol_l.constprop.0+0x54>
 8007f2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007f30:	2f19      	cmp	r7, #25
 8007f32:	d801      	bhi.n	8007f38 <_strtol_l.constprop.0+0xb4>
 8007f34:	3c37      	subs	r4, #55	@ 0x37
 8007f36:	e7de      	b.n	8007ef6 <_strtol_l.constprop.0+0x72>
 8007f38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007f3c:	2f19      	cmp	r7, #25
 8007f3e:	d804      	bhi.n	8007f4a <_strtol_l.constprop.0+0xc6>
 8007f40:	3c57      	subs	r4, #87	@ 0x57
 8007f42:	e7d8      	b.n	8007ef6 <_strtol_l.constprop.0+0x72>
 8007f44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f48:	e7e1      	b.n	8007f0e <_strtol_l.constprop.0+0x8a>
 8007f4a:	1c53      	adds	r3, r2, #1
 8007f4c:	d108      	bne.n	8007f60 <_strtol_l.constprop.0+0xdc>
 8007f4e:	2322      	movs	r3, #34	@ 0x22
 8007f50:	f8ce 3000 	str.w	r3, [lr]
 8007f54:	4660      	mov	r0, ip
 8007f56:	f1b8 0f00 	cmp.w	r8, #0
 8007f5a:	d0a0      	beq.n	8007e9e <_strtol_l.constprop.0+0x1a>
 8007f5c:	1e69      	subs	r1, r5, #1
 8007f5e:	e006      	b.n	8007f6e <_strtol_l.constprop.0+0xea>
 8007f60:	b106      	cbz	r6, 8007f64 <_strtol_l.constprop.0+0xe0>
 8007f62:	4240      	negs	r0, r0
 8007f64:	f1b8 0f00 	cmp.w	r8, #0
 8007f68:	d099      	beq.n	8007e9e <_strtol_l.constprop.0+0x1a>
 8007f6a:	2a00      	cmp	r2, #0
 8007f6c:	d1f6      	bne.n	8007f5c <_strtol_l.constprop.0+0xd8>
 8007f6e:	f8c8 1000 	str.w	r1, [r8]
 8007f72:	e794      	b.n	8007e9e <_strtol_l.constprop.0+0x1a>
 8007f74:	080094b1 	.word	0x080094b1

08007f78 <strtol>:
 8007f78:	4613      	mov	r3, r2
 8007f7a:	460a      	mov	r2, r1
 8007f7c:	4601      	mov	r1, r0
 8007f7e:	4802      	ldr	r0, [pc, #8]	@ (8007f88 <strtol+0x10>)
 8007f80:	6800      	ldr	r0, [r0, #0]
 8007f82:	f7ff bf7f 	b.w	8007e84 <_strtol_l.constprop.0>
 8007f86:	bf00      	nop
 8007f88:	200000dc 	.word	0x200000dc

08007f8c <std>:
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	b510      	push	{r4, lr}
 8007f90:	4604      	mov	r4, r0
 8007f92:	e9c0 3300 	strd	r3, r3, [r0]
 8007f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f9a:	6083      	str	r3, [r0, #8]
 8007f9c:	8181      	strh	r1, [r0, #12]
 8007f9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fa0:	81c2      	strh	r2, [r0, #14]
 8007fa2:	6183      	str	r3, [r0, #24]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	2208      	movs	r2, #8
 8007fa8:	305c      	adds	r0, #92	@ 0x5c
 8007faa:	f000 f928 	bl	80081fe <memset>
 8007fae:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe4 <std+0x58>)
 8007fb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe8 <std+0x5c>)
 8007fb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007fec <std+0x60>)
 8007fb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fba:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff0 <std+0x64>)
 8007fbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff4 <std+0x68>)
 8007fc0:	6224      	str	r4, [r4, #32]
 8007fc2:	429c      	cmp	r4, r3
 8007fc4:	d006      	beq.n	8007fd4 <std+0x48>
 8007fc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fca:	4294      	cmp	r4, r2
 8007fcc:	d002      	beq.n	8007fd4 <std+0x48>
 8007fce:	33d0      	adds	r3, #208	@ 0xd0
 8007fd0:	429c      	cmp	r4, r3
 8007fd2:	d105      	bne.n	8007fe0 <std+0x54>
 8007fd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fdc:	f000 b9e4 	b.w	80083a8 <__retarget_lock_init_recursive>
 8007fe0:	bd10      	pop	{r4, pc}
 8007fe2:	bf00      	nop
 8007fe4:	08008179 	.word	0x08008179
 8007fe8:	0800819b 	.word	0x0800819b
 8007fec:	080081d3 	.word	0x080081d3
 8007ff0:	080081f7 	.word	0x080081f7
 8007ff4:	200004f4 	.word	0x200004f4

08007ff8 <stdio_exit_handler>:
 8007ff8:	4a02      	ldr	r2, [pc, #8]	@ (8008004 <stdio_exit_handler+0xc>)
 8007ffa:	4903      	ldr	r1, [pc, #12]	@ (8008008 <stdio_exit_handler+0x10>)
 8007ffc:	4803      	ldr	r0, [pc, #12]	@ (800800c <stdio_exit_handler+0x14>)
 8007ffe:	f000 b869 	b.w	80080d4 <_fwalk_sglue>
 8008002:	bf00      	nop
 8008004:	200000d0 	.word	0x200000d0
 8008008:	08008cc1 	.word	0x08008cc1
 800800c:	200000e0 	.word	0x200000e0

08008010 <cleanup_stdio>:
 8008010:	6841      	ldr	r1, [r0, #4]
 8008012:	4b0c      	ldr	r3, [pc, #48]	@ (8008044 <cleanup_stdio+0x34>)
 8008014:	4299      	cmp	r1, r3
 8008016:	b510      	push	{r4, lr}
 8008018:	4604      	mov	r4, r0
 800801a:	d001      	beq.n	8008020 <cleanup_stdio+0x10>
 800801c:	f000 fe50 	bl	8008cc0 <_fflush_r>
 8008020:	68a1      	ldr	r1, [r4, #8]
 8008022:	4b09      	ldr	r3, [pc, #36]	@ (8008048 <cleanup_stdio+0x38>)
 8008024:	4299      	cmp	r1, r3
 8008026:	d002      	beq.n	800802e <cleanup_stdio+0x1e>
 8008028:	4620      	mov	r0, r4
 800802a:	f000 fe49 	bl	8008cc0 <_fflush_r>
 800802e:	68e1      	ldr	r1, [r4, #12]
 8008030:	4b06      	ldr	r3, [pc, #24]	@ (800804c <cleanup_stdio+0x3c>)
 8008032:	4299      	cmp	r1, r3
 8008034:	d004      	beq.n	8008040 <cleanup_stdio+0x30>
 8008036:	4620      	mov	r0, r4
 8008038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800803c:	f000 be40 	b.w	8008cc0 <_fflush_r>
 8008040:	bd10      	pop	{r4, pc}
 8008042:	bf00      	nop
 8008044:	200004f4 	.word	0x200004f4
 8008048:	2000055c 	.word	0x2000055c
 800804c:	200005c4 	.word	0x200005c4

08008050 <global_stdio_init.part.0>:
 8008050:	b510      	push	{r4, lr}
 8008052:	4b0b      	ldr	r3, [pc, #44]	@ (8008080 <global_stdio_init.part.0+0x30>)
 8008054:	4c0b      	ldr	r4, [pc, #44]	@ (8008084 <global_stdio_init.part.0+0x34>)
 8008056:	4a0c      	ldr	r2, [pc, #48]	@ (8008088 <global_stdio_init.part.0+0x38>)
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	4620      	mov	r0, r4
 800805c:	2200      	movs	r2, #0
 800805e:	2104      	movs	r1, #4
 8008060:	f7ff ff94 	bl	8007f8c <std>
 8008064:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008068:	2201      	movs	r2, #1
 800806a:	2109      	movs	r1, #9
 800806c:	f7ff ff8e 	bl	8007f8c <std>
 8008070:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008074:	2202      	movs	r2, #2
 8008076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800807a:	2112      	movs	r1, #18
 800807c:	f7ff bf86 	b.w	8007f8c <std>
 8008080:	2000062c 	.word	0x2000062c
 8008084:	200004f4 	.word	0x200004f4
 8008088:	08007ff9 	.word	0x08007ff9

0800808c <__sfp_lock_acquire>:
 800808c:	4801      	ldr	r0, [pc, #4]	@ (8008094 <__sfp_lock_acquire+0x8>)
 800808e:	f000 b98c 	b.w	80083aa <__retarget_lock_acquire_recursive>
 8008092:	bf00      	nop
 8008094:	20000635 	.word	0x20000635

08008098 <__sfp_lock_release>:
 8008098:	4801      	ldr	r0, [pc, #4]	@ (80080a0 <__sfp_lock_release+0x8>)
 800809a:	f000 b987 	b.w	80083ac <__retarget_lock_release_recursive>
 800809e:	bf00      	nop
 80080a0:	20000635 	.word	0x20000635

080080a4 <__sinit>:
 80080a4:	b510      	push	{r4, lr}
 80080a6:	4604      	mov	r4, r0
 80080a8:	f7ff fff0 	bl	800808c <__sfp_lock_acquire>
 80080ac:	6a23      	ldr	r3, [r4, #32]
 80080ae:	b11b      	cbz	r3, 80080b8 <__sinit+0x14>
 80080b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080b4:	f7ff bff0 	b.w	8008098 <__sfp_lock_release>
 80080b8:	4b04      	ldr	r3, [pc, #16]	@ (80080cc <__sinit+0x28>)
 80080ba:	6223      	str	r3, [r4, #32]
 80080bc:	4b04      	ldr	r3, [pc, #16]	@ (80080d0 <__sinit+0x2c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1f5      	bne.n	80080b0 <__sinit+0xc>
 80080c4:	f7ff ffc4 	bl	8008050 <global_stdio_init.part.0>
 80080c8:	e7f2      	b.n	80080b0 <__sinit+0xc>
 80080ca:	bf00      	nop
 80080cc:	08008011 	.word	0x08008011
 80080d0:	2000062c 	.word	0x2000062c

080080d4 <_fwalk_sglue>:
 80080d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080d8:	4607      	mov	r7, r0
 80080da:	4688      	mov	r8, r1
 80080dc:	4614      	mov	r4, r2
 80080de:	2600      	movs	r6, #0
 80080e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080e4:	f1b9 0901 	subs.w	r9, r9, #1
 80080e8:	d505      	bpl.n	80080f6 <_fwalk_sglue+0x22>
 80080ea:	6824      	ldr	r4, [r4, #0]
 80080ec:	2c00      	cmp	r4, #0
 80080ee:	d1f7      	bne.n	80080e0 <_fwalk_sglue+0xc>
 80080f0:	4630      	mov	r0, r6
 80080f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080f6:	89ab      	ldrh	r3, [r5, #12]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d907      	bls.n	800810c <_fwalk_sglue+0x38>
 80080fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008100:	3301      	adds	r3, #1
 8008102:	d003      	beq.n	800810c <_fwalk_sglue+0x38>
 8008104:	4629      	mov	r1, r5
 8008106:	4638      	mov	r0, r7
 8008108:	47c0      	blx	r8
 800810a:	4306      	orrs	r6, r0
 800810c:	3568      	adds	r5, #104	@ 0x68
 800810e:	e7e9      	b.n	80080e4 <_fwalk_sglue+0x10>

08008110 <sniprintf>:
 8008110:	b40c      	push	{r2, r3}
 8008112:	b530      	push	{r4, r5, lr}
 8008114:	4b17      	ldr	r3, [pc, #92]	@ (8008174 <sniprintf+0x64>)
 8008116:	1e0c      	subs	r4, r1, #0
 8008118:	681d      	ldr	r5, [r3, #0]
 800811a:	b09d      	sub	sp, #116	@ 0x74
 800811c:	da08      	bge.n	8008130 <sniprintf+0x20>
 800811e:	238b      	movs	r3, #139	@ 0x8b
 8008120:	602b      	str	r3, [r5, #0]
 8008122:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008126:	b01d      	add	sp, #116	@ 0x74
 8008128:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800812c:	b002      	add	sp, #8
 800812e:	4770      	bx	lr
 8008130:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008134:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008138:	bf14      	ite	ne
 800813a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800813e:	4623      	moveq	r3, r4
 8008140:	9304      	str	r3, [sp, #16]
 8008142:	9307      	str	r3, [sp, #28]
 8008144:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008148:	9002      	str	r0, [sp, #8]
 800814a:	9006      	str	r0, [sp, #24]
 800814c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008150:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008152:	ab21      	add	r3, sp, #132	@ 0x84
 8008154:	a902      	add	r1, sp, #8
 8008156:	4628      	mov	r0, r5
 8008158:	9301      	str	r3, [sp, #4]
 800815a:	f000 faa3 	bl	80086a4 <_svfiprintf_r>
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	bfbc      	itt	lt
 8008162:	238b      	movlt	r3, #139	@ 0x8b
 8008164:	602b      	strlt	r3, [r5, #0]
 8008166:	2c00      	cmp	r4, #0
 8008168:	d0dd      	beq.n	8008126 <sniprintf+0x16>
 800816a:	9b02      	ldr	r3, [sp, #8]
 800816c:	2200      	movs	r2, #0
 800816e:	701a      	strb	r2, [r3, #0]
 8008170:	e7d9      	b.n	8008126 <sniprintf+0x16>
 8008172:	bf00      	nop
 8008174:	200000dc 	.word	0x200000dc

08008178 <__sread>:
 8008178:	b510      	push	{r4, lr}
 800817a:	460c      	mov	r4, r1
 800817c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008180:	f000 f8c4 	bl	800830c <_read_r>
 8008184:	2800      	cmp	r0, #0
 8008186:	bfab      	itete	ge
 8008188:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800818a:	89a3      	ldrhlt	r3, [r4, #12]
 800818c:	181b      	addge	r3, r3, r0
 800818e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008192:	bfac      	ite	ge
 8008194:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008196:	81a3      	strhlt	r3, [r4, #12]
 8008198:	bd10      	pop	{r4, pc}

0800819a <__swrite>:
 800819a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800819e:	461f      	mov	r7, r3
 80081a0:	898b      	ldrh	r3, [r1, #12]
 80081a2:	05db      	lsls	r3, r3, #23
 80081a4:	4605      	mov	r5, r0
 80081a6:	460c      	mov	r4, r1
 80081a8:	4616      	mov	r6, r2
 80081aa:	d505      	bpl.n	80081b8 <__swrite+0x1e>
 80081ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b0:	2302      	movs	r3, #2
 80081b2:	2200      	movs	r2, #0
 80081b4:	f000 f898 	bl	80082e8 <_lseek_r>
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081c2:	81a3      	strh	r3, [r4, #12]
 80081c4:	4632      	mov	r2, r6
 80081c6:	463b      	mov	r3, r7
 80081c8:	4628      	mov	r0, r5
 80081ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081ce:	f000 b8af 	b.w	8008330 <_write_r>

080081d2 <__sseek>:
 80081d2:	b510      	push	{r4, lr}
 80081d4:	460c      	mov	r4, r1
 80081d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081da:	f000 f885 	bl	80082e8 <_lseek_r>
 80081de:	1c43      	adds	r3, r0, #1
 80081e0:	89a3      	ldrh	r3, [r4, #12]
 80081e2:	bf15      	itete	ne
 80081e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081ee:	81a3      	strheq	r3, [r4, #12]
 80081f0:	bf18      	it	ne
 80081f2:	81a3      	strhne	r3, [r4, #12]
 80081f4:	bd10      	pop	{r4, pc}

080081f6 <__sclose>:
 80081f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081fa:	f000 b865 	b.w	80082c8 <_close_r>

080081fe <memset>:
 80081fe:	4402      	add	r2, r0
 8008200:	4603      	mov	r3, r0
 8008202:	4293      	cmp	r3, r2
 8008204:	d100      	bne.n	8008208 <memset+0xa>
 8008206:	4770      	bx	lr
 8008208:	f803 1b01 	strb.w	r1, [r3], #1
 800820c:	e7f9      	b.n	8008202 <memset+0x4>
	...

08008210 <strtok>:
 8008210:	4b16      	ldr	r3, [pc, #88]	@ (800826c <strtok+0x5c>)
 8008212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008216:	681f      	ldr	r7, [r3, #0]
 8008218:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800821a:	4605      	mov	r5, r0
 800821c:	460e      	mov	r6, r1
 800821e:	b9ec      	cbnz	r4, 800825c <strtok+0x4c>
 8008220:	2050      	movs	r0, #80	@ 0x50
 8008222:	f000 f92d 	bl	8008480 <malloc>
 8008226:	4602      	mov	r2, r0
 8008228:	6478      	str	r0, [r7, #68]	@ 0x44
 800822a:	b920      	cbnz	r0, 8008236 <strtok+0x26>
 800822c:	4b10      	ldr	r3, [pc, #64]	@ (8008270 <strtok+0x60>)
 800822e:	4811      	ldr	r0, [pc, #68]	@ (8008274 <strtok+0x64>)
 8008230:	215b      	movs	r1, #91	@ 0x5b
 8008232:	f000 f8bd 	bl	80083b0 <__assert_func>
 8008236:	e9c0 4400 	strd	r4, r4, [r0]
 800823a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800823e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008242:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008246:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800824a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800824e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008252:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008256:	6184      	str	r4, [r0, #24]
 8008258:	7704      	strb	r4, [r0, #28]
 800825a:	6244      	str	r4, [r0, #36]	@ 0x24
 800825c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800825e:	4631      	mov	r1, r6
 8008260:	4628      	mov	r0, r5
 8008262:	2301      	movs	r3, #1
 8008264:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008268:	f000 b806 	b.w	8008278 <__strtok_r>
 800826c:	200000dc 	.word	0x200000dc
 8008270:	080095b1 	.word	0x080095b1
 8008274:	080095c8 	.word	0x080095c8

08008278 <__strtok_r>:
 8008278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800827a:	4604      	mov	r4, r0
 800827c:	b908      	cbnz	r0, 8008282 <__strtok_r+0xa>
 800827e:	6814      	ldr	r4, [r2, #0]
 8008280:	b144      	cbz	r4, 8008294 <__strtok_r+0x1c>
 8008282:	4620      	mov	r0, r4
 8008284:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008288:	460f      	mov	r7, r1
 800828a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800828e:	b91e      	cbnz	r6, 8008298 <__strtok_r+0x20>
 8008290:	b965      	cbnz	r5, 80082ac <__strtok_r+0x34>
 8008292:	6015      	str	r5, [r2, #0]
 8008294:	2000      	movs	r0, #0
 8008296:	e005      	b.n	80082a4 <__strtok_r+0x2c>
 8008298:	42b5      	cmp	r5, r6
 800829a:	d1f6      	bne.n	800828a <__strtok_r+0x12>
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1f0      	bne.n	8008282 <__strtok_r+0xa>
 80082a0:	6014      	str	r4, [r2, #0]
 80082a2:	7003      	strb	r3, [r0, #0]
 80082a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082a6:	461c      	mov	r4, r3
 80082a8:	e00c      	b.n	80082c4 <__strtok_r+0x4c>
 80082aa:	b915      	cbnz	r5, 80082b2 <__strtok_r+0x3a>
 80082ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80082b0:	460e      	mov	r6, r1
 80082b2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80082b6:	42ab      	cmp	r3, r5
 80082b8:	d1f7      	bne.n	80082aa <__strtok_r+0x32>
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0f3      	beq.n	80082a6 <__strtok_r+0x2e>
 80082be:	2300      	movs	r3, #0
 80082c0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80082c4:	6014      	str	r4, [r2, #0]
 80082c6:	e7ed      	b.n	80082a4 <__strtok_r+0x2c>

080082c8 <_close_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	4d06      	ldr	r5, [pc, #24]	@ (80082e4 <_close_r+0x1c>)
 80082cc:	2300      	movs	r3, #0
 80082ce:	4604      	mov	r4, r0
 80082d0:	4608      	mov	r0, r1
 80082d2:	602b      	str	r3, [r5, #0]
 80082d4:	f7f8 fdbc 	bl	8000e50 <_close>
 80082d8:	1c43      	adds	r3, r0, #1
 80082da:	d102      	bne.n	80082e2 <_close_r+0x1a>
 80082dc:	682b      	ldr	r3, [r5, #0]
 80082de:	b103      	cbz	r3, 80082e2 <_close_r+0x1a>
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	bd38      	pop	{r3, r4, r5, pc}
 80082e4:	20000630 	.word	0x20000630

080082e8 <_lseek_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4d07      	ldr	r5, [pc, #28]	@ (8008308 <_lseek_r+0x20>)
 80082ec:	4604      	mov	r4, r0
 80082ee:	4608      	mov	r0, r1
 80082f0:	4611      	mov	r1, r2
 80082f2:	2200      	movs	r2, #0
 80082f4:	602a      	str	r2, [r5, #0]
 80082f6:	461a      	mov	r2, r3
 80082f8:	f7f8 fdd1 	bl	8000e9e <_lseek>
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	d102      	bne.n	8008306 <_lseek_r+0x1e>
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	b103      	cbz	r3, 8008306 <_lseek_r+0x1e>
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	20000630 	.word	0x20000630

0800830c <_read_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4d07      	ldr	r5, [pc, #28]	@ (800832c <_read_r+0x20>)
 8008310:	4604      	mov	r4, r0
 8008312:	4608      	mov	r0, r1
 8008314:	4611      	mov	r1, r2
 8008316:	2200      	movs	r2, #0
 8008318:	602a      	str	r2, [r5, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	f7f8 fd5f 	bl	8000dde <_read>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d102      	bne.n	800832a <_read_r+0x1e>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	b103      	cbz	r3, 800832a <_read_r+0x1e>
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	20000630 	.word	0x20000630

08008330 <_write_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4d07      	ldr	r5, [pc, #28]	@ (8008350 <_write_r+0x20>)
 8008334:	4604      	mov	r4, r0
 8008336:	4608      	mov	r0, r1
 8008338:	4611      	mov	r1, r2
 800833a:	2200      	movs	r2, #0
 800833c:	602a      	str	r2, [r5, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	f7f8 fd6a 	bl	8000e18 <_write>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_write_r+0x1e>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b103      	cbz	r3, 800834e <_write_r+0x1e>
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	20000630 	.word	0x20000630

08008354 <__errno>:
 8008354:	4b01      	ldr	r3, [pc, #4]	@ (800835c <__errno+0x8>)
 8008356:	6818      	ldr	r0, [r3, #0]
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	200000dc 	.word	0x200000dc

08008360 <__libc_init_array>:
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	4d0d      	ldr	r5, [pc, #52]	@ (8008398 <__libc_init_array+0x38>)
 8008364:	4c0d      	ldr	r4, [pc, #52]	@ (800839c <__libc_init_array+0x3c>)
 8008366:	1b64      	subs	r4, r4, r5
 8008368:	10a4      	asrs	r4, r4, #2
 800836a:	2600      	movs	r6, #0
 800836c:	42a6      	cmp	r6, r4
 800836e:	d109      	bne.n	8008384 <__libc_init_array+0x24>
 8008370:	4d0b      	ldr	r5, [pc, #44]	@ (80083a0 <__libc_init_array+0x40>)
 8008372:	4c0c      	ldr	r4, [pc, #48]	@ (80083a4 <__libc_init_array+0x44>)
 8008374:	f000 fff0 	bl	8009358 <_init>
 8008378:	1b64      	subs	r4, r4, r5
 800837a:	10a4      	asrs	r4, r4, #2
 800837c:	2600      	movs	r6, #0
 800837e:	42a6      	cmp	r6, r4
 8008380:	d105      	bne.n	800838e <__libc_init_array+0x2e>
 8008382:	bd70      	pop	{r4, r5, r6, pc}
 8008384:	f855 3b04 	ldr.w	r3, [r5], #4
 8008388:	4798      	blx	r3
 800838a:	3601      	adds	r6, #1
 800838c:	e7ee      	b.n	800836c <__libc_init_array+0xc>
 800838e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008392:	4798      	blx	r3
 8008394:	3601      	adds	r6, #1
 8008396:	e7f2      	b.n	800837e <__libc_init_array+0x1e>
 8008398:	0800969c 	.word	0x0800969c
 800839c:	0800969c 	.word	0x0800969c
 80083a0:	0800969c 	.word	0x0800969c
 80083a4:	080096a0 	.word	0x080096a0

080083a8 <__retarget_lock_init_recursive>:
 80083a8:	4770      	bx	lr

080083aa <__retarget_lock_acquire_recursive>:
 80083aa:	4770      	bx	lr

080083ac <__retarget_lock_release_recursive>:
 80083ac:	4770      	bx	lr
	...

080083b0 <__assert_func>:
 80083b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083b2:	4614      	mov	r4, r2
 80083b4:	461a      	mov	r2, r3
 80083b6:	4b09      	ldr	r3, [pc, #36]	@ (80083dc <__assert_func+0x2c>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4605      	mov	r5, r0
 80083bc:	68d8      	ldr	r0, [r3, #12]
 80083be:	b954      	cbnz	r4, 80083d6 <__assert_func+0x26>
 80083c0:	4b07      	ldr	r3, [pc, #28]	@ (80083e0 <__assert_func+0x30>)
 80083c2:	461c      	mov	r4, r3
 80083c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083c8:	9100      	str	r1, [sp, #0]
 80083ca:	462b      	mov	r3, r5
 80083cc:	4905      	ldr	r1, [pc, #20]	@ (80083e4 <__assert_func+0x34>)
 80083ce:	f000 fc9f 	bl	8008d10 <fiprintf>
 80083d2:	f000 fce7 	bl	8008da4 <abort>
 80083d6:	4b04      	ldr	r3, [pc, #16]	@ (80083e8 <__assert_func+0x38>)
 80083d8:	e7f4      	b.n	80083c4 <__assert_func+0x14>
 80083da:	bf00      	nop
 80083dc:	200000dc 	.word	0x200000dc
 80083e0:	0800965d 	.word	0x0800965d
 80083e4:	0800962f 	.word	0x0800962f
 80083e8:	08009622 	.word	0x08009622

080083ec <_free_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4605      	mov	r5, r0
 80083f0:	2900      	cmp	r1, #0
 80083f2:	d041      	beq.n	8008478 <_free_r+0x8c>
 80083f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083f8:	1f0c      	subs	r4, r1, #4
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	bfb8      	it	lt
 80083fe:	18e4      	addlt	r4, r4, r3
 8008400:	f000 f8e8 	bl	80085d4 <__malloc_lock>
 8008404:	4a1d      	ldr	r2, [pc, #116]	@ (800847c <_free_r+0x90>)
 8008406:	6813      	ldr	r3, [r2, #0]
 8008408:	b933      	cbnz	r3, 8008418 <_free_r+0x2c>
 800840a:	6063      	str	r3, [r4, #4]
 800840c:	6014      	str	r4, [r2, #0]
 800840e:	4628      	mov	r0, r5
 8008410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008414:	f000 b8e4 	b.w	80085e0 <__malloc_unlock>
 8008418:	42a3      	cmp	r3, r4
 800841a:	d908      	bls.n	800842e <_free_r+0x42>
 800841c:	6820      	ldr	r0, [r4, #0]
 800841e:	1821      	adds	r1, r4, r0
 8008420:	428b      	cmp	r3, r1
 8008422:	bf01      	itttt	eq
 8008424:	6819      	ldreq	r1, [r3, #0]
 8008426:	685b      	ldreq	r3, [r3, #4]
 8008428:	1809      	addeq	r1, r1, r0
 800842a:	6021      	streq	r1, [r4, #0]
 800842c:	e7ed      	b.n	800840a <_free_r+0x1e>
 800842e:	461a      	mov	r2, r3
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	b10b      	cbz	r3, 8008438 <_free_r+0x4c>
 8008434:	42a3      	cmp	r3, r4
 8008436:	d9fa      	bls.n	800842e <_free_r+0x42>
 8008438:	6811      	ldr	r1, [r2, #0]
 800843a:	1850      	adds	r0, r2, r1
 800843c:	42a0      	cmp	r0, r4
 800843e:	d10b      	bne.n	8008458 <_free_r+0x6c>
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	4401      	add	r1, r0
 8008444:	1850      	adds	r0, r2, r1
 8008446:	4283      	cmp	r3, r0
 8008448:	6011      	str	r1, [r2, #0]
 800844a:	d1e0      	bne.n	800840e <_free_r+0x22>
 800844c:	6818      	ldr	r0, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	6053      	str	r3, [r2, #4]
 8008452:	4408      	add	r0, r1
 8008454:	6010      	str	r0, [r2, #0]
 8008456:	e7da      	b.n	800840e <_free_r+0x22>
 8008458:	d902      	bls.n	8008460 <_free_r+0x74>
 800845a:	230c      	movs	r3, #12
 800845c:	602b      	str	r3, [r5, #0]
 800845e:	e7d6      	b.n	800840e <_free_r+0x22>
 8008460:	6820      	ldr	r0, [r4, #0]
 8008462:	1821      	adds	r1, r4, r0
 8008464:	428b      	cmp	r3, r1
 8008466:	bf04      	itt	eq
 8008468:	6819      	ldreq	r1, [r3, #0]
 800846a:	685b      	ldreq	r3, [r3, #4]
 800846c:	6063      	str	r3, [r4, #4]
 800846e:	bf04      	itt	eq
 8008470:	1809      	addeq	r1, r1, r0
 8008472:	6021      	streq	r1, [r4, #0]
 8008474:	6054      	str	r4, [r2, #4]
 8008476:	e7ca      	b.n	800840e <_free_r+0x22>
 8008478:	bd38      	pop	{r3, r4, r5, pc}
 800847a:	bf00      	nop
 800847c:	2000063c 	.word	0x2000063c

08008480 <malloc>:
 8008480:	4b02      	ldr	r3, [pc, #8]	@ (800848c <malloc+0xc>)
 8008482:	4601      	mov	r1, r0
 8008484:	6818      	ldr	r0, [r3, #0]
 8008486:	f000 b825 	b.w	80084d4 <_malloc_r>
 800848a:	bf00      	nop
 800848c:	200000dc 	.word	0x200000dc

08008490 <sbrk_aligned>:
 8008490:	b570      	push	{r4, r5, r6, lr}
 8008492:	4e0f      	ldr	r6, [pc, #60]	@ (80084d0 <sbrk_aligned+0x40>)
 8008494:	460c      	mov	r4, r1
 8008496:	6831      	ldr	r1, [r6, #0]
 8008498:	4605      	mov	r5, r0
 800849a:	b911      	cbnz	r1, 80084a2 <sbrk_aligned+0x12>
 800849c:	f000 fc64 	bl	8008d68 <_sbrk_r>
 80084a0:	6030      	str	r0, [r6, #0]
 80084a2:	4621      	mov	r1, r4
 80084a4:	4628      	mov	r0, r5
 80084a6:	f000 fc5f 	bl	8008d68 <_sbrk_r>
 80084aa:	1c43      	adds	r3, r0, #1
 80084ac:	d103      	bne.n	80084b6 <sbrk_aligned+0x26>
 80084ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80084b2:	4620      	mov	r0, r4
 80084b4:	bd70      	pop	{r4, r5, r6, pc}
 80084b6:	1cc4      	adds	r4, r0, #3
 80084b8:	f024 0403 	bic.w	r4, r4, #3
 80084bc:	42a0      	cmp	r0, r4
 80084be:	d0f8      	beq.n	80084b2 <sbrk_aligned+0x22>
 80084c0:	1a21      	subs	r1, r4, r0
 80084c2:	4628      	mov	r0, r5
 80084c4:	f000 fc50 	bl	8008d68 <_sbrk_r>
 80084c8:	3001      	adds	r0, #1
 80084ca:	d1f2      	bne.n	80084b2 <sbrk_aligned+0x22>
 80084cc:	e7ef      	b.n	80084ae <sbrk_aligned+0x1e>
 80084ce:	bf00      	nop
 80084d0:	20000638 	.word	0x20000638

080084d4 <_malloc_r>:
 80084d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084d8:	1ccd      	adds	r5, r1, #3
 80084da:	f025 0503 	bic.w	r5, r5, #3
 80084de:	3508      	adds	r5, #8
 80084e0:	2d0c      	cmp	r5, #12
 80084e2:	bf38      	it	cc
 80084e4:	250c      	movcc	r5, #12
 80084e6:	2d00      	cmp	r5, #0
 80084e8:	4606      	mov	r6, r0
 80084ea:	db01      	blt.n	80084f0 <_malloc_r+0x1c>
 80084ec:	42a9      	cmp	r1, r5
 80084ee:	d904      	bls.n	80084fa <_malloc_r+0x26>
 80084f0:	230c      	movs	r3, #12
 80084f2:	6033      	str	r3, [r6, #0]
 80084f4:	2000      	movs	r0, #0
 80084f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085d0 <_malloc_r+0xfc>
 80084fe:	f000 f869 	bl	80085d4 <__malloc_lock>
 8008502:	f8d8 3000 	ldr.w	r3, [r8]
 8008506:	461c      	mov	r4, r3
 8008508:	bb44      	cbnz	r4, 800855c <_malloc_r+0x88>
 800850a:	4629      	mov	r1, r5
 800850c:	4630      	mov	r0, r6
 800850e:	f7ff ffbf 	bl	8008490 <sbrk_aligned>
 8008512:	1c43      	adds	r3, r0, #1
 8008514:	4604      	mov	r4, r0
 8008516:	d158      	bne.n	80085ca <_malloc_r+0xf6>
 8008518:	f8d8 4000 	ldr.w	r4, [r8]
 800851c:	4627      	mov	r7, r4
 800851e:	2f00      	cmp	r7, #0
 8008520:	d143      	bne.n	80085aa <_malloc_r+0xd6>
 8008522:	2c00      	cmp	r4, #0
 8008524:	d04b      	beq.n	80085be <_malloc_r+0xea>
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	4639      	mov	r1, r7
 800852a:	4630      	mov	r0, r6
 800852c:	eb04 0903 	add.w	r9, r4, r3
 8008530:	f000 fc1a 	bl	8008d68 <_sbrk_r>
 8008534:	4581      	cmp	r9, r0
 8008536:	d142      	bne.n	80085be <_malloc_r+0xea>
 8008538:	6821      	ldr	r1, [r4, #0]
 800853a:	1a6d      	subs	r5, r5, r1
 800853c:	4629      	mov	r1, r5
 800853e:	4630      	mov	r0, r6
 8008540:	f7ff ffa6 	bl	8008490 <sbrk_aligned>
 8008544:	3001      	adds	r0, #1
 8008546:	d03a      	beq.n	80085be <_malloc_r+0xea>
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	442b      	add	r3, r5
 800854c:	6023      	str	r3, [r4, #0]
 800854e:	f8d8 3000 	ldr.w	r3, [r8]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	bb62      	cbnz	r2, 80085b0 <_malloc_r+0xdc>
 8008556:	f8c8 7000 	str.w	r7, [r8]
 800855a:	e00f      	b.n	800857c <_malloc_r+0xa8>
 800855c:	6822      	ldr	r2, [r4, #0]
 800855e:	1b52      	subs	r2, r2, r5
 8008560:	d420      	bmi.n	80085a4 <_malloc_r+0xd0>
 8008562:	2a0b      	cmp	r2, #11
 8008564:	d917      	bls.n	8008596 <_malloc_r+0xc2>
 8008566:	1961      	adds	r1, r4, r5
 8008568:	42a3      	cmp	r3, r4
 800856a:	6025      	str	r5, [r4, #0]
 800856c:	bf18      	it	ne
 800856e:	6059      	strne	r1, [r3, #4]
 8008570:	6863      	ldr	r3, [r4, #4]
 8008572:	bf08      	it	eq
 8008574:	f8c8 1000 	streq.w	r1, [r8]
 8008578:	5162      	str	r2, [r4, r5]
 800857a:	604b      	str	r3, [r1, #4]
 800857c:	4630      	mov	r0, r6
 800857e:	f000 f82f 	bl	80085e0 <__malloc_unlock>
 8008582:	f104 000b 	add.w	r0, r4, #11
 8008586:	1d23      	adds	r3, r4, #4
 8008588:	f020 0007 	bic.w	r0, r0, #7
 800858c:	1ac2      	subs	r2, r0, r3
 800858e:	bf1c      	itt	ne
 8008590:	1a1b      	subne	r3, r3, r0
 8008592:	50a3      	strne	r3, [r4, r2]
 8008594:	e7af      	b.n	80084f6 <_malloc_r+0x22>
 8008596:	6862      	ldr	r2, [r4, #4]
 8008598:	42a3      	cmp	r3, r4
 800859a:	bf0c      	ite	eq
 800859c:	f8c8 2000 	streq.w	r2, [r8]
 80085a0:	605a      	strne	r2, [r3, #4]
 80085a2:	e7eb      	b.n	800857c <_malloc_r+0xa8>
 80085a4:	4623      	mov	r3, r4
 80085a6:	6864      	ldr	r4, [r4, #4]
 80085a8:	e7ae      	b.n	8008508 <_malloc_r+0x34>
 80085aa:	463c      	mov	r4, r7
 80085ac:	687f      	ldr	r7, [r7, #4]
 80085ae:	e7b6      	b.n	800851e <_malloc_r+0x4a>
 80085b0:	461a      	mov	r2, r3
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	42a3      	cmp	r3, r4
 80085b6:	d1fb      	bne.n	80085b0 <_malloc_r+0xdc>
 80085b8:	2300      	movs	r3, #0
 80085ba:	6053      	str	r3, [r2, #4]
 80085bc:	e7de      	b.n	800857c <_malloc_r+0xa8>
 80085be:	230c      	movs	r3, #12
 80085c0:	6033      	str	r3, [r6, #0]
 80085c2:	4630      	mov	r0, r6
 80085c4:	f000 f80c 	bl	80085e0 <__malloc_unlock>
 80085c8:	e794      	b.n	80084f4 <_malloc_r+0x20>
 80085ca:	6005      	str	r5, [r0, #0]
 80085cc:	e7d6      	b.n	800857c <_malloc_r+0xa8>
 80085ce:	bf00      	nop
 80085d0:	2000063c 	.word	0x2000063c

080085d4 <__malloc_lock>:
 80085d4:	4801      	ldr	r0, [pc, #4]	@ (80085dc <__malloc_lock+0x8>)
 80085d6:	f7ff bee8 	b.w	80083aa <__retarget_lock_acquire_recursive>
 80085da:	bf00      	nop
 80085dc:	20000634 	.word	0x20000634

080085e0 <__malloc_unlock>:
 80085e0:	4801      	ldr	r0, [pc, #4]	@ (80085e8 <__malloc_unlock+0x8>)
 80085e2:	f7ff bee3 	b.w	80083ac <__retarget_lock_release_recursive>
 80085e6:	bf00      	nop
 80085e8:	20000634 	.word	0x20000634

080085ec <__ssputs_r>:
 80085ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f0:	688e      	ldr	r6, [r1, #8]
 80085f2:	461f      	mov	r7, r3
 80085f4:	42be      	cmp	r6, r7
 80085f6:	680b      	ldr	r3, [r1, #0]
 80085f8:	4682      	mov	sl, r0
 80085fa:	460c      	mov	r4, r1
 80085fc:	4690      	mov	r8, r2
 80085fe:	d82d      	bhi.n	800865c <__ssputs_r+0x70>
 8008600:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008604:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008608:	d026      	beq.n	8008658 <__ssputs_r+0x6c>
 800860a:	6965      	ldr	r5, [r4, #20]
 800860c:	6909      	ldr	r1, [r1, #16]
 800860e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008612:	eba3 0901 	sub.w	r9, r3, r1
 8008616:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800861a:	1c7b      	adds	r3, r7, #1
 800861c:	444b      	add	r3, r9
 800861e:	106d      	asrs	r5, r5, #1
 8008620:	429d      	cmp	r5, r3
 8008622:	bf38      	it	cc
 8008624:	461d      	movcc	r5, r3
 8008626:	0553      	lsls	r3, r2, #21
 8008628:	d527      	bpl.n	800867a <__ssputs_r+0x8e>
 800862a:	4629      	mov	r1, r5
 800862c:	f7ff ff52 	bl	80084d4 <_malloc_r>
 8008630:	4606      	mov	r6, r0
 8008632:	b360      	cbz	r0, 800868e <__ssputs_r+0xa2>
 8008634:	6921      	ldr	r1, [r4, #16]
 8008636:	464a      	mov	r2, r9
 8008638:	f000 fba6 	bl	8008d88 <memcpy>
 800863c:	89a3      	ldrh	r3, [r4, #12]
 800863e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008646:	81a3      	strh	r3, [r4, #12]
 8008648:	6126      	str	r6, [r4, #16]
 800864a:	6165      	str	r5, [r4, #20]
 800864c:	444e      	add	r6, r9
 800864e:	eba5 0509 	sub.w	r5, r5, r9
 8008652:	6026      	str	r6, [r4, #0]
 8008654:	60a5      	str	r5, [r4, #8]
 8008656:	463e      	mov	r6, r7
 8008658:	42be      	cmp	r6, r7
 800865a:	d900      	bls.n	800865e <__ssputs_r+0x72>
 800865c:	463e      	mov	r6, r7
 800865e:	6820      	ldr	r0, [r4, #0]
 8008660:	4632      	mov	r2, r6
 8008662:	4641      	mov	r1, r8
 8008664:	f000 fb66 	bl	8008d34 <memmove>
 8008668:	68a3      	ldr	r3, [r4, #8]
 800866a:	1b9b      	subs	r3, r3, r6
 800866c:	60a3      	str	r3, [r4, #8]
 800866e:	6823      	ldr	r3, [r4, #0]
 8008670:	4433      	add	r3, r6
 8008672:	6023      	str	r3, [r4, #0]
 8008674:	2000      	movs	r0, #0
 8008676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800867a:	462a      	mov	r2, r5
 800867c:	f000 fb99 	bl	8008db2 <_realloc_r>
 8008680:	4606      	mov	r6, r0
 8008682:	2800      	cmp	r0, #0
 8008684:	d1e0      	bne.n	8008648 <__ssputs_r+0x5c>
 8008686:	6921      	ldr	r1, [r4, #16]
 8008688:	4650      	mov	r0, sl
 800868a:	f7ff feaf 	bl	80083ec <_free_r>
 800868e:	230c      	movs	r3, #12
 8008690:	f8ca 3000 	str.w	r3, [sl]
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086a0:	e7e9      	b.n	8008676 <__ssputs_r+0x8a>
	...

080086a4 <_svfiprintf_r>:
 80086a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a8:	4698      	mov	r8, r3
 80086aa:	898b      	ldrh	r3, [r1, #12]
 80086ac:	061b      	lsls	r3, r3, #24
 80086ae:	b09d      	sub	sp, #116	@ 0x74
 80086b0:	4607      	mov	r7, r0
 80086b2:	460d      	mov	r5, r1
 80086b4:	4614      	mov	r4, r2
 80086b6:	d510      	bpl.n	80086da <_svfiprintf_r+0x36>
 80086b8:	690b      	ldr	r3, [r1, #16]
 80086ba:	b973      	cbnz	r3, 80086da <_svfiprintf_r+0x36>
 80086bc:	2140      	movs	r1, #64	@ 0x40
 80086be:	f7ff ff09 	bl	80084d4 <_malloc_r>
 80086c2:	6028      	str	r0, [r5, #0]
 80086c4:	6128      	str	r0, [r5, #16]
 80086c6:	b930      	cbnz	r0, 80086d6 <_svfiprintf_r+0x32>
 80086c8:	230c      	movs	r3, #12
 80086ca:	603b      	str	r3, [r7, #0]
 80086cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086d0:	b01d      	add	sp, #116	@ 0x74
 80086d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d6:	2340      	movs	r3, #64	@ 0x40
 80086d8:	616b      	str	r3, [r5, #20]
 80086da:	2300      	movs	r3, #0
 80086dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80086de:	2320      	movs	r3, #32
 80086e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80086e8:	2330      	movs	r3, #48	@ 0x30
 80086ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008888 <_svfiprintf_r+0x1e4>
 80086ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086f2:	f04f 0901 	mov.w	r9, #1
 80086f6:	4623      	mov	r3, r4
 80086f8:	469a      	mov	sl, r3
 80086fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086fe:	b10a      	cbz	r2, 8008704 <_svfiprintf_r+0x60>
 8008700:	2a25      	cmp	r2, #37	@ 0x25
 8008702:	d1f9      	bne.n	80086f8 <_svfiprintf_r+0x54>
 8008704:	ebba 0b04 	subs.w	fp, sl, r4
 8008708:	d00b      	beq.n	8008722 <_svfiprintf_r+0x7e>
 800870a:	465b      	mov	r3, fp
 800870c:	4622      	mov	r2, r4
 800870e:	4629      	mov	r1, r5
 8008710:	4638      	mov	r0, r7
 8008712:	f7ff ff6b 	bl	80085ec <__ssputs_r>
 8008716:	3001      	adds	r0, #1
 8008718:	f000 80a7 	beq.w	800886a <_svfiprintf_r+0x1c6>
 800871c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800871e:	445a      	add	r2, fp
 8008720:	9209      	str	r2, [sp, #36]	@ 0x24
 8008722:	f89a 3000 	ldrb.w	r3, [sl]
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 809f 	beq.w	800886a <_svfiprintf_r+0x1c6>
 800872c:	2300      	movs	r3, #0
 800872e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008736:	f10a 0a01 	add.w	sl, sl, #1
 800873a:	9304      	str	r3, [sp, #16]
 800873c:	9307      	str	r3, [sp, #28]
 800873e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008742:	931a      	str	r3, [sp, #104]	@ 0x68
 8008744:	4654      	mov	r4, sl
 8008746:	2205      	movs	r2, #5
 8008748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874c:	484e      	ldr	r0, [pc, #312]	@ (8008888 <_svfiprintf_r+0x1e4>)
 800874e:	f7f7 fd7f 	bl	8000250 <memchr>
 8008752:	9a04      	ldr	r2, [sp, #16]
 8008754:	b9d8      	cbnz	r0, 800878e <_svfiprintf_r+0xea>
 8008756:	06d0      	lsls	r0, r2, #27
 8008758:	bf44      	itt	mi
 800875a:	2320      	movmi	r3, #32
 800875c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008760:	0711      	lsls	r1, r2, #28
 8008762:	bf44      	itt	mi
 8008764:	232b      	movmi	r3, #43	@ 0x2b
 8008766:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800876a:	f89a 3000 	ldrb.w	r3, [sl]
 800876e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008770:	d015      	beq.n	800879e <_svfiprintf_r+0xfa>
 8008772:	9a07      	ldr	r2, [sp, #28]
 8008774:	4654      	mov	r4, sl
 8008776:	2000      	movs	r0, #0
 8008778:	f04f 0c0a 	mov.w	ip, #10
 800877c:	4621      	mov	r1, r4
 800877e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008782:	3b30      	subs	r3, #48	@ 0x30
 8008784:	2b09      	cmp	r3, #9
 8008786:	d94b      	bls.n	8008820 <_svfiprintf_r+0x17c>
 8008788:	b1b0      	cbz	r0, 80087b8 <_svfiprintf_r+0x114>
 800878a:	9207      	str	r2, [sp, #28]
 800878c:	e014      	b.n	80087b8 <_svfiprintf_r+0x114>
 800878e:	eba0 0308 	sub.w	r3, r0, r8
 8008792:	fa09 f303 	lsl.w	r3, r9, r3
 8008796:	4313      	orrs	r3, r2
 8008798:	9304      	str	r3, [sp, #16]
 800879a:	46a2      	mov	sl, r4
 800879c:	e7d2      	b.n	8008744 <_svfiprintf_r+0xa0>
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	1d19      	adds	r1, r3, #4
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	9103      	str	r1, [sp, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	bfbb      	ittet	lt
 80087aa:	425b      	neglt	r3, r3
 80087ac:	f042 0202 	orrlt.w	r2, r2, #2
 80087b0:	9307      	strge	r3, [sp, #28]
 80087b2:	9307      	strlt	r3, [sp, #28]
 80087b4:	bfb8      	it	lt
 80087b6:	9204      	strlt	r2, [sp, #16]
 80087b8:	7823      	ldrb	r3, [r4, #0]
 80087ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80087bc:	d10a      	bne.n	80087d4 <_svfiprintf_r+0x130>
 80087be:	7863      	ldrb	r3, [r4, #1]
 80087c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80087c2:	d132      	bne.n	800882a <_svfiprintf_r+0x186>
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	1d1a      	adds	r2, r3, #4
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	9203      	str	r2, [sp, #12]
 80087cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087d0:	3402      	adds	r4, #2
 80087d2:	9305      	str	r3, [sp, #20]
 80087d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008898 <_svfiprintf_r+0x1f4>
 80087d8:	7821      	ldrb	r1, [r4, #0]
 80087da:	2203      	movs	r2, #3
 80087dc:	4650      	mov	r0, sl
 80087de:	f7f7 fd37 	bl	8000250 <memchr>
 80087e2:	b138      	cbz	r0, 80087f4 <_svfiprintf_r+0x150>
 80087e4:	9b04      	ldr	r3, [sp, #16]
 80087e6:	eba0 000a 	sub.w	r0, r0, sl
 80087ea:	2240      	movs	r2, #64	@ 0x40
 80087ec:	4082      	lsls	r2, r0
 80087ee:	4313      	orrs	r3, r2
 80087f0:	3401      	adds	r4, #1
 80087f2:	9304      	str	r3, [sp, #16]
 80087f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f8:	4824      	ldr	r0, [pc, #144]	@ (800888c <_svfiprintf_r+0x1e8>)
 80087fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087fe:	2206      	movs	r2, #6
 8008800:	f7f7 fd26 	bl	8000250 <memchr>
 8008804:	2800      	cmp	r0, #0
 8008806:	d036      	beq.n	8008876 <_svfiprintf_r+0x1d2>
 8008808:	4b21      	ldr	r3, [pc, #132]	@ (8008890 <_svfiprintf_r+0x1ec>)
 800880a:	bb1b      	cbnz	r3, 8008854 <_svfiprintf_r+0x1b0>
 800880c:	9b03      	ldr	r3, [sp, #12]
 800880e:	3307      	adds	r3, #7
 8008810:	f023 0307 	bic.w	r3, r3, #7
 8008814:	3308      	adds	r3, #8
 8008816:	9303      	str	r3, [sp, #12]
 8008818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800881a:	4433      	add	r3, r6
 800881c:	9309      	str	r3, [sp, #36]	@ 0x24
 800881e:	e76a      	b.n	80086f6 <_svfiprintf_r+0x52>
 8008820:	fb0c 3202 	mla	r2, ip, r2, r3
 8008824:	460c      	mov	r4, r1
 8008826:	2001      	movs	r0, #1
 8008828:	e7a8      	b.n	800877c <_svfiprintf_r+0xd8>
 800882a:	2300      	movs	r3, #0
 800882c:	3401      	adds	r4, #1
 800882e:	9305      	str	r3, [sp, #20]
 8008830:	4619      	mov	r1, r3
 8008832:	f04f 0c0a 	mov.w	ip, #10
 8008836:	4620      	mov	r0, r4
 8008838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800883c:	3a30      	subs	r2, #48	@ 0x30
 800883e:	2a09      	cmp	r2, #9
 8008840:	d903      	bls.n	800884a <_svfiprintf_r+0x1a6>
 8008842:	2b00      	cmp	r3, #0
 8008844:	d0c6      	beq.n	80087d4 <_svfiprintf_r+0x130>
 8008846:	9105      	str	r1, [sp, #20]
 8008848:	e7c4      	b.n	80087d4 <_svfiprintf_r+0x130>
 800884a:	fb0c 2101 	mla	r1, ip, r1, r2
 800884e:	4604      	mov	r4, r0
 8008850:	2301      	movs	r3, #1
 8008852:	e7f0      	b.n	8008836 <_svfiprintf_r+0x192>
 8008854:	ab03      	add	r3, sp, #12
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	462a      	mov	r2, r5
 800885a:	4b0e      	ldr	r3, [pc, #56]	@ (8008894 <_svfiprintf_r+0x1f0>)
 800885c:	a904      	add	r1, sp, #16
 800885e:	4638      	mov	r0, r7
 8008860:	f3af 8000 	nop.w
 8008864:	1c42      	adds	r2, r0, #1
 8008866:	4606      	mov	r6, r0
 8008868:	d1d6      	bne.n	8008818 <_svfiprintf_r+0x174>
 800886a:	89ab      	ldrh	r3, [r5, #12]
 800886c:	065b      	lsls	r3, r3, #25
 800886e:	f53f af2d 	bmi.w	80086cc <_svfiprintf_r+0x28>
 8008872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008874:	e72c      	b.n	80086d0 <_svfiprintf_r+0x2c>
 8008876:	ab03      	add	r3, sp, #12
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	462a      	mov	r2, r5
 800887c:	4b05      	ldr	r3, [pc, #20]	@ (8008894 <_svfiprintf_r+0x1f0>)
 800887e:	a904      	add	r1, sp, #16
 8008880:	4638      	mov	r0, r7
 8008882:	f000 f879 	bl	8008978 <_printf_i>
 8008886:	e7ed      	b.n	8008864 <_svfiprintf_r+0x1c0>
 8008888:	0800965e 	.word	0x0800965e
 800888c:	08009668 	.word	0x08009668
 8008890:	00000000 	.word	0x00000000
 8008894:	080085ed 	.word	0x080085ed
 8008898:	08009664 	.word	0x08009664

0800889c <_printf_common>:
 800889c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088a0:	4616      	mov	r6, r2
 80088a2:	4698      	mov	r8, r3
 80088a4:	688a      	ldr	r2, [r1, #8]
 80088a6:	690b      	ldr	r3, [r1, #16]
 80088a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088ac:	4293      	cmp	r3, r2
 80088ae:	bfb8      	it	lt
 80088b0:	4613      	movlt	r3, r2
 80088b2:	6033      	str	r3, [r6, #0]
 80088b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088b8:	4607      	mov	r7, r0
 80088ba:	460c      	mov	r4, r1
 80088bc:	b10a      	cbz	r2, 80088c2 <_printf_common+0x26>
 80088be:	3301      	adds	r3, #1
 80088c0:	6033      	str	r3, [r6, #0]
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	0699      	lsls	r1, r3, #26
 80088c6:	bf42      	ittt	mi
 80088c8:	6833      	ldrmi	r3, [r6, #0]
 80088ca:	3302      	addmi	r3, #2
 80088cc:	6033      	strmi	r3, [r6, #0]
 80088ce:	6825      	ldr	r5, [r4, #0]
 80088d0:	f015 0506 	ands.w	r5, r5, #6
 80088d4:	d106      	bne.n	80088e4 <_printf_common+0x48>
 80088d6:	f104 0a19 	add.w	sl, r4, #25
 80088da:	68e3      	ldr	r3, [r4, #12]
 80088dc:	6832      	ldr	r2, [r6, #0]
 80088de:	1a9b      	subs	r3, r3, r2
 80088e0:	42ab      	cmp	r3, r5
 80088e2:	dc26      	bgt.n	8008932 <_printf_common+0x96>
 80088e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088e8:	6822      	ldr	r2, [r4, #0]
 80088ea:	3b00      	subs	r3, #0
 80088ec:	bf18      	it	ne
 80088ee:	2301      	movne	r3, #1
 80088f0:	0692      	lsls	r2, r2, #26
 80088f2:	d42b      	bmi.n	800894c <_printf_common+0xb0>
 80088f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80088f8:	4641      	mov	r1, r8
 80088fa:	4638      	mov	r0, r7
 80088fc:	47c8      	blx	r9
 80088fe:	3001      	adds	r0, #1
 8008900:	d01e      	beq.n	8008940 <_printf_common+0xa4>
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	6922      	ldr	r2, [r4, #16]
 8008906:	f003 0306 	and.w	r3, r3, #6
 800890a:	2b04      	cmp	r3, #4
 800890c:	bf02      	ittt	eq
 800890e:	68e5      	ldreq	r5, [r4, #12]
 8008910:	6833      	ldreq	r3, [r6, #0]
 8008912:	1aed      	subeq	r5, r5, r3
 8008914:	68a3      	ldr	r3, [r4, #8]
 8008916:	bf0c      	ite	eq
 8008918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800891c:	2500      	movne	r5, #0
 800891e:	4293      	cmp	r3, r2
 8008920:	bfc4      	itt	gt
 8008922:	1a9b      	subgt	r3, r3, r2
 8008924:	18ed      	addgt	r5, r5, r3
 8008926:	2600      	movs	r6, #0
 8008928:	341a      	adds	r4, #26
 800892a:	42b5      	cmp	r5, r6
 800892c:	d11a      	bne.n	8008964 <_printf_common+0xc8>
 800892e:	2000      	movs	r0, #0
 8008930:	e008      	b.n	8008944 <_printf_common+0xa8>
 8008932:	2301      	movs	r3, #1
 8008934:	4652      	mov	r2, sl
 8008936:	4641      	mov	r1, r8
 8008938:	4638      	mov	r0, r7
 800893a:	47c8      	blx	r9
 800893c:	3001      	adds	r0, #1
 800893e:	d103      	bne.n	8008948 <_printf_common+0xac>
 8008940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008948:	3501      	adds	r5, #1
 800894a:	e7c6      	b.n	80088da <_printf_common+0x3e>
 800894c:	18e1      	adds	r1, r4, r3
 800894e:	1c5a      	adds	r2, r3, #1
 8008950:	2030      	movs	r0, #48	@ 0x30
 8008952:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008956:	4422      	add	r2, r4
 8008958:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800895c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008960:	3302      	adds	r3, #2
 8008962:	e7c7      	b.n	80088f4 <_printf_common+0x58>
 8008964:	2301      	movs	r3, #1
 8008966:	4622      	mov	r2, r4
 8008968:	4641      	mov	r1, r8
 800896a:	4638      	mov	r0, r7
 800896c:	47c8      	blx	r9
 800896e:	3001      	adds	r0, #1
 8008970:	d0e6      	beq.n	8008940 <_printf_common+0xa4>
 8008972:	3601      	adds	r6, #1
 8008974:	e7d9      	b.n	800892a <_printf_common+0x8e>
	...

08008978 <_printf_i>:
 8008978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800897c:	7e0f      	ldrb	r7, [r1, #24]
 800897e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008980:	2f78      	cmp	r7, #120	@ 0x78
 8008982:	4691      	mov	r9, r2
 8008984:	4680      	mov	r8, r0
 8008986:	460c      	mov	r4, r1
 8008988:	469a      	mov	sl, r3
 800898a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800898e:	d807      	bhi.n	80089a0 <_printf_i+0x28>
 8008990:	2f62      	cmp	r7, #98	@ 0x62
 8008992:	d80a      	bhi.n	80089aa <_printf_i+0x32>
 8008994:	2f00      	cmp	r7, #0
 8008996:	f000 80d2 	beq.w	8008b3e <_printf_i+0x1c6>
 800899a:	2f58      	cmp	r7, #88	@ 0x58
 800899c:	f000 80b9 	beq.w	8008b12 <_printf_i+0x19a>
 80089a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089a8:	e03a      	b.n	8008a20 <_printf_i+0xa8>
 80089aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089ae:	2b15      	cmp	r3, #21
 80089b0:	d8f6      	bhi.n	80089a0 <_printf_i+0x28>
 80089b2:	a101      	add	r1, pc, #4	@ (adr r1, 80089b8 <_printf_i+0x40>)
 80089b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089b8:	08008a11 	.word	0x08008a11
 80089bc:	08008a25 	.word	0x08008a25
 80089c0:	080089a1 	.word	0x080089a1
 80089c4:	080089a1 	.word	0x080089a1
 80089c8:	080089a1 	.word	0x080089a1
 80089cc:	080089a1 	.word	0x080089a1
 80089d0:	08008a25 	.word	0x08008a25
 80089d4:	080089a1 	.word	0x080089a1
 80089d8:	080089a1 	.word	0x080089a1
 80089dc:	080089a1 	.word	0x080089a1
 80089e0:	080089a1 	.word	0x080089a1
 80089e4:	08008b25 	.word	0x08008b25
 80089e8:	08008a4f 	.word	0x08008a4f
 80089ec:	08008adf 	.word	0x08008adf
 80089f0:	080089a1 	.word	0x080089a1
 80089f4:	080089a1 	.word	0x080089a1
 80089f8:	08008b47 	.word	0x08008b47
 80089fc:	080089a1 	.word	0x080089a1
 8008a00:	08008a4f 	.word	0x08008a4f
 8008a04:	080089a1 	.word	0x080089a1
 8008a08:	080089a1 	.word	0x080089a1
 8008a0c:	08008ae7 	.word	0x08008ae7
 8008a10:	6833      	ldr	r3, [r6, #0]
 8008a12:	1d1a      	adds	r2, r3, #4
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6032      	str	r2, [r6, #0]
 8008a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a20:	2301      	movs	r3, #1
 8008a22:	e09d      	b.n	8008b60 <_printf_i+0x1e8>
 8008a24:	6833      	ldr	r3, [r6, #0]
 8008a26:	6820      	ldr	r0, [r4, #0]
 8008a28:	1d19      	adds	r1, r3, #4
 8008a2a:	6031      	str	r1, [r6, #0]
 8008a2c:	0606      	lsls	r6, r0, #24
 8008a2e:	d501      	bpl.n	8008a34 <_printf_i+0xbc>
 8008a30:	681d      	ldr	r5, [r3, #0]
 8008a32:	e003      	b.n	8008a3c <_printf_i+0xc4>
 8008a34:	0645      	lsls	r5, r0, #25
 8008a36:	d5fb      	bpl.n	8008a30 <_printf_i+0xb8>
 8008a38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a3c:	2d00      	cmp	r5, #0
 8008a3e:	da03      	bge.n	8008a48 <_printf_i+0xd0>
 8008a40:	232d      	movs	r3, #45	@ 0x2d
 8008a42:	426d      	negs	r5, r5
 8008a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a48:	4859      	ldr	r0, [pc, #356]	@ (8008bb0 <_printf_i+0x238>)
 8008a4a:	230a      	movs	r3, #10
 8008a4c:	e011      	b.n	8008a72 <_printf_i+0xfa>
 8008a4e:	6821      	ldr	r1, [r4, #0]
 8008a50:	6833      	ldr	r3, [r6, #0]
 8008a52:	0608      	lsls	r0, r1, #24
 8008a54:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a58:	d402      	bmi.n	8008a60 <_printf_i+0xe8>
 8008a5a:	0649      	lsls	r1, r1, #25
 8008a5c:	bf48      	it	mi
 8008a5e:	b2ad      	uxthmi	r5, r5
 8008a60:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a62:	4853      	ldr	r0, [pc, #332]	@ (8008bb0 <_printf_i+0x238>)
 8008a64:	6033      	str	r3, [r6, #0]
 8008a66:	bf14      	ite	ne
 8008a68:	230a      	movne	r3, #10
 8008a6a:	2308      	moveq	r3, #8
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a72:	6866      	ldr	r6, [r4, #4]
 8008a74:	60a6      	str	r6, [r4, #8]
 8008a76:	2e00      	cmp	r6, #0
 8008a78:	bfa2      	ittt	ge
 8008a7a:	6821      	ldrge	r1, [r4, #0]
 8008a7c:	f021 0104 	bicge.w	r1, r1, #4
 8008a80:	6021      	strge	r1, [r4, #0]
 8008a82:	b90d      	cbnz	r5, 8008a88 <_printf_i+0x110>
 8008a84:	2e00      	cmp	r6, #0
 8008a86:	d04b      	beq.n	8008b20 <_printf_i+0x1a8>
 8008a88:	4616      	mov	r6, r2
 8008a8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a8e:	fb03 5711 	mls	r7, r3, r1, r5
 8008a92:	5dc7      	ldrb	r7, [r0, r7]
 8008a94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a98:	462f      	mov	r7, r5
 8008a9a:	42bb      	cmp	r3, r7
 8008a9c:	460d      	mov	r5, r1
 8008a9e:	d9f4      	bls.n	8008a8a <_printf_i+0x112>
 8008aa0:	2b08      	cmp	r3, #8
 8008aa2:	d10b      	bne.n	8008abc <_printf_i+0x144>
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	07df      	lsls	r7, r3, #31
 8008aa8:	d508      	bpl.n	8008abc <_printf_i+0x144>
 8008aaa:	6923      	ldr	r3, [r4, #16]
 8008aac:	6861      	ldr	r1, [r4, #4]
 8008aae:	4299      	cmp	r1, r3
 8008ab0:	bfde      	ittt	le
 8008ab2:	2330      	movle	r3, #48	@ 0x30
 8008ab4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ab8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008abc:	1b92      	subs	r2, r2, r6
 8008abe:	6122      	str	r2, [r4, #16]
 8008ac0:	f8cd a000 	str.w	sl, [sp]
 8008ac4:	464b      	mov	r3, r9
 8008ac6:	aa03      	add	r2, sp, #12
 8008ac8:	4621      	mov	r1, r4
 8008aca:	4640      	mov	r0, r8
 8008acc:	f7ff fee6 	bl	800889c <_printf_common>
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d14a      	bne.n	8008b6a <_printf_i+0x1f2>
 8008ad4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ad8:	b004      	add	sp, #16
 8008ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	f043 0320 	orr.w	r3, r3, #32
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	4833      	ldr	r0, [pc, #204]	@ (8008bb4 <_printf_i+0x23c>)
 8008ae8:	2778      	movs	r7, #120	@ 0x78
 8008aea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	6831      	ldr	r1, [r6, #0]
 8008af2:	061f      	lsls	r7, r3, #24
 8008af4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008af8:	d402      	bmi.n	8008b00 <_printf_i+0x188>
 8008afa:	065f      	lsls	r7, r3, #25
 8008afc:	bf48      	it	mi
 8008afe:	b2ad      	uxthmi	r5, r5
 8008b00:	6031      	str	r1, [r6, #0]
 8008b02:	07d9      	lsls	r1, r3, #31
 8008b04:	bf44      	itt	mi
 8008b06:	f043 0320 	orrmi.w	r3, r3, #32
 8008b0a:	6023      	strmi	r3, [r4, #0]
 8008b0c:	b11d      	cbz	r5, 8008b16 <_printf_i+0x19e>
 8008b0e:	2310      	movs	r3, #16
 8008b10:	e7ac      	b.n	8008a6c <_printf_i+0xf4>
 8008b12:	4827      	ldr	r0, [pc, #156]	@ (8008bb0 <_printf_i+0x238>)
 8008b14:	e7e9      	b.n	8008aea <_printf_i+0x172>
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	f023 0320 	bic.w	r3, r3, #32
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	e7f6      	b.n	8008b0e <_printf_i+0x196>
 8008b20:	4616      	mov	r6, r2
 8008b22:	e7bd      	b.n	8008aa0 <_printf_i+0x128>
 8008b24:	6833      	ldr	r3, [r6, #0]
 8008b26:	6825      	ldr	r5, [r4, #0]
 8008b28:	6961      	ldr	r1, [r4, #20]
 8008b2a:	1d18      	adds	r0, r3, #4
 8008b2c:	6030      	str	r0, [r6, #0]
 8008b2e:	062e      	lsls	r6, r5, #24
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	d501      	bpl.n	8008b38 <_printf_i+0x1c0>
 8008b34:	6019      	str	r1, [r3, #0]
 8008b36:	e002      	b.n	8008b3e <_printf_i+0x1c6>
 8008b38:	0668      	lsls	r0, r5, #25
 8008b3a:	d5fb      	bpl.n	8008b34 <_printf_i+0x1bc>
 8008b3c:	8019      	strh	r1, [r3, #0]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	6123      	str	r3, [r4, #16]
 8008b42:	4616      	mov	r6, r2
 8008b44:	e7bc      	b.n	8008ac0 <_printf_i+0x148>
 8008b46:	6833      	ldr	r3, [r6, #0]
 8008b48:	1d1a      	adds	r2, r3, #4
 8008b4a:	6032      	str	r2, [r6, #0]
 8008b4c:	681e      	ldr	r6, [r3, #0]
 8008b4e:	6862      	ldr	r2, [r4, #4]
 8008b50:	2100      	movs	r1, #0
 8008b52:	4630      	mov	r0, r6
 8008b54:	f7f7 fb7c 	bl	8000250 <memchr>
 8008b58:	b108      	cbz	r0, 8008b5e <_printf_i+0x1e6>
 8008b5a:	1b80      	subs	r0, r0, r6
 8008b5c:	6060      	str	r0, [r4, #4]
 8008b5e:	6863      	ldr	r3, [r4, #4]
 8008b60:	6123      	str	r3, [r4, #16]
 8008b62:	2300      	movs	r3, #0
 8008b64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b68:	e7aa      	b.n	8008ac0 <_printf_i+0x148>
 8008b6a:	6923      	ldr	r3, [r4, #16]
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	4649      	mov	r1, r9
 8008b70:	4640      	mov	r0, r8
 8008b72:	47d0      	blx	sl
 8008b74:	3001      	adds	r0, #1
 8008b76:	d0ad      	beq.n	8008ad4 <_printf_i+0x15c>
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	079b      	lsls	r3, r3, #30
 8008b7c:	d413      	bmi.n	8008ba6 <_printf_i+0x22e>
 8008b7e:	68e0      	ldr	r0, [r4, #12]
 8008b80:	9b03      	ldr	r3, [sp, #12]
 8008b82:	4298      	cmp	r0, r3
 8008b84:	bfb8      	it	lt
 8008b86:	4618      	movlt	r0, r3
 8008b88:	e7a6      	b.n	8008ad8 <_printf_i+0x160>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4632      	mov	r2, r6
 8008b8e:	4649      	mov	r1, r9
 8008b90:	4640      	mov	r0, r8
 8008b92:	47d0      	blx	sl
 8008b94:	3001      	adds	r0, #1
 8008b96:	d09d      	beq.n	8008ad4 <_printf_i+0x15c>
 8008b98:	3501      	adds	r5, #1
 8008b9a:	68e3      	ldr	r3, [r4, #12]
 8008b9c:	9903      	ldr	r1, [sp, #12]
 8008b9e:	1a5b      	subs	r3, r3, r1
 8008ba0:	42ab      	cmp	r3, r5
 8008ba2:	dcf2      	bgt.n	8008b8a <_printf_i+0x212>
 8008ba4:	e7eb      	b.n	8008b7e <_printf_i+0x206>
 8008ba6:	2500      	movs	r5, #0
 8008ba8:	f104 0619 	add.w	r6, r4, #25
 8008bac:	e7f5      	b.n	8008b9a <_printf_i+0x222>
 8008bae:	bf00      	nop
 8008bb0:	0800966f 	.word	0x0800966f
 8008bb4:	08009680 	.word	0x08009680

08008bb8 <__sflush_r>:
 8008bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc0:	0716      	lsls	r6, r2, #28
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	460c      	mov	r4, r1
 8008bc6:	d454      	bmi.n	8008c72 <__sflush_r+0xba>
 8008bc8:	684b      	ldr	r3, [r1, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	dc02      	bgt.n	8008bd4 <__sflush_r+0x1c>
 8008bce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	dd48      	ble.n	8008c66 <__sflush_r+0xae>
 8008bd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bd6:	2e00      	cmp	r6, #0
 8008bd8:	d045      	beq.n	8008c66 <__sflush_r+0xae>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008be0:	682f      	ldr	r7, [r5, #0]
 8008be2:	6a21      	ldr	r1, [r4, #32]
 8008be4:	602b      	str	r3, [r5, #0]
 8008be6:	d030      	beq.n	8008c4a <__sflush_r+0x92>
 8008be8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	0759      	lsls	r1, r3, #29
 8008bee:	d505      	bpl.n	8008bfc <__sflush_r+0x44>
 8008bf0:	6863      	ldr	r3, [r4, #4]
 8008bf2:	1ad2      	subs	r2, r2, r3
 8008bf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008bf6:	b10b      	cbz	r3, 8008bfc <__sflush_r+0x44>
 8008bf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008bfa:	1ad2      	subs	r2, r2, r3
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c00:	6a21      	ldr	r1, [r4, #32]
 8008c02:	4628      	mov	r0, r5
 8008c04:	47b0      	blx	r6
 8008c06:	1c43      	adds	r3, r0, #1
 8008c08:	89a3      	ldrh	r3, [r4, #12]
 8008c0a:	d106      	bne.n	8008c1a <__sflush_r+0x62>
 8008c0c:	6829      	ldr	r1, [r5, #0]
 8008c0e:	291d      	cmp	r1, #29
 8008c10:	d82b      	bhi.n	8008c6a <__sflush_r+0xb2>
 8008c12:	4a2a      	ldr	r2, [pc, #168]	@ (8008cbc <__sflush_r+0x104>)
 8008c14:	410a      	asrs	r2, r1
 8008c16:	07d6      	lsls	r6, r2, #31
 8008c18:	d427      	bmi.n	8008c6a <__sflush_r+0xb2>
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	6062      	str	r2, [r4, #4]
 8008c1e:	04d9      	lsls	r1, r3, #19
 8008c20:	6922      	ldr	r2, [r4, #16]
 8008c22:	6022      	str	r2, [r4, #0]
 8008c24:	d504      	bpl.n	8008c30 <__sflush_r+0x78>
 8008c26:	1c42      	adds	r2, r0, #1
 8008c28:	d101      	bne.n	8008c2e <__sflush_r+0x76>
 8008c2a:	682b      	ldr	r3, [r5, #0]
 8008c2c:	b903      	cbnz	r3, 8008c30 <__sflush_r+0x78>
 8008c2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c32:	602f      	str	r7, [r5, #0]
 8008c34:	b1b9      	cbz	r1, 8008c66 <__sflush_r+0xae>
 8008c36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c3a:	4299      	cmp	r1, r3
 8008c3c:	d002      	beq.n	8008c44 <__sflush_r+0x8c>
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f7ff fbd4 	bl	80083ec <_free_r>
 8008c44:	2300      	movs	r3, #0
 8008c46:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c48:	e00d      	b.n	8008c66 <__sflush_r+0xae>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	47b0      	blx	r6
 8008c50:	4602      	mov	r2, r0
 8008c52:	1c50      	adds	r0, r2, #1
 8008c54:	d1c9      	bne.n	8008bea <__sflush_r+0x32>
 8008c56:	682b      	ldr	r3, [r5, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d0c6      	beq.n	8008bea <__sflush_r+0x32>
 8008c5c:	2b1d      	cmp	r3, #29
 8008c5e:	d001      	beq.n	8008c64 <__sflush_r+0xac>
 8008c60:	2b16      	cmp	r3, #22
 8008c62:	d11e      	bne.n	8008ca2 <__sflush_r+0xea>
 8008c64:	602f      	str	r7, [r5, #0]
 8008c66:	2000      	movs	r0, #0
 8008c68:	e022      	b.n	8008cb0 <__sflush_r+0xf8>
 8008c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c6e:	b21b      	sxth	r3, r3
 8008c70:	e01b      	b.n	8008caa <__sflush_r+0xf2>
 8008c72:	690f      	ldr	r7, [r1, #16]
 8008c74:	2f00      	cmp	r7, #0
 8008c76:	d0f6      	beq.n	8008c66 <__sflush_r+0xae>
 8008c78:	0793      	lsls	r3, r2, #30
 8008c7a:	680e      	ldr	r6, [r1, #0]
 8008c7c:	bf08      	it	eq
 8008c7e:	694b      	ldreq	r3, [r1, #20]
 8008c80:	600f      	str	r7, [r1, #0]
 8008c82:	bf18      	it	ne
 8008c84:	2300      	movne	r3, #0
 8008c86:	eba6 0807 	sub.w	r8, r6, r7
 8008c8a:	608b      	str	r3, [r1, #8]
 8008c8c:	f1b8 0f00 	cmp.w	r8, #0
 8008c90:	dde9      	ble.n	8008c66 <__sflush_r+0xae>
 8008c92:	6a21      	ldr	r1, [r4, #32]
 8008c94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008c96:	4643      	mov	r3, r8
 8008c98:	463a      	mov	r2, r7
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	47b0      	blx	r6
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	dc08      	bgt.n	8008cb4 <__sflush_r+0xfc>
 8008ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008caa:	81a3      	strh	r3, [r4, #12]
 8008cac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb4:	4407      	add	r7, r0
 8008cb6:	eba8 0800 	sub.w	r8, r8, r0
 8008cba:	e7e7      	b.n	8008c8c <__sflush_r+0xd4>
 8008cbc:	dfbffffe 	.word	0xdfbffffe

08008cc0 <_fflush_r>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	690b      	ldr	r3, [r1, #16]
 8008cc4:	4605      	mov	r5, r0
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	b913      	cbnz	r3, 8008cd0 <_fflush_r+0x10>
 8008cca:	2500      	movs	r5, #0
 8008ccc:	4628      	mov	r0, r5
 8008cce:	bd38      	pop	{r3, r4, r5, pc}
 8008cd0:	b118      	cbz	r0, 8008cda <_fflush_r+0x1a>
 8008cd2:	6a03      	ldr	r3, [r0, #32]
 8008cd4:	b90b      	cbnz	r3, 8008cda <_fflush_r+0x1a>
 8008cd6:	f7ff f9e5 	bl	80080a4 <__sinit>
 8008cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d0f3      	beq.n	8008cca <_fflush_r+0xa>
 8008ce2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ce4:	07d0      	lsls	r0, r2, #31
 8008ce6:	d404      	bmi.n	8008cf2 <_fflush_r+0x32>
 8008ce8:	0599      	lsls	r1, r3, #22
 8008cea:	d402      	bmi.n	8008cf2 <_fflush_r+0x32>
 8008cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cee:	f7ff fb5c 	bl	80083aa <__retarget_lock_acquire_recursive>
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	f7ff ff5f 	bl	8008bb8 <__sflush_r>
 8008cfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008cfc:	07da      	lsls	r2, r3, #31
 8008cfe:	4605      	mov	r5, r0
 8008d00:	d4e4      	bmi.n	8008ccc <_fflush_r+0xc>
 8008d02:	89a3      	ldrh	r3, [r4, #12]
 8008d04:	059b      	lsls	r3, r3, #22
 8008d06:	d4e1      	bmi.n	8008ccc <_fflush_r+0xc>
 8008d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d0a:	f7ff fb4f 	bl	80083ac <__retarget_lock_release_recursive>
 8008d0e:	e7dd      	b.n	8008ccc <_fflush_r+0xc>

08008d10 <fiprintf>:
 8008d10:	b40e      	push	{r1, r2, r3}
 8008d12:	b503      	push	{r0, r1, lr}
 8008d14:	4601      	mov	r1, r0
 8008d16:	ab03      	add	r3, sp, #12
 8008d18:	4805      	ldr	r0, [pc, #20]	@ (8008d30 <fiprintf+0x20>)
 8008d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d1e:	6800      	ldr	r0, [r0, #0]
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	f000 f89d 	bl	8008e60 <_vfiprintf_r>
 8008d26:	b002      	add	sp, #8
 8008d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d2c:	b003      	add	sp, #12
 8008d2e:	4770      	bx	lr
 8008d30:	200000dc 	.word	0x200000dc

08008d34 <memmove>:
 8008d34:	4288      	cmp	r0, r1
 8008d36:	b510      	push	{r4, lr}
 8008d38:	eb01 0402 	add.w	r4, r1, r2
 8008d3c:	d902      	bls.n	8008d44 <memmove+0x10>
 8008d3e:	4284      	cmp	r4, r0
 8008d40:	4623      	mov	r3, r4
 8008d42:	d807      	bhi.n	8008d54 <memmove+0x20>
 8008d44:	1e43      	subs	r3, r0, #1
 8008d46:	42a1      	cmp	r1, r4
 8008d48:	d008      	beq.n	8008d5c <memmove+0x28>
 8008d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d52:	e7f8      	b.n	8008d46 <memmove+0x12>
 8008d54:	4402      	add	r2, r0
 8008d56:	4601      	mov	r1, r0
 8008d58:	428a      	cmp	r2, r1
 8008d5a:	d100      	bne.n	8008d5e <memmove+0x2a>
 8008d5c:	bd10      	pop	{r4, pc}
 8008d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d66:	e7f7      	b.n	8008d58 <memmove+0x24>

08008d68 <_sbrk_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d06      	ldr	r5, [pc, #24]	@ (8008d84 <_sbrk_r+0x1c>)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4604      	mov	r4, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	602b      	str	r3, [r5, #0]
 8008d74:	f7f8 f8a0 	bl	8000eb8 <_sbrk>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_sbrk_r+0x1a>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_sbrk_r+0x1a>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	20000630 	.word	0x20000630

08008d88 <memcpy>:
 8008d88:	440a      	add	r2, r1
 8008d8a:	4291      	cmp	r1, r2
 8008d8c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008d90:	d100      	bne.n	8008d94 <memcpy+0xc>
 8008d92:	4770      	bx	lr
 8008d94:	b510      	push	{r4, lr}
 8008d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d9e:	4291      	cmp	r1, r2
 8008da0:	d1f9      	bne.n	8008d96 <memcpy+0xe>
 8008da2:	bd10      	pop	{r4, pc}

08008da4 <abort>:
 8008da4:	b508      	push	{r3, lr}
 8008da6:	2006      	movs	r0, #6
 8008da8:	f000 fa2e 	bl	8009208 <raise>
 8008dac:	2001      	movs	r0, #1
 8008dae:	f7f8 f80b 	bl	8000dc8 <_exit>

08008db2 <_realloc_r>:
 8008db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db6:	4680      	mov	r8, r0
 8008db8:	4615      	mov	r5, r2
 8008dba:	460c      	mov	r4, r1
 8008dbc:	b921      	cbnz	r1, 8008dc8 <_realloc_r+0x16>
 8008dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	f7ff bb86 	b.w	80084d4 <_malloc_r>
 8008dc8:	b92a      	cbnz	r2, 8008dd6 <_realloc_r+0x24>
 8008dca:	f7ff fb0f 	bl	80083ec <_free_r>
 8008dce:	2400      	movs	r4, #0
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dd6:	f000 fa33 	bl	8009240 <_malloc_usable_size_r>
 8008dda:	4285      	cmp	r5, r0
 8008ddc:	4606      	mov	r6, r0
 8008dde:	d802      	bhi.n	8008de6 <_realloc_r+0x34>
 8008de0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008de4:	d8f4      	bhi.n	8008dd0 <_realloc_r+0x1e>
 8008de6:	4629      	mov	r1, r5
 8008de8:	4640      	mov	r0, r8
 8008dea:	f7ff fb73 	bl	80084d4 <_malloc_r>
 8008dee:	4607      	mov	r7, r0
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d0ec      	beq.n	8008dce <_realloc_r+0x1c>
 8008df4:	42b5      	cmp	r5, r6
 8008df6:	462a      	mov	r2, r5
 8008df8:	4621      	mov	r1, r4
 8008dfa:	bf28      	it	cs
 8008dfc:	4632      	movcs	r2, r6
 8008dfe:	f7ff ffc3 	bl	8008d88 <memcpy>
 8008e02:	4621      	mov	r1, r4
 8008e04:	4640      	mov	r0, r8
 8008e06:	f7ff faf1 	bl	80083ec <_free_r>
 8008e0a:	463c      	mov	r4, r7
 8008e0c:	e7e0      	b.n	8008dd0 <_realloc_r+0x1e>

08008e0e <__sfputc_r>:
 8008e0e:	6893      	ldr	r3, [r2, #8]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	b410      	push	{r4}
 8008e16:	6093      	str	r3, [r2, #8]
 8008e18:	da08      	bge.n	8008e2c <__sfputc_r+0x1e>
 8008e1a:	6994      	ldr	r4, [r2, #24]
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	db01      	blt.n	8008e24 <__sfputc_r+0x16>
 8008e20:	290a      	cmp	r1, #10
 8008e22:	d103      	bne.n	8008e2c <__sfputc_r+0x1e>
 8008e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e28:	f000 b932 	b.w	8009090 <__swbuf_r>
 8008e2c:	6813      	ldr	r3, [r2, #0]
 8008e2e:	1c58      	adds	r0, r3, #1
 8008e30:	6010      	str	r0, [r2, #0]
 8008e32:	7019      	strb	r1, [r3, #0]
 8008e34:	4608      	mov	r0, r1
 8008e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <__sfputs_r>:
 8008e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3e:	4606      	mov	r6, r0
 8008e40:	460f      	mov	r7, r1
 8008e42:	4614      	mov	r4, r2
 8008e44:	18d5      	adds	r5, r2, r3
 8008e46:	42ac      	cmp	r4, r5
 8008e48:	d101      	bne.n	8008e4e <__sfputs_r+0x12>
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	e007      	b.n	8008e5e <__sfputs_r+0x22>
 8008e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e52:	463a      	mov	r2, r7
 8008e54:	4630      	mov	r0, r6
 8008e56:	f7ff ffda 	bl	8008e0e <__sfputc_r>
 8008e5a:	1c43      	adds	r3, r0, #1
 8008e5c:	d1f3      	bne.n	8008e46 <__sfputs_r+0xa>
 8008e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e60 <_vfiprintf_r>:
 8008e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	460d      	mov	r5, r1
 8008e66:	b09d      	sub	sp, #116	@ 0x74
 8008e68:	4614      	mov	r4, r2
 8008e6a:	4698      	mov	r8, r3
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	b118      	cbz	r0, 8008e78 <_vfiprintf_r+0x18>
 8008e70:	6a03      	ldr	r3, [r0, #32]
 8008e72:	b90b      	cbnz	r3, 8008e78 <_vfiprintf_r+0x18>
 8008e74:	f7ff f916 	bl	80080a4 <__sinit>
 8008e78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e7a:	07d9      	lsls	r1, r3, #31
 8008e7c:	d405      	bmi.n	8008e8a <_vfiprintf_r+0x2a>
 8008e7e:	89ab      	ldrh	r3, [r5, #12]
 8008e80:	059a      	lsls	r2, r3, #22
 8008e82:	d402      	bmi.n	8008e8a <_vfiprintf_r+0x2a>
 8008e84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e86:	f7ff fa90 	bl	80083aa <__retarget_lock_acquire_recursive>
 8008e8a:	89ab      	ldrh	r3, [r5, #12]
 8008e8c:	071b      	lsls	r3, r3, #28
 8008e8e:	d501      	bpl.n	8008e94 <_vfiprintf_r+0x34>
 8008e90:	692b      	ldr	r3, [r5, #16]
 8008e92:	b99b      	cbnz	r3, 8008ebc <_vfiprintf_r+0x5c>
 8008e94:	4629      	mov	r1, r5
 8008e96:	4630      	mov	r0, r6
 8008e98:	f000 f938 	bl	800910c <__swsetup_r>
 8008e9c:	b170      	cbz	r0, 8008ebc <_vfiprintf_r+0x5c>
 8008e9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ea0:	07dc      	lsls	r4, r3, #31
 8008ea2:	d504      	bpl.n	8008eae <_vfiprintf_r+0x4e>
 8008ea4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ea8:	b01d      	add	sp, #116	@ 0x74
 8008eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eae:	89ab      	ldrh	r3, [r5, #12]
 8008eb0:	0598      	lsls	r0, r3, #22
 8008eb2:	d4f7      	bmi.n	8008ea4 <_vfiprintf_r+0x44>
 8008eb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eb6:	f7ff fa79 	bl	80083ac <__retarget_lock_release_recursive>
 8008eba:	e7f3      	b.n	8008ea4 <_vfiprintf_r+0x44>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ec0:	2320      	movs	r3, #32
 8008ec2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eca:	2330      	movs	r3, #48	@ 0x30
 8008ecc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800907c <_vfiprintf_r+0x21c>
 8008ed0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ed4:	f04f 0901 	mov.w	r9, #1
 8008ed8:	4623      	mov	r3, r4
 8008eda:	469a      	mov	sl, r3
 8008edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ee0:	b10a      	cbz	r2, 8008ee6 <_vfiprintf_r+0x86>
 8008ee2:	2a25      	cmp	r2, #37	@ 0x25
 8008ee4:	d1f9      	bne.n	8008eda <_vfiprintf_r+0x7a>
 8008ee6:	ebba 0b04 	subs.w	fp, sl, r4
 8008eea:	d00b      	beq.n	8008f04 <_vfiprintf_r+0xa4>
 8008eec:	465b      	mov	r3, fp
 8008eee:	4622      	mov	r2, r4
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f7ff ffa2 	bl	8008e3c <__sfputs_r>
 8008ef8:	3001      	adds	r0, #1
 8008efa:	f000 80a7 	beq.w	800904c <_vfiprintf_r+0x1ec>
 8008efe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f00:	445a      	add	r2, fp
 8008f02:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f04:	f89a 3000 	ldrb.w	r3, [sl]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f000 809f 	beq.w	800904c <_vfiprintf_r+0x1ec>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f18:	f10a 0a01 	add.w	sl, sl, #1
 8008f1c:	9304      	str	r3, [sp, #16]
 8008f1e:	9307      	str	r3, [sp, #28]
 8008f20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f24:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f26:	4654      	mov	r4, sl
 8008f28:	2205      	movs	r2, #5
 8008f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f2e:	4853      	ldr	r0, [pc, #332]	@ (800907c <_vfiprintf_r+0x21c>)
 8008f30:	f7f7 f98e 	bl	8000250 <memchr>
 8008f34:	9a04      	ldr	r2, [sp, #16]
 8008f36:	b9d8      	cbnz	r0, 8008f70 <_vfiprintf_r+0x110>
 8008f38:	06d1      	lsls	r1, r2, #27
 8008f3a:	bf44      	itt	mi
 8008f3c:	2320      	movmi	r3, #32
 8008f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f42:	0713      	lsls	r3, r2, #28
 8008f44:	bf44      	itt	mi
 8008f46:	232b      	movmi	r3, #43	@ 0x2b
 8008f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f50:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f52:	d015      	beq.n	8008f80 <_vfiprintf_r+0x120>
 8008f54:	9a07      	ldr	r2, [sp, #28]
 8008f56:	4654      	mov	r4, sl
 8008f58:	2000      	movs	r0, #0
 8008f5a:	f04f 0c0a 	mov.w	ip, #10
 8008f5e:	4621      	mov	r1, r4
 8008f60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f64:	3b30      	subs	r3, #48	@ 0x30
 8008f66:	2b09      	cmp	r3, #9
 8008f68:	d94b      	bls.n	8009002 <_vfiprintf_r+0x1a2>
 8008f6a:	b1b0      	cbz	r0, 8008f9a <_vfiprintf_r+0x13a>
 8008f6c:	9207      	str	r2, [sp, #28]
 8008f6e:	e014      	b.n	8008f9a <_vfiprintf_r+0x13a>
 8008f70:	eba0 0308 	sub.w	r3, r0, r8
 8008f74:	fa09 f303 	lsl.w	r3, r9, r3
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	9304      	str	r3, [sp, #16]
 8008f7c:	46a2      	mov	sl, r4
 8008f7e:	e7d2      	b.n	8008f26 <_vfiprintf_r+0xc6>
 8008f80:	9b03      	ldr	r3, [sp, #12]
 8008f82:	1d19      	adds	r1, r3, #4
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	9103      	str	r1, [sp, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	bfbb      	ittet	lt
 8008f8c:	425b      	neglt	r3, r3
 8008f8e:	f042 0202 	orrlt.w	r2, r2, #2
 8008f92:	9307      	strge	r3, [sp, #28]
 8008f94:	9307      	strlt	r3, [sp, #28]
 8008f96:	bfb8      	it	lt
 8008f98:	9204      	strlt	r2, [sp, #16]
 8008f9a:	7823      	ldrb	r3, [r4, #0]
 8008f9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f9e:	d10a      	bne.n	8008fb6 <_vfiprintf_r+0x156>
 8008fa0:	7863      	ldrb	r3, [r4, #1]
 8008fa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fa4:	d132      	bne.n	800900c <_vfiprintf_r+0x1ac>
 8008fa6:	9b03      	ldr	r3, [sp, #12]
 8008fa8:	1d1a      	adds	r2, r3, #4
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	9203      	str	r2, [sp, #12]
 8008fae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fb2:	3402      	adds	r4, #2
 8008fb4:	9305      	str	r3, [sp, #20]
 8008fb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800908c <_vfiprintf_r+0x22c>
 8008fba:	7821      	ldrb	r1, [r4, #0]
 8008fbc:	2203      	movs	r2, #3
 8008fbe:	4650      	mov	r0, sl
 8008fc0:	f7f7 f946 	bl	8000250 <memchr>
 8008fc4:	b138      	cbz	r0, 8008fd6 <_vfiprintf_r+0x176>
 8008fc6:	9b04      	ldr	r3, [sp, #16]
 8008fc8:	eba0 000a 	sub.w	r0, r0, sl
 8008fcc:	2240      	movs	r2, #64	@ 0x40
 8008fce:	4082      	lsls	r2, r0
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	3401      	adds	r4, #1
 8008fd4:	9304      	str	r3, [sp, #16]
 8008fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fda:	4829      	ldr	r0, [pc, #164]	@ (8009080 <_vfiprintf_r+0x220>)
 8008fdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fe0:	2206      	movs	r2, #6
 8008fe2:	f7f7 f935 	bl	8000250 <memchr>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d03f      	beq.n	800906a <_vfiprintf_r+0x20a>
 8008fea:	4b26      	ldr	r3, [pc, #152]	@ (8009084 <_vfiprintf_r+0x224>)
 8008fec:	bb1b      	cbnz	r3, 8009036 <_vfiprintf_r+0x1d6>
 8008fee:	9b03      	ldr	r3, [sp, #12]
 8008ff0:	3307      	adds	r3, #7
 8008ff2:	f023 0307 	bic.w	r3, r3, #7
 8008ff6:	3308      	adds	r3, #8
 8008ff8:	9303      	str	r3, [sp, #12]
 8008ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ffc:	443b      	add	r3, r7
 8008ffe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009000:	e76a      	b.n	8008ed8 <_vfiprintf_r+0x78>
 8009002:	fb0c 3202 	mla	r2, ip, r2, r3
 8009006:	460c      	mov	r4, r1
 8009008:	2001      	movs	r0, #1
 800900a:	e7a8      	b.n	8008f5e <_vfiprintf_r+0xfe>
 800900c:	2300      	movs	r3, #0
 800900e:	3401      	adds	r4, #1
 8009010:	9305      	str	r3, [sp, #20]
 8009012:	4619      	mov	r1, r3
 8009014:	f04f 0c0a 	mov.w	ip, #10
 8009018:	4620      	mov	r0, r4
 800901a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800901e:	3a30      	subs	r2, #48	@ 0x30
 8009020:	2a09      	cmp	r2, #9
 8009022:	d903      	bls.n	800902c <_vfiprintf_r+0x1cc>
 8009024:	2b00      	cmp	r3, #0
 8009026:	d0c6      	beq.n	8008fb6 <_vfiprintf_r+0x156>
 8009028:	9105      	str	r1, [sp, #20]
 800902a:	e7c4      	b.n	8008fb6 <_vfiprintf_r+0x156>
 800902c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009030:	4604      	mov	r4, r0
 8009032:	2301      	movs	r3, #1
 8009034:	e7f0      	b.n	8009018 <_vfiprintf_r+0x1b8>
 8009036:	ab03      	add	r3, sp, #12
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	462a      	mov	r2, r5
 800903c:	4b12      	ldr	r3, [pc, #72]	@ (8009088 <_vfiprintf_r+0x228>)
 800903e:	a904      	add	r1, sp, #16
 8009040:	4630      	mov	r0, r6
 8009042:	f3af 8000 	nop.w
 8009046:	4607      	mov	r7, r0
 8009048:	1c78      	adds	r0, r7, #1
 800904a:	d1d6      	bne.n	8008ffa <_vfiprintf_r+0x19a>
 800904c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800904e:	07d9      	lsls	r1, r3, #31
 8009050:	d405      	bmi.n	800905e <_vfiprintf_r+0x1fe>
 8009052:	89ab      	ldrh	r3, [r5, #12]
 8009054:	059a      	lsls	r2, r3, #22
 8009056:	d402      	bmi.n	800905e <_vfiprintf_r+0x1fe>
 8009058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800905a:	f7ff f9a7 	bl	80083ac <__retarget_lock_release_recursive>
 800905e:	89ab      	ldrh	r3, [r5, #12]
 8009060:	065b      	lsls	r3, r3, #25
 8009062:	f53f af1f 	bmi.w	8008ea4 <_vfiprintf_r+0x44>
 8009066:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009068:	e71e      	b.n	8008ea8 <_vfiprintf_r+0x48>
 800906a:	ab03      	add	r3, sp, #12
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	462a      	mov	r2, r5
 8009070:	4b05      	ldr	r3, [pc, #20]	@ (8009088 <_vfiprintf_r+0x228>)
 8009072:	a904      	add	r1, sp, #16
 8009074:	4630      	mov	r0, r6
 8009076:	f7ff fc7f 	bl	8008978 <_printf_i>
 800907a:	e7e4      	b.n	8009046 <_vfiprintf_r+0x1e6>
 800907c:	0800965e 	.word	0x0800965e
 8009080:	08009668 	.word	0x08009668
 8009084:	00000000 	.word	0x00000000
 8009088:	08008e3d 	.word	0x08008e3d
 800908c:	08009664 	.word	0x08009664

08009090 <__swbuf_r>:
 8009090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009092:	460e      	mov	r6, r1
 8009094:	4614      	mov	r4, r2
 8009096:	4605      	mov	r5, r0
 8009098:	b118      	cbz	r0, 80090a2 <__swbuf_r+0x12>
 800909a:	6a03      	ldr	r3, [r0, #32]
 800909c:	b90b      	cbnz	r3, 80090a2 <__swbuf_r+0x12>
 800909e:	f7ff f801 	bl	80080a4 <__sinit>
 80090a2:	69a3      	ldr	r3, [r4, #24]
 80090a4:	60a3      	str	r3, [r4, #8]
 80090a6:	89a3      	ldrh	r3, [r4, #12]
 80090a8:	071a      	lsls	r2, r3, #28
 80090aa:	d501      	bpl.n	80090b0 <__swbuf_r+0x20>
 80090ac:	6923      	ldr	r3, [r4, #16]
 80090ae:	b943      	cbnz	r3, 80090c2 <__swbuf_r+0x32>
 80090b0:	4621      	mov	r1, r4
 80090b2:	4628      	mov	r0, r5
 80090b4:	f000 f82a 	bl	800910c <__swsetup_r>
 80090b8:	b118      	cbz	r0, 80090c2 <__swbuf_r+0x32>
 80090ba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80090be:	4638      	mov	r0, r7
 80090c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	6922      	ldr	r2, [r4, #16]
 80090c6:	1a98      	subs	r0, r3, r2
 80090c8:	6963      	ldr	r3, [r4, #20]
 80090ca:	b2f6      	uxtb	r6, r6
 80090cc:	4283      	cmp	r3, r0
 80090ce:	4637      	mov	r7, r6
 80090d0:	dc05      	bgt.n	80090de <__swbuf_r+0x4e>
 80090d2:	4621      	mov	r1, r4
 80090d4:	4628      	mov	r0, r5
 80090d6:	f7ff fdf3 	bl	8008cc0 <_fflush_r>
 80090da:	2800      	cmp	r0, #0
 80090dc:	d1ed      	bne.n	80090ba <__swbuf_r+0x2a>
 80090de:	68a3      	ldr	r3, [r4, #8]
 80090e0:	3b01      	subs	r3, #1
 80090e2:	60a3      	str	r3, [r4, #8]
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	1c5a      	adds	r2, r3, #1
 80090e8:	6022      	str	r2, [r4, #0]
 80090ea:	701e      	strb	r6, [r3, #0]
 80090ec:	6962      	ldr	r2, [r4, #20]
 80090ee:	1c43      	adds	r3, r0, #1
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d004      	beq.n	80090fe <__swbuf_r+0x6e>
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	07db      	lsls	r3, r3, #31
 80090f8:	d5e1      	bpl.n	80090be <__swbuf_r+0x2e>
 80090fa:	2e0a      	cmp	r6, #10
 80090fc:	d1df      	bne.n	80090be <__swbuf_r+0x2e>
 80090fe:	4621      	mov	r1, r4
 8009100:	4628      	mov	r0, r5
 8009102:	f7ff fddd 	bl	8008cc0 <_fflush_r>
 8009106:	2800      	cmp	r0, #0
 8009108:	d0d9      	beq.n	80090be <__swbuf_r+0x2e>
 800910a:	e7d6      	b.n	80090ba <__swbuf_r+0x2a>

0800910c <__swsetup_r>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	4b29      	ldr	r3, [pc, #164]	@ (80091b4 <__swsetup_r+0xa8>)
 8009110:	4605      	mov	r5, r0
 8009112:	6818      	ldr	r0, [r3, #0]
 8009114:	460c      	mov	r4, r1
 8009116:	b118      	cbz	r0, 8009120 <__swsetup_r+0x14>
 8009118:	6a03      	ldr	r3, [r0, #32]
 800911a:	b90b      	cbnz	r3, 8009120 <__swsetup_r+0x14>
 800911c:	f7fe ffc2 	bl	80080a4 <__sinit>
 8009120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009124:	0719      	lsls	r1, r3, #28
 8009126:	d422      	bmi.n	800916e <__swsetup_r+0x62>
 8009128:	06da      	lsls	r2, r3, #27
 800912a:	d407      	bmi.n	800913c <__swsetup_r+0x30>
 800912c:	2209      	movs	r2, #9
 800912e:	602a      	str	r2, [r5, #0]
 8009130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009134:	81a3      	strh	r3, [r4, #12]
 8009136:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800913a:	e033      	b.n	80091a4 <__swsetup_r+0x98>
 800913c:	0758      	lsls	r0, r3, #29
 800913e:	d512      	bpl.n	8009166 <__swsetup_r+0x5a>
 8009140:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009142:	b141      	cbz	r1, 8009156 <__swsetup_r+0x4a>
 8009144:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009148:	4299      	cmp	r1, r3
 800914a:	d002      	beq.n	8009152 <__swsetup_r+0x46>
 800914c:	4628      	mov	r0, r5
 800914e:	f7ff f94d 	bl	80083ec <_free_r>
 8009152:	2300      	movs	r3, #0
 8009154:	6363      	str	r3, [r4, #52]	@ 0x34
 8009156:	89a3      	ldrh	r3, [r4, #12]
 8009158:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800915c:	81a3      	strh	r3, [r4, #12]
 800915e:	2300      	movs	r3, #0
 8009160:	6063      	str	r3, [r4, #4]
 8009162:	6923      	ldr	r3, [r4, #16]
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	f043 0308 	orr.w	r3, r3, #8
 800916c:	81a3      	strh	r3, [r4, #12]
 800916e:	6923      	ldr	r3, [r4, #16]
 8009170:	b94b      	cbnz	r3, 8009186 <__swsetup_r+0x7a>
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800917c:	d003      	beq.n	8009186 <__swsetup_r+0x7a>
 800917e:	4621      	mov	r1, r4
 8009180:	4628      	mov	r0, r5
 8009182:	f000 f88b 	bl	800929c <__smakebuf_r>
 8009186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918a:	f013 0201 	ands.w	r2, r3, #1
 800918e:	d00a      	beq.n	80091a6 <__swsetup_r+0x9a>
 8009190:	2200      	movs	r2, #0
 8009192:	60a2      	str	r2, [r4, #8]
 8009194:	6962      	ldr	r2, [r4, #20]
 8009196:	4252      	negs	r2, r2
 8009198:	61a2      	str	r2, [r4, #24]
 800919a:	6922      	ldr	r2, [r4, #16]
 800919c:	b942      	cbnz	r2, 80091b0 <__swsetup_r+0xa4>
 800919e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091a2:	d1c5      	bne.n	8009130 <__swsetup_r+0x24>
 80091a4:	bd38      	pop	{r3, r4, r5, pc}
 80091a6:	0799      	lsls	r1, r3, #30
 80091a8:	bf58      	it	pl
 80091aa:	6962      	ldrpl	r2, [r4, #20]
 80091ac:	60a2      	str	r2, [r4, #8]
 80091ae:	e7f4      	b.n	800919a <__swsetup_r+0x8e>
 80091b0:	2000      	movs	r0, #0
 80091b2:	e7f7      	b.n	80091a4 <__swsetup_r+0x98>
 80091b4:	200000dc 	.word	0x200000dc

080091b8 <_raise_r>:
 80091b8:	291f      	cmp	r1, #31
 80091ba:	b538      	push	{r3, r4, r5, lr}
 80091bc:	4605      	mov	r5, r0
 80091be:	460c      	mov	r4, r1
 80091c0:	d904      	bls.n	80091cc <_raise_r+0x14>
 80091c2:	2316      	movs	r3, #22
 80091c4:	6003      	str	r3, [r0, #0]
 80091c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091ca:	bd38      	pop	{r3, r4, r5, pc}
 80091cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80091ce:	b112      	cbz	r2, 80091d6 <_raise_r+0x1e>
 80091d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091d4:	b94b      	cbnz	r3, 80091ea <_raise_r+0x32>
 80091d6:	4628      	mov	r0, r5
 80091d8:	f000 f830 	bl	800923c <_getpid_r>
 80091dc:	4622      	mov	r2, r4
 80091de:	4601      	mov	r1, r0
 80091e0:	4628      	mov	r0, r5
 80091e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091e6:	f000 b817 	b.w	8009218 <_kill_r>
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d00a      	beq.n	8009204 <_raise_r+0x4c>
 80091ee:	1c59      	adds	r1, r3, #1
 80091f0:	d103      	bne.n	80091fa <_raise_r+0x42>
 80091f2:	2316      	movs	r3, #22
 80091f4:	6003      	str	r3, [r0, #0]
 80091f6:	2001      	movs	r0, #1
 80091f8:	e7e7      	b.n	80091ca <_raise_r+0x12>
 80091fa:	2100      	movs	r1, #0
 80091fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009200:	4620      	mov	r0, r4
 8009202:	4798      	blx	r3
 8009204:	2000      	movs	r0, #0
 8009206:	e7e0      	b.n	80091ca <_raise_r+0x12>

08009208 <raise>:
 8009208:	4b02      	ldr	r3, [pc, #8]	@ (8009214 <raise+0xc>)
 800920a:	4601      	mov	r1, r0
 800920c:	6818      	ldr	r0, [r3, #0]
 800920e:	f7ff bfd3 	b.w	80091b8 <_raise_r>
 8009212:	bf00      	nop
 8009214:	200000dc 	.word	0x200000dc

08009218 <_kill_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	4d07      	ldr	r5, [pc, #28]	@ (8009238 <_kill_r+0x20>)
 800921c:	2300      	movs	r3, #0
 800921e:	4604      	mov	r4, r0
 8009220:	4608      	mov	r0, r1
 8009222:	4611      	mov	r1, r2
 8009224:	602b      	str	r3, [r5, #0]
 8009226:	f7f7 fdbf 	bl	8000da8 <_kill>
 800922a:	1c43      	adds	r3, r0, #1
 800922c:	d102      	bne.n	8009234 <_kill_r+0x1c>
 800922e:	682b      	ldr	r3, [r5, #0]
 8009230:	b103      	cbz	r3, 8009234 <_kill_r+0x1c>
 8009232:	6023      	str	r3, [r4, #0]
 8009234:	bd38      	pop	{r3, r4, r5, pc}
 8009236:	bf00      	nop
 8009238:	20000630 	.word	0x20000630

0800923c <_getpid_r>:
 800923c:	f7f7 bdac 	b.w	8000d98 <_getpid>

08009240 <_malloc_usable_size_r>:
 8009240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009244:	1f18      	subs	r0, r3, #4
 8009246:	2b00      	cmp	r3, #0
 8009248:	bfbc      	itt	lt
 800924a:	580b      	ldrlt	r3, [r1, r0]
 800924c:	18c0      	addlt	r0, r0, r3
 800924e:	4770      	bx	lr

08009250 <__swhatbuf_r>:
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	460c      	mov	r4, r1
 8009254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009258:	2900      	cmp	r1, #0
 800925a:	b096      	sub	sp, #88	@ 0x58
 800925c:	4615      	mov	r5, r2
 800925e:	461e      	mov	r6, r3
 8009260:	da0d      	bge.n	800927e <__swhatbuf_r+0x2e>
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009268:	f04f 0100 	mov.w	r1, #0
 800926c:	bf14      	ite	ne
 800926e:	2340      	movne	r3, #64	@ 0x40
 8009270:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009274:	2000      	movs	r0, #0
 8009276:	6031      	str	r1, [r6, #0]
 8009278:	602b      	str	r3, [r5, #0]
 800927a:	b016      	add	sp, #88	@ 0x58
 800927c:	bd70      	pop	{r4, r5, r6, pc}
 800927e:	466a      	mov	r2, sp
 8009280:	f000 f848 	bl	8009314 <_fstat_r>
 8009284:	2800      	cmp	r0, #0
 8009286:	dbec      	blt.n	8009262 <__swhatbuf_r+0x12>
 8009288:	9901      	ldr	r1, [sp, #4]
 800928a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800928e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009292:	4259      	negs	r1, r3
 8009294:	4159      	adcs	r1, r3
 8009296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800929a:	e7eb      	b.n	8009274 <__swhatbuf_r+0x24>

0800929c <__smakebuf_r>:
 800929c:	898b      	ldrh	r3, [r1, #12]
 800929e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092a0:	079d      	lsls	r5, r3, #30
 80092a2:	4606      	mov	r6, r0
 80092a4:	460c      	mov	r4, r1
 80092a6:	d507      	bpl.n	80092b8 <__smakebuf_r+0x1c>
 80092a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	6123      	str	r3, [r4, #16]
 80092b0:	2301      	movs	r3, #1
 80092b2:	6163      	str	r3, [r4, #20]
 80092b4:	b003      	add	sp, #12
 80092b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092b8:	ab01      	add	r3, sp, #4
 80092ba:	466a      	mov	r2, sp
 80092bc:	f7ff ffc8 	bl	8009250 <__swhatbuf_r>
 80092c0:	9f00      	ldr	r7, [sp, #0]
 80092c2:	4605      	mov	r5, r0
 80092c4:	4639      	mov	r1, r7
 80092c6:	4630      	mov	r0, r6
 80092c8:	f7ff f904 	bl	80084d4 <_malloc_r>
 80092cc:	b948      	cbnz	r0, 80092e2 <__smakebuf_r+0x46>
 80092ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d2:	059a      	lsls	r2, r3, #22
 80092d4:	d4ee      	bmi.n	80092b4 <__smakebuf_r+0x18>
 80092d6:	f023 0303 	bic.w	r3, r3, #3
 80092da:	f043 0302 	orr.w	r3, r3, #2
 80092de:	81a3      	strh	r3, [r4, #12]
 80092e0:	e7e2      	b.n	80092a8 <__smakebuf_r+0xc>
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	6020      	str	r0, [r4, #0]
 80092e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ea:	81a3      	strh	r3, [r4, #12]
 80092ec:	9b01      	ldr	r3, [sp, #4]
 80092ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092f2:	b15b      	cbz	r3, 800930c <__smakebuf_r+0x70>
 80092f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092f8:	4630      	mov	r0, r6
 80092fa:	f000 f81d 	bl	8009338 <_isatty_r>
 80092fe:	b128      	cbz	r0, 800930c <__smakebuf_r+0x70>
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	f023 0303 	bic.w	r3, r3, #3
 8009306:	f043 0301 	orr.w	r3, r3, #1
 800930a:	81a3      	strh	r3, [r4, #12]
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	431d      	orrs	r5, r3
 8009310:	81a5      	strh	r5, [r4, #12]
 8009312:	e7cf      	b.n	80092b4 <__smakebuf_r+0x18>

08009314 <_fstat_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4d07      	ldr	r5, [pc, #28]	@ (8009334 <_fstat_r+0x20>)
 8009318:	2300      	movs	r3, #0
 800931a:	4604      	mov	r4, r0
 800931c:	4608      	mov	r0, r1
 800931e:	4611      	mov	r1, r2
 8009320:	602b      	str	r3, [r5, #0]
 8009322:	f7f7 fda1 	bl	8000e68 <_fstat>
 8009326:	1c43      	adds	r3, r0, #1
 8009328:	d102      	bne.n	8009330 <_fstat_r+0x1c>
 800932a:	682b      	ldr	r3, [r5, #0]
 800932c:	b103      	cbz	r3, 8009330 <_fstat_r+0x1c>
 800932e:	6023      	str	r3, [r4, #0]
 8009330:	bd38      	pop	{r3, r4, r5, pc}
 8009332:	bf00      	nop
 8009334:	20000630 	.word	0x20000630

08009338 <_isatty_r>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	4d06      	ldr	r5, [pc, #24]	@ (8009354 <_isatty_r+0x1c>)
 800933c:	2300      	movs	r3, #0
 800933e:	4604      	mov	r4, r0
 8009340:	4608      	mov	r0, r1
 8009342:	602b      	str	r3, [r5, #0]
 8009344:	f7f7 fda0 	bl	8000e88 <_isatty>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d102      	bne.n	8009352 <_isatty_r+0x1a>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	b103      	cbz	r3, 8009352 <_isatty_r+0x1a>
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	20000630 	.word	0x20000630

08009358 <_init>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	bf00      	nop
 800935c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935e:	bc08      	pop	{r3}
 8009360:	469e      	mov	lr, r3
 8009362:	4770      	bx	lr

08009364 <_fini>:
 8009364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009366:	bf00      	nop
 8009368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936a:	bc08      	pop	{r3}
 800936c:	469e      	mov	lr, r3
 800936e:	4770      	bx	lr
